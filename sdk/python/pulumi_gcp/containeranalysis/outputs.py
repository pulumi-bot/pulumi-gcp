# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.output_type
class NoteAttestationAuthority(dict):
    hint: 'outputs.NoteAttestationAuthorityHint' = pulumi.output_property("hint")
    """
    This submessage provides human-readable hints about the purpose of
    the AttestationAuthority. Because the name of a Note acts as its
    resource reference, it is important to disambiguate the canonical
    name of the Note (which might be a UUID for security purposes)
    from "readable" names more suitable for debug output. Note that
    these hints should NOT be used to look up AttestationAuthorities
    in security sensitive contexts, such as when looking up
    Attestations to verify.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NoteAttestationAuthorityHint(dict):
    human_readable_name: str = pulumi.output_property("humanReadableName")
    """
    The human readable name of this Attestation Authority, for
    example "qa".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NoteRelatedUrl(dict):
    label: Optional[str] = pulumi.output_property("label")
    """
    Label to describe usage of the URL
    """
    url: str = pulumi.output_property("url")
    """
    Specific URL associated with the resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OccurenceAttestation(dict):
    serialized_payload: str = pulumi.output_property("serializedPayload")
    """
    The serialized payload that is verified by one or
    more signatures. A base64-encoded string.
    """
    signatures: List['outputs.OccurenceAttestationSignature'] = pulumi.output_property("signatures")
    """
    One or more signatures over serializedPayload.
    Verifier implementations should consider this attestation
    message verified if at least one signature verifies
    serializedPayload. See Signature in common.proto for more
    details on signature structure and verification.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OccurenceAttestationSignature(dict):
    public_key_id: str = pulumi.output_property("publicKeyId")
    """
    The identifier for the public key that verifies this
    signature. MUST be an RFC3986 conformant
    URI. * When possible, the key id should be an
    immutable reference, such as a cryptographic digest.
    Examples of valid values:
    * OpenPGP V4 public key fingerprint. See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr
    for more details on this scheme.
    * `openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA`
    * RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization):
    * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU"
    """
    signature: Optional[str] = pulumi.output_property("signature")
    """
    The content of the signature, an opaque bytestring.
    The payload that this signature verifies MUST be
    unambiguously provided with the Signature during
    verification. A wrapper message might provide the
    payload explicitly. Alternatively, a message might
    have a canonical serialization that can always be
    unambiguously computed to derive the payload.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


