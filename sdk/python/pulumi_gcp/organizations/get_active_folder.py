# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GetActiveFolderResult',
    'AwaitableGetActiveFolderResult',
    'get_active_folder',
]


@pulumi.output_type
class _GetActiveFolderResult:
    display_name: str = pulumi.property("displayName")
    id: str = pulumi.property("id")
    name: str = pulumi.property("name")
    parent: str = pulumi.property("parent")


class GetActiveFolderResult:
    """
    A collection of values returned by getActiveFolder.
    """
    def __init__(__self__, display_name=None, id=None, name=None, parent=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        __self__.display_name = display_name
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The resource name of the Folder. This uniquely identifies the folder.
        """
        if parent and not isinstance(parent, str):
            raise TypeError("Expected argument 'parent' to be a str")
        __self__.parent = parent


class AwaitableGetActiveFolderResult(GetActiveFolderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetActiveFolderResult(
            display_name=self.display_name,
            id=self.id,
            name=self.name,
            parent=self.parent)


def get_active_folder(display_name: Optional[str] = None,
                      parent: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetActiveFolderResult:
    """
    Get an active folder within GCP by `display_name` and `parent`.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    department1 = gcp.organizations.get_active_folder(display_name="Department 1",
        parent="organizations/1234567")
    ```


    :param str display_name: The folder's display name.
    :param str parent: The resource name of the parent Folder or Organization.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['parent'] = parent
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('gcp:organizations/getActiveFolder:getActiveFolder', __args__, opts=opts, typ=_GetActiveFolderResult).value

    return AwaitableGetActiveFolderResult(
        display_name=__ret__.display_name,
        id=__ret__.id,
        name=__ret__.name,
        parent=__ret__.parent)
