# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'QueueAppEngineRoutingOverrideArgs',
    'QueueRateLimitsArgs',
    'QueueRetryConfigArgs',
]

@pulumi.input_type
class QueueAppEngineRoutingOverrideArgs:
    host: Optional[pulumi.Input[str]] = pulumi.input_property("host")
    """
    -
    The host that the task is sent to.
    """
    instance: Optional[pulumi.Input[str]] = pulumi.input_property("instance")
    """
    App instance.
    By default, the task is sent to an instance which is available when the task is attempted.
    """
    service: Optional[pulumi.Input[str]] = pulumi.input_property("service")
    """
    App service.
    By default, the task is sent to the service which is the default service when the task is attempted.
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    App version.
    By default, the task is sent to the version which is the default version when the task is attempted.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, host: Optional[pulumi.Input[str]] = None, instance: Optional[pulumi.Input[str]] = None, service: Optional[pulumi.Input[str]] = None, version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] host: -
               The host that the task is sent to.
        :param pulumi.Input[str] instance: App instance.
               By default, the task is sent to an instance which is available when the task is attempted.
        :param pulumi.Input[str] service: App service.
               By default, the task is sent to the service which is the default service when the task is attempted.
        :param pulumi.Input[str] version: App version.
               By default, the task is sent to the version which is the default version when the task is attempted.
        """
        __self__.host = host
        __self__.instance = instance
        __self__.service = service
        __self__.version = version

@pulumi.input_type
class QueueRateLimitsArgs:
    max_burst_size: Optional[pulumi.Input[float]] = pulumi.input_property("maxBurstSize")
    """
    -
    The max burst size.
    Max burst size limits how fast tasks in queue are processed when many tasks are
    in the queue and the rate is high. This field allows the queue to have a high
    rate so processing starts shortly after a task is enqueued, but still limits
    resource usage when many tasks are enqueued in a short period of time.
    """
    max_concurrent_dispatches: Optional[pulumi.Input[float]] = pulumi.input_property("maxConcurrentDispatches")
    """
    The maximum number of concurrent tasks that Cloud Tasks allows to
    be dispatched for this queue. After this threshold has been
    reached, Cloud Tasks stops dispatching tasks until the number of
    concurrent requests decreases.
    """
    max_dispatches_per_second: Optional[pulumi.Input[float]] = pulumi.input_property("maxDispatchesPerSecond")
    """
    The maximum rate at which tasks are dispatched from this queue.
    If unspecified when the queue is created, Cloud Tasks will pick the default.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max_burst_size: Optional[pulumi.Input[float]] = None, max_concurrent_dispatches: Optional[pulumi.Input[float]] = None, max_dispatches_per_second: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] max_burst_size: -
               The max burst size.
               Max burst size limits how fast tasks in queue are processed when many tasks are
               in the queue and the rate is high. This field allows the queue to have a high
               rate so processing starts shortly after a task is enqueued, but still limits
               resource usage when many tasks are enqueued in a short period of time.
        :param pulumi.Input[float] max_concurrent_dispatches: The maximum number of concurrent tasks that Cloud Tasks allows to
               be dispatched for this queue. After this threshold has been
               reached, Cloud Tasks stops dispatching tasks until the number of
               concurrent requests decreases.
        :param pulumi.Input[float] max_dispatches_per_second: The maximum rate at which tasks are dispatched from this queue.
               If unspecified when the queue is created, Cloud Tasks will pick the default.
        """
        __self__.max_burst_size = max_burst_size
        __self__.max_concurrent_dispatches = max_concurrent_dispatches
        __self__.max_dispatches_per_second = max_dispatches_per_second

@pulumi.input_type
class QueueRetryConfigArgs:
    max_attempts: Optional[pulumi.Input[float]] = pulumi.input_property("maxAttempts")
    """
    Number of attempts per task.
    Cloud Tasks will attempt the task maxAttempts times (that is, if
    the first attempt fails, then there will be maxAttempts - 1
    retries). Must be >= -1.
    If unspecified when the queue is created, Cloud Tasks will pick
    the default.
    -1 indicates unlimited attempts.
    """
    max_backoff: Optional[pulumi.Input[str]] = pulumi.input_property("maxBackoff")
    """
    A task will be scheduled for retry between minBackoff and
    maxBackoff duration after it fails, if the queue's RetryConfig
    specifies that the task should be retried.
    """
    max_doublings: Optional[pulumi.Input[float]] = pulumi.input_property("maxDoublings")
    """
    The time between retries will double maxDoublings times.
    A task's retry interval starts at minBackoff, then doubles maxDoublings times,
    then increases linearly, and finally retries retries at intervals of maxBackoff
    up to maxAttempts times.
    """
    max_retry_duration: Optional[pulumi.Input[str]] = pulumi.input_property("maxRetryDuration")
    """
    If positive, maxRetryDuration specifies the time limit for
    retrying a failed task, measured from when the task was first
    attempted. Once maxRetryDuration time has passed and the task has
    been attempted maxAttempts times, no further attempts will be
    made and the task will be deleted.
    If zero, then the task age is unlimited.
    """
    min_backoff: Optional[pulumi.Input[str]] = pulumi.input_property("minBackoff")
    """
    A task will be scheduled for retry between minBackoff and
    maxBackoff duration after it fails, if the queue's RetryConfig
    specifies that the task should be retried.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max_attempts: Optional[pulumi.Input[float]] = None, max_backoff: Optional[pulumi.Input[str]] = None, max_doublings: Optional[pulumi.Input[float]] = None, max_retry_duration: Optional[pulumi.Input[str]] = None, min_backoff: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] max_attempts: Number of attempts per task.
               Cloud Tasks will attempt the task maxAttempts times (that is, if
               the first attempt fails, then there will be maxAttempts - 1
               retries). Must be >= -1.
               If unspecified when the queue is created, Cloud Tasks will pick
               the default.
               -1 indicates unlimited attempts.
        :param pulumi.Input[str] max_backoff: A task will be scheduled for retry between minBackoff and
               maxBackoff duration after it fails, if the queue's RetryConfig
               specifies that the task should be retried.
        :param pulumi.Input[float] max_doublings: The time between retries will double maxDoublings times.
               A task's retry interval starts at minBackoff, then doubles maxDoublings times,
               then increases linearly, and finally retries retries at intervals of maxBackoff
               up to maxAttempts times.
        :param pulumi.Input[str] max_retry_duration: If positive, maxRetryDuration specifies the time limit for
               retrying a failed task, measured from when the task was first
               attempted. Once maxRetryDuration time has passed and the task has
               been attempted maxAttempts times, no further attempts will be
               made and the task will be deleted.
               If zero, then the task age is unlimited.
        :param pulumi.Input[str] min_backoff: A task will be scheduled for retry between minBackoff and
               maxBackoff duration after it fails, if the queue's RetryConfig
               specifies that the task should be retried.
        """
        __self__.max_attempts = max_attempts
        __self__.max_backoff = max_backoff
        __self__.max_doublings = max_doublings
        __self__.max_retry_duration = max_retry_duration
        __self__.min_backoff = min_backoff

