# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.output_type
class QueueAppEngineRoutingOverride(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    -
    The host that the task is sent to.
    """
    instance: Optional[str] = pulumi.output_property("instance")
    """
    App instance.
    By default, the task is sent to an instance which is available when the task is attempted.
    """
    service: Optional[str] = pulumi.output_property("service")
    """
    App service.
    By default, the task is sent to the service which is the default service when the task is attempted.
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    App version.
    By default, the task is sent to the version which is the default version when the task is attempted.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class QueueRateLimits(dict):
    max_burst_size: Optional[float] = pulumi.output_property("maxBurstSize")
    """
    -
    The max burst size.
    Max burst size limits how fast tasks in queue are processed when many tasks are
    in the queue and the rate is high. This field allows the queue to have a high
    rate so processing starts shortly after a task is enqueued, but still limits
    resource usage when many tasks are enqueued in a short period of time.
    """
    max_concurrent_dispatches: Optional[float] = pulumi.output_property("maxConcurrentDispatches")
    """
    The maximum number of concurrent tasks that Cloud Tasks allows to
    be dispatched for this queue. After this threshold has been
    reached, Cloud Tasks stops dispatching tasks until the number of
    concurrent requests decreases.
    """
    max_dispatches_per_second: Optional[float] = pulumi.output_property("maxDispatchesPerSecond")
    """
    The maximum rate at which tasks are dispatched from this queue.
    If unspecified when the queue is created, Cloud Tasks will pick the default.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class QueueRetryConfig(dict):
    max_attempts: Optional[float] = pulumi.output_property("maxAttempts")
    """
    Number of attempts per task.
    Cloud Tasks will attempt the task maxAttempts times (that is, if
    the first attempt fails, then there will be maxAttempts - 1
    retries). Must be >= -1.
    If unspecified when the queue is created, Cloud Tasks will pick
    the default.
    -1 indicates unlimited attempts.
    """
    max_backoff: Optional[str] = pulumi.output_property("maxBackoff")
    """
    A task will be scheduled for retry between minBackoff and
    maxBackoff duration after it fails, if the queue's RetryConfig
    specifies that the task should be retried.
    """
    max_doublings: Optional[float] = pulumi.output_property("maxDoublings")
    """
    The time between retries will double maxDoublings times.
    A task's retry interval starts at minBackoff, then doubles maxDoublings times,
    then increases linearly, and finally retries retries at intervals of maxBackoff
    up to maxAttempts times.
    """
    max_retry_duration: Optional[str] = pulumi.output_property("maxRetryDuration")
    """
    If positive, maxRetryDuration specifies the time limit for
    retrying a failed task, measured from when the task was first
    attempted. Once maxRetryDuration time has passed and the task has
    been attempted maxAttempts times, no further attempts will be
    made and the task will be deleted.
    If zero, then the task age is unlimited.
    """
    min_backoff: Optional[str] = pulumi.output_property("minBackoff")
    """
    A task will be scheduled for retry between minBackoff and
    maxBackoff duration after it fails, if the queue's RetryConfig
    specifies that the task should be retried.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


