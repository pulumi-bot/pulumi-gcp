# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.output_type
class ClusterAddonsConfig(dict):
    cloudrun_config: Optional['outputs.ClusterAddonsConfigCloudrunConfig'] = pulumi.output_property("cloudrunConfig")
    """
    .
    The status of the CloudRun addon. It is disabled by default.
    Set `disabled = false` to enable.
    """
    config_connector_config: Optional['outputs.ClusterAddonsConfigConfigConnectorConfig'] = pulumi.output_property("configConnectorConfig")
    """
    .
    The status of the ConfigConnector addon. It is disabled by default; Set `enabled = true` to enable.
    """
    dns_cache_config: Optional['outputs.ClusterAddonsConfigDnsCacheConfig'] = pulumi.output_property("dnsCacheConfig")
    """
    .
    The status of the NodeLocal DNSCache addon. It is disabled by default.
    Set `enabled = true` to enable.
    """
    gce_persistent_disk_csi_driver_config: Optional['outputs.ClusterAddonsConfigGcePersistentDiskCsiDriverConfig'] = pulumi.output_property("gcePersistentDiskCsiDriverConfig")
    """
    .
    Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Defaults to disabled; set `enabled = true` to enable.
    """
    horizontal_pod_autoscaling: Optional['outputs.ClusterAddonsConfigHorizontalPodAutoscaling'] = pulumi.output_property("horizontalPodAutoscaling")
    """
    The status of the Horizontal Pod Autoscaling
    addon, which increases or decreases the number of replica pods a replication controller
    has based on the resource usage of the existing pods.
    It ensures that a Heapster pod is running in the cluster, which is also used by the Cloud Monitoring service.
    It is enabled by default;
    set `disabled = true` to disable.
    """
    http_load_balancing: Optional['outputs.ClusterAddonsConfigHttpLoadBalancing'] = pulumi.output_property("httpLoadBalancing")
    """
    The status of the HTTP (L7) load balancing
    controller addon, which makes it easy to set up HTTP load balancers for services in a
    cluster. It is enabled by default; set `disabled = true` to disable.
    """
    istio_config: Optional['outputs.ClusterAddonsConfigIstioConfig'] = pulumi.output_property("istioConfig")
    """
    .
    Structure is documented below.
    """
    kalm_config: Optional['outputs.ClusterAddonsConfigKalmConfig'] = pulumi.output_property("kalmConfig")
    """
    .
    Configuration for the KALM addon, which manages the lifecycle of k8s. It is disabled by default; Set `enabled = true` to enable.
    """
    network_policy_config: Optional['outputs.ClusterAddonsConfigNetworkPolicyConfig'] = pulumi.output_property("networkPolicyConfig")
    """
    Whether we should enable the network policy addon
    for the master.  This must be enabled in order to enable network policy for the nodes.
    To enable this, you must also define a `network_policy` block,
    otherwise nothing will happen.
    It can only be disabled if the nodes already do not have network policies enabled.
    Defaults to disabled; set `disabled = false` to enable.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigCloudrunConfig(dict):
    disabled: bool = pulumi.output_property("disabled")
    """
    The status of the Istio addon, which makes it easy to set up Istio for services in a
    cluster. It is disabled by default. Set `disabled = false` to enable.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigConfigConnectorConfig(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Enable the PodSecurityPolicy controller for this cluster.
    If enabled, pods must be valid under a PodSecurityPolicy to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigDnsCacheConfig(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Enable the PodSecurityPolicy controller for this cluster.
    If enabled, pods must be valid under a PodSecurityPolicy to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigGcePersistentDiskCsiDriverConfig(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Enable the PodSecurityPolicy controller for this cluster.
    If enabled, pods must be valid under a PodSecurityPolicy to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigHorizontalPodAutoscaling(dict):
    disabled: bool = pulumi.output_property("disabled")
    """
    The status of the Istio addon, which makes it easy to set up Istio for services in a
    cluster. It is disabled by default. Set `disabled = false` to enable.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigHttpLoadBalancing(dict):
    disabled: bool = pulumi.output_property("disabled")
    """
    The status of the Istio addon, which makes it easy to set up Istio for services in a
    cluster. It is disabled by default. Set `disabled = false` to enable.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigIstioConfig(dict):
    auth: Optional[str] = pulumi.output_property("auth")
    """
    The authentication type between services in Istio. Available options include `AUTH_MUTUAL_TLS`.
    """
    disabled: bool = pulumi.output_property("disabled")
    """
    The status of the Istio addon, which makes it easy to set up Istio for services in a
    cluster. It is disabled by default. Set `disabled = false` to enable.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigKalmConfig(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Enable the PodSecurityPolicy controller for this cluster.
    If enabled, pods must be valid under a PodSecurityPolicy to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigNetworkPolicyConfig(dict):
    disabled: bool = pulumi.output_property("disabled")
    """
    The status of the Istio addon, which makes it easy to set up Istio for services in a
    cluster. It is disabled by default. Set `disabled = false` to enable.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAuthenticatorGroupsConfig(dict):
    security_group: str = pulumi.output_property("securityGroup")
    """
    The name of the RBAC security group for use with Google security groups in Kubernetes RBAC. Group name must be in format `gke-security-groups@yourdomain.com`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClusterAutoscaling(dict):
    auto_provisioning_defaults: Optional['outputs.ClusterClusterAutoscalingAutoProvisioningDefaults'] = pulumi.output_property("autoProvisioningDefaults")
    """
    Contains defaults for a node pool created by NAP.
    Structure is documented below.
    """
    autoscaling_profile: Optional[str] = pulumi.output_property("autoscalingProfile")
    """
    ) Configuration
    options for the [Autoscaling profile](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler#autoscaling_profiles)
    feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability
    when deciding to remove nodes from a cluster. Can be `BALANCED` or `OPTIMIZE_UTILIZATION`. Defaults to `BALANCED`.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Enable the PodSecurityPolicy controller for this cluster.
    If enabled, pods must be valid under a PodSecurityPolicy to be created.
    """
    resource_limits: Optional[List['outputs.ClusterClusterAutoscalingResourceLimit']] = pulumi.output_property("resourceLimits")
    """
    Global constraints for machine resources in the
    cluster. Configuring the `cpu` and `memory` types is required if node
    auto-provisioning is enabled. These limits will apply to node pool autoscaling
    in addition to node auto-provisioning. Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClusterAutoscalingAutoProvisioningDefaults(dict):
    min_cpu_platform: Optional[str] = pulumi.output_property("minCpuPlatform")
    """
    Minimum CPU platform to be used by this instance.
    The instance may be scheduled on the specified or newer CPU platform. Applicable
    values are the friendly names of CPU platforms, such as `Intel Haswell`. See the
    [official documentation](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
    for more information.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The set of Google API scopes to be made available
    on all of the node VMs under the "default" service account. These can be
    either FQDNs, or scope aliases. The following scopes are necessary to ensure
    the correct functioning of the cluster:
    """
    service_account: Optional[str] = pulumi.output_property("serviceAccount")
    """
    The service account to be used by the Node VMs.
    If not specified, the "default" service account is used.
    In order to use the configured `oauth_scopes` for logging and monitoring, the service account being used needs the
    [roles/logging.logWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_logging_roles) and
    [roles/monitoring.metricWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_monitoring_roles) roles.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClusterAutoscalingResourceLimit(dict):
    maximum: Optional[float] = pulumi.output_property("maximum")
    """
    Maximum amount of the resource in the cluster.
    """
    minimum: Optional[float] = pulumi.output_property("minimum")
    """
    Minimum amount of the resource in the cluster.
    """
    resource_type: str = pulumi.output_property("resourceType")
    """
    The type of the resource. For example, `cpu` and
    `memory`.  See the [guide to using Node Auto-Provisioning](https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning)
    for a list of types.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClusterTelemetry(dict):
    type: str = pulumi.output_property("type")
    """
    The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDatabaseEncryption(dict):
    key_name: Optional[str] = pulumi.output_property("keyName")
    """
    the key to use to encrypt/decrypt secrets.  See the [DatabaseEncryption definition](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters#Cluster.DatabaseEncryption) for more information.
    """
    state: str = pulumi.output_property("state")
    """
    `ENCRYPTED` or `DECRYPTED`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIpAllocationPolicy(dict):
    cluster_ipv4_cidr_block: Optional[str] = pulumi.output_property("clusterIpv4CidrBlock")
    """
    The IP address range for the cluster pod IPs.
    Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14)
    to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
    from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to
    pick a specific range to use.
    """
    cluster_secondary_range_name: Optional[str] = pulumi.output_property("clusterSecondaryRangeName")
    """
    The name of the existing secondary
    range in the cluster's subnetwork to use for pod IP addresses. Alternatively,
    `cluster_ipv4_cidr_block` can be used to automatically create a GKE-managed one.
    """
    services_ipv4_cidr_block: Optional[str] = pulumi.output_property("servicesIpv4CidrBlock")
    """
    The IP address range of the services IPs in this cluster.
    Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14)
    to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
    from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to
    pick a specific range to use.
    """
    services_secondary_range_name: Optional[str] = pulumi.output_property("servicesSecondaryRangeName")
    """
    The name of the existing
    secondary range in the cluster's subnetwork to use for service `ClusterIP`s.
    Alternatively, `services_ipv4_cidr_block` can be used to automatically create a
    GKE-managed one.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMaintenancePolicy(dict):
    daily_maintenance_window: Optional['outputs.ClusterMaintenancePolicyDailyMaintenanceWindow'] = pulumi.output_property("dailyMaintenanceWindow")
    """
    Time window specified for daily maintenance operations.
    Specify `start_time` in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM”,
    where HH : \[00-23\] and MM : \[00-59\] GMT. For example:
    """
    recurring_window: Optional['outputs.ClusterMaintenancePolicyRecurringWindow'] = pulumi.output_property("recurringWindow")
    """
    Time window for
    recurring maintenance operations.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMaintenancePolicyDailyMaintenanceWindow(dict):
    duration: Optional[str] = pulumi.output_property("duration")
    start_time: str = pulumi.output_property("startTime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMaintenancePolicyRecurringWindow(dict):
    end_time: str = pulumi.output_property("endTime")
    recurrence: str = pulumi.output_property("recurrence")
    start_time: str = pulumi.output_property("startTime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterAuth(dict):
    client_certificate: Optional[str] = pulumi.output_property("clientCertificate")
    client_certificate_config: Optional['outputs.ClusterMasterAuthClientCertificateConfig'] = pulumi.output_property("clientCertificateConfig")
    """
    Whether client certificate authorization is enabled for this cluster.  For example:
    """
    client_key: Optional[str] = pulumi.output_property("clientKey")
    cluster_ca_certificate: Optional[str] = pulumi.output_property("clusterCaCertificate")
    password: Optional[str] = pulumi.output_property("password")
    """
    The password to use for HTTP basic authentication when accessing
    the Kubernetes master endpoint.
    """
    username: Optional[str] = pulumi.output_property("username")
    """
    The username to use for HTTP basic authentication when accessing
    the Kubernetes master endpoint. If not present basic auth will be disabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterAuthClientCertificateConfig(dict):
    issue_client_certificate: bool = pulumi.output_property("issueClientCertificate")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterAuthorizedNetworksConfig(dict):
    cidr_blocks: Optional[List['outputs.ClusterMasterAuthorizedNetworksConfigCidrBlock']] = pulumi.output_property("cidrBlocks")
    """
    External networks that can access the
    Kubernetes cluster master through HTTPS.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterAuthorizedNetworksConfigCidrBlock(dict):
    cidr_block: str = pulumi.output_property("cidrBlock")
    """
    External network that can access Kubernetes master through HTTPS.
    Must be specified in CIDR notation.
    """
    display_name: Optional[str] = pulumi.output_property("displayName")
    """
    Field for users to identify CIDR blocks.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNetworkPolicy(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Enable the PodSecurityPolicy controller for this cluster.
    If enabled, pods must be valid under a PodSecurityPolicy to be created.
    """
    provider: Optional[str] = pulumi.output_property("provider")
    """
    The selected network policy provider. Defaults to PROVIDER_UNSPECIFIED.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfig(dict):
    boot_disk_kms_key: Optional[str] = pulumi.output_property("bootDiskKmsKey")
    """
    The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    Size of the disk attached to each node, specified
    in GB. The smallest allowed disk size is 10GB. Defaults to 100GB.
    """
    disk_type: Optional[str] = pulumi.output_property("diskType")
    """
    Type of the disk attached to each node
    (e.g. 'pd-standard' or 'pd-ssd'). If unspecified, the default disk type is 'pd-standard'
    """
    guest_accelerators: Optional[List['outputs.ClusterNodeConfigGuestAccelerator']] = pulumi.output_property("guestAccelerators")
    """
    List of the type and count of accelerator cards attached to the instance.
    Structure documented below.
    """
    image_type: Optional[str] = pulumi.output_property("imageType")
    """
    The image type to use for this node. Note that changing the image type
    will delete and recreate all nodes in the node pool.
    """
    labels: Optional[Dict[str, str]] = pulumi.output_property("labels")
    """
    The Kubernetes labels (key/value pairs) to be applied to each node.
    """
    local_ssd_count: Optional[float] = pulumi.output_property("localSsdCount")
    """
    The amount of local SSD disks that will be
    attached to each cluster node. Defaults to 0.
    """
    machine_type: Optional[str] = pulumi.output_property("machineType")
    """
    The name of a Google Compute Engine machine type.
    Defaults to `n1-standard-1`. To create a custom machine type, value should be set as specified
    [here](https://cloud.google.com/compute/docs/reference/latest/instances#machineType).
    """
    metadata: Optional[Dict[str, str]] = pulumi.output_property("metadata")
    """
    The metadata key/value pairs assigned to instances in
    the cluster. From GKE `1.12` onwards, `disable-legacy-endpoints` is set to
    `true` by the API; if `metadata` is set but that default value is not
    included, the provider will attempt to unset the value. To avoid this, set the
    value in your config.
    """
    min_cpu_platform: Optional[str] = pulumi.output_property("minCpuPlatform")
    """
    Minimum CPU platform to be used by this instance.
    The instance may be scheduled on the specified or newer CPU platform. Applicable
    values are the friendly names of CPU platforms, such as `Intel Haswell`. See the
    [official documentation](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
    for more information.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The set of Google API scopes to be made available
    on all of the node VMs under the "default" service account. These can be
    either FQDNs, or scope aliases. The following scopes are necessary to ensure
    the correct functioning of the cluster:
    """
    preemptible: Optional[bool] = pulumi.output_property("preemptible")
    """
    A boolean that represents whether or not the underlying node VMs
    are preemptible. See the [official documentation](https://cloud.google.com/container-engine/docs/preemptible-vm)
    for more information. Defaults to false.
    """
    sandbox_config: Optional['outputs.ClusterNodeConfigSandboxConfig'] = pulumi.output_property("sandboxConfig")
    """
    [GKE Sandbox](https://cloud.google.com/kubernetes-engine/docs/how-to/sandbox-pods) configuration. When enabling this feature you must specify `image_type = "COS_CONTAINERD"` and `node_version = "1.12.7-gke.17"` or later to use it.
    Structure is documented below.
    """
    service_account: Optional[str] = pulumi.output_property("serviceAccount")
    """
    The service account to be used by the Node VMs.
    If not specified, the "default" service account is used.
    In order to use the configured `oauth_scopes` for logging and monitoring, the service account being used needs the
    [roles/logging.logWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_logging_roles) and
    [roles/monitoring.metricWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_monitoring_roles) roles.
    """
    shielded_instance_config: Optional['outputs.ClusterNodeConfigShieldedInstanceConfig'] = pulumi.output_property("shieldedInstanceConfig")
    """
    Shielded Instance options. Structure is documented below.
    """
    tags: Optional[List[str]] = pulumi.output_property("tags")
    """
    The list of instance tags applied to all nodes. Tags are used to identify
    valid sources or targets for network firewalls.
    """
    taints: Optional[List['outputs.ClusterNodeConfigTaint']] = pulumi.output_property("taints")
    """
    A list of [Kubernetes taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
    to apply to nodes. GKE's API can only set this field on cluster creation.
    However, GKE will add taints to your nodes if you enable certain features such
    as GPUs. If this field is set, any diffs on this field will cause the provider to
    recreate the underlying resource. Taint values can be updated safely in
    Kubernetes (eg. through `kubectl`), and it's recommended that you do not use
    this field to manage taints. If you do, `lifecycle.ignore_changes` is
    recommended. Structure is documented below.
    """
    workload_metadata_config: Optional['outputs.ClusterNodeConfigWorkloadMetadataConfig'] = pulumi.output_property("workloadMetadataConfig")
    """
    Metadata configuration to expose to workloads on the node pool.
    Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigGuestAccelerator(dict):
    count: float = pulumi.output_property("count")
    """
    The number of the guest accelerator cards exposed to this instance.
    """
    type: str = pulumi.output_property("type")
    """
    The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigSandboxConfig(dict):
    sandbox_type: str = pulumi.output_property("sandboxType")
    """
    Which sandbox to use for pods in the node pool.
    Accepted values are:
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigShieldedInstanceConfig(dict):
    enable_integrity_monitoring: Optional[bool] = pulumi.output_property("enableIntegrityMonitoring")
    """
    Defines if the instance has integrity monitoring enabled.
    """
    enable_secure_boot: Optional[bool] = pulumi.output_property("enableSecureBoot")
    """
    Defines if the instance has Secure Boot enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigTaint(dict):
    effect: str = pulumi.output_property("effect")
    """
    Effect for taint. Accepted values are `NO_SCHEDULE`, `PREFER_NO_SCHEDULE`, and `NO_EXECUTE`.
    """
    key: str = pulumi.output_property("key")
    """
    Key for taint.
    """
    value: str = pulumi.output_property("value")
    """
    Value for taint.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigWorkloadMetadataConfig(dict):
    node_metadata: str = pulumi.output_property("nodeMetadata")
    """
    How to expose the node metadata to the workload running on the node.
    Accepted values are:
    * UNSPECIFIED: Not Set
    * SECURE: Prevent workloads not in hostNetwork from accessing certain VM metadata, specifically kube-env, which contains Kubelet credentials, and the instance identity token. See [Metadata Concealment](https://cloud.google.com/kubernetes-engine/docs/how-to/metadata-proxy) documentation.
    * EXPOSE: Expose all VM metadata to pods.
    * GKE_METADATA_SERVER: Enables [workload identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity) on the node.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePool(dict):
    autoscaling: Optional['outputs.ClusterNodePoolAutoscaling'] = pulumi.output_property("autoscaling")
    initial_node_count: Optional[float] = pulumi.output_property("initialNodeCount")
    """
    The number of nodes to create in this
    cluster's default node pool. In regional or multi-zonal clusters, this is the
    number of nodes per zone. Must be set if `node_pool` is not set. If you're using
    `container.NodePool` objects with no default node pool, you'll need to
    set this to a value of at least `1`, alongside setting
    `remove_default_node_pool` to `true`.
    """
    instance_group_urls: Optional[List[str]] = pulumi.output_property("instanceGroupUrls")
    """
    List of instance group URLs which have been assigned
    to the cluster.
    """
    management: Optional['outputs.ClusterNodePoolManagement'] = pulumi.output_property("management")
    max_pods_per_node: Optional[float] = pulumi.output_property("maxPodsPerNode")
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the cluster, unique within the project and
    location.
    """
    name_prefix: Optional[str] = pulumi.output_property("namePrefix")
    node_config: Optional['outputs.ClusterNodePoolNodeConfig'] = pulumi.output_property("nodeConfig")
    """
    Parameters used in creating the default node pool.
    Generally, this field should not be used at the same time as a
    `container.NodePool` or a `node_pool` block; this configuration
    manages the default node pool, which isn't recommended to be used.
    Structure is documented below.
    """
    node_count: Optional[float] = pulumi.output_property("nodeCount")
    node_locations: Optional[List[str]] = pulumi.output_property("nodeLocations")
    """
    The list of zones in which the cluster's nodes
    are located. Nodes must be in the region of their regional cluster or in the
    same region as their cluster's zone for zonal clusters. If this is specified for
    a zonal cluster, omit the cluster's zone.
    """
    upgrade_settings: Optional['outputs.ClusterNodePoolUpgradeSettings'] = pulumi.output_property("upgradeSettings")
    version: Optional[str] = pulumi.output_property("version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolAutoscaling(dict):
    max_node_count: float = pulumi.output_property("maxNodeCount")
    min_node_count: float = pulumi.output_property("minNodeCount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolManagement(dict):
    auto_repair: Optional[bool] = pulumi.output_property("autoRepair")
    auto_upgrade: Optional[bool] = pulumi.output_property("autoUpgrade")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfig(dict):
    boot_disk_kms_key: Optional[str] = pulumi.output_property("bootDiskKmsKey")
    """
    The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    Size of the disk attached to each node, specified
    in GB. The smallest allowed disk size is 10GB. Defaults to 100GB.
    """
    disk_type: Optional[str] = pulumi.output_property("diskType")
    """
    Type of the disk attached to each node
    (e.g. 'pd-standard' or 'pd-ssd'). If unspecified, the default disk type is 'pd-standard'
    """
    guest_accelerators: Optional[List['outputs.ClusterNodePoolNodeConfigGuestAccelerator']] = pulumi.output_property("guestAccelerators")
    """
    List of the type and count of accelerator cards attached to the instance.
    Structure documented below.
    """
    image_type: Optional[str] = pulumi.output_property("imageType")
    """
    The image type to use for this node. Note that changing the image type
    will delete and recreate all nodes in the node pool.
    """
    labels: Optional[Dict[str, str]] = pulumi.output_property("labels")
    """
    The Kubernetes labels (key/value pairs) to be applied to each node.
    """
    local_ssd_count: Optional[float] = pulumi.output_property("localSsdCount")
    """
    The amount of local SSD disks that will be
    attached to each cluster node. Defaults to 0.
    """
    machine_type: Optional[str] = pulumi.output_property("machineType")
    """
    The name of a Google Compute Engine machine type.
    Defaults to `n1-standard-1`. To create a custom machine type, value should be set as specified
    [here](https://cloud.google.com/compute/docs/reference/latest/instances#machineType).
    """
    metadata: Optional[Dict[str, str]] = pulumi.output_property("metadata")
    """
    The metadata key/value pairs assigned to instances in
    the cluster. From GKE `1.12` onwards, `disable-legacy-endpoints` is set to
    `true` by the API; if `metadata` is set but that default value is not
    included, the provider will attempt to unset the value. To avoid this, set the
    value in your config.
    """
    min_cpu_platform: Optional[str] = pulumi.output_property("minCpuPlatform")
    """
    Minimum CPU platform to be used by this instance.
    The instance may be scheduled on the specified or newer CPU platform. Applicable
    values are the friendly names of CPU platforms, such as `Intel Haswell`. See the
    [official documentation](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
    for more information.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The set of Google API scopes to be made available
    on all of the node VMs under the "default" service account. These can be
    either FQDNs, or scope aliases. The following scopes are necessary to ensure
    the correct functioning of the cluster:
    """
    preemptible: Optional[bool] = pulumi.output_property("preemptible")
    """
    A boolean that represents whether or not the underlying node VMs
    are preemptible. See the [official documentation](https://cloud.google.com/container-engine/docs/preemptible-vm)
    for more information. Defaults to false.
    """
    sandbox_config: Optional['outputs.ClusterNodePoolNodeConfigSandboxConfig'] = pulumi.output_property("sandboxConfig")
    """
    [GKE Sandbox](https://cloud.google.com/kubernetes-engine/docs/how-to/sandbox-pods) configuration. When enabling this feature you must specify `image_type = "COS_CONTAINERD"` and `node_version = "1.12.7-gke.17"` or later to use it.
    Structure is documented below.
    """
    service_account: Optional[str] = pulumi.output_property("serviceAccount")
    """
    The service account to be used by the Node VMs.
    If not specified, the "default" service account is used.
    In order to use the configured `oauth_scopes` for logging and monitoring, the service account being used needs the
    [roles/logging.logWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_logging_roles) and
    [roles/monitoring.metricWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_monitoring_roles) roles.
    """
    shielded_instance_config: Optional['outputs.ClusterNodePoolNodeConfigShieldedInstanceConfig'] = pulumi.output_property("shieldedInstanceConfig")
    """
    Shielded Instance options. Structure is documented below.
    """
    tags: Optional[List[str]] = pulumi.output_property("tags")
    """
    The list of instance tags applied to all nodes. Tags are used to identify
    valid sources or targets for network firewalls.
    """
    taints: Optional[List['outputs.ClusterNodePoolNodeConfigTaint']] = pulumi.output_property("taints")
    """
    A list of [Kubernetes taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
    to apply to nodes. GKE's API can only set this field on cluster creation.
    However, GKE will add taints to your nodes if you enable certain features such
    as GPUs. If this field is set, any diffs on this field will cause the provider to
    recreate the underlying resource. Taint values can be updated safely in
    Kubernetes (eg. through `kubectl`), and it's recommended that you do not use
    this field to manage taints. If you do, `lifecycle.ignore_changes` is
    recommended. Structure is documented below.
    """
    workload_metadata_config: Optional['outputs.ClusterNodePoolNodeConfigWorkloadMetadataConfig'] = pulumi.output_property("workloadMetadataConfig")
    """
    Metadata configuration to expose to workloads on the node pool.
    Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigGuestAccelerator(dict):
    count: float = pulumi.output_property("count")
    """
    The number of the guest accelerator cards exposed to this instance.
    """
    type: str = pulumi.output_property("type")
    """
    The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigSandboxConfig(dict):
    sandbox_type: str = pulumi.output_property("sandboxType")
    """
    Which sandbox to use for pods in the node pool.
    Accepted values are:
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigShieldedInstanceConfig(dict):
    enable_integrity_monitoring: Optional[bool] = pulumi.output_property("enableIntegrityMonitoring")
    """
    Defines if the instance has integrity monitoring enabled.
    """
    enable_secure_boot: Optional[bool] = pulumi.output_property("enableSecureBoot")
    """
    Defines if the instance has Secure Boot enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigTaint(dict):
    effect: str = pulumi.output_property("effect")
    """
    Effect for taint. Accepted values are `NO_SCHEDULE`, `PREFER_NO_SCHEDULE`, and `NO_EXECUTE`.
    """
    key: str = pulumi.output_property("key")
    """
    Key for taint.
    """
    value: str = pulumi.output_property("value")
    """
    Value for taint.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigWorkloadMetadataConfig(dict):
    node_metadata: str = pulumi.output_property("nodeMetadata")
    """
    How to expose the node metadata to the workload running on the node.
    Accepted values are:
    * UNSPECIFIED: Not Set
    * SECURE: Prevent workloads not in hostNetwork from accessing certain VM metadata, specifically kube-env, which contains Kubelet credentials, and the instance identity token. See [Metadata Concealment](https://cloud.google.com/kubernetes-engine/docs/how-to/metadata-proxy) documentation.
    * EXPOSE: Expose all VM metadata to pods.
    * GKE_METADATA_SERVER: Enables [workload identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity) on the node.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolUpgradeSettings(dict):
    max_surge: float = pulumi.output_property("maxSurge")
    max_unavailable: float = pulumi.output_property("maxUnavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPodSecurityPolicyConfig(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Enable the PodSecurityPolicy controller for this cluster.
    If enabled, pods must be valid under a PodSecurityPolicy to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPrivateClusterConfig(dict):
    enable_private_endpoint: bool = pulumi.output_property("enablePrivateEndpoint")
    """
    When `true`, the cluster's private
    endpoint is used as the cluster endpoint and access through the public endpoint
    is disabled. When `false`, either endpoint can be used. This field only applies
    to private clusters, when `enable_private_nodes` is `true`.
    """
    enable_private_nodes: Optional[bool] = pulumi.output_property("enablePrivateNodes")
    """
    Enables the private cluster feature,
    creating a private endpoint on the cluster. In a private cluster, nodes only
    have RFC 1918 private addresses and communicate with the master's private
    endpoint via private networking.
    """
    master_global_access_config: Optional['outputs.ClusterPrivateClusterConfigMasterGlobalAccessConfig'] = pulumi.output_property("masterGlobalAccessConfig")
    master_ipv4_cidr_block: Optional[str] = pulumi.output_property("masterIpv4CidrBlock")
    """
    The IP range in CIDR notation to use for
    the hosted master network. This range will be used for assigning private IP
    addresses to the cluster master(s) and the ILB VIP. This range must not overlap
    with any other ranges in use within the cluster's network, and it must be a /28
    subnet. See [Private Cluster Limitations](https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#limitations)
    for more details. This field only applies to private clusters, when
    `enable_private_nodes` is `true`.
    """
    peering_name: Optional[str] = pulumi.output_property("peeringName")
    """
    The name of the peering between this cluster and the Google owned VPC.
    """
    private_endpoint: Optional[str] = pulumi.output_property("privateEndpoint")
    """
    The internal IP address of this cluster's master endpoint.
    """
    public_endpoint: Optional[str] = pulumi.output_property("publicEndpoint")
    """
    The external IP address of this cluster's master endpoint.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPrivateClusterConfigMasterGlobalAccessConfig(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Enable the PodSecurityPolicy controller for this cluster.
    If enabled, pods must be valid under a PodSecurityPolicy to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterReleaseChannel(dict):
    channel: str = pulumi.output_property("channel")
    """
    The selected release channel.
    Accepted values are:
    * UNSPECIFIED: Not set.
    * RAPID: Weekly upgrade cadence; Early testers and developers who requires new features.
    * REGULAR: Multiple per month upgrade cadence; Production users who need features not yet offered in the Stable channel.
    * STABLE: Every few months upgrade cadence; Production users who need stability above all else, and for whom frequent upgrades are too risky.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterResourceUsageExportConfig(dict):
    bigquery_destination: 'outputs.ClusterResourceUsageExportConfigBigqueryDestination' = pulumi.output_property("bigqueryDestination")
    """
    Parameters for using BigQuery as the destination of resource usage export.
    """
    enable_network_egress_metering: Optional[bool] = pulumi.output_property("enableNetworkEgressMetering")
    """
    Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created
    in the cluster to meter network egress traffic.
    """
    enable_resource_consumption_metering: Optional[bool] = pulumi.output_property("enableResourceConsumptionMetering")
    """
    Whether to enable resource
    consumption metering on this cluster. When enabled, a table will be created in
    the resource export BigQuery dataset to store resource consumption data. The
    resulting table can be joined with the resource usage table or with BigQuery
    billing export. Defaults to `true`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterResourceUsageExportConfigBigqueryDestination(dict):
    dataset_id: str = pulumi.output_property("datasetId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterVerticalPodAutoscaling(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Enable the PodSecurityPolicy controller for this cluster.
    If enabled, pods must be valid under a PodSecurityPolicy to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterWorkloadIdentityConfig(dict):
    identity_namespace: str = pulumi.output_property("identityNamespace")
    """
    Currently, the only supported identity namespace is the project's default.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolAutoscaling(dict):
    max_node_count: float = pulumi.output_property("maxNodeCount")
    """
    Maximum number of nodes in the NodePool. Must be >= min_node_count.
    """
    min_node_count: float = pulumi.output_property("minNodeCount")
    """
    Minimum number of nodes in the NodePool. Must be >=0 and
    <= `max_node_count`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolManagement(dict):
    auto_repair: Optional[bool] = pulumi.output_property("autoRepair")
    """
    Whether the nodes will be automatically repaired.
    """
    auto_upgrade: Optional[bool] = pulumi.output_property("autoUpgrade")
    """
    Whether the nodes will be automatically upgraded.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfig(dict):
    boot_disk_kms_key: Optional[str] = pulumi.output_property("bootDiskKmsKey")
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    disk_type: Optional[str] = pulumi.output_property("diskType")
    guest_accelerators: Optional[List['outputs.NodePoolNodeConfigGuestAccelerator']] = pulumi.output_property("guestAccelerators")
    image_type: Optional[str] = pulumi.output_property("imageType")
    labels: Optional[Dict[str, str]] = pulumi.output_property("labels")
    local_ssd_count: Optional[float] = pulumi.output_property("localSsdCount")
    machine_type: Optional[str] = pulumi.output_property("machineType")
    metadata: Optional[Dict[str, str]] = pulumi.output_property("metadata")
    min_cpu_platform: Optional[str] = pulumi.output_property("minCpuPlatform")
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    preemptible: Optional[bool] = pulumi.output_property("preemptible")
    sandbox_config: Optional['outputs.NodePoolNodeConfigSandboxConfig'] = pulumi.output_property("sandboxConfig")
    service_account: Optional[str] = pulumi.output_property("serviceAccount")
    shielded_instance_config: Optional['outputs.NodePoolNodeConfigShieldedInstanceConfig'] = pulumi.output_property("shieldedInstanceConfig")
    tags: Optional[List[str]] = pulumi.output_property("tags")
    taints: Optional[List['outputs.NodePoolNodeConfigTaint']] = pulumi.output_property("taints")
    workload_metadata_config: Optional['outputs.NodePoolNodeConfigWorkloadMetadataConfig'] = pulumi.output_property("workloadMetadataConfig")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigGuestAccelerator(dict):
    count: float = pulumi.output_property("count")
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigSandboxConfig(dict):
    sandbox_type: str = pulumi.output_property("sandboxType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigShieldedInstanceConfig(dict):
    enable_integrity_monitoring: Optional[bool] = pulumi.output_property("enableIntegrityMonitoring")
    enable_secure_boot: Optional[bool] = pulumi.output_property("enableSecureBoot")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigTaint(dict):
    effect: str = pulumi.output_property("effect")
    key: str = pulumi.output_property("key")
    value: str = pulumi.output_property("value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigWorkloadMetadataConfig(dict):
    node_metadata: str = pulumi.output_property("nodeMetadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolUpgradeSettings(dict):
    max_surge: float = pulumi.output_property("maxSurge")
    """
    The number of additional nodes that can be added to the node pool during
    an upgrade. Increasing `max_surge` raises the number of nodes that can be upgraded simultaneously.
    Can be set to 0 or greater.
    """
    max_unavailable: float = pulumi.output_property("maxUnavailable")
    """
    The number of nodes that can be simultaneously unavailable during
    an upgrade. Increasing `max_unavailable` raises the number of nodes that can be upgraded in
    parallel. Can be set to 0 or greater.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfig(dict):
    cloudrun_configs: List['outputs.GetClusterAddonsConfigCloudrunConfig'] = pulumi.output_property("cloudrunConfigs")
    config_connector_configs: List['outputs.GetClusterAddonsConfigConfigConnectorConfig'] = pulumi.output_property("configConnectorConfigs")
    dns_cache_configs: List['outputs.GetClusterAddonsConfigDnsCacheConfig'] = pulumi.output_property("dnsCacheConfigs")
    gce_persistent_disk_csi_driver_configs: List['outputs.GetClusterAddonsConfigGcePersistentDiskCsiDriverConfig'] = pulumi.output_property("gcePersistentDiskCsiDriverConfigs")
    horizontal_pod_autoscalings: List['outputs.GetClusterAddonsConfigHorizontalPodAutoscaling'] = pulumi.output_property("horizontalPodAutoscalings")
    http_load_balancings: List['outputs.GetClusterAddonsConfigHttpLoadBalancing'] = pulumi.output_property("httpLoadBalancings")
    istio_configs: List['outputs.GetClusterAddonsConfigIstioConfig'] = pulumi.output_property("istioConfigs")
    kalm_configs: List['outputs.GetClusterAddonsConfigKalmConfig'] = pulumi.output_property("kalmConfigs")
    kubernetes_dashboards: List['outputs.GetClusterAddonsConfigKubernetesDashboard'] = pulumi.output_property("kubernetesDashboards")
    network_policy_configs: List['outputs.GetClusterAddonsConfigNetworkPolicyConfig'] = pulumi.output_property("networkPolicyConfigs")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigCloudrunConfig(dict):
    disabled: bool = pulumi.output_property("disabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigConfigConnectorConfig(dict):
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigDnsCacheConfig(dict):
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigGcePersistentDiskCsiDriverConfig(dict):
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigHorizontalPodAutoscaling(dict):
    disabled: bool = pulumi.output_property("disabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigHttpLoadBalancing(dict):
    disabled: bool = pulumi.output_property("disabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigIstioConfig(dict):
    auth: str = pulumi.output_property("auth")
    disabled: bool = pulumi.output_property("disabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigKalmConfig(dict):
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigKubernetesDashboard(dict):
    disabled: bool = pulumi.output_property("disabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigNetworkPolicyConfig(dict):
    disabled: bool = pulumi.output_property("disabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAuthenticatorGroupsConfig(dict):
    security_group: str = pulumi.output_property("securityGroup")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterClusterAutoscaling(dict):
    auto_provisioning_defaults: List['outputs.GetClusterClusterAutoscalingAutoProvisioningDefault'] = pulumi.output_property("autoProvisioningDefaults")
    autoscaling_profile: str = pulumi.output_property("autoscalingProfile")
    enabled: bool = pulumi.output_property("enabled")
    resource_limits: List['outputs.GetClusterClusterAutoscalingResourceLimit'] = pulumi.output_property("resourceLimits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterClusterAutoscalingAutoProvisioningDefault(dict):
    min_cpu_platform: str = pulumi.output_property("minCpuPlatform")
    oauth_scopes: List[str] = pulumi.output_property("oauthScopes")
    service_account: str = pulumi.output_property("serviceAccount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterClusterAutoscalingResourceLimit(dict):
    maximum: float = pulumi.output_property("maximum")
    minimum: float = pulumi.output_property("minimum")
    resource_type: str = pulumi.output_property("resourceType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterClusterTelemetry(dict):
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterDatabaseEncryption(dict):
    key_name: str = pulumi.output_property("keyName")
    state: str = pulumi.output_property("state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterIpAllocationPolicy(dict):
    cluster_ipv4_cidr_block: str = pulumi.output_property("clusterIpv4CidrBlock")
    cluster_secondary_range_name: str = pulumi.output_property("clusterSecondaryRangeName")
    node_ipv4_cidr_block: str = pulumi.output_property("nodeIpv4CidrBlock")
    services_ipv4_cidr_block: str = pulumi.output_property("servicesIpv4CidrBlock")
    services_secondary_range_name: str = pulumi.output_property("servicesSecondaryRangeName")
    subnetwork_name: str = pulumi.output_property("subnetworkName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterMaintenancePolicy(dict):
    daily_maintenance_windows: List['outputs.GetClusterMaintenancePolicyDailyMaintenanceWindow'] = pulumi.output_property("dailyMaintenanceWindows")
    recurring_windows: List['outputs.GetClusterMaintenancePolicyRecurringWindow'] = pulumi.output_property("recurringWindows")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterMaintenancePolicyDailyMaintenanceWindow(dict):
    duration: str = pulumi.output_property("duration")
    start_time: str = pulumi.output_property("startTime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterMaintenancePolicyRecurringWindow(dict):
    end_time: str = pulumi.output_property("endTime")
    recurrence: str = pulumi.output_property("recurrence")
    start_time: str = pulumi.output_property("startTime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterMasterAuth(dict):
    client_certificate: str = pulumi.output_property("clientCertificate")
    client_certificate_configs: List['outputs.GetClusterMasterAuthClientCertificateConfig'] = pulumi.output_property("clientCertificateConfigs")
    client_key: str = pulumi.output_property("clientKey")
    cluster_ca_certificate: str = pulumi.output_property("clusterCaCertificate")
    password: str = pulumi.output_property("password")
    username: str = pulumi.output_property("username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterMasterAuthClientCertificateConfig(dict):
    issue_client_certificate: bool = pulumi.output_property("issueClientCertificate")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterMasterAuthorizedNetworksConfig(dict):
    cidr_blocks: List['outputs.GetClusterMasterAuthorizedNetworksConfigCidrBlock'] = pulumi.output_property("cidrBlocks")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterMasterAuthorizedNetworksConfigCidrBlock(dict):
    cidr_block: str = pulumi.output_property("cidrBlock")
    display_name: str = pulumi.output_property("displayName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNetworkPolicy(dict):
    enabled: bool = pulumi.output_property("enabled")
    provider: str = pulumi.output_property("provider")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodeConfig(dict):
    boot_disk_kms_key: str = pulumi.output_property("bootDiskKmsKey")
    disk_size_gb: float = pulumi.output_property("diskSizeGb")
    disk_type: str = pulumi.output_property("diskType")
    guest_accelerators: List['outputs.GetClusterNodeConfigGuestAccelerator'] = pulumi.output_property("guestAccelerators")
    image_type: str = pulumi.output_property("imageType")
    labels: Dict[str, str] = pulumi.output_property("labels")
    local_ssd_count: float = pulumi.output_property("localSsdCount")
    machine_type: str = pulumi.output_property("machineType")
    metadata: Dict[str, str] = pulumi.output_property("metadata")
    min_cpu_platform: str = pulumi.output_property("minCpuPlatform")
    oauth_scopes: List[str] = pulumi.output_property("oauthScopes")
    preemptible: bool = pulumi.output_property("preemptible")
    sandbox_configs: List['outputs.GetClusterNodeConfigSandboxConfig'] = pulumi.output_property("sandboxConfigs")
    service_account: str = pulumi.output_property("serviceAccount")
    shielded_instance_configs: List['outputs.GetClusterNodeConfigShieldedInstanceConfig'] = pulumi.output_property("shieldedInstanceConfigs")
    tags: List[str] = pulumi.output_property("tags")
    taints: List['outputs.GetClusterNodeConfigTaint'] = pulumi.output_property("taints")
    workload_metadata_configs: List['outputs.GetClusterNodeConfigWorkloadMetadataConfig'] = pulumi.output_property("workloadMetadataConfigs")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodeConfigGuestAccelerator(dict):
    count: float = pulumi.output_property("count")
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodeConfigSandboxConfig(dict):
    sandbox_type: str = pulumi.output_property("sandboxType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodeConfigShieldedInstanceConfig(dict):
    enable_integrity_monitoring: bool = pulumi.output_property("enableIntegrityMonitoring")
    enable_secure_boot: bool = pulumi.output_property("enableSecureBoot")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodeConfigTaint(dict):
    effect: str = pulumi.output_property("effect")
    key: str = pulumi.output_property("key")
    value: str = pulumi.output_property("value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodeConfigWorkloadMetadataConfig(dict):
    node_metadata: str = pulumi.output_property("nodeMetadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePool(dict):
    autoscalings: List['outputs.GetClusterNodePoolAutoscaling'] = pulumi.output_property("autoscalings")
    initial_node_count: float = pulumi.output_property("initialNodeCount")
    instance_group_urls: List[str] = pulumi.output_property("instanceGroupUrls")
    managements: List['outputs.GetClusterNodePoolManagement'] = pulumi.output_property("managements")
    max_pods_per_node: float = pulumi.output_property("maxPodsPerNode")
    name: str = pulumi.output_property("name")
    """
    The name of the cluster.
    """
    name_prefix: str = pulumi.output_property("namePrefix")
    node_configs: List['outputs.GetClusterNodePoolNodeConfig'] = pulumi.output_property("nodeConfigs")
    node_count: float = pulumi.output_property("nodeCount")
    node_locations: List[str] = pulumi.output_property("nodeLocations")
    upgrade_settings: List['outputs.GetClusterNodePoolUpgradeSetting'] = pulumi.output_property("upgradeSettings")
    version: str = pulumi.output_property("version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePoolAutoscaling(dict):
    max_node_count: float = pulumi.output_property("maxNodeCount")
    min_node_count: float = pulumi.output_property("minNodeCount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePoolManagement(dict):
    auto_repair: bool = pulumi.output_property("autoRepair")
    auto_upgrade: bool = pulumi.output_property("autoUpgrade")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePoolNodeConfig(dict):
    boot_disk_kms_key: str = pulumi.output_property("bootDiskKmsKey")
    disk_size_gb: float = pulumi.output_property("diskSizeGb")
    disk_type: str = pulumi.output_property("diskType")
    guest_accelerators: List['outputs.GetClusterNodePoolNodeConfigGuestAccelerator'] = pulumi.output_property("guestAccelerators")
    image_type: str = pulumi.output_property("imageType")
    labels: Dict[str, str] = pulumi.output_property("labels")
    local_ssd_count: float = pulumi.output_property("localSsdCount")
    machine_type: str = pulumi.output_property("machineType")
    metadata: Dict[str, str] = pulumi.output_property("metadata")
    min_cpu_platform: str = pulumi.output_property("minCpuPlatform")
    oauth_scopes: List[str] = pulumi.output_property("oauthScopes")
    preemptible: bool = pulumi.output_property("preemptible")
    sandbox_configs: List['outputs.GetClusterNodePoolNodeConfigSandboxConfig'] = pulumi.output_property("sandboxConfigs")
    service_account: str = pulumi.output_property("serviceAccount")
    shielded_instance_configs: List['outputs.GetClusterNodePoolNodeConfigShieldedInstanceConfig'] = pulumi.output_property("shieldedInstanceConfigs")
    tags: List[str] = pulumi.output_property("tags")
    taints: List['outputs.GetClusterNodePoolNodeConfigTaint'] = pulumi.output_property("taints")
    workload_metadata_configs: List['outputs.GetClusterNodePoolNodeConfigWorkloadMetadataConfig'] = pulumi.output_property("workloadMetadataConfigs")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePoolNodeConfigGuestAccelerator(dict):
    count: float = pulumi.output_property("count")
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePoolNodeConfigSandboxConfig(dict):
    sandbox_type: str = pulumi.output_property("sandboxType")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePoolNodeConfigShieldedInstanceConfig(dict):
    enable_integrity_monitoring: bool = pulumi.output_property("enableIntegrityMonitoring")
    enable_secure_boot: bool = pulumi.output_property("enableSecureBoot")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePoolNodeConfigTaint(dict):
    effect: str = pulumi.output_property("effect")
    key: str = pulumi.output_property("key")
    value: str = pulumi.output_property("value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePoolNodeConfigWorkloadMetadataConfig(dict):
    node_metadata: str = pulumi.output_property("nodeMetadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterNodePoolUpgradeSetting(dict):
    max_surge: float = pulumi.output_property("maxSurge")
    max_unavailable: float = pulumi.output_property("maxUnavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterPodSecurityPolicyConfig(dict):
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterPrivateClusterConfig(dict):
    enable_private_endpoint: bool = pulumi.output_property("enablePrivateEndpoint")
    enable_private_nodes: bool = pulumi.output_property("enablePrivateNodes")
    master_global_access_configs: List['outputs.GetClusterPrivateClusterConfigMasterGlobalAccessConfig'] = pulumi.output_property("masterGlobalAccessConfigs")
    master_ipv4_cidr_block: str = pulumi.output_property("masterIpv4CidrBlock")
    peering_name: str = pulumi.output_property("peeringName")
    private_endpoint: str = pulumi.output_property("privateEndpoint")
    public_endpoint: str = pulumi.output_property("publicEndpoint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterPrivateClusterConfigMasterGlobalAccessConfig(dict):
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterReleaseChannel(dict):
    channel: str = pulumi.output_property("channel")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterResourceUsageExportConfig(dict):
    bigquery_destinations: List['outputs.GetClusterResourceUsageExportConfigBigqueryDestination'] = pulumi.output_property("bigqueryDestinations")
    enable_network_egress_metering: bool = pulumi.output_property("enableNetworkEgressMetering")
    enable_resource_consumption_metering: bool = pulumi.output_property("enableResourceConsumptionMetering")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterResourceUsageExportConfigBigqueryDestination(dict):
    dataset_id: str = pulumi.output_property("datasetId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterVerticalPodAutoscaling(dict):
    enabled: bool = pulumi.output_property("enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterWorkloadIdentityConfig(dict):
    identity_namespace: str = pulumi.output_property("identityNamespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


