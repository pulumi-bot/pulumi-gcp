# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'ClusterAddonsConfig',
    'ClusterAddonsConfigCloudrunConfig',
    'ClusterAddonsConfigConfigConnectorConfig',
    'ClusterAddonsConfigDnsCacheConfig',
    'ClusterAddonsConfigGcePersistentDiskCsiDriverConfig',
    'ClusterAddonsConfigHorizontalPodAutoscaling',
    'ClusterAddonsConfigHttpLoadBalancing',
    'ClusterAddonsConfigIstioConfig',
    'ClusterAddonsConfigKalmConfig',
    'ClusterAddonsConfigNetworkPolicyConfig',
    'ClusterAuthenticatorGroupsConfig',
    'ClusterClusterAutoscaling',
    'ClusterClusterAutoscalingAutoProvisioningDefaults',
    'ClusterClusterAutoscalingResourceLimit',
    'ClusterClusterTelemetry',
    'ClusterDatabaseEncryption',
    'ClusterDefaultSnatStatus',
    'ClusterIpAllocationPolicy',
    'ClusterMaintenancePolicy',
    'ClusterMaintenancePolicyDailyMaintenanceWindow',
    'ClusterMaintenancePolicyRecurringWindow',
    'ClusterMasterAuth',
    'ClusterMasterAuthClientCertificateConfig',
    'ClusterMasterAuthorizedNetworksConfig',
    'ClusterMasterAuthorizedNetworksConfigCidrBlock',
    'ClusterNetworkPolicy',
    'ClusterNodeConfig',
    'ClusterNodeConfigGuestAccelerator',
    'ClusterNodeConfigSandboxConfig',
    'ClusterNodeConfigShieldedInstanceConfig',
    'ClusterNodeConfigTaint',
    'ClusterNodeConfigWorkloadMetadataConfig',
    'ClusterNodePool',
    'ClusterNodePoolAutoscaling',
    'ClusterNodePoolManagement',
    'ClusterNodePoolNodeConfig',
    'ClusterNodePoolNodeConfigGuestAccelerator',
    'ClusterNodePoolNodeConfigSandboxConfig',
    'ClusterNodePoolNodeConfigShieldedInstanceConfig',
    'ClusterNodePoolNodeConfigTaint',
    'ClusterNodePoolNodeConfigWorkloadMetadataConfig',
    'ClusterNodePoolUpgradeSettings',
    'ClusterPodSecurityPolicyConfig',
    'ClusterPrivateClusterConfig',
    'ClusterPrivateClusterConfigMasterGlobalAccessConfig',
    'ClusterReleaseChannel',
    'ClusterResourceUsageExportConfig',
    'ClusterResourceUsageExportConfigBigqueryDestination',
    'ClusterVerticalPodAutoscaling',
    'ClusterWorkloadIdentityConfig',
    'NodePoolAutoscaling',
    'NodePoolManagement',
    'NodePoolNodeConfig',
    'NodePoolNodeConfigGuestAccelerator',
    'NodePoolNodeConfigSandboxConfig',
    'NodePoolNodeConfigShieldedInstanceConfig',
    'NodePoolNodeConfigTaint',
    'NodePoolNodeConfigWorkloadMetadataConfig',
    'NodePoolUpgradeSettings',
    'GetClusterAddonsConfigResult',
    'GetClusterAddonsConfigCloudrunConfigResult',
    'GetClusterAddonsConfigConfigConnectorConfigResult',
    'GetClusterAddonsConfigDnsCacheConfigResult',
    'GetClusterAddonsConfigGcePersistentDiskCsiDriverConfigResult',
    'GetClusterAddonsConfigHorizontalPodAutoscalingResult',
    'GetClusterAddonsConfigHttpLoadBalancingResult',
    'GetClusterAddonsConfigIstioConfigResult',
    'GetClusterAddonsConfigKalmConfigResult',
    'GetClusterAddonsConfigKubernetesDashboardResult',
    'GetClusterAddonsConfigNetworkPolicyConfigResult',
    'GetClusterAuthenticatorGroupsConfigResult',
    'GetClusterClusterAutoscalingResult',
    'GetClusterClusterAutoscalingAutoProvisioningDefaultResult',
    'GetClusterClusterAutoscalingResourceLimitResult',
    'GetClusterClusterTelemetryResult',
    'GetClusterDatabaseEncryptionResult',
    'GetClusterDefaultSnatStatusResult',
    'GetClusterIpAllocationPolicyResult',
    'GetClusterMaintenancePolicyResult',
    'GetClusterMaintenancePolicyDailyMaintenanceWindowResult',
    'GetClusterMaintenancePolicyRecurringWindowResult',
    'GetClusterMasterAuthResult',
    'GetClusterMasterAuthClientCertificateConfigResult',
    'GetClusterMasterAuthorizedNetworksConfigResult',
    'GetClusterMasterAuthorizedNetworksConfigCidrBlockResult',
    'GetClusterNetworkPolicyResult',
    'GetClusterNodeConfigResult',
    'GetClusterNodeConfigGuestAcceleratorResult',
    'GetClusterNodeConfigSandboxConfigResult',
    'GetClusterNodeConfigShieldedInstanceConfigResult',
    'GetClusterNodeConfigTaintResult',
    'GetClusterNodeConfigWorkloadMetadataConfigResult',
    'GetClusterNodePoolResult',
    'GetClusterNodePoolAutoscalingResult',
    'GetClusterNodePoolManagementResult',
    'GetClusterNodePoolNodeConfigResult',
    'GetClusterNodePoolNodeConfigGuestAcceleratorResult',
    'GetClusterNodePoolNodeConfigSandboxConfigResult',
    'GetClusterNodePoolNodeConfigShieldedInstanceConfigResult',
    'GetClusterNodePoolNodeConfigTaintResult',
    'GetClusterNodePoolNodeConfigWorkloadMetadataConfigResult',
    'GetClusterNodePoolUpgradeSettingResult',
    'GetClusterPodSecurityPolicyConfigResult',
    'GetClusterPrivateClusterConfigResult',
    'GetClusterPrivateClusterConfigMasterGlobalAccessConfigResult',
    'GetClusterReleaseChannelResult',
    'GetClusterResourceUsageExportConfigResult',
    'GetClusterResourceUsageExportConfigBigqueryDestinationResult',
    'GetClusterVerticalPodAutoscalingResult',
    'GetClusterWorkloadIdentityConfigResult',
]

@pulumi.output_type
class ClusterAddonsConfig(dict):
    @property
    @pulumi.getter(name="cloudrunConfig")
    def cloudrun_config(self) -> Optional['outputs.ClusterAddonsConfigCloudrunConfig']:
        """
        .
        The status of the CloudRun addon. It is disabled by default.
        Set `disabled = false` to enable.
        """
        ...

    @property
    @pulumi.getter(name="configConnectorConfig")
    def config_connector_config(self) -> Optional['outputs.ClusterAddonsConfigConfigConnectorConfig']:
        """
        .
        The status of the ConfigConnector addon. It is disabled by default; Set `enabled = true` to enable.
        """
        ...

    @property
    @pulumi.getter(name="dnsCacheConfig")
    def dns_cache_config(self) -> Optional['outputs.ClusterAddonsConfigDnsCacheConfig']:
        """
        .
        The status of the NodeLocal DNSCache addon. It is disabled by default.
        Set `enabled = true` to enable.
        """
        ...

    @property
    @pulumi.getter(name="gcePersistentDiskCsiDriverConfig")
    def gce_persistent_disk_csi_driver_config(self) -> Optional['outputs.ClusterAddonsConfigGcePersistentDiskCsiDriverConfig']:
        """
        .
        Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Defaults to disabled; set `enabled = true` to enable.
        """
        ...

    @property
    @pulumi.getter(name="horizontalPodAutoscaling")
    def horizontal_pod_autoscaling(self) -> Optional['outputs.ClusterAddonsConfigHorizontalPodAutoscaling']:
        """
        The status of the Horizontal Pod Autoscaling
        addon, which increases or decreases the number of replica pods a replication controller
        has based on the resource usage of the existing pods.
        It ensures that a Heapster pod is running in the cluster, which is also used by the Cloud Monitoring service.
        It is enabled by default;
        set `disabled = true` to disable.
        """
        ...

    @property
    @pulumi.getter(name="httpLoadBalancing")
    def http_load_balancing(self) -> Optional['outputs.ClusterAddonsConfigHttpLoadBalancing']:
        """
        The status of the HTTP (L7) load balancing
        controller addon, which makes it easy to set up HTTP load balancers for services in a
        cluster. It is enabled by default; set `disabled = true` to disable.
        """
        ...

    @property
    @pulumi.getter(name="istioConfig")
    def istio_config(self) -> Optional['outputs.ClusterAddonsConfigIstioConfig']:
        """
        .
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="kalmConfig")
    def kalm_config(self) -> Optional['outputs.ClusterAddonsConfigKalmConfig']:
        """
        .
        Configuration for the KALM addon, which manages the lifecycle of k8s. It is disabled by default; Set `enabled = true` to enable.
        """
        ...

    @property
    @pulumi.getter(name="networkPolicyConfig")
    def network_policy_config(self) -> Optional['outputs.ClusterAddonsConfigNetworkPolicyConfig']:
        """
        Whether we should enable the network policy addon
        for the master.  This must be enabled in order to enable network policy for the nodes.
        To enable this, you must also define a `network_policy` block,
        otherwise nothing will happen.
        It can only be disabled if the nodes already do not have network policies enabled.
        Defaults to disabled; set `disabled = false` to enable.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigCloudrunConfig(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        """
        The status of the Istio addon, which makes it easy to set up Istio for services in a
        cluster. It is disabled by default. Set `disabled = false` to enable.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigConfigConnectorConfig(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the PodSecurityPolicy controller for this cluster.
        If enabled, pods must be valid under a PodSecurityPolicy to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigDnsCacheConfig(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the PodSecurityPolicy controller for this cluster.
        If enabled, pods must be valid under a PodSecurityPolicy to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigGcePersistentDiskCsiDriverConfig(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the PodSecurityPolicy controller for this cluster.
        If enabled, pods must be valid under a PodSecurityPolicy to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigHorizontalPodAutoscaling(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        """
        The status of the Istio addon, which makes it easy to set up Istio for services in a
        cluster. It is disabled by default. Set `disabled = false` to enable.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigHttpLoadBalancing(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        """
        The status of the Istio addon, which makes it easy to set up Istio for services in a
        cluster. It is disabled by default. Set `disabled = false` to enable.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigIstioConfig(dict):
    @property
    @pulumi.getter
    def auth(self) -> Optional[str]:
        """
        The authentication type between services in Istio. Available options include `AUTH_MUTUAL_TLS`.
        """
        ...

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        """
        The status of the Istio addon, which makes it easy to set up Istio for services in a
        cluster. It is disabled by default. Set `disabled = false` to enable.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigKalmConfig(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the PodSecurityPolicy controller for this cluster.
        If enabled, pods must be valid under a PodSecurityPolicy to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAddonsConfigNetworkPolicyConfig(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        """
        The status of the Istio addon, which makes it easy to set up Istio for services in a
        cluster. It is disabled by default. Set `disabled = false` to enable.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterAuthenticatorGroupsConfig(dict):
    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> str:
        """
        The name of the RBAC security group for use with Google security groups in Kubernetes RBAC. Group name must be in format `gke-security-groups@yourdomain.com`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClusterAutoscaling(dict):
    @property
    @pulumi.getter(name="autoProvisioningDefaults")
    def auto_provisioning_defaults(self) -> Optional['outputs.ClusterClusterAutoscalingAutoProvisioningDefaults']:
        """
        Contains defaults for a node pool created by NAP.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="autoscalingProfile")
    def autoscaling_profile(self) -> Optional[str]:
        """
        ) Configuration
        options for the [Autoscaling profile](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler#autoscaling_profiles)
        feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability
        when deciding to remove nodes from a cluster. Can be `BALANCED` or `OPTIMIZE_UTILIZATION`. Defaults to `BALANCED`.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the PodSecurityPolicy controller for this cluster.
        If enabled, pods must be valid under a PodSecurityPolicy to be created.
        """
        ...

    @property
    @pulumi.getter(name="resourceLimits")
    def resource_limits(self) -> Optional[List['outputs.ClusterClusterAutoscalingResourceLimit']]:
        """
        Global constraints for machine resources in the
        cluster. Configuring the `cpu` and `memory` types is required if node
        auto-provisioning is enabled. These limits will apply to node pool autoscaling
        in addition to node auto-provisioning. Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClusterAutoscalingAutoProvisioningDefaults(dict):
    @property
    @pulumi.getter(name="minCpuPlatform")
    def min_cpu_platform(self) -> Optional[str]:
        """
        Minimum CPU platform to be used by this instance.
        The instance may be scheduled on the specified or newer CPU platform. Applicable
        values are the friendly names of CPU platforms, such as `Intel Haswell`. See the
        [official documentation](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
        for more information.
        """
        ...

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[List[str]]:
        """
        The set of Google API scopes to be made available
        on all of the node VMs under the "default" service account. These can be
        either FQDNs, or scope aliases. The following scopes are necessary to ensure
        the correct functioning of the cluster:
        """
        ...

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        """
        The service account to be used by the Node VMs.
        If not specified, the "default" service account is used.
        In order to use the configured `oauth_scopes` for logging and monitoring, the service account being used needs the
        [roles/logging.logWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_logging_roles) and
        [roles/monitoring.metricWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_monitoring_roles) roles.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClusterAutoscalingResourceLimit(dict):
    @property
    @pulumi.getter
    def maximum(self) -> Optional[float]:
        """
        Maximum amount of the resource in the cluster.
        """
        ...

    @property
    @pulumi.getter
    def minimum(self) -> Optional[float]:
        """
        Minimum amount of the resource in the cluster.
        """
        ...

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The type of the resource. For example, `cpu` and
        `memory`.  See the [guide to using Node Auto-Provisioning](https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning)
        for a list of types.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClusterTelemetry(dict):
    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDatabaseEncryption(dict):
    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[str]:
        """
        the key to use to encrypt/decrypt secrets.  See the [DatabaseEncryption definition](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters#Cluster.DatabaseEncryption) for more information.
        """
        ...

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        `ENCRYPTED` or `DECRYPTED`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDefaultSnatStatus(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        """
        The status of the Istio addon, which makes it easy to set up Istio for services in a
        cluster. It is disabled by default. Set `disabled = false` to enable.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIpAllocationPolicy(dict):
    @property
    @pulumi.getter(name="clusterIpv4CidrBlock")
    def cluster_ipv4_cidr_block(self) -> Optional[str]:
        """
        The IP address range for the cluster pod IPs.
        Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14)
        to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
        from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to
        pick a specific range to use.
        """
        ...

    @property
    @pulumi.getter(name="clusterSecondaryRangeName")
    def cluster_secondary_range_name(self) -> Optional[str]:
        """
        The name of the existing secondary
        range in the cluster's subnetwork to use for pod IP addresses. Alternatively,
        `cluster_ipv4_cidr_block` can be used to automatically create a GKE-managed one.
        """
        ...

    @property
    @pulumi.getter(name="servicesIpv4CidrBlock")
    def services_ipv4_cidr_block(self) -> Optional[str]:
        """
        The IP address range of the services IPs in this cluster.
        Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14)
        to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
        from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to
        pick a specific range to use.
        """
        ...

    @property
    @pulumi.getter(name="servicesSecondaryRangeName")
    def services_secondary_range_name(self) -> Optional[str]:
        """
        The name of the existing
        secondary range in the cluster's subnetwork to use for service `ClusterIP`s.
        Alternatively, `services_ipv4_cidr_block` can be used to automatically create a
        GKE-managed one.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMaintenancePolicy(dict):
    @property
    @pulumi.getter(name="dailyMaintenanceWindow")
    def daily_maintenance_window(self) -> Optional['outputs.ClusterMaintenancePolicyDailyMaintenanceWindow']:
        """
        Time window specified for daily maintenance operations.
        Specify `start_time` in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM”,
        where HH : \[00-23\] and MM : \[00-59\] GMT. For example:
        """
        ...

    @property
    @pulumi.getter(name="recurringWindow")
    def recurring_window(self) -> Optional['outputs.ClusterMaintenancePolicyRecurringWindow']:
        """
        Time window for
        recurring maintenance operations.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMaintenancePolicyDailyMaintenanceWindow(dict):
    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMaintenancePolicyRecurringWindow(dict):
    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        ...

    @property
    @pulumi.getter
    def recurrence(self) -> str:
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterAuth(dict):
    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="clientCertificateConfig")
    def client_certificate_config(self) -> Optional['outputs.ClusterMasterAuthClientCertificateConfig']:
        """
        Whether client certificate authorization is enabled for this cluster.  For example:
        """
        ...

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password to use for HTTP basic authentication when accessing
        the Kubernetes master endpoint.
        """
        ...

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The username to use for HTTP basic authentication when accessing
        the Kubernetes master endpoint. If not present basic auth will be disabled.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterAuthClientCertificateConfig(dict):
    @property
    @pulumi.getter(name="issueClientCertificate")
    def issue_client_certificate(self) -> bool:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterAuthorizedNetworksConfig(dict):
    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[List['outputs.ClusterMasterAuthorizedNetworksConfigCidrBlock']]:
        """
        External networks that can access the
        Kubernetes cluster master through HTTPS.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterMasterAuthorizedNetworksConfigCidrBlock(dict):
    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        External network that can access Kubernetes master through HTTPS.
        Must be specified in CIDR notation.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Field for users to identify CIDR blocks.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNetworkPolicy(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the PodSecurityPolicy controller for this cluster.
        If enabled, pods must be valid under a PodSecurityPolicy to be created.
        """
        ...

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        """
        The selected network policy provider. Defaults to PROVIDER_UNSPECIFIED.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfig(dict):
    @property
    @pulumi.getter(name="bootDiskKmsKey")
    def boot_disk_kms_key(self) -> Optional[str]:
        """
        The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
        """
        ...

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[float]:
        """
        Size of the disk attached to each node, specified
        in GB. The smallest allowed disk size is 10GB. Defaults to 100GB.
        """
        ...

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Type of the disk attached to each node
        (e.g. 'pd-standard' or 'pd-ssd'). If unspecified, the default disk type is 'pd-standard'
        """
        ...

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> Optional[List['outputs.ClusterNodeConfigGuestAccelerator']]:
        """
        List of the type and count of accelerator cards attached to the instance.
        Structure documented below.
        """
        ...

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[str]:
        """
        The image type to use for this node. Note that changing the image type
        will delete and recreate all nodes in the node pool.
        """
        ...

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        The Kubernetes labels (key/value pairs) to be applied to each node.
        """
        ...

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[float]:
        """
        The amount of local SSD disks that will be
        attached to each cluster node. Defaults to 0.
        """
        ...

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[str]:
        """
        The name of a Google Compute Engine machine type.
        Defaults to `e2-medium`. To create a custom machine type, value should be set as specified
        [here](https://cloud.google.com/compute/docs/reference/latest/instances#machineType).
        """
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        """
        The metadata key/value pairs assigned to instances in
        the cluster. From GKE `1.12` onwards, `disable-legacy-endpoints` is set to
        `true` by the API; if `metadata` is set but that default value is not
        included, the provider will attempt to unset the value. To avoid this, set the
        value in your config.
        """
        ...

    @property
    @pulumi.getter(name="minCpuPlatform")
    def min_cpu_platform(self) -> Optional[str]:
        """
        Minimum CPU platform to be used by this instance.
        The instance may be scheduled on the specified or newer CPU platform. Applicable
        values are the friendly names of CPU platforms, such as `Intel Haswell`. See the
        [official documentation](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
        for more information.
        """
        ...

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[List[str]]:
        """
        The set of Google API scopes to be made available
        on all of the node VMs under the "default" service account. These can be
        either FQDNs, or scope aliases. The following scopes are necessary to ensure
        the correct functioning of the cluster:
        """
        ...

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[bool]:
        """
        A boolean that represents whether or not the underlying node VMs
        are preemptible. See the [official documentation](https://cloud.google.com/container-engine/docs/preemptible-vm)
        for more information. Defaults to false.
        """
        ...

    @property
    @pulumi.getter(name="sandboxConfig")
    def sandbox_config(self) -> Optional['outputs.ClusterNodeConfigSandboxConfig']:
        """
        [GKE Sandbox](https://cloud.google.com/kubernetes-engine/docs/how-to/sandbox-pods) configuration. When enabling this feature you must specify `image_type = "COS_CONTAINERD"` and `node_version = "1.12.7-gke.17"` or later to use it.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        """
        The service account to be used by the Node VMs.
        If not specified, the "default" service account is used.
        In order to use the configured `oauth_scopes` for logging and monitoring, the service account being used needs the
        [roles/logging.logWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_logging_roles) and
        [roles/monitoring.metricWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_monitoring_roles) roles.
        """
        ...

    @property
    @pulumi.getter(name="shieldedInstanceConfig")
    def shielded_instance_config(self) -> Optional['outputs.ClusterNodeConfigShieldedInstanceConfig']:
        """
        Shielded Instance options. Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def tags(self) -> Optional[List[str]]:
        """
        The list of instance tags applied to all nodes. Tags are used to identify
        valid sources or targets for network firewalls.
        """
        ...

    @property
    @pulumi.getter
    def taints(self) -> Optional[List['outputs.ClusterNodeConfigTaint']]:
        """
        A list of [Kubernetes taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
        to apply to nodes. GKE's API can only set this field on cluster creation.
        However, GKE will add taints to your nodes if you enable certain features such
        as GPUs. If this field is set, any diffs on this field will cause the provider to
        recreate the underlying resource. Taint values can be updated safely in
        Kubernetes (eg. through `kubectl`), and it's recommended that you do not use
        this field to manage taints. If you do, `lifecycle.ignore_changes` is
        recommended. Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="workloadMetadataConfig")
    def workload_metadata_config(self) -> Optional['outputs.ClusterNodeConfigWorkloadMetadataConfig']:
        """
        Metadata configuration to expose to workloads on the node pool.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigGuestAccelerator(dict):
    @property
    @pulumi.getter
    def count(self) -> float:
        """
        The number of the guest accelerator cards exposed to this instance.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigSandboxConfig(dict):
    @property
    @pulumi.getter(name="sandboxType")
    def sandbox_type(self) -> str:
        """
        Which sandbox to use for pods in the node pool.
        Accepted values are:
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigShieldedInstanceConfig(dict):
    @property
    @pulumi.getter(name="enableIntegrityMonitoring")
    def enable_integrity_monitoring(self) -> Optional[bool]:
        """
        Defines if the instance has integrity monitoring enabled.
        """
        ...

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[bool]:
        """
        Defines if the instance has Secure Boot enabled.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigTaint(dict):
    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Effect for taint. Accepted values are `NO_SCHEDULE`, `PREFER_NO_SCHEDULE`, and `NO_EXECUTE`.
        """
        ...

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key for taint.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value for taint.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeConfigWorkloadMetadataConfig(dict):
    @property
    @pulumi.getter(name="nodeMetadata")
    def node_metadata(self) -> str:
        """
        How to expose the node metadata to the workload running on the node.
        Accepted values are:
        * UNSPECIFIED: Not Set
        * SECURE: Prevent workloads not in hostNetwork from accessing certain VM metadata, specifically kube-env, which contains Kubelet credentials, and the instance identity token. See [Metadata Concealment](https://cloud.google.com/kubernetes-engine/docs/how-to/metadata-proxy) documentation.
        * EXPOSE: Expose all VM metadata to pods.
        * GKE_METADATA_SERVER: Enables [workload identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity) on the node.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePool(dict):
    @property
    @pulumi.getter
    def autoscaling(self) -> Optional['outputs.ClusterNodePoolAutoscaling']:
        ...

    @property
    @pulumi.getter(name="initialNodeCount")
    def initial_node_count(self) -> Optional[float]:
        """
        The number of nodes to create in this
        cluster's default node pool. In regional or multi-zonal clusters, this is the
        number of nodes per zone. Must be set if `node_pool` is not set. If you're using
        `container.NodePool` objects with no default node pool, you'll need to
        set this to a value of at least `1`, alongside setting
        `remove_default_node_pool` to `true`.
        """
        ...

    @property
    @pulumi.getter(name="instanceGroupUrls")
    def instance_group_urls(self) -> Optional[List[str]]:
        """
        List of instance group URLs which have been assigned
        to the cluster.
        """
        ...

    @property
    @pulumi.getter
    def management(self) -> Optional['outputs.ClusterNodePoolManagement']:
        ...

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the cluster, unique within the project and
        location.
        """
        ...

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> Optional['outputs.ClusterNodePoolNodeConfig']:
        """
        Parameters used in creating the default node pool.
        Generally, this field should not be used at the same time as a
        `container.NodePool` or a `node_pool` block; this configuration
        manages the default node pool, which isn't recommended to be used.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="nodeLocations")
    def node_locations(self) -> Optional[List[str]]:
        """
        The list of zones in which the cluster's nodes
        are located. Nodes must be in the region of their regional cluster or in the
        same region as their cluster's zone for zonal clusters. If this is specified for
        a zonal cluster, omit the cluster's zone.
        """
        ...

    @property
    @pulumi.getter(name="upgradeSettings")
    def upgrade_settings(self) -> Optional['outputs.ClusterNodePoolUpgradeSettings']:
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolAutoscaling(dict):
    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> float:
        ...

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> float:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolManagement(dict):
    @property
    @pulumi.getter(name="autoRepair")
    def auto_repair(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[bool]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfig(dict):
    @property
    @pulumi.getter(name="bootDiskKmsKey")
    def boot_disk_kms_key(self) -> Optional[str]:
        """
        The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
        """
        ...

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[float]:
        """
        Size of the disk attached to each node, specified
        in GB. The smallest allowed disk size is 10GB. Defaults to 100GB.
        """
        ...

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Type of the disk attached to each node
        (e.g. 'pd-standard' or 'pd-ssd'). If unspecified, the default disk type is 'pd-standard'
        """
        ...

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> Optional[List['outputs.ClusterNodePoolNodeConfigGuestAccelerator']]:
        """
        List of the type and count of accelerator cards attached to the instance.
        Structure documented below.
        """
        ...

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[str]:
        """
        The image type to use for this node. Note that changing the image type
        will delete and recreate all nodes in the node pool.
        """
        ...

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        The Kubernetes labels (key/value pairs) to be applied to each node.
        """
        ...

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[float]:
        """
        The amount of local SSD disks that will be
        attached to each cluster node. Defaults to 0.
        """
        ...

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[str]:
        """
        The name of a Google Compute Engine machine type.
        Defaults to `e2-medium`. To create a custom machine type, value should be set as specified
        [here](https://cloud.google.com/compute/docs/reference/latest/instances#machineType).
        """
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        """
        The metadata key/value pairs assigned to instances in
        the cluster. From GKE `1.12` onwards, `disable-legacy-endpoints` is set to
        `true` by the API; if `metadata` is set but that default value is not
        included, the provider will attempt to unset the value. To avoid this, set the
        value in your config.
        """
        ...

    @property
    @pulumi.getter(name="minCpuPlatform")
    def min_cpu_platform(self) -> Optional[str]:
        """
        Minimum CPU platform to be used by this instance.
        The instance may be scheduled on the specified or newer CPU platform. Applicable
        values are the friendly names of CPU platforms, such as `Intel Haswell`. See the
        [official documentation](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
        for more information.
        """
        ...

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[List[str]]:
        """
        The set of Google API scopes to be made available
        on all of the node VMs under the "default" service account. These can be
        either FQDNs, or scope aliases. The following scopes are necessary to ensure
        the correct functioning of the cluster:
        """
        ...

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[bool]:
        """
        A boolean that represents whether or not the underlying node VMs
        are preemptible. See the [official documentation](https://cloud.google.com/container-engine/docs/preemptible-vm)
        for more information. Defaults to false.
        """
        ...

    @property
    @pulumi.getter(name="sandboxConfig")
    def sandbox_config(self) -> Optional['outputs.ClusterNodePoolNodeConfigSandboxConfig']:
        """
        [GKE Sandbox](https://cloud.google.com/kubernetes-engine/docs/how-to/sandbox-pods) configuration. When enabling this feature you must specify `image_type = "COS_CONTAINERD"` and `node_version = "1.12.7-gke.17"` or later to use it.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        """
        The service account to be used by the Node VMs.
        If not specified, the "default" service account is used.
        In order to use the configured `oauth_scopes` for logging and monitoring, the service account being used needs the
        [roles/logging.logWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_logging_roles) and
        [roles/monitoring.metricWriter](https://cloud.google.com/iam/docs/understanding-roles#stackdriver_monitoring_roles) roles.
        """
        ...

    @property
    @pulumi.getter(name="shieldedInstanceConfig")
    def shielded_instance_config(self) -> Optional['outputs.ClusterNodePoolNodeConfigShieldedInstanceConfig']:
        """
        Shielded Instance options. Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def tags(self) -> Optional[List[str]]:
        """
        The list of instance tags applied to all nodes. Tags are used to identify
        valid sources or targets for network firewalls.
        """
        ...

    @property
    @pulumi.getter
    def taints(self) -> Optional[List['outputs.ClusterNodePoolNodeConfigTaint']]:
        """
        A list of [Kubernetes taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
        to apply to nodes. GKE's API can only set this field on cluster creation.
        However, GKE will add taints to your nodes if you enable certain features such
        as GPUs. If this field is set, any diffs on this field will cause the provider to
        recreate the underlying resource. Taint values can be updated safely in
        Kubernetes (eg. through `kubectl`), and it's recommended that you do not use
        this field to manage taints. If you do, `lifecycle.ignore_changes` is
        recommended. Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="workloadMetadataConfig")
    def workload_metadata_config(self) -> Optional['outputs.ClusterNodePoolNodeConfigWorkloadMetadataConfig']:
        """
        Metadata configuration to expose to workloads on the node pool.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigGuestAccelerator(dict):
    @property
    @pulumi.getter
    def count(self) -> float:
        """
        The number of the guest accelerator cards exposed to this instance.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigSandboxConfig(dict):
    @property
    @pulumi.getter(name="sandboxType")
    def sandbox_type(self) -> str:
        """
        Which sandbox to use for pods in the node pool.
        Accepted values are:
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigShieldedInstanceConfig(dict):
    @property
    @pulumi.getter(name="enableIntegrityMonitoring")
    def enable_integrity_monitoring(self) -> Optional[bool]:
        """
        Defines if the instance has integrity monitoring enabled.
        """
        ...

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[bool]:
        """
        Defines if the instance has Secure Boot enabled.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigTaint(dict):
    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Effect for taint. Accepted values are `NO_SCHEDULE`, `PREFER_NO_SCHEDULE`, and `NO_EXECUTE`.
        """
        ...

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key for taint.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value for taint.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolNodeConfigWorkloadMetadataConfig(dict):
    @property
    @pulumi.getter(name="nodeMetadata")
    def node_metadata(self) -> str:
        """
        How to expose the node metadata to the workload running on the node.
        Accepted values are:
        * UNSPECIFIED: Not Set
        * SECURE: Prevent workloads not in hostNetwork from accessing certain VM metadata, specifically kube-env, which contains Kubelet credentials, and the instance identity token. See [Metadata Concealment](https://cloud.google.com/kubernetes-engine/docs/how-to/metadata-proxy) documentation.
        * EXPOSE: Expose all VM metadata to pods.
        * GKE_METADATA_SERVER: Enables [workload identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity) on the node.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodePoolUpgradeSettings(dict):
    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> float:
        ...

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> float:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPodSecurityPolicyConfig(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the PodSecurityPolicy controller for this cluster.
        If enabled, pods must be valid under a PodSecurityPolicy to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPrivateClusterConfig(dict):
    @property
    @pulumi.getter(name="enablePrivateEndpoint")
    def enable_private_endpoint(self) -> bool:
        """
        When `true`, the cluster's private
        endpoint is used as the cluster endpoint and access through the public endpoint
        is disabled. When `false`, either endpoint can be used. This field only applies
        to private clusters, when `enable_private_nodes` is `true`.
        """
        ...

    @property
    @pulumi.getter(name="enablePrivateNodes")
    def enable_private_nodes(self) -> Optional[bool]:
        """
        Enables the private cluster feature,
        creating a private endpoint on the cluster. In a private cluster, nodes only
        have RFC 1918 private addresses and communicate with the master's private
        endpoint via private networking.
        """
        ...

    @property
    @pulumi.getter(name="masterGlobalAccessConfig")
    def master_global_access_config(self) -> Optional['outputs.ClusterPrivateClusterConfigMasterGlobalAccessConfig']:
        ...

    @property
    @pulumi.getter(name="masterIpv4CidrBlock")
    def master_ipv4_cidr_block(self) -> Optional[str]:
        """
        The IP range in CIDR notation to use for
        the hosted master network. This range will be used for assigning private IP
        addresses to the cluster master(s) and the ILB VIP. This range must not overlap
        with any other ranges in use within the cluster's network, and it must be a /28
        subnet. See [Private Cluster Limitations](https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#limitations)
        for more details. This field only applies to private clusters, when
        `enable_private_nodes` is `true`.
        """
        ...

    @property
    @pulumi.getter(name="peeringName")
    def peering_name(self) -> Optional[str]:
        """
        The name of the peering between this cluster and the Google owned VPC.
        """
        ...

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[str]:
        """
        The internal IP address of this cluster's master endpoint.
        """
        ...

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> Optional[str]:
        """
        The external IP address of this cluster's master endpoint.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPrivateClusterConfigMasterGlobalAccessConfig(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the PodSecurityPolicy controller for this cluster.
        If enabled, pods must be valid under a PodSecurityPolicy to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterReleaseChannel(dict):
    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        The selected release channel.
        Accepted values are:
        * UNSPECIFIED: Not set.
        * RAPID: Weekly upgrade cadence; Early testers and developers who requires new features.
        * REGULAR: Multiple per month upgrade cadence; Production users who need features not yet offered in the Stable channel.
        * STABLE: Every few months upgrade cadence; Production users who need stability above all else, and for whom frequent upgrades are too risky.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterResourceUsageExportConfig(dict):
    @property
    @pulumi.getter(name="bigqueryDestination")
    def bigquery_destination(self) -> 'outputs.ClusterResourceUsageExportConfigBigqueryDestination':
        """
        Parameters for using BigQuery as the destination of resource usage export.
        """
        ...

    @property
    @pulumi.getter(name="enableNetworkEgressMetering")
    def enable_network_egress_metering(self) -> Optional[bool]:
        """
        Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created
        in the cluster to meter network egress traffic.
        """
        ...

    @property
    @pulumi.getter(name="enableResourceConsumptionMetering")
    def enable_resource_consumption_metering(self) -> Optional[bool]:
        """
        Whether to enable resource
        consumption metering on this cluster. When enabled, a table will be created in
        the resource export BigQuery dataset to store resource consumption data. The
        resulting table can be joined with the resource usage table or with BigQuery
        billing export. Defaults to `true`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterResourceUsageExportConfigBigqueryDestination(dict):
    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterVerticalPodAutoscaling(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the PodSecurityPolicy controller for this cluster.
        If enabled, pods must be valid under a PodSecurityPolicy to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterWorkloadIdentityConfig(dict):
    @property
    @pulumi.getter(name="identityNamespace")
    def identity_namespace(self) -> str:
        """
        Currently, the only supported identity namespace is the project's default.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolAutoscaling(dict):
    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> float:
        """
        Maximum number of nodes in the NodePool. Must be >= min_node_count.
        """
        ...

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> float:
        """
        Minimum number of nodes in the NodePool. Must be >=0 and
        <= `max_node_count`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolManagement(dict):
    @property
    @pulumi.getter(name="autoRepair")
    def auto_repair(self) -> Optional[bool]:
        """
        Whether the nodes will be automatically repaired.
        """
        ...

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[bool]:
        """
        Whether the nodes will be automatically upgraded.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfig(dict):
    @property
    @pulumi.getter(name="bootDiskKmsKey")
    def boot_disk_kms_key(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> Optional[List['outputs.NodePoolNodeConfigGuestAccelerator']]:
        ...

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        ...

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        ...

    @property
    @pulumi.getter(name="minCpuPlatform")
    def min_cpu_platform(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="sandboxConfig")
    def sandbox_config(self) -> Optional['outputs.NodePoolNodeConfigSandboxConfig']:
        ...

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="shieldedInstanceConfig")
    def shielded_instance_config(self) -> Optional['outputs.NodePoolNodeConfigShieldedInstanceConfig']:
        ...

    @property
    @pulumi.getter
    def tags(self) -> Optional[List[str]]:
        ...

    @property
    @pulumi.getter
    def taints(self) -> Optional[List['outputs.NodePoolNodeConfigTaint']]:
        ...

    @property
    @pulumi.getter(name="workloadMetadataConfig")
    def workload_metadata_config(self) -> Optional['outputs.NodePoolNodeConfigWorkloadMetadataConfig']:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigGuestAccelerator(dict):
    @property
    @pulumi.getter
    def count(self) -> float:
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigSandboxConfig(dict):
    @property
    @pulumi.getter(name="sandboxType")
    def sandbox_type(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigShieldedInstanceConfig(dict):
    @property
    @pulumi.getter(name="enableIntegrityMonitoring")
    def enable_integrity_monitoring(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[bool]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigTaint(dict):
    @property
    @pulumi.getter
    def effect(self) -> str:
        ...

    @property
    @pulumi.getter
    def key(self) -> str:
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolNodeConfigWorkloadMetadataConfig(dict):
    @property
    @pulumi.getter(name="nodeMetadata")
    def node_metadata(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodePoolUpgradeSettings(dict):
    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> float:
        """
        The number of additional nodes that can be added to the node pool during
        an upgrade. Increasing `max_surge` raises the number of nodes that can be upgraded simultaneously.
        Can be set to 0 or greater.
        """
        ...

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> float:
        """
        The number of nodes that can be simultaneously unavailable during
        an upgrade. Increasing `max_unavailable` raises the number of nodes that can be upgraded in
        parallel. Can be set to 0 or greater.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterAddonsConfigResult(dict):
    @property
    @pulumi.getter(name="cloudrunConfigs")
    def cloudrun_configs(self) -> List['outputs.GetClusterAddonsConfigCloudrunConfigResult']:
        ...

    @property
    @pulumi.getter(name="configConnectorConfigs")
    def config_connector_configs(self) -> List['outputs.GetClusterAddonsConfigConfigConnectorConfigResult']:
        ...

    @property
    @pulumi.getter(name="dnsCacheConfigs")
    def dns_cache_configs(self) -> List['outputs.GetClusterAddonsConfigDnsCacheConfigResult']:
        ...

    @property
    @pulumi.getter(name="gcePersistentDiskCsiDriverConfigs")
    def gce_persistent_disk_csi_driver_configs(self) -> List['outputs.GetClusterAddonsConfigGcePersistentDiskCsiDriverConfigResult']:
        ...

    @property
    @pulumi.getter(name="horizontalPodAutoscalings")
    def horizontal_pod_autoscalings(self) -> List['outputs.GetClusterAddonsConfigHorizontalPodAutoscalingResult']:
        ...

    @property
    @pulumi.getter(name="httpLoadBalancings")
    def http_load_balancings(self) -> List['outputs.GetClusterAddonsConfigHttpLoadBalancingResult']:
        ...

    @property
    @pulumi.getter(name="istioConfigs")
    def istio_configs(self) -> List['outputs.GetClusterAddonsConfigIstioConfigResult']:
        ...

    @property
    @pulumi.getter(name="kalmConfigs")
    def kalm_configs(self) -> List['outputs.GetClusterAddonsConfigKalmConfigResult']:
        ...

    @property
    @pulumi.getter(name="kubernetesDashboards")
    def kubernetes_dashboards(self) -> List['outputs.GetClusterAddonsConfigKubernetesDashboardResult']:
        ...

    @property
    @pulumi.getter(name="networkPolicyConfigs")
    def network_policy_configs(self) -> List['outputs.GetClusterAddonsConfigNetworkPolicyConfigResult']:
        ...


@pulumi.output_type
class GetClusterAddonsConfigCloudrunConfigResult(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAddonsConfigConfigConnectorConfigResult(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAddonsConfigDnsCacheConfigResult(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAddonsConfigGcePersistentDiskCsiDriverConfigResult(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAddonsConfigHorizontalPodAutoscalingResult(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAddonsConfigHttpLoadBalancingResult(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAddonsConfigIstioConfigResult(dict):
    @property
    @pulumi.getter
    def auth(self) -> str:
        ...

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAddonsConfigKalmConfigResult(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAddonsConfigKubernetesDashboardResult(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAddonsConfigNetworkPolicyConfigResult(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterAuthenticatorGroupsConfigResult(dict):
    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> str:
        ...


@pulumi.output_type
class GetClusterClusterAutoscalingResult(dict):
    @property
    @pulumi.getter(name="autoProvisioningDefaults")
    def auto_provisioning_defaults(self) -> List['outputs.GetClusterClusterAutoscalingAutoProvisioningDefaultResult']:
        ...

    @property
    @pulumi.getter(name="autoscalingProfile")
    def autoscaling_profile(self) -> str:
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...

    @property
    @pulumi.getter(name="resourceLimits")
    def resource_limits(self) -> List['outputs.GetClusterClusterAutoscalingResourceLimitResult']:
        ...


@pulumi.output_type
class GetClusterClusterAutoscalingAutoProvisioningDefaultResult(dict):
    @property
    @pulumi.getter(name="minCpuPlatform")
    def min_cpu_platform(self) -> str:
        ...

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> List[str]:
        ...

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        ...


@pulumi.output_type
class GetClusterClusterAutoscalingResourceLimitResult(dict):
    @property
    @pulumi.getter
    def maximum(self) -> float:
        ...

    @property
    @pulumi.getter
    def minimum(self) -> float:
        ...

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        ...


@pulumi.output_type
class GetClusterClusterTelemetryResult(dict):
    @property
    @pulumi.getter
    def type(self) -> str:
        ...


@pulumi.output_type
class GetClusterDatabaseEncryptionResult(dict):
    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        ...

    @property
    @pulumi.getter
    def state(self) -> str:
        ...


@pulumi.output_type
class GetClusterDefaultSnatStatusResult(dict):
    @property
    @pulumi.getter
    def disabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterIpAllocationPolicyResult(dict):
    @property
    @pulumi.getter(name="clusterIpv4CidrBlock")
    def cluster_ipv4_cidr_block(self) -> str:
        ...

    @property
    @pulumi.getter(name="clusterSecondaryRangeName")
    def cluster_secondary_range_name(self) -> str:
        ...

    @property
    @pulumi.getter(name="nodeIpv4CidrBlock")
    def node_ipv4_cidr_block(self) -> str:
        ...

    @property
    @pulumi.getter(name="servicesIpv4CidrBlock")
    def services_ipv4_cidr_block(self) -> str:
        ...

    @property
    @pulumi.getter(name="servicesSecondaryRangeName")
    def services_secondary_range_name(self) -> str:
        ...

    @property
    @pulumi.getter(name="subnetworkName")
    def subnetwork_name(self) -> str:
        ...


@pulumi.output_type
class GetClusterMaintenancePolicyResult(dict):
    @property
    @pulumi.getter(name="dailyMaintenanceWindows")
    def daily_maintenance_windows(self) -> List['outputs.GetClusterMaintenancePolicyDailyMaintenanceWindowResult']:
        ...

    @property
    @pulumi.getter(name="recurringWindows")
    def recurring_windows(self) -> List['outputs.GetClusterMaintenancePolicyRecurringWindowResult']:
        ...


@pulumi.output_type
class GetClusterMaintenancePolicyDailyMaintenanceWindowResult(dict):
    @property
    @pulumi.getter
    def duration(self) -> str:
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        ...


@pulumi.output_type
class GetClusterMaintenancePolicyRecurringWindowResult(dict):
    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        ...

    @property
    @pulumi.getter
    def recurrence(self) -> str:
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        ...


@pulumi.output_type
class GetClusterMasterAuthResult(dict):
    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        ...

    @property
    @pulumi.getter(name="clientCertificateConfigs")
    def client_certificate_configs(self) -> List['outputs.GetClusterMasterAuthClientCertificateConfigResult']:
        ...

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        ...

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> str:
        ...

    @property
    @pulumi.getter
    def password(self) -> str:
        ...

    @property
    @pulumi.getter
    def username(self) -> str:
        ...


@pulumi.output_type
class GetClusterMasterAuthClientCertificateConfigResult(dict):
    @property
    @pulumi.getter(name="issueClientCertificate")
    def issue_client_certificate(self) -> bool:
        ...


@pulumi.output_type
class GetClusterMasterAuthorizedNetworksConfigResult(dict):
    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> List['outputs.GetClusterMasterAuthorizedNetworksConfigCidrBlockResult']:
        ...


@pulumi.output_type
class GetClusterMasterAuthorizedNetworksConfigCidrBlockResult(dict):
    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        ...


@pulumi.output_type
class GetClusterNetworkPolicyResult(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...

    @property
    @pulumi.getter
    def provider(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodeConfigResult(dict):
    @property
    @pulumi.getter(name="bootDiskKmsKey")
    def boot_disk_kms_key(self) -> str:
        ...

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> float:
        ...

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        ...

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> List['outputs.GetClusterNodeConfigGuestAcceleratorResult']:
        ...

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        ...

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        ...

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> float:
        ...

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        ...

    @property
    @pulumi.getter(name="minCpuPlatform")
    def min_cpu_platform(self) -> str:
        ...

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> List[str]:
        ...

    @property
    @pulumi.getter
    def preemptible(self) -> bool:
        ...

    @property
    @pulumi.getter(name="sandboxConfigs")
    def sandbox_configs(self) -> List['outputs.GetClusterNodeConfigSandboxConfigResult']:
        ...

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        ...

    @property
    @pulumi.getter(name="shieldedInstanceConfigs")
    def shielded_instance_configs(self) -> List['outputs.GetClusterNodeConfigShieldedInstanceConfigResult']:
        ...

    @property
    @pulumi.getter
    def tags(self) -> List[str]:
        ...

    @property
    @pulumi.getter
    def taints(self) -> List['outputs.GetClusterNodeConfigTaintResult']:
        ...

    @property
    @pulumi.getter(name="workloadMetadataConfigs")
    def workload_metadata_configs(self) -> List['outputs.GetClusterNodeConfigWorkloadMetadataConfigResult']:
        ...


@pulumi.output_type
class GetClusterNodeConfigGuestAcceleratorResult(dict):
    @property
    @pulumi.getter
    def count(self) -> float:
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodeConfigSandboxConfigResult(dict):
    @property
    @pulumi.getter(name="sandboxType")
    def sandbox_type(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodeConfigShieldedInstanceConfigResult(dict):
    @property
    @pulumi.getter(name="enableIntegrityMonitoring")
    def enable_integrity_monitoring(self) -> bool:
        ...

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> bool:
        ...


@pulumi.output_type
class GetClusterNodeConfigTaintResult(dict):
    @property
    @pulumi.getter
    def effect(self) -> str:
        ...

    @property
    @pulumi.getter
    def key(self) -> str:
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodeConfigWorkloadMetadataConfigResult(dict):
    @property
    @pulumi.getter(name="nodeMetadata")
    def node_metadata(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodePoolResult(dict):
    @property
    @pulumi.getter
    def autoscalings(self) -> List['outputs.GetClusterNodePoolAutoscalingResult']:
        ...

    @property
    @pulumi.getter(name="initialNodeCount")
    def initial_node_count(self) -> float:
        ...

    @property
    @pulumi.getter(name="instanceGroupUrls")
    def instance_group_urls(self) -> List[str]:
        ...

    @property
    @pulumi.getter
    def managements(self) -> List['outputs.GetClusterNodePoolManagementResult']:
        ...

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> float:
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the cluster.
        """
        ...

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> str:
        ...

    @property
    @pulumi.getter(name="nodeConfigs")
    def node_configs(self) -> List['outputs.GetClusterNodePoolNodeConfigResult']:
        ...

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> float:
        ...

    @property
    @pulumi.getter(name="nodeLocations")
    def node_locations(self) -> List[str]:
        ...

    @property
    @pulumi.getter(name="upgradeSettings")
    def upgrade_settings(self) -> List['outputs.GetClusterNodePoolUpgradeSettingResult']:
        ...

    @property
    @pulumi.getter
    def version(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodePoolAutoscalingResult(dict):
    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> float:
        ...

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> float:
        ...


@pulumi.output_type
class GetClusterNodePoolManagementResult(dict):
    @property
    @pulumi.getter(name="autoRepair")
    def auto_repair(self) -> bool:
        ...

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> bool:
        ...


@pulumi.output_type
class GetClusterNodePoolNodeConfigResult(dict):
    @property
    @pulumi.getter(name="bootDiskKmsKey")
    def boot_disk_kms_key(self) -> str:
        ...

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> float:
        ...

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        ...

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> List['outputs.GetClusterNodePoolNodeConfigGuestAcceleratorResult']:
        ...

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        ...

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        ...

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> float:
        ...

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        ...

    @property
    @pulumi.getter(name="minCpuPlatform")
    def min_cpu_platform(self) -> str:
        ...

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> List[str]:
        ...

    @property
    @pulumi.getter
    def preemptible(self) -> bool:
        ...

    @property
    @pulumi.getter(name="sandboxConfigs")
    def sandbox_configs(self) -> List['outputs.GetClusterNodePoolNodeConfigSandboxConfigResult']:
        ...

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        ...

    @property
    @pulumi.getter(name="shieldedInstanceConfigs")
    def shielded_instance_configs(self) -> List['outputs.GetClusterNodePoolNodeConfigShieldedInstanceConfigResult']:
        ...

    @property
    @pulumi.getter
    def tags(self) -> List[str]:
        ...

    @property
    @pulumi.getter
    def taints(self) -> List['outputs.GetClusterNodePoolNodeConfigTaintResult']:
        ...

    @property
    @pulumi.getter(name="workloadMetadataConfigs")
    def workload_metadata_configs(self) -> List['outputs.GetClusterNodePoolNodeConfigWorkloadMetadataConfigResult']:
        ...


@pulumi.output_type
class GetClusterNodePoolNodeConfigGuestAcceleratorResult(dict):
    @property
    @pulumi.getter
    def count(self) -> float:
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodePoolNodeConfigSandboxConfigResult(dict):
    @property
    @pulumi.getter(name="sandboxType")
    def sandbox_type(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodePoolNodeConfigShieldedInstanceConfigResult(dict):
    @property
    @pulumi.getter(name="enableIntegrityMonitoring")
    def enable_integrity_monitoring(self) -> bool:
        ...

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> bool:
        ...


@pulumi.output_type
class GetClusterNodePoolNodeConfigTaintResult(dict):
    @property
    @pulumi.getter
    def effect(self) -> str:
        ...

    @property
    @pulumi.getter
    def key(self) -> str:
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodePoolNodeConfigWorkloadMetadataConfigResult(dict):
    @property
    @pulumi.getter(name="nodeMetadata")
    def node_metadata(self) -> str:
        ...


@pulumi.output_type
class GetClusterNodePoolUpgradeSettingResult(dict):
    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> float:
        ...

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> float:
        ...


@pulumi.output_type
class GetClusterPodSecurityPolicyConfigResult(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterPrivateClusterConfigResult(dict):
    @property
    @pulumi.getter(name="enablePrivateEndpoint")
    def enable_private_endpoint(self) -> bool:
        ...

    @property
    @pulumi.getter(name="enablePrivateNodes")
    def enable_private_nodes(self) -> bool:
        ...

    @property
    @pulumi.getter(name="masterGlobalAccessConfigs")
    def master_global_access_configs(self) -> List['outputs.GetClusterPrivateClusterConfigMasterGlobalAccessConfigResult']:
        ...

    @property
    @pulumi.getter(name="masterIpv4CidrBlock")
    def master_ipv4_cidr_block(self) -> str:
        ...

    @property
    @pulumi.getter(name="peeringName")
    def peering_name(self) -> str:
        ...

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> str:
        ...

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> str:
        ...


@pulumi.output_type
class GetClusterPrivateClusterConfigMasterGlobalAccessConfigResult(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterReleaseChannelResult(dict):
    @property
    @pulumi.getter
    def channel(self) -> str:
        ...


@pulumi.output_type
class GetClusterResourceUsageExportConfigResult(dict):
    @property
    @pulumi.getter(name="bigqueryDestinations")
    def bigquery_destinations(self) -> List['outputs.GetClusterResourceUsageExportConfigBigqueryDestinationResult']:
        ...

    @property
    @pulumi.getter(name="enableNetworkEgressMetering")
    def enable_network_egress_metering(self) -> bool:
        ...

    @property
    @pulumi.getter(name="enableResourceConsumptionMetering")
    def enable_resource_consumption_metering(self) -> bool:
        ...


@pulumi.output_type
class GetClusterResourceUsageExportConfigBigqueryDestinationResult(dict):
    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        ...


@pulumi.output_type
class GetClusterVerticalPodAutoscalingResult(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        ...


@pulumi.output_type
class GetClusterWorkloadIdentityConfigResult(dict):
    @property
    @pulumi.getter(name="identityNamespace")
    def identity_namespace(self) -> str:
        ...


