# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AlertPolicyConditionArgs',
    'AlertPolicyConditionConditionAbsentArgs',
    'AlertPolicyConditionConditionAbsentAggregationArgs',
    'AlertPolicyConditionConditionAbsentTriggerArgs',
    'AlertPolicyConditionConditionThresholdArgs',
    'AlertPolicyConditionConditionThresholdAggregationArgs',
    'AlertPolicyConditionConditionThresholdDenominatorAggregationArgs',
    'AlertPolicyConditionConditionThresholdTriggerArgs',
    'AlertPolicyCreationRecordArgs',
    'AlertPolicyDocumentationArgs',
    'CustomServiceTelemetryArgs',
    'MetricDescriptorLabelArgs',
    'MetricDescriptorMetadataArgs',
    'NotificationChannelSensitiveLabelsArgs',
    'SloBasicSliArgs',
    'SloBasicSliLatencyArgs',
    'SloRequestBasedSliArgs',
    'SloRequestBasedSliDistributionCutArgs',
    'SloRequestBasedSliDistributionCutRangeArgs',
    'SloRequestBasedSliGoodTotalRatioArgs',
    'SloWindowsBasedSliArgs',
    'SloWindowsBasedSliGoodTotalRatioThresholdArgs',
    'SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceArgs',
    'SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyArgs',
    'SloWindowsBasedSliGoodTotalRatioThresholdPerformanceArgs',
    'SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutArgs',
    'SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeArgs',
    'SloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioArgs',
    'SloWindowsBasedSliMetricMeanInRangeArgs',
    'SloWindowsBasedSliMetricMeanInRangeRangeArgs',
    'SloWindowsBasedSliMetricSumInRangeArgs',
    'SloWindowsBasedSliMetricSumInRangeRangeArgs',
    'UptimeCheckConfigContentMatcherArgs',
    'UptimeCheckConfigHttpCheckArgs',
    'UptimeCheckConfigHttpCheckAuthInfoArgs',
    'UptimeCheckConfigMonitoredResourceArgs',
    'UptimeCheckConfigResourceGroupArgs',
    'UptimeCheckConfigTcpCheckArgs',
]

@pulumi.input_type
class AlertPolicyConditionArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 condition_absent: Optional[pulumi.Input['AlertPolicyConditionConditionAbsentArgs']] = None,
                 condition_threshold: Optional[pulumi.Input['AlertPolicyConditionConditionThresholdArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: A short name or phrase used to identify the
               condition in dashboards, notifications, and
               incidents. To avoid confusion, don't use the same
               display name for multiple conditions in the same
               policy.
        :param pulumi.Input['AlertPolicyConditionConditionAbsentArgs'] condition_absent: A condition that checks that a time series
               continues to receive new data points.
               Structure is documented below.
        :param pulumi.Input['AlertPolicyConditionConditionThresholdArgs'] condition_threshold: A condition that compares a time series against a
               threshold.
               Structure is documented below.
        :param pulumi.Input[str] name: -
               The unique resource name for this condition.
               Its syntax is:
               projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
               [CONDITION_ID] is assigned by Stackdriver Monitoring when
               the condition is created as part of a new or updated alerting
               policy.
        """
        pulumi.set(__self__, "displayName", display_name)
        pulumi.set(__self__, "conditionAbsent", condition_absent)
        pulumi.set(__self__, "conditionThreshold", condition_threshold)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        A short name or phrase used to identify the
        condition in dashboards, notifications, and
        incidents. To avoid confusion, don't use the same
        display name for multiple conditions in the same
        policy.
        """
        ...

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="conditionAbsent")
    def condition_absent(self) -> Optional[pulumi.Input['AlertPolicyConditionConditionAbsentArgs']]:
        """
        A condition that checks that a time series
        continues to receive new data points.
        Structure is documented below.
        """
        ...

    @condition_absent.setter
    def condition_absent(self, value: Optional[pulumi.Input['AlertPolicyConditionConditionAbsentArgs']]):
        ...

    @property
    @pulumi.getter(name="conditionThreshold")
    def condition_threshold(self) -> Optional[pulumi.Input['AlertPolicyConditionConditionThresholdArgs']]:
        """
        A condition that compares a time series against a
        threshold.
        Structure is documented below.
        """
        ...

    @condition_threshold.setter
    def condition_threshold(self, value: Optional[pulumi.Input['AlertPolicyConditionConditionThresholdArgs']]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        -
        The unique resource name for this condition.
        Its syntax is:
        projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
        [CONDITION_ID] is assigned by Stackdriver Monitoring when
        the condition is created as part of a new or updated alerting
        policy.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class AlertPolicyConditionConditionAbsentArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 aggregations: Optional[pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionAbsentAggregationArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 trigger: Optional[pulumi.Input['AlertPolicyConditionConditionAbsentTriggerArgs']] = None):
        """
        :param pulumi.Input[str] duration: The amount of time that a time series must
               violate the threshold to be considered
               failing. Currently, only values that are a
               multiple of a minute--e.g., 0, 60, 120, or
               300 seconds--are supported. If an invalid
               value is given, an error will be returned.
               When choosing a duration, it is useful to
               keep in mind the frequency of the underlying
               time series data (which may also be affected
               by any alignments specified in the
               aggregations field); a good duration is long
               enough so that a single outlier does not
               generate spurious alerts, but short enough
               that unhealthy states are detected and
               alerted on quickly.
        :param pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionAbsentAggregationArgs']]] aggregations: Specifies the alignment of data points in
               individual time series as well as how to
               combine the retrieved time series together
               (such as when aggregating multiple streams
               on each resource to a single stream for each
               resource or when aggregating streams across
               all members of a group of resources).
               Multiple aggregations are applied in the
               order specified.This field is similar to the
               one in the MetricService.ListTimeSeries
               request. It is advisable to use the
               ListTimeSeries method when debugging this
               field.
               Structure is documented below.
        :param pulumi.Input[str] filter: A filter that identifies which time series
               should be compared with the threshold.The
               filter is similar to the one that is
               specified in the
               MetricService.ListTimeSeries request (that
               call is useful to verify the time series
               that will be retrieved / processed) and must
               specify the metric type and optionally may
               contain restrictions on resource type,
               resource labels, and metric labels. This
               field may not exceed 2048 Unicode characters
               in length.
        :param pulumi.Input['AlertPolicyConditionConditionAbsentTriggerArgs'] trigger: The number/percent of time series for which
               the comparison must hold in order for the
               condition to trigger. If unspecified, then
               the condition will trigger if the comparison
               is true for any of the time series that have
               been identified by filter and aggregations,
               or by the ratio, if denominator_filter and
               denominator_aggregations are specified.
               Structure is documented below.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "aggregations", aggregations)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        The amount of time that a time series must
        violate the threshold to be considered
        failing. Currently, only values that are a
        multiple of a minute--e.g., 0, 60, 120, or
        300 seconds--are supported. If an invalid
        value is given, an error will be returned.
        When choosing a duration, it is useful to
        keep in mind the frequency of the underlying
        time series data (which may also be affected
        by any alignments specified in the
        aggregations field); a good duration is long
        enough so that a single outlier does not
        generate spurious alerts, but short enough
        that unhealthy states are detected and
        alerted on quickly.
        """
        ...

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def aggregations(self) -> Optional[pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionAbsentAggregationArgs']]]]:
        """
        Specifies the alignment of data points in
        individual time series as well as how to
        combine the retrieved time series together
        (such as when aggregating multiple streams
        on each resource to a single stream for each
        resource or when aggregating streams across
        all members of a group of resources).
        Multiple aggregations are applied in the
        order specified.This field is similar to the
        one in the MetricService.ListTimeSeries
        request. It is advisable to use the
        ListTimeSeries method when debugging this
        field.
        Structure is documented below.
        """
        ...

    @aggregations.setter
    def aggregations(self, value: Optional[pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionAbsentAggregationArgs']]]]):
        ...

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter that identifies which time series
        should be compared with the threshold.The
        filter is similar to the one that is
        specified in the
        MetricService.ListTimeSeries request (that
        call is useful to verify the time series
        that will be retrieved / processed) and must
        specify the metric type and optionally may
        contain restrictions on resource type,
        resource labels, and metric labels. This
        field may not exceed 2048 Unicode characters
        in length.
        """
        ...

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input['AlertPolicyConditionConditionAbsentTriggerArgs']]:
        """
        The number/percent of time series for which
        the comparison must hold in order for the
        condition to trigger. If unspecified, then
        the condition will trigger if the comparison
        is true for any of the time series that have
        been identified by filter and aggregations,
        or by the ratio, if denominator_filter and
        denominator_aggregations are specified.
        Structure is documented below.
        """
        ...

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input['AlertPolicyConditionConditionAbsentTriggerArgs']]):
        ...


@pulumi.input_type
class AlertPolicyConditionConditionAbsentAggregationArgs:
    def __init__(__self__, *,
                 alignment_period: Optional[pulumi.Input[str]] = None,
                 cross_series_reducer: Optional[pulumi.Input[str]] = None,
                 group_by_fields: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 per_series_aligner: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alignment_period: The alignment period for per-time
               series alignment. If present,
               alignmentPeriod must be at least
               60 seconds. After per-time series
               alignment, each time series will
               contain data points only on the
               period boundaries. If
               perSeriesAligner is not specified
               or equals ALIGN_NONE, then this
               field is ignored. If
               perSeriesAligner is specified and
               does not equal ALIGN_NONE, then
               this field must be defined;
               otherwise an error is returned.
        :param pulumi.Input[str] cross_series_reducer: The approach to be used to combine
               time series. Not all reducer
               functions may be applied to all
               time series, depending on the
               metric type and the value type of
               the original time series.
               Reduction may change the metric
               type of value type of the time
               series.Time series data must be
               aligned in order to perform cross-
               time series reduction. If
               crossSeriesReducer is specified,
               then perSeriesAligner must be
               specified and not equal ALIGN_NONE
               and alignmentPeriod must be
               specified; otherwise, an error is
               returned.
               Possible values are `REDUCE_NONE`, `REDUCE_MEAN`, `REDUCE_MIN`, `REDUCE_MAX`, `REDUCE_SUM`, `REDUCE_STDDEV`, `REDUCE_COUNT`, `REDUCE_COUNT_TRUE`, `REDUCE_COUNT_FALSE`, `REDUCE_FRACTION_TRUE`, `REDUCE_PERCENTILE_99`, `REDUCE_PERCENTILE_95`, `REDUCE_PERCENTILE_50`, and `REDUCE_PERCENTILE_05`.
        :param pulumi.Input[List[pulumi.Input[str]]] group_by_fields: The set of fields to preserve when
               crossSeriesReducer is specified.
               The groupByFields determine how
               the time series are partitioned
               into subsets prior to applying the
               aggregation function. Each subset
               contains time series that have the
               same value for each of the
               grouping fields. Each individual
               time series is a member of exactly
               one subset. The crossSeriesReducer
               is applied to each subset of time
               series. It is not possible to
               reduce across different resource
               types, so this field implicitly
               contains resource.type. Fields not
               specified in groupByFields are
               aggregated away. If groupByFields
               is not specified and all the time
               series have the same resource
               type, then the time series are
               aggregated into a single output
               time series. If crossSeriesReducer
               is not defined, this field is
               ignored.
        :param pulumi.Input[str] per_series_aligner: The approach to be used to align
               individual time series. Not all
               alignment functions may be applied
               to all time series, depending on
               the metric type and value type of
               the original time series.
               Alignment may change the metric
               type or the value type of the time
               series.Time series data must be
               aligned in order to perform cross-
               time series reduction. If
               crossSeriesReducer is specified,
               then perSeriesAligner must be
               specified and not equal ALIGN_NONE
               and alignmentPeriod must be
               specified; otherwise, an error is
               returned.
               Possible values are `ALIGN_NONE`, `ALIGN_DELTA`, `ALIGN_RATE`, `ALIGN_INTERPOLATE`, `ALIGN_NEXT_OLDER`, `ALIGN_MIN`, `ALIGN_MAX`, `ALIGN_MEAN`, `ALIGN_COUNT`, `ALIGN_SUM`, `ALIGN_STDDEV`, `ALIGN_COUNT_TRUE`, `ALIGN_COUNT_FALSE`, `ALIGN_FRACTION_TRUE`, `ALIGN_PERCENTILE_99`, `ALIGN_PERCENTILE_95`, `ALIGN_PERCENTILE_50`, `ALIGN_PERCENTILE_05`, and `ALIGN_PERCENT_CHANGE`.
        """
        pulumi.set(__self__, "alignmentPeriod", alignment_period)
        pulumi.set(__self__, "crossSeriesReducer", cross_series_reducer)
        pulumi.set(__self__, "groupByFields", group_by_fields)
        pulumi.set(__self__, "perSeriesAligner", per_series_aligner)

    @property
    @pulumi.getter(name="alignmentPeriod")
    def alignment_period(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment period for per-time
        series alignment. If present,
        alignmentPeriod must be at least
        60 seconds. After per-time series
        alignment, each time series will
        contain data points only on the
        period boundaries. If
        perSeriesAligner is not specified
        or equals ALIGN_NONE, then this
        field is ignored. If
        perSeriesAligner is specified and
        does not equal ALIGN_NONE, then
        this field must be defined;
        otherwise an error is returned.
        """
        ...

    @alignment_period.setter
    def alignment_period(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="crossSeriesReducer")
    def cross_series_reducer(self) -> Optional[pulumi.Input[str]]:
        """
        The approach to be used to combine
        time series. Not all reducer
        functions may be applied to all
        time series, depending on the
        metric type and the value type of
        the original time series.
        Reduction may change the metric
        type of value type of the time
        series.Time series data must be
        aligned in order to perform cross-
        time series reduction. If
        crossSeriesReducer is specified,
        then perSeriesAligner must be
        specified and not equal ALIGN_NONE
        and alignmentPeriod must be
        specified; otherwise, an error is
        returned.
        Possible values are `REDUCE_NONE`, `REDUCE_MEAN`, `REDUCE_MIN`, `REDUCE_MAX`, `REDUCE_SUM`, `REDUCE_STDDEV`, `REDUCE_COUNT`, `REDUCE_COUNT_TRUE`, `REDUCE_COUNT_FALSE`, `REDUCE_FRACTION_TRUE`, `REDUCE_PERCENTILE_99`, `REDUCE_PERCENTILE_95`, `REDUCE_PERCENTILE_50`, and `REDUCE_PERCENTILE_05`.
        """
        ...

    @cross_series_reducer.setter
    def cross_series_reducer(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="groupByFields")
    def group_by_fields(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The set of fields to preserve when
        crossSeriesReducer is specified.
        The groupByFields determine how
        the time series are partitioned
        into subsets prior to applying the
        aggregation function. Each subset
        contains time series that have the
        same value for each of the
        grouping fields. Each individual
        time series is a member of exactly
        one subset. The crossSeriesReducer
        is applied to each subset of time
        series. It is not possible to
        reduce across different resource
        types, so this field implicitly
        contains resource.type. Fields not
        specified in groupByFields are
        aggregated away. If groupByFields
        is not specified and all the time
        series have the same resource
        type, then the time series are
        aggregated into a single output
        time series. If crossSeriesReducer
        is not defined, this field is
        ignored.
        """
        ...

    @group_by_fields.setter
    def group_by_fields(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="perSeriesAligner")
    def per_series_aligner(self) -> Optional[pulumi.Input[str]]:
        """
        The approach to be used to align
        individual time series. Not all
        alignment functions may be applied
        to all time series, depending on
        the metric type and value type of
        the original time series.
        Alignment may change the metric
        type or the value type of the time
        series.Time series data must be
        aligned in order to perform cross-
        time series reduction. If
        crossSeriesReducer is specified,
        then perSeriesAligner must be
        specified and not equal ALIGN_NONE
        and alignmentPeriod must be
        specified; otherwise, an error is
        returned.
        Possible values are `ALIGN_NONE`, `ALIGN_DELTA`, `ALIGN_RATE`, `ALIGN_INTERPOLATE`, `ALIGN_NEXT_OLDER`, `ALIGN_MIN`, `ALIGN_MAX`, `ALIGN_MEAN`, `ALIGN_COUNT`, `ALIGN_SUM`, `ALIGN_STDDEV`, `ALIGN_COUNT_TRUE`, `ALIGN_COUNT_FALSE`, `ALIGN_FRACTION_TRUE`, `ALIGN_PERCENTILE_99`, `ALIGN_PERCENTILE_95`, `ALIGN_PERCENTILE_50`, `ALIGN_PERCENTILE_05`, and `ALIGN_PERCENT_CHANGE`.
        """
        ...

    @per_series_aligner.setter
    def per_series_aligner(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class AlertPolicyConditionConditionAbsentTriggerArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None,
                 percent: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] count: The absolute number of time series
               that must fail the predicate for the
               condition to be triggered.
        :param pulumi.Input[float] percent: The percentage of time series that
               must fail the predicate for the
               condition to be triggered.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        """
        The absolute number of time series
        that must fail the predicate for the
        condition to be triggered.
        """
        ...

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of time series that
        must fail the predicate for the
        condition to be triggered.
        """
        ...

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class AlertPolicyConditionConditionThresholdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 duration: pulumi.Input[str],
                 aggregations: Optional[pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionThresholdAggregationArgs']]]] = None,
                 denominator_aggregations: Optional[pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionThresholdDenominatorAggregationArgs']]]] = None,
                 denominator_filter: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 threshold_value: Optional[pulumi.Input[float]] = None,
                 trigger: Optional[pulumi.Input['AlertPolicyConditionConditionThresholdTriggerArgs']] = None):
        """
        :param pulumi.Input[str] comparison: The comparison to apply between the time
               series (indicated by filter and aggregation)
               and the threshold (indicated by
               threshold_value). The comparison is applied
               on each time series, with the time series on
               the left-hand side and the threshold on the
               right-hand side. Only COMPARISON_LT and
               COMPARISON_GT are supported currently.
               Possible values are `COMPARISON_GT`, `COMPARISON_GE`, `COMPARISON_LT`, `COMPARISON_LE`, `COMPARISON_EQ`, and `COMPARISON_NE`.
        :param pulumi.Input[str] duration: The amount of time that a time series must
               violate the threshold to be considered
               failing. Currently, only values that are a
               multiple of a minute--e.g., 0, 60, 120, or
               300 seconds--are supported. If an invalid
               value is given, an error will be returned.
               When choosing a duration, it is useful to
               keep in mind the frequency of the underlying
               time series data (which may also be affected
               by any alignments specified in the
               aggregations field); a good duration is long
               enough so that a single outlier does not
               generate spurious alerts, but short enough
               that unhealthy states are detected and
               alerted on quickly.
        :param pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionThresholdAggregationArgs']]] aggregations: Specifies the alignment of data points in
               individual time series as well as how to
               combine the retrieved time series together
               (such as when aggregating multiple streams
               on each resource to a single stream for each
               resource or when aggregating streams across
               all members of a group of resources).
               Multiple aggregations are applied in the
               order specified.This field is similar to the
               one in the MetricService.ListTimeSeries
               request. It is advisable to use the
               ListTimeSeries method when debugging this
               field.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionThresholdDenominatorAggregationArgs']]] denominator_aggregations: Specifies the alignment of data points in
               individual time series selected by
               denominatorFilter as well as how to combine
               the retrieved time series together (such as
               when aggregating multiple streams on each
               resource to a single stream for each
               resource or when aggregating streams across
               all members of a group of resources).When
               computing ratios, the aggregations and
               denominator_aggregations fields must use the
               same alignment period and produce time
               series that have the same periodicity and
               labels.This field is similar to the one in
               the MetricService.ListTimeSeries request. It
               is advisable to use the ListTimeSeries
               method when debugging this field.
               Structure is documented below.
        :param pulumi.Input[str] denominator_filter: A filter that identifies a time series that
               should be used as the denominator of a ratio
               that will be compared with the threshold. If
               a denominator_filter is specified, the time
               series specified by the filter field will be
               used as the numerator.The filter is similar
               to the one that is specified in the
               MetricService.ListTimeSeries request (that
               call is useful to verify the time series
               that will be retrieved / processed) and must
               specify the metric type and optionally may
               contain restrictions on resource type,
               resource labels, and metric labels. This
               field may not exceed 2048 Unicode characters
               in length.
        :param pulumi.Input[str] filter: A filter that identifies which time series
               should be compared with the threshold.The
               filter is similar to the one that is
               specified in the
               MetricService.ListTimeSeries request (that
               call is useful to verify the time series
               that will be retrieved / processed) and must
               specify the metric type and optionally may
               contain restrictions on resource type,
               resource labels, and metric labels. This
               field may not exceed 2048 Unicode characters
               in length.
        :param pulumi.Input[float] threshold_value: A value against which to compare the time
               series.
        :param pulumi.Input['AlertPolicyConditionConditionThresholdTriggerArgs'] trigger: The number/percent of time series for which
               the comparison must hold in order for the
               condition to trigger. If unspecified, then
               the condition will trigger if the comparison
               is true for any of the time series that have
               been identified by filter and aggregations,
               or by the ratio, if denominator_filter and
               denominator_aggregations are specified.
               Structure is documented below.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "aggregations", aggregations)
        pulumi.set(__self__, "denominatorAggregations", denominator_aggregations)
        pulumi.set(__self__, "denominatorFilter", denominator_filter)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "thresholdValue", threshold_value)
        pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The comparison to apply between the time
        series (indicated by filter and aggregation)
        and the threshold (indicated by
        threshold_value). The comparison is applied
        on each time series, with the time series on
        the left-hand side and the threshold on the
        right-hand side. Only COMPARISON_LT and
        COMPARISON_GT are supported currently.
        Possible values are `COMPARISON_GT`, `COMPARISON_GE`, `COMPARISON_LT`, `COMPARISON_LE`, `COMPARISON_EQ`, and `COMPARISON_NE`.
        """
        ...

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        The amount of time that a time series must
        violate the threshold to be considered
        failing. Currently, only values that are a
        multiple of a minute--e.g., 0, 60, 120, or
        300 seconds--are supported. If an invalid
        value is given, an error will be returned.
        When choosing a duration, it is useful to
        keep in mind the frequency of the underlying
        time series data (which may also be affected
        by any alignments specified in the
        aggregations field); a good duration is long
        enough so that a single outlier does not
        generate spurious alerts, but short enough
        that unhealthy states are detected and
        alerted on quickly.
        """
        ...

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def aggregations(self) -> Optional[pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionThresholdAggregationArgs']]]]:
        """
        Specifies the alignment of data points in
        individual time series as well as how to
        combine the retrieved time series together
        (such as when aggregating multiple streams
        on each resource to a single stream for each
        resource or when aggregating streams across
        all members of a group of resources).
        Multiple aggregations are applied in the
        order specified.This field is similar to the
        one in the MetricService.ListTimeSeries
        request. It is advisable to use the
        ListTimeSeries method when debugging this
        field.
        Structure is documented below.
        """
        ...

    @aggregations.setter
    def aggregations(self, value: Optional[pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionThresholdAggregationArgs']]]]):
        ...

    @property
    @pulumi.getter(name="denominatorAggregations")
    def denominator_aggregations(self) -> Optional[pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionThresholdDenominatorAggregationArgs']]]]:
        """
        Specifies the alignment of data points in
        individual time series selected by
        denominatorFilter as well as how to combine
        the retrieved time series together (such as
        when aggregating multiple streams on each
        resource to a single stream for each
        resource or when aggregating streams across
        all members of a group of resources).When
        computing ratios, the aggregations and
        denominator_aggregations fields must use the
        same alignment period and produce time
        series that have the same periodicity and
        labels.This field is similar to the one in
        the MetricService.ListTimeSeries request. It
        is advisable to use the ListTimeSeries
        method when debugging this field.
        Structure is documented below.
        """
        ...

    @denominator_aggregations.setter
    def denominator_aggregations(self, value: Optional[pulumi.Input[List[pulumi.Input['AlertPolicyConditionConditionThresholdDenominatorAggregationArgs']]]]):
        ...

    @property
    @pulumi.getter(name="denominatorFilter")
    def denominator_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter that identifies a time series that
        should be used as the denominator of a ratio
        that will be compared with the threshold. If
        a denominator_filter is specified, the time
        series specified by the filter field will be
        used as the numerator.The filter is similar
        to the one that is specified in the
        MetricService.ListTimeSeries request (that
        call is useful to verify the time series
        that will be retrieved / processed) and must
        specify the metric type and optionally may
        contain restrictions on resource type,
        resource labels, and metric labels. This
        field may not exceed 2048 Unicode characters
        in length.
        """
        ...

    @denominator_filter.setter
    def denominator_filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter that identifies which time series
        should be compared with the threshold.The
        filter is similar to the one that is
        specified in the
        MetricService.ListTimeSeries request (that
        call is useful to verify the time series
        that will be retrieved / processed) and must
        specify the metric type and optionally may
        contain restrictions on resource type,
        resource labels, and metric labels. This
        field may not exceed 2048 Unicode characters
        in length.
        """
        ...

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[pulumi.Input[float]]:
        """
        A value against which to compare the time
        series.
        """
        ...

    @threshold_value.setter
    def threshold_value(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input['AlertPolicyConditionConditionThresholdTriggerArgs']]:
        """
        The number/percent of time series for which
        the comparison must hold in order for the
        condition to trigger. If unspecified, then
        the condition will trigger if the comparison
        is true for any of the time series that have
        been identified by filter and aggregations,
        or by the ratio, if denominator_filter and
        denominator_aggregations are specified.
        Structure is documented below.
        """
        ...

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input['AlertPolicyConditionConditionThresholdTriggerArgs']]):
        ...


@pulumi.input_type
class AlertPolicyConditionConditionThresholdAggregationArgs:
    def __init__(__self__, *,
                 alignment_period: Optional[pulumi.Input[str]] = None,
                 cross_series_reducer: Optional[pulumi.Input[str]] = None,
                 group_by_fields: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 per_series_aligner: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alignment_period: The alignment period for per-time
               series alignment. If present,
               alignmentPeriod must be at least
               60 seconds. After per-time series
               alignment, each time series will
               contain data points only on the
               period boundaries. If
               perSeriesAligner is not specified
               or equals ALIGN_NONE, then this
               field is ignored. If
               perSeriesAligner is specified and
               does not equal ALIGN_NONE, then
               this field must be defined;
               otherwise an error is returned.
        :param pulumi.Input[str] cross_series_reducer: The approach to be used to combine
               time series. Not all reducer
               functions may be applied to all
               time series, depending on the
               metric type and the value type of
               the original time series.
               Reduction may change the metric
               type of value type of the time
               series.Time series data must be
               aligned in order to perform cross-
               time series reduction. If
               crossSeriesReducer is specified,
               then perSeriesAligner must be
               specified and not equal ALIGN_NONE
               and alignmentPeriod must be
               specified; otherwise, an error is
               returned.
               Possible values are `REDUCE_NONE`, `REDUCE_MEAN`, `REDUCE_MIN`, `REDUCE_MAX`, `REDUCE_SUM`, `REDUCE_STDDEV`, `REDUCE_COUNT`, `REDUCE_COUNT_TRUE`, `REDUCE_COUNT_FALSE`, `REDUCE_FRACTION_TRUE`, `REDUCE_PERCENTILE_99`, `REDUCE_PERCENTILE_95`, `REDUCE_PERCENTILE_50`, and `REDUCE_PERCENTILE_05`.
        :param pulumi.Input[List[pulumi.Input[str]]] group_by_fields: The set of fields to preserve when
               crossSeriesReducer is specified.
               The groupByFields determine how
               the time series are partitioned
               into subsets prior to applying the
               aggregation function. Each subset
               contains time series that have the
               same value for each of the
               grouping fields. Each individual
               time series is a member of exactly
               one subset. The crossSeriesReducer
               is applied to each subset of time
               series. It is not possible to
               reduce across different resource
               types, so this field implicitly
               contains resource.type. Fields not
               specified in groupByFields are
               aggregated away. If groupByFields
               is not specified and all the time
               series have the same resource
               type, then the time series are
               aggregated into a single output
               time series. If crossSeriesReducer
               is not defined, this field is
               ignored.
        :param pulumi.Input[str] per_series_aligner: The approach to be used to align
               individual time series. Not all
               alignment functions may be applied
               to all time series, depending on
               the metric type and value type of
               the original time series.
               Alignment may change the metric
               type or the value type of the time
               series.Time series data must be
               aligned in order to perform cross-
               time series reduction. If
               crossSeriesReducer is specified,
               then perSeriesAligner must be
               specified and not equal ALIGN_NONE
               and alignmentPeriod must be
               specified; otherwise, an error is
               returned.
               Possible values are `ALIGN_NONE`, `ALIGN_DELTA`, `ALIGN_RATE`, `ALIGN_INTERPOLATE`, `ALIGN_NEXT_OLDER`, `ALIGN_MIN`, `ALIGN_MAX`, `ALIGN_MEAN`, `ALIGN_COUNT`, `ALIGN_SUM`, `ALIGN_STDDEV`, `ALIGN_COUNT_TRUE`, `ALIGN_COUNT_FALSE`, `ALIGN_FRACTION_TRUE`, `ALIGN_PERCENTILE_99`, `ALIGN_PERCENTILE_95`, `ALIGN_PERCENTILE_50`, `ALIGN_PERCENTILE_05`, and `ALIGN_PERCENT_CHANGE`.
        """
        pulumi.set(__self__, "alignmentPeriod", alignment_period)
        pulumi.set(__self__, "crossSeriesReducer", cross_series_reducer)
        pulumi.set(__self__, "groupByFields", group_by_fields)
        pulumi.set(__self__, "perSeriesAligner", per_series_aligner)

    @property
    @pulumi.getter(name="alignmentPeriod")
    def alignment_period(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment period for per-time
        series alignment. If present,
        alignmentPeriod must be at least
        60 seconds. After per-time series
        alignment, each time series will
        contain data points only on the
        period boundaries. If
        perSeriesAligner is not specified
        or equals ALIGN_NONE, then this
        field is ignored. If
        perSeriesAligner is specified and
        does not equal ALIGN_NONE, then
        this field must be defined;
        otherwise an error is returned.
        """
        ...

    @alignment_period.setter
    def alignment_period(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="crossSeriesReducer")
    def cross_series_reducer(self) -> Optional[pulumi.Input[str]]:
        """
        The approach to be used to combine
        time series. Not all reducer
        functions may be applied to all
        time series, depending on the
        metric type and the value type of
        the original time series.
        Reduction may change the metric
        type of value type of the time
        series.Time series data must be
        aligned in order to perform cross-
        time series reduction. If
        crossSeriesReducer is specified,
        then perSeriesAligner must be
        specified and not equal ALIGN_NONE
        and alignmentPeriod must be
        specified; otherwise, an error is
        returned.
        Possible values are `REDUCE_NONE`, `REDUCE_MEAN`, `REDUCE_MIN`, `REDUCE_MAX`, `REDUCE_SUM`, `REDUCE_STDDEV`, `REDUCE_COUNT`, `REDUCE_COUNT_TRUE`, `REDUCE_COUNT_FALSE`, `REDUCE_FRACTION_TRUE`, `REDUCE_PERCENTILE_99`, `REDUCE_PERCENTILE_95`, `REDUCE_PERCENTILE_50`, and `REDUCE_PERCENTILE_05`.
        """
        ...

    @cross_series_reducer.setter
    def cross_series_reducer(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="groupByFields")
    def group_by_fields(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The set of fields to preserve when
        crossSeriesReducer is specified.
        The groupByFields determine how
        the time series are partitioned
        into subsets prior to applying the
        aggregation function. Each subset
        contains time series that have the
        same value for each of the
        grouping fields. Each individual
        time series is a member of exactly
        one subset. The crossSeriesReducer
        is applied to each subset of time
        series. It is not possible to
        reduce across different resource
        types, so this field implicitly
        contains resource.type. Fields not
        specified in groupByFields are
        aggregated away. If groupByFields
        is not specified and all the time
        series have the same resource
        type, then the time series are
        aggregated into a single output
        time series. If crossSeriesReducer
        is not defined, this field is
        ignored.
        """
        ...

    @group_by_fields.setter
    def group_by_fields(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="perSeriesAligner")
    def per_series_aligner(self) -> Optional[pulumi.Input[str]]:
        """
        The approach to be used to align
        individual time series. Not all
        alignment functions may be applied
        to all time series, depending on
        the metric type and value type of
        the original time series.
        Alignment may change the metric
        type or the value type of the time
        series.Time series data must be
        aligned in order to perform cross-
        time series reduction. If
        crossSeriesReducer is specified,
        then perSeriesAligner must be
        specified and not equal ALIGN_NONE
        and alignmentPeriod must be
        specified; otherwise, an error is
        returned.
        Possible values are `ALIGN_NONE`, `ALIGN_DELTA`, `ALIGN_RATE`, `ALIGN_INTERPOLATE`, `ALIGN_NEXT_OLDER`, `ALIGN_MIN`, `ALIGN_MAX`, `ALIGN_MEAN`, `ALIGN_COUNT`, `ALIGN_SUM`, `ALIGN_STDDEV`, `ALIGN_COUNT_TRUE`, `ALIGN_COUNT_FALSE`, `ALIGN_FRACTION_TRUE`, `ALIGN_PERCENTILE_99`, `ALIGN_PERCENTILE_95`, `ALIGN_PERCENTILE_50`, `ALIGN_PERCENTILE_05`, and `ALIGN_PERCENT_CHANGE`.
        """
        ...

    @per_series_aligner.setter
    def per_series_aligner(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class AlertPolicyConditionConditionThresholdDenominatorAggregationArgs:
    def __init__(__self__, *,
                 alignment_period: Optional[pulumi.Input[str]] = None,
                 cross_series_reducer: Optional[pulumi.Input[str]] = None,
                 group_by_fields: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 per_series_aligner: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alignment_period: The alignment period for per-time
               series alignment. If present,
               alignmentPeriod must be at least
               60 seconds. After per-time series
               alignment, each time series will
               contain data points only on the
               period boundaries. If
               perSeriesAligner is not specified
               or equals ALIGN_NONE, then this
               field is ignored. If
               perSeriesAligner is specified and
               does not equal ALIGN_NONE, then
               this field must be defined;
               otherwise an error is returned.
        :param pulumi.Input[str] cross_series_reducer: The approach to be used to combine
               time series. Not all reducer
               functions may be applied to all
               time series, depending on the
               metric type and the value type of
               the original time series.
               Reduction may change the metric
               type of value type of the time
               series.Time series data must be
               aligned in order to perform cross-
               time series reduction. If
               crossSeriesReducer is specified,
               then perSeriesAligner must be
               specified and not equal ALIGN_NONE
               and alignmentPeriod must be
               specified; otherwise, an error is
               returned.
               Possible values are `REDUCE_NONE`, `REDUCE_MEAN`, `REDUCE_MIN`, `REDUCE_MAX`, `REDUCE_SUM`, `REDUCE_STDDEV`, `REDUCE_COUNT`, `REDUCE_COUNT_TRUE`, `REDUCE_COUNT_FALSE`, `REDUCE_FRACTION_TRUE`, `REDUCE_PERCENTILE_99`, `REDUCE_PERCENTILE_95`, `REDUCE_PERCENTILE_50`, and `REDUCE_PERCENTILE_05`.
        :param pulumi.Input[List[pulumi.Input[str]]] group_by_fields: The set of fields to preserve when
               crossSeriesReducer is specified.
               The groupByFields determine how
               the time series are partitioned
               into subsets prior to applying the
               aggregation function. Each subset
               contains time series that have the
               same value for each of the
               grouping fields. Each individual
               time series is a member of exactly
               one subset. The crossSeriesReducer
               is applied to each subset of time
               series. It is not possible to
               reduce across different resource
               types, so this field implicitly
               contains resource.type. Fields not
               specified in groupByFields are
               aggregated away. If groupByFields
               is not specified and all the time
               series have the same resource
               type, then the time series are
               aggregated into a single output
               time series. If crossSeriesReducer
               is not defined, this field is
               ignored.
        :param pulumi.Input[str] per_series_aligner: The approach to be used to align
               individual time series. Not all
               alignment functions may be applied
               to all time series, depending on
               the metric type and value type of
               the original time series.
               Alignment may change the metric
               type or the value type of the time
               series.Time series data must be
               aligned in order to perform cross-
               time series reduction. If
               crossSeriesReducer is specified,
               then perSeriesAligner must be
               specified and not equal ALIGN_NONE
               and alignmentPeriod must be
               specified; otherwise, an error is
               returned.
               Possible values are `ALIGN_NONE`, `ALIGN_DELTA`, `ALIGN_RATE`, `ALIGN_INTERPOLATE`, `ALIGN_NEXT_OLDER`, `ALIGN_MIN`, `ALIGN_MAX`, `ALIGN_MEAN`, `ALIGN_COUNT`, `ALIGN_SUM`, `ALIGN_STDDEV`, `ALIGN_COUNT_TRUE`, `ALIGN_COUNT_FALSE`, `ALIGN_FRACTION_TRUE`, `ALIGN_PERCENTILE_99`, `ALIGN_PERCENTILE_95`, `ALIGN_PERCENTILE_50`, `ALIGN_PERCENTILE_05`, and `ALIGN_PERCENT_CHANGE`.
        """
        pulumi.set(__self__, "alignmentPeriod", alignment_period)
        pulumi.set(__self__, "crossSeriesReducer", cross_series_reducer)
        pulumi.set(__self__, "groupByFields", group_by_fields)
        pulumi.set(__self__, "perSeriesAligner", per_series_aligner)

    @property
    @pulumi.getter(name="alignmentPeriod")
    def alignment_period(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment period for per-time
        series alignment. If present,
        alignmentPeriod must be at least
        60 seconds. After per-time series
        alignment, each time series will
        contain data points only on the
        period boundaries. If
        perSeriesAligner is not specified
        or equals ALIGN_NONE, then this
        field is ignored. If
        perSeriesAligner is specified and
        does not equal ALIGN_NONE, then
        this field must be defined;
        otherwise an error is returned.
        """
        ...

    @alignment_period.setter
    def alignment_period(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="crossSeriesReducer")
    def cross_series_reducer(self) -> Optional[pulumi.Input[str]]:
        """
        The approach to be used to combine
        time series. Not all reducer
        functions may be applied to all
        time series, depending on the
        metric type and the value type of
        the original time series.
        Reduction may change the metric
        type of value type of the time
        series.Time series data must be
        aligned in order to perform cross-
        time series reduction. If
        crossSeriesReducer is specified,
        then perSeriesAligner must be
        specified and not equal ALIGN_NONE
        and alignmentPeriod must be
        specified; otherwise, an error is
        returned.
        Possible values are `REDUCE_NONE`, `REDUCE_MEAN`, `REDUCE_MIN`, `REDUCE_MAX`, `REDUCE_SUM`, `REDUCE_STDDEV`, `REDUCE_COUNT`, `REDUCE_COUNT_TRUE`, `REDUCE_COUNT_FALSE`, `REDUCE_FRACTION_TRUE`, `REDUCE_PERCENTILE_99`, `REDUCE_PERCENTILE_95`, `REDUCE_PERCENTILE_50`, and `REDUCE_PERCENTILE_05`.
        """
        ...

    @cross_series_reducer.setter
    def cross_series_reducer(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="groupByFields")
    def group_by_fields(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The set of fields to preserve when
        crossSeriesReducer is specified.
        The groupByFields determine how
        the time series are partitioned
        into subsets prior to applying the
        aggregation function. Each subset
        contains time series that have the
        same value for each of the
        grouping fields. Each individual
        time series is a member of exactly
        one subset. The crossSeriesReducer
        is applied to each subset of time
        series. It is not possible to
        reduce across different resource
        types, so this field implicitly
        contains resource.type. Fields not
        specified in groupByFields are
        aggregated away. If groupByFields
        is not specified and all the time
        series have the same resource
        type, then the time series are
        aggregated into a single output
        time series. If crossSeriesReducer
        is not defined, this field is
        ignored.
        """
        ...

    @group_by_fields.setter
    def group_by_fields(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="perSeriesAligner")
    def per_series_aligner(self) -> Optional[pulumi.Input[str]]:
        """
        The approach to be used to align
        individual time series. Not all
        alignment functions may be applied
        to all time series, depending on
        the metric type and value type of
        the original time series.
        Alignment may change the metric
        type or the value type of the time
        series.Time series data must be
        aligned in order to perform cross-
        time series reduction. If
        crossSeriesReducer is specified,
        then perSeriesAligner must be
        specified and not equal ALIGN_NONE
        and alignmentPeriod must be
        specified; otherwise, an error is
        returned.
        Possible values are `ALIGN_NONE`, `ALIGN_DELTA`, `ALIGN_RATE`, `ALIGN_INTERPOLATE`, `ALIGN_NEXT_OLDER`, `ALIGN_MIN`, `ALIGN_MAX`, `ALIGN_MEAN`, `ALIGN_COUNT`, `ALIGN_SUM`, `ALIGN_STDDEV`, `ALIGN_COUNT_TRUE`, `ALIGN_COUNT_FALSE`, `ALIGN_FRACTION_TRUE`, `ALIGN_PERCENTILE_99`, `ALIGN_PERCENTILE_95`, `ALIGN_PERCENTILE_50`, `ALIGN_PERCENTILE_05`, and `ALIGN_PERCENT_CHANGE`.
        """
        ...

    @per_series_aligner.setter
    def per_series_aligner(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class AlertPolicyConditionConditionThresholdTriggerArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[float]] = None,
                 percent: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] count: The absolute number of time series
               that must fail the predicate for the
               condition to be triggered.
        :param pulumi.Input[float] percent: The percentage of time series that
               must fail the predicate for the
               condition to be triggered.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[float]]:
        """
        The absolute number of time series
        that must fail the predicate for the
        condition to be triggered.
        """
        ...

    @count.setter
    def count(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of time series that
        must fail the predicate for the
        condition to be triggered.
        """
        ...

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class AlertPolicyCreationRecordArgs:
    def __init__(__self__, *,
                 mutate_time: Optional[pulumi.Input[str]] = None,
                 mutated_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mutateTime", mutate_time)
        pulumi.set(__self__, "mutatedBy", mutated_by)

    @property
    @pulumi.getter(name="mutateTime")
    def mutate_time(self) -> Optional[pulumi.Input[str]]:
        ...

    @mutate_time.setter
    def mutate_time(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="mutatedBy")
    def mutated_by(self) -> Optional[pulumi.Input[str]]:
        ...

    @mutated_by.setter
    def mutated_by(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class AlertPolicyDocumentationArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 mime_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: The text of the documentation, interpreted according to mimeType.
               The content may not exceed 8,192 Unicode characters and may not
               exceed more than 10,240 bytes when encoded in UTF-8 format,
               whichever is smaller.
        :param pulumi.Input[str] mime_type: The format of the content field. Presently, only the value
               "text/markdown" is supported.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "mimeType", mime_type)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The text of the documentation, interpreted according to mimeType.
        The content may not exceed 8,192 Unicode characters and may not
        exceed more than 10,240 bytes when encoded in UTF-8 format,
        whichever is smaller.
        """
        ...

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the content field. Presently, only the value
        "text/markdown" is supported.
        """
        ...

    @mime_type.setter
    def mime_type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class CustomServiceTelemetryArgs:
    def __init__(__self__, *,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource_name: The full name of the resource that defines this service.
               Formatted as described in
               https://cloud.google.com/apis/design/resource_names.
        """
        pulumi.set(__self__, "resourceName", resource_name)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        The full name of the resource that defines this service.
        Formatted as described in
        https://cloud.google.com/apis/design/resource_names.
        """
        ...

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class MetricDescriptorLabelArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key for this label. The key must not exceed 100 characters. The first character of the key must be an upper- or lower-case letter, the remaining characters must be letters, digits or underscores, and the key must match the regular expression [a-zA-Z][a-zA-Z0-9_]*
        :param pulumi.Input[str] description: A human-readable description for the label.
        :param pulumi.Input[str] value_type: The type of data that can be assigned to the label.
               Default value is `STRING`.
               Possible values are `STRING`, `BOOL`, and `INT64`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "valueType", value_type)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key for this label. The key must not exceed 100 characters. The first character of the key must be an upper- or lower-case letter, the remaining characters must be letters, digits or underscores, and the key must match the regular expression [a-zA-Z][a-zA-Z0-9_]*
        """
        ...

    @key.setter
    def key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable description for the label.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of data that can be assigned to the label.
        Default value is `STRING`.
        Possible values are `STRING`, `BOOL`, and `INT64`.
        """
        ...

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class MetricDescriptorMetadataArgs:
    def __init__(__self__, *,
                 ingest_delay: Optional[pulumi.Input[str]] = None,
                 sample_period: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ingest_delay: The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors. In `[duration format](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf?&_ga=2.264881487.1507873253.1593446723-935052455.1591817775#google.protobuf.Duration)`.
        :param pulumi.Input[str] sample_period: The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period. In `[duration format](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf?&_ga=2.264881487.1507873253.1593446723-935052455.1591817775#google.protobuf.Duration)`.
        """
        pulumi.set(__self__, "ingestDelay", ingest_delay)
        pulumi.set(__self__, "samplePeriod", sample_period)

    @property
    @pulumi.getter(name="ingestDelay")
    def ingest_delay(self) -> Optional[pulumi.Input[str]]:
        """
        The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors. In `[duration format](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf?&_ga=2.264881487.1507873253.1593446723-935052455.1591817775#google.protobuf.Duration)`.
        """
        ...

    @ingest_delay.setter
    def ingest_delay(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="samplePeriod")
    def sample_period(self) -> Optional[pulumi.Input[str]]:
        """
        The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period. In `[duration format](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf?&_ga=2.264881487.1507873253.1593446723-935052455.1591817775#google.protobuf.Duration)`.
        """
        ...

    @sample_period.setter
    def sample_period(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class NotificationChannelSensitiveLabelsArgs:
    def __init__(__self__, *,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 service_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_token: An authorization token for a notification channel. Channel types that support this field include: slack
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] password: An password for a notification channel. Channel types that support this field include: webhook_basicauth
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] service_key: An servicekey token for a notification channel. Channel types that support this field include: pagerduty
               **Note**: This property is sensitive and will not be displayed in the plan.
        """
        pulumi.set(__self__, "authToken", auth_token)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "serviceKey", service_key)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        An authorization token for a notification channel. Channel types that support this field include: slack
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @auth_token.setter
    def auth_token(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        An password for a notification channel. Channel types that support this field include: webhook_basicauth
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="serviceKey")
    def service_key(self) -> Optional[pulumi.Input[str]]:
        """
        An servicekey token for a notification channel. Channel types that support this field include: pagerduty
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @service_key.setter
    def service_key(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SloBasicSliArgs:
    def __init__(__self__, *,
                 latency: pulumi.Input['SloBasicSliLatencyArgs'],
                 locations: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 versions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['SloBasicSliLatencyArgs'] latency: Parameters for a latency threshold SLI.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] locations: An optional set of locations to which this SLI is relevant.
               Telemetry from other locations will not be used to calculate
               performance for this SLI. If omitted, this SLI applies to all
               locations in which the Service has activity. For service types
               that don't support breaking down by location, setting this
               field will result in an error.
        :param pulumi.Input[List[pulumi.Input[str]]] methods: An optional set of RPCs to which this SLI is relevant.
               Telemetry from other methods will not be used to calculate
               performance for this SLI. If omitted, this SLI applies to all
               the Service's methods. For service types that don't support
               breaking down by method, setting this field will result in an
               error.
        :param pulumi.Input[List[pulumi.Input[str]]] versions: The set of API versions to which this SLI is relevant.
               Telemetry from other API versions will not be used to
               calculate performance for this SLI. If omitted,
               this SLI applies to all API versions. For service types
               that don't support breaking down by version, setting this
               field will result in an error.
        """
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "methods", methods)
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def latency(self) -> pulumi.Input['SloBasicSliLatencyArgs']:
        """
        Parameters for a latency threshold SLI.
        Structure is documented below.
        """
        ...

    @latency.setter
    def latency(self, value: pulumi.Input['SloBasicSliLatencyArgs']):
        ...

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        An optional set of locations to which this SLI is relevant.
        Telemetry from other locations will not be used to calculate
        performance for this SLI. If omitted, this SLI applies to all
        locations in which the Service has activity. For service types
        that don't support breaking down by location, setting this
        field will result in an error.
        """
        ...

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        An optional set of RPCs to which this SLI is relevant.
        Telemetry from other methods will not be used to calculate
        performance for this SLI. If omitted, this SLI applies to all
        the Service's methods. For service types that don't support
        breaking down by method, setting this field will result in an
        error.
        """
        ...

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The set of API versions to which this SLI is relevant.
        Telemetry from other API versions will not be used to
        calculate performance for this SLI. If omitted,
        this SLI applies to all API versions. For service types
        that don't support breaking down by version, setting this
        field will result in an error.
        """
        ...

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class SloBasicSliLatencyArgs:
    def __init__(__self__, *,
                 threshold: pulumi.Input[str]):
        """
        :param pulumi.Input[str] threshold: A duration string, e.g. 10s.
               Good service is defined to be the count of requests made to
               this service that return in no more than threshold.
        """
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[str]:
        """
        A duration string, e.g. 10s.
        Good service is defined to be the count of requests made to
        this service that return in no more than threshold.
        """
        ...

    @threshold.setter
    def threshold(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class SloRequestBasedSliArgs:
    def __init__(__self__, *,
                 distribution_cut: Optional[pulumi.Input['SloRequestBasedSliDistributionCutArgs']] = None,
                 good_total_ratio: Optional[pulumi.Input['SloRequestBasedSliGoodTotalRatioArgs']] = None):
        """
        :param pulumi.Input['SloRequestBasedSliDistributionCutArgs'] distribution_cut: Used when good_service is defined by a count of values aggregated in a
               Distribution that fall into a good range. The total_service is the
               total count of all values aggregated in the Distribution.
               Defines a distribution TimeSeries filter and thresholds used for
               measuring good service and total service.
               Structure is documented below.
        :param pulumi.Input['SloRequestBasedSliGoodTotalRatioArgs'] good_total_ratio: A means to compute a ratio of `good_service` to `total_service`.
               Defines computing this ratio with two TimeSeries [monitoring filters](https://cloud.google.com/monitoring/api/v3/filters)
               Must specify exactly two of good, bad, and total service filters.
               The relationship good_service + bad_service = total_service
               will be assumed.
               Structure is documented below.
        """
        pulumi.set(__self__, "distributionCut", distribution_cut)
        pulumi.set(__self__, "goodTotalRatio", good_total_ratio)

    @property
    @pulumi.getter(name="distributionCut")
    def distribution_cut(self) -> Optional[pulumi.Input['SloRequestBasedSliDistributionCutArgs']]:
        """
        Used when good_service is defined by a count of values aggregated in a
        Distribution that fall into a good range. The total_service is the
        total count of all values aggregated in the Distribution.
        Defines a distribution TimeSeries filter and thresholds used for
        measuring good service and total service.
        Structure is documented below.
        """
        ...

    @distribution_cut.setter
    def distribution_cut(self, value: Optional[pulumi.Input['SloRequestBasedSliDistributionCutArgs']]):
        ...

    @property
    @pulumi.getter(name="goodTotalRatio")
    def good_total_ratio(self) -> Optional[pulumi.Input['SloRequestBasedSliGoodTotalRatioArgs']]:
        """
        A means to compute a ratio of `good_service` to `total_service`.
        Defines computing this ratio with two TimeSeries [monitoring filters](https://cloud.google.com/monitoring/api/v3/filters)
        Must specify exactly two of good, bad, and total service filters.
        The relationship good_service + bad_service = total_service
        will be assumed.
        Structure is documented below.
        """
        ...

    @good_total_ratio.setter
    def good_total_ratio(self, value: Optional[pulumi.Input['SloRequestBasedSliGoodTotalRatioArgs']]):
        ...


@pulumi.input_type
class SloRequestBasedSliDistributionCutArgs:
    def __init__(__self__, *,
                 distribution_filter: pulumi.Input[str],
                 range: pulumi.Input['SloRequestBasedSliDistributionCutRangeArgs']):
        """
        :param pulumi.Input[str] distribution_filter: A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               aggregating values to quantify the good service provided.
               Must have ValueType = DISTRIBUTION and
               MetricKind = DELTA or MetricKind = CUMULATIVE.
        :param pulumi.Input['SloRequestBasedSliDistributionCutRangeArgs'] range: Range of numerical values. The computed good_service
               will be the count of values x in the Distribution such
               that range.min <= x < range.max. inclusive of min and
               exclusive of max. Open ranges can be defined by setting
               just one of min or max. Summed value `X` should satisfy
               `range.min <= X < range.max` for a good window.
               Structure is documented below.
        """
        pulumi.set(__self__, "distributionFilter", distribution_filter)
        pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter(name="distributionFilter")
    def distribution_filter(self) -> pulumi.Input[str]:
        """
        A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        aggregating values to quantify the good service provided.
        Must have ValueType = DISTRIBUTION and
        MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        ...

    @distribution_filter.setter
    def distribution_filter(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def range(self) -> pulumi.Input['SloRequestBasedSliDistributionCutRangeArgs']:
        """
        Range of numerical values. The computed good_service
        will be the count of values x in the Distribution such
        that range.min <= x < range.max. inclusive of min and
        exclusive of max. Open ranges can be defined by setting
        just one of min or max. Summed value `X` should satisfy
        `range.min <= X < range.max` for a good window.
        Structure is documented below.
        """
        ...

    @range.setter
    def range(self, value: pulumi.Input['SloRequestBasedSliDistributionCutRangeArgs']):
        ...


@pulumi.input_type
class SloRequestBasedSliDistributionCutRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] max: max value for the range (inclusive). If not given,
               will be set to "infinity", defining an open range
               ">= range.min"
        :param pulumi.Input[float] min: Min value for the range (inclusive). If not given,
               will be set to "-infinity", defining an open range
               "< range.max"
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        """
        max value for the range (inclusive). If not given,
        will be set to "infinity", defining an open range
        ">= range.min"
        """
        ...

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        """
        Min value for the range (inclusive). If not given,
        will be set to "-infinity", defining an open range
        "< range.max"
        """
        ...

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class SloRequestBasedSliGoodTotalRatioArgs:
    def __init__(__self__, *,
                 bad_service_filter: Optional[pulumi.Input[str]] = None,
                 good_service_filter: Optional[pulumi.Input[str]] = None,
                 total_service_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bad_service_filter: A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               quantifying bad service provided, either demanded service that
               was not provided or demanded service that was of inadequate
               quality. Exactly two of
               good, bad, or total service filter must be defined (where
               good + bad = total is assumed)
               Must have ValueType = DOUBLE or ValueType = INT64 and
               must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        :param pulumi.Input[str] good_service_filter: A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               quantifying good service provided. Exactly two of
               good, bad, or total service filter must be defined (where
               good + bad = total is assumed)
               Must have ValueType = DOUBLE or ValueType = INT64 and
               must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        :param pulumi.Input[str] total_service_filter: A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               quantifying total demanded service. Exactly two of
               good, bad, or total service filter must be defined (where
               good + bad = total is assumed)
               Must have ValueType = DOUBLE or ValueType = INT64 and
               must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        pulumi.set(__self__, "badServiceFilter", bad_service_filter)
        pulumi.set(__self__, "goodServiceFilter", good_service_filter)
        pulumi.set(__self__, "totalServiceFilter", total_service_filter)

    @property
    @pulumi.getter(name="badServiceFilter")
    def bad_service_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        quantifying bad service provided, either demanded service that
        was not provided or demanded service that was of inadequate
        quality. Exactly two of
        good, bad, or total service filter must be defined (where
        good + bad = total is assumed)
        Must have ValueType = DOUBLE or ValueType = INT64 and
        must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        ...

    @bad_service_filter.setter
    def bad_service_filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="goodServiceFilter")
    def good_service_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        quantifying good service provided. Exactly two of
        good, bad, or total service filter must be defined (where
        good + bad = total is assumed)
        Must have ValueType = DOUBLE or ValueType = INT64 and
        must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        ...

    @good_service_filter.setter
    def good_service_filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="totalServiceFilter")
    def total_service_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        quantifying total demanded service. Exactly two of
        good, bad, or total service filter must be defined (where
        good + bad = total is assumed)
        Must have ValueType = DOUBLE or ValueType = INT64 and
        must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        ...

    @total_service_filter.setter
    def total_service_filter(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SloWindowsBasedSliArgs:
    def __init__(__self__, *,
                 good_bad_metric_filter: Optional[pulumi.Input[str]] = None,
                 good_total_ratio_threshold: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdArgs']] = None,
                 metric_mean_in_range: Optional[pulumi.Input['SloWindowsBasedSliMetricMeanInRangeArgs']] = None,
                 metric_sum_in_range: Optional[pulumi.Input['SloWindowsBasedSliMetricSumInRangeArgs']] = None,
                 window_period: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] good_bad_metric_filter: A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               with ValueType = BOOL. The window is good if any true values
               appear in the window. One of `good_bad_metric_filter`,
               `good_total_ratio_threshold`, `metric_mean_in_range`,
               `metric_sum_in_range` must be set for `windows_based_sli`.
        :param pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdArgs'] good_total_ratio_threshold: Criterion that describes a window as good if its performance is
               high enough. One of `good_bad_metric_filter`,
               `good_total_ratio_threshold`, `metric_mean_in_range`,
               `metric_sum_in_range` must be set for `windows_based_sli`.
               Structure is documented below.
        :param pulumi.Input['SloWindowsBasedSliMetricMeanInRangeArgs'] metric_mean_in_range: Criterion that describes a window as good if the metric's value
               is in a good range, *averaged* across returned streams.
               One of `good_bad_metric_filter`,
               `good_total_ratio_threshold`, `metric_mean_in_range`,
               `metric_sum_in_range` must be set for `windows_based_sli`.
               Average value X of `time_series` should satisfy
               `range.min <= X < range.max` for a good window.
               Structure is documented below.
        :param pulumi.Input['SloWindowsBasedSliMetricSumInRangeArgs'] metric_sum_in_range: Criterion that describes a window as good if the metric's value
               is in a good range, *summed* across returned streams.
               Summed value `X` of `time_series` should satisfy
               `range.min <= X < range.max` for a good window.
               One of `good_bad_metric_filter`,
               `good_total_ratio_threshold`, `metric_mean_in_range`,
               `metric_sum_in_range` must be set for `windows_based_sli`.
               Structure is documented below.
        :param pulumi.Input[str] window_period: Duration over which window quality is evaluated, given as a
               duration string "{X}s" representing X seconds. Must be an
               integer fraction of a day and at least 60s.
        """
        pulumi.set(__self__, "goodBadMetricFilter", good_bad_metric_filter)
        pulumi.set(__self__, "goodTotalRatioThreshold", good_total_ratio_threshold)
        pulumi.set(__self__, "metricMeanInRange", metric_mean_in_range)
        pulumi.set(__self__, "metricSumInRange", metric_sum_in_range)
        pulumi.set(__self__, "windowPeriod", window_period)

    @property
    @pulumi.getter(name="goodBadMetricFilter")
    def good_bad_metric_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        with ValueType = BOOL. The window is good if any true values
        appear in the window. One of `good_bad_metric_filter`,
        `good_total_ratio_threshold`, `metric_mean_in_range`,
        `metric_sum_in_range` must be set for `windows_based_sli`.
        """
        ...

    @good_bad_metric_filter.setter
    def good_bad_metric_filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="goodTotalRatioThreshold")
    def good_total_ratio_threshold(self) -> Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdArgs']]:
        """
        Criterion that describes a window as good if its performance is
        high enough. One of `good_bad_metric_filter`,
        `good_total_ratio_threshold`, `metric_mean_in_range`,
        `metric_sum_in_range` must be set for `windows_based_sli`.
        Structure is documented below.
        """
        ...

    @good_total_ratio_threshold.setter
    def good_total_ratio_threshold(self, value: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdArgs']]):
        ...

    @property
    @pulumi.getter(name="metricMeanInRange")
    def metric_mean_in_range(self) -> Optional[pulumi.Input['SloWindowsBasedSliMetricMeanInRangeArgs']]:
        """
        Criterion that describes a window as good if the metric's value
        is in a good range, *averaged* across returned streams.
        One of `good_bad_metric_filter`,
        `good_total_ratio_threshold`, `metric_mean_in_range`,
        `metric_sum_in_range` must be set for `windows_based_sli`.
        Average value X of `time_series` should satisfy
        `range.min <= X < range.max` for a good window.
        Structure is documented below.
        """
        ...

    @metric_mean_in_range.setter
    def metric_mean_in_range(self, value: Optional[pulumi.Input['SloWindowsBasedSliMetricMeanInRangeArgs']]):
        ...

    @property
    @pulumi.getter(name="metricSumInRange")
    def metric_sum_in_range(self) -> Optional[pulumi.Input['SloWindowsBasedSliMetricSumInRangeArgs']]:
        """
        Criterion that describes a window as good if the metric's value
        is in a good range, *summed* across returned streams.
        Summed value `X` of `time_series` should satisfy
        `range.min <= X < range.max` for a good window.
        One of `good_bad_metric_filter`,
        `good_total_ratio_threshold`, `metric_mean_in_range`,
        `metric_sum_in_range` must be set for `windows_based_sli`.
        Structure is documented below.
        """
        ...

    @metric_sum_in_range.setter
    def metric_sum_in_range(self, value: Optional[pulumi.Input['SloWindowsBasedSliMetricSumInRangeArgs']]):
        ...

    @property
    @pulumi.getter(name="windowPeriod")
    def window_period(self) -> Optional[pulumi.Input[str]]:
        """
        Duration over which window quality is evaluated, given as a
        duration string "{X}s" representing X seconds. Must be an
        integer fraction of a day and at least 60s.
        """
        ...

    @window_period.setter
    def window_period(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SloWindowsBasedSliGoodTotalRatioThresholdArgs:
    def __init__(__self__, *,
                 basic_sli_performance: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceArgs']] = None,
                 performance: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceArgs']] = None,
                 threshold: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceArgs'] basic_sli_performance: Basic SLI to evaluate to judge window quality.
               Structure is documented below.
        :param pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceArgs'] performance: Request-based SLI to evaluate to judge window quality.
               Structure is documented below.
        :param pulumi.Input[float] threshold: A duration string, e.g. 10s.
               Good service is defined to be the count of requests made to
               this service that return in no more than threshold.
        """
        pulumi.set(__self__, "basicSliPerformance", basic_sli_performance)
        pulumi.set(__self__, "performance", performance)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="basicSliPerformance")
    def basic_sli_performance(self) -> Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceArgs']]:
        """
        Basic SLI to evaluate to judge window quality.
        Structure is documented below.
        """
        ...

    @basic_sli_performance.setter
    def basic_sli_performance(self, value: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceArgs']]):
        ...

    @property
    @pulumi.getter
    def performance(self) -> Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceArgs']]:
        """
        Request-based SLI to evaluate to judge window quality.
        Structure is documented below.
        """
        ...

    @performance.setter
    def performance(self, value: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceArgs']]):
        ...

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[float]]:
        """
        A duration string, e.g. 10s.
        Good service is defined to be the count of requests made to
        this service that return in no more than threshold.
        """
        ...

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceArgs:
    def __init__(__self__, *,
                 latency: pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyArgs'],
                 locations: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 versions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyArgs'] latency: Parameters for a latency threshold SLI.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] locations: An optional set of locations to which this SLI is relevant.
               Telemetry from other locations will not be used to calculate
               performance for this SLI. If omitted, this SLI applies to all
               locations in which the Service has activity. For service types
               that don't support breaking down by location, setting this
               field will result in an error.
        :param pulumi.Input[List[pulumi.Input[str]]] methods: An optional set of RPCs to which this SLI is relevant.
               Telemetry from other methods will not be used to calculate
               performance for this SLI. If omitted, this SLI applies to all
               the Service's methods. For service types that don't support
               breaking down by method, setting this field will result in an
               error.
        :param pulumi.Input[List[pulumi.Input[str]]] versions: The set of API versions to which this SLI is relevant.
               Telemetry from other API versions will not be used to
               calculate performance for this SLI. If omitted,
               this SLI applies to all API versions. For service types
               that don't support breaking down by version, setting this
               field will result in an error.
        """
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "methods", methods)
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def latency(self) -> pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyArgs']:
        """
        Parameters for a latency threshold SLI.
        Structure is documented below.
        """
        ...

    @latency.setter
    def latency(self, value: pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyArgs']):
        ...

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        An optional set of locations to which this SLI is relevant.
        Telemetry from other locations will not be used to calculate
        performance for this SLI. If omitted, this SLI applies to all
        locations in which the Service has activity. For service types
        that don't support breaking down by location, setting this
        field will result in an error.
        """
        ...

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        An optional set of RPCs to which this SLI is relevant.
        Telemetry from other methods will not be used to calculate
        performance for this SLI. If omitted, this SLI applies to all
        the Service's methods. For service types that don't support
        breaking down by method, setting this field will result in an
        error.
        """
        ...

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The set of API versions to which this SLI is relevant.
        Telemetry from other API versions will not be used to
        calculate performance for this SLI. If omitted,
        this SLI applies to all API versions. For service types
        that don't support breaking down by version, setting this
        field will result in an error.
        """
        ...

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyArgs:
    def __init__(__self__, *,
                 threshold: pulumi.Input[str]):
        """
        :param pulumi.Input[str] threshold: A duration string, e.g. 10s.
               Good service is defined to be the count of requests made to
               this service that return in no more than threshold.
        """
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[str]:
        """
        A duration string, e.g. 10s.
        Good service is defined to be the count of requests made to
        this service that return in no more than threshold.
        """
        ...

    @threshold.setter
    def threshold(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class SloWindowsBasedSliGoodTotalRatioThresholdPerformanceArgs:
    def __init__(__self__, *,
                 distribution_cut: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutArgs']] = None,
                 good_total_ratio: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioArgs']] = None):
        """
        :param pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutArgs'] distribution_cut: Used when good_service is defined by a count of values aggregated in a
               Distribution that fall into a good range. The total_service is the
               total count of all values aggregated in the Distribution.
               Defines a distribution TimeSeries filter and thresholds used for
               measuring good service and total service.
               Structure is documented below.
        :param pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioArgs'] good_total_ratio: A means to compute a ratio of `good_service` to `total_service`.
               Defines computing this ratio with two TimeSeries [monitoring filters](https://cloud.google.com/monitoring/api/v3/filters)
               Must specify exactly two of good, bad, and total service filters.
               The relationship good_service + bad_service = total_service
               will be assumed.
               Structure is documented below.
        """
        pulumi.set(__self__, "distributionCut", distribution_cut)
        pulumi.set(__self__, "goodTotalRatio", good_total_ratio)

    @property
    @pulumi.getter(name="distributionCut")
    def distribution_cut(self) -> Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutArgs']]:
        """
        Used when good_service is defined by a count of values aggregated in a
        Distribution that fall into a good range. The total_service is the
        total count of all values aggregated in the Distribution.
        Defines a distribution TimeSeries filter and thresholds used for
        measuring good service and total service.
        Structure is documented below.
        """
        ...

    @distribution_cut.setter
    def distribution_cut(self, value: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutArgs']]):
        ...

    @property
    @pulumi.getter(name="goodTotalRatio")
    def good_total_ratio(self) -> Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioArgs']]:
        """
        A means to compute a ratio of `good_service` to `total_service`.
        Defines computing this ratio with two TimeSeries [monitoring filters](https://cloud.google.com/monitoring/api/v3/filters)
        Must specify exactly two of good, bad, and total service filters.
        The relationship good_service + bad_service = total_service
        will be assumed.
        Structure is documented below.
        """
        ...

    @good_total_ratio.setter
    def good_total_ratio(self, value: Optional[pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioArgs']]):
        ...


@pulumi.input_type
class SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutArgs:
    def __init__(__self__, *,
                 distribution_filter: pulumi.Input[str],
                 range: pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeArgs']):
        """
        :param pulumi.Input[str] distribution_filter: A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               aggregating values to quantify the good service provided.
               Must have ValueType = DISTRIBUTION and
               MetricKind = DELTA or MetricKind = CUMULATIVE.
        :param pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeArgs'] range: Range of numerical values. The computed good_service
               will be the count of values x in the Distribution such
               that range.min <= x < range.max. inclusive of min and
               exclusive of max. Open ranges can be defined by setting
               just one of min or max. Summed value `X` should satisfy
               `range.min <= X < range.max` for a good window.
               Structure is documented below.
        """
        pulumi.set(__self__, "distributionFilter", distribution_filter)
        pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter(name="distributionFilter")
    def distribution_filter(self) -> pulumi.Input[str]:
        """
        A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        aggregating values to quantify the good service provided.
        Must have ValueType = DISTRIBUTION and
        MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        ...

    @distribution_filter.setter
    def distribution_filter(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def range(self) -> pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeArgs']:
        """
        Range of numerical values. The computed good_service
        will be the count of values x in the Distribution such
        that range.min <= x < range.max. inclusive of min and
        exclusive of max. Open ranges can be defined by setting
        just one of min or max. Summed value `X` should satisfy
        `range.min <= X < range.max` for a good window.
        Structure is documented below.
        """
        ...

    @range.setter
    def range(self, value: pulumi.Input['SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeArgs']):
        ...


@pulumi.input_type
class SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] max: max value for the range (inclusive). If not given,
               will be set to "infinity", defining an open range
               ">= range.min"
        :param pulumi.Input[float] min: Min value for the range (inclusive). If not given,
               will be set to "-infinity", defining an open range
               "< range.max"
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        """
        max value for the range (inclusive). If not given,
        will be set to "infinity", defining an open range
        ">= range.min"
        """
        ...

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        """
        Min value for the range (inclusive). If not given,
        will be set to "-infinity", defining an open range
        "< range.max"
        """
        ...

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class SloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioArgs:
    def __init__(__self__, *,
                 bad_service_filter: Optional[pulumi.Input[str]] = None,
                 good_service_filter: Optional[pulumi.Input[str]] = None,
                 total_service_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bad_service_filter: A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               quantifying bad service provided, either demanded service that
               was not provided or demanded service that was of inadequate
               quality. Exactly two of
               good, bad, or total service filter must be defined (where
               good + bad = total is assumed)
               Must have ValueType = DOUBLE or ValueType = INT64 and
               must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        :param pulumi.Input[str] good_service_filter: A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               quantifying good service provided. Exactly two of
               good, bad, or total service filter must be defined (where
               good + bad = total is assumed)
               Must have ValueType = DOUBLE or ValueType = INT64 and
               must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        :param pulumi.Input[str] total_service_filter: A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               quantifying total demanded service. Exactly two of
               good, bad, or total service filter must be defined (where
               good + bad = total is assumed)
               Must have ValueType = DOUBLE or ValueType = INT64 and
               must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        pulumi.set(__self__, "badServiceFilter", bad_service_filter)
        pulumi.set(__self__, "goodServiceFilter", good_service_filter)
        pulumi.set(__self__, "totalServiceFilter", total_service_filter)

    @property
    @pulumi.getter(name="badServiceFilter")
    def bad_service_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        quantifying bad service provided, either demanded service that
        was not provided or demanded service that was of inadequate
        quality. Exactly two of
        good, bad, or total service filter must be defined (where
        good + bad = total is assumed)
        Must have ValueType = DOUBLE or ValueType = INT64 and
        must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        ...

    @bad_service_filter.setter
    def bad_service_filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="goodServiceFilter")
    def good_service_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        quantifying good service provided. Exactly two of
        good, bad, or total service filter must be defined (where
        good + bad = total is assumed)
        Must have ValueType = DOUBLE or ValueType = INT64 and
        must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        ...

    @good_service_filter.setter
    def good_service_filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="totalServiceFilter")
    def total_service_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        quantifying total demanded service. Exactly two of
        good, bad, or total service filter must be defined (where
        good + bad = total is assumed)
        Must have ValueType = DOUBLE or ValueType = INT64 and
        must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        ...

    @total_service_filter.setter
    def total_service_filter(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SloWindowsBasedSliMetricMeanInRangeArgs:
    def __init__(__self__, *,
                 range: pulumi.Input['SloWindowsBasedSliMetricMeanInRangeRangeArgs'],
                 time_series: pulumi.Input[str]):
        """
        :param pulumi.Input['SloWindowsBasedSliMetricMeanInRangeRangeArgs'] range: Range of numerical values. The computed good_service
               will be the count of values x in the Distribution such
               that range.min <= x < range.max. inclusive of min and
               exclusive of max. Open ranges can be defined by setting
               just one of min or max. Summed value `X` should satisfy
               `range.min <= X < range.max` for a good window.
               Structure is documented below.
        :param pulumi.Input[str] time_series: A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               specifying the TimeSeries to use for evaluating window
               quality. The provided TimeSeries must have
               ValueType = INT64 or ValueType = DOUBLE and
               MetricKind = GAUGE.
               Summed value `X` should satisfy
               `range.min <= X < range.max` for a good window.
        """
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "timeSeries", time_series)

    @property
    @pulumi.getter
    def range(self) -> pulumi.Input['SloWindowsBasedSliMetricMeanInRangeRangeArgs']:
        """
        Range of numerical values. The computed good_service
        will be the count of values x in the Distribution such
        that range.min <= x < range.max. inclusive of min and
        exclusive of max. Open ranges can be defined by setting
        just one of min or max. Summed value `X` should satisfy
        `range.min <= X < range.max` for a good window.
        Structure is documented below.
        """
        ...

    @range.setter
    def range(self, value: pulumi.Input['SloWindowsBasedSliMetricMeanInRangeRangeArgs']):
        ...

    @property
    @pulumi.getter(name="timeSeries")
    def time_series(self) -> pulumi.Input[str]:
        """
        A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        specifying the TimeSeries to use for evaluating window
        quality. The provided TimeSeries must have
        ValueType = INT64 or ValueType = DOUBLE and
        MetricKind = GAUGE.
        Summed value `X` should satisfy
        `range.min <= X < range.max` for a good window.
        """
        ...

    @time_series.setter
    def time_series(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class SloWindowsBasedSliMetricMeanInRangeRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] max: max value for the range (inclusive). If not given,
               will be set to "infinity", defining an open range
               ">= range.min"
        :param pulumi.Input[float] min: Min value for the range (inclusive). If not given,
               will be set to "-infinity", defining an open range
               "< range.max"
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        """
        max value for the range (inclusive). If not given,
        will be set to "infinity", defining an open range
        ">= range.min"
        """
        ...

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        """
        Min value for the range (inclusive). If not given,
        will be set to "-infinity", defining an open range
        "< range.max"
        """
        ...

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class SloWindowsBasedSliMetricSumInRangeArgs:
    def __init__(__self__, *,
                 range: pulumi.Input['SloWindowsBasedSliMetricSumInRangeRangeArgs'],
                 time_series: pulumi.Input[str]):
        """
        :param pulumi.Input['SloWindowsBasedSliMetricSumInRangeRangeArgs'] range: Range of numerical values. The computed good_service
               will be the count of values x in the Distribution such
               that range.min <= x < range.max. inclusive of min and
               exclusive of max. Open ranges can be defined by setting
               just one of min or max. Summed value `X` should satisfy
               `range.min <= X < range.max` for a good window.
               Structure is documented below.
        :param pulumi.Input[str] time_series: A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
               specifying the TimeSeries to use for evaluating window
               quality. The provided TimeSeries must have
               ValueType = INT64 or ValueType = DOUBLE and
               MetricKind = GAUGE.
               Summed value `X` should satisfy
               `range.min <= X < range.max` for a good window.
        """
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "timeSeries", time_series)

    @property
    @pulumi.getter
    def range(self) -> pulumi.Input['SloWindowsBasedSliMetricSumInRangeRangeArgs']:
        """
        Range of numerical values. The computed good_service
        will be the count of values x in the Distribution such
        that range.min <= x < range.max. inclusive of min and
        exclusive of max. Open ranges can be defined by setting
        just one of min or max. Summed value `X` should satisfy
        `range.min <= X < range.max` for a good window.
        Structure is documented below.
        """
        ...

    @range.setter
    def range(self, value: pulumi.Input['SloWindowsBasedSliMetricSumInRangeRangeArgs']):
        ...

    @property
    @pulumi.getter(name="timeSeries")
    def time_series(self) -> pulumi.Input[str]:
        """
        A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
        specifying the TimeSeries to use for evaluating window
        quality. The provided TimeSeries must have
        ValueType = INT64 or ValueType = DOUBLE and
        MetricKind = GAUGE.
        Summed value `X` should satisfy
        `range.min <= X < range.max` for a good window.
        """
        ...

    @time_series.setter
    def time_series(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class SloWindowsBasedSliMetricSumInRangeRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] max: max value for the range (inclusive). If not given,
               will be set to "infinity", defining an open range
               ">= range.min"
        :param pulumi.Input[float] min: Min value for the range (inclusive). If not given,
               will be set to "-infinity", defining an open range
               "< range.max"
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        """
        max value for the range (inclusive). If not given,
        will be set to "infinity", defining an open range
        ">= range.min"
        """
        ...

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        """
        Min value for the range (inclusive). If not given,
        will be set to "-infinity", defining an open range
        "< range.max"
        """
        ...

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class UptimeCheckConfigContentMatcherArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 matcher: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: String or regex content to match (max 1024 bytes)
        :param pulumi.Input[str] matcher: The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
               Default value is `CONTAINS_STRING`.
               Possible values are `CONTAINS_STRING`, `NOT_CONTAINS_STRING`, `MATCHES_REGEX`, and `NON_MATCHES_REGEX`.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "matcher", matcher)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        String or regex content to match (max 1024 bytes)
        """
        ...

    @content.setter
    def content(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def matcher(self) -> Optional[pulumi.Input[str]]:
        """
        The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
        Default value is `CONTAINS_STRING`.
        Possible values are `CONTAINS_STRING`, `NOT_CONTAINS_STRING`, `MATCHES_REGEX`, and `NON_MATCHES_REGEX`.
        """
        ...

    @matcher.setter
    def matcher(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class UptimeCheckConfigHttpCheckArgs:
    def __init__(__self__, *,
                 auth_info: Optional[pulumi.Input['UptimeCheckConfigHttpCheckAuthInfoArgs']] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 mask_headers: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 request_method: Optional[pulumi.Input[str]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None,
                 validate_ssl: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['UptimeCheckConfigHttpCheckAuthInfoArgs'] auth_info: The authentication information. Optional when creating an HTTP check; defaults to empty.
               Structure is documented below.
        :param pulumi.Input[str] body: The request body associated with the HTTP POST request. If contentType is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the requestMethod is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte. Note - As with all bytes fields JSON representations are base64 encoded. e.g. "foo=bar" in URL-encoded form is "foo%3Dbar" and in base64 encoding is "Zm9vJTI1M0RiYXI=".
        :param pulumi.Input[str] content_type: The content type to use for the check.
               Possible values are `TYPE_UNSPECIFIED` and `URL_ENCODED`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: The list of headers to send as part of the uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described at https://www.w3.org/Protocols/rfc2616/rfc2616.txt (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
        :param pulumi.Input[bool] mask_headers: Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to True then the headers will be obscured with ******.
        :param pulumi.Input[str] path: The path to the page to run the check against. Will be combined with the host (specified within the MonitoredResource) and port to construct the full URL. Optional (defaults to "/").
        :param pulumi.Input[float] port: The port to the page to run the check against. Will be combined with host (specified within the MonitoredResource) to construct the full URL.
        :param pulumi.Input[str] request_method: The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then requestMethod defaults to GET.
               Default value is `GET`.
               Possible values are `METHOD_UNSPECIFIED`, `GET`, and `POST`.
        :param pulumi.Input[bool] use_ssl: If true, use HTTPS instead of HTTP to run the check.
        :param pulumi.Input[bool] validate_ssl: Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitoredResource is set to uptime_url. If useSsl is false, setting validateSsl to true has no effect.
        """
        pulumi.set(__self__, "authInfo", auth_info)
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "contentType", content_type)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "maskHeaders", mask_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "requestMethod", request_method)
        pulumi.set(__self__, "useSsl", use_ssl)
        pulumi.set(__self__, "validateSsl", validate_ssl)

    @property
    @pulumi.getter(name="authInfo")
    def auth_info(self) -> Optional[pulumi.Input['UptimeCheckConfigHttpCheckAuthInfoArgs']]:
        """
        The authentication information. Optional when creating an HTTP check; defaults to empty.
        Structure is documented below.
        """
        ...

    @auth_info.setter
    def auth_info(self, value: Optional[pulumi.Input['UptimeCheckConfigHttpCheckAuthInfoArgs']]):
        ...

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The request body associated with the HTTP POST request. If contentType is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the requestMethod is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte. Note - As with all bytes fields JSON representations are base64 encoded. e.g. "foo=bar" in URL-encoded form is "foo%3Dbar" and in base64 encoding is "Zm9vJTI1M0RiYXI=".
        """
        ...

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        The content type to use for the check.
        Possible values are `TYPE_UNSPECIFIED` and `URL_ENCODED`.
        """
        ...

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The list of headers to send as part of the uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described at https://www.w3.org/Protocols/rfc2616/rfc2616.txt (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
        """
        ...

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="maskHeaders")
    def mask_headers(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to True then the headers will be obscured with ******.
        """
        ...

    @mask_headers.setter
    def mask_headers(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the page to run the check against. Will be combined with the host (specified within the MonitoredResource) and port to construct the full URL. Optional (defaults to "/").
        """
        ...

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The port to the page to run the check against. Will be combined with host (specified within the MonitoredResource) to construct the full URL.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then requestMethod defaults to GET.
        Default value is `GET`.
        Possible values are `METHOD_UNSPECIFIED`, `GET`, and `POST`.
        """
        ...

    @request_method.setter
    def request_method(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, use HTTPS instead of HTTP to run the check.
        """
        ...

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="validateSsl")
    def validate_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitoredResource is set to uptime_url. If useSsl is false, setting validateSsl to true has no effect.
        """
        ...

    @validate_ssl.setter
    def validate_ssl(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class UptimeCheckConfigHttpCheckAuthInfoArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password to authenticate.
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] username: The username to authenticate.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password to authenticate.
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @password.setter
    def password(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to authenticate.
        """
        ...

    @username.setter
    def username(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class UptimeCheckConfigMonitoredResourceArgs:
    def __init__(__self__, *,
                 labels: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels "project_id", "instance_id", and "zone".
        :param pulumi.Input[str] type: The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.monitoredResourceDescriptors#MonitoredResourceDescriptor) object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types (https://cloud.google.com/monitoring/api/resources) and Logging resource types (https://cloud.google.com/logging/docs/api/v2/resource-list).
        """
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels "project_id", "instance_id", and "zone".
        """
        ...

    @labels.setter
    def labels(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.monitoredResourceDescriptors#MonitoredResourceDescriptor) object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types (https://cloud.google.com/monitoring/api/resources) and Logging resource types (https://cloud.google.com/logging/docs/api/v2/resource-list).
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class UptimeCheckConfigResourceGroupArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_id: The group of resources being monitored. Should be the `name` of a group
        :param pulumi.Input[str] resource_type: The resource type of the group members.
               Possible values are `RESOURCE_TYPE_UNSPECIFIED`, `INSTANCE`, and `AWS_ELB_LOAD_BALANCER`.
        """
        pulumi.set(__self__, "groupId", group_id)
        pulumi.set(__self__, "resourceType", resource_type)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The group of resources being monitored. Should be the `name` of a group
        """
        ...

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource type of the group members.
        Possible values are `RESOURCE_TYPE_UNSPECIFIED`, `INSTANCE`, and `AWS_ELB_LOAD_BALANCER`.
        """
        ...

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class UptimeCheckConfigTcpCheckArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[float]):
        """
        :param pulumi.Input[float] port: The port to the page to run the check against. Will be combined with host (specified within the MonitoredResource) to construct the full URL.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        The port to the page to run the check against. Will be combined with host (specified within the MonitoredResource) to construct the full URL.
        """
        ...

    @port.setter
    def port(self, value: pulumi.Input[float]):
        ...


