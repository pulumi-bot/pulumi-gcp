# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'DatabaseInstanceIpAddress',
    'DatabaseInstanceReplicaConfiguration',
    'DatabaseInstanceServerCaCert',
    'DatabaseInstanceSettings',
    'DatabaseInstanceSettingsBackupConfiguration',
    'DatabaseInstanceSettingsDatabaseFlag',
    'DatabaseInstanceSettingsIpConfiguration',
    'DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork',
    'DatabaseInstanceSettingsLocationPreference',
    'DatabaseInstanceSettingsMaintenanceWindow',
    'GetCaCertsCert',
    'GetDatabaseInstanceIpAddress',
    'GetDatabaseInstanceReplicaConfiguration',
    'GetDatabaseInstanceServerCaCert',
    'GetDatabaseInstanceSetting',
    'GetDatabaseInstanceSettingBackupConfiguration',
    'GetDatabaseInstanceSettingDatabaseFlag',
    'GetDatabaseInstanceSettingIpConfiguration',
    'GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork',
    'GetDatabaseInstanceSettingLocationPreference',
    'GetDatabaseInstanceSettingMaintenanceWindow',
]

@pulumi.output_type
class DatabaseInstanceIpAddress(dict):
    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="timeToRetire")
    def time_to_retire(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInstanceReplicaConfiguration(dict):
    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        PEM representation of the trusted CA's x509
        certificate.
        """
        ...

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        """
        PEM representation of the slave's x509
        certificate.
        """
        ...

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        """
        PEM representation of the slave's private key. The
        corresponding public key in encoded in the `client_certificate`.
        """
        ...

    @property
    @pulumi.getter(name="connectRetryInterval")
    def connect_retry_interval(self) -> Optional[float]:
        """
        The number of seconds
        between connect retries.
        """
        ...

    @property
    @pulumi.getter(name="dumpFilePath")
    def dump_file_path(self) -> Optional[str]:
        """
        Path to a SQL file in GCS from which slave
        instances are created. Format is `gs://bucket/filename`.
        """
        ...

    @property
    @pulumi.getter(name="failoverTarget")
    def failover_target(self) -> Optional[bool]:
        """
        Specifies if the replica is the failover target.
        If the field is set to true the replica will be designated as a failover replica.
        If the master instance fails, the replica instance will be promoted as
        the new master instance.
        """
        ...

    @property
    @pulumi.getter(name="masterHeartbeatPeriod")
    def master_heartbeat_period(self) -> Optional[float]:
        """
        Time in ms between replication
        heartbeats.
        """
        ...

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password for the replication connection.
        """
        ...

    @property
    @pulumi.getter(name="sslCipher")
    def ssl_cipher(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for replication connection.
        """
        ...

    @property
    @pulumi.getter(name="verifyServerCertificate")
    def verify_server_certificate(self) -> Optional[bool]:
        """
        True if the master's common name
        value is checked during the SSL handshake.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInstanceServerCaCert(dict):
    @property
    @pulumi.getter
    def cert(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        """
        The [RFC 3339](https://tools.ietf.org/html/rfc3339)
        formatted date time string indicating when this whitelist expires.
        """
        ...

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInstanceSettings(dict):
    @property
    @pulumi.getter(name="activationPolicy")
    def activation_policy(self) -> Optional[str]:
        """
        This specifies when the instance should be
        active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
        """
        ...

    @property
    @pulumi.getter(name="authorizedGaeApplications")
    def authorized_gae_applications(self) -> Optional[List[str]]:
        """
        This property is only applicable to First Generation instances.
        First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
        for information on how to upgrade to Second Generation instances.
        A list of Google App Engine (GAE) project names that are allowed to access this instance.
        """
        ...

    @property
    @pulumi.getter(name="availabilityType")
    def availability_type(self) -> Optional[str]:
        """
        The availability type of the Cloud SQL
        instance, high availability (`REGIONAL`) or single zone (`ZONAL`).' For MySQL
        instances, ensure that `settings.backup_configuration.enabled` and
        `settings.backup_configuration.binary_log_enabled` are both set to `true`.
        """
        ...

    @property
    @pulumi.getter(name="backupConfiguration")
    def backup_configuration(self) -> Optional['outputs.DatabaseInstanceSettingsBackupConfiguration']:
        ...

    @property
    @pulumi.getter(name="crashSafeReplication")
    def crash_safe_replication(self) -> Optional[bool]:
        """
        This property is only applicable to First Generation instances.
        First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
        for information on how to upgrade to Second Generation instances.
        Specific to read instances, indicates
        when crash-safe replication flags are enabled.
        """
        ...

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> Optional[List['outputs.DatabaseInstanceSettingsDatabaseFlag']]:
        ...

    @property
    @pulumi.getter(name="diskAutoresize")
    def disk_autoresize(self) -> Optional[bool]:
        """
        Configuration to increase storage size automatically.  Note that future `pulumi apply` calls will attempt to resize the disk to the value specified in `disk_size` - if this is set, do not set `disk_size`.
        """
        ...

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[float]:
        """
        The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased.
        """
        ...

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        The type of data disk: PD_SSD or PD_HDD.
        """
        ...

    @property
    @pulumi.getter(name="ipConfiguration")
    def ip_configuration(self) -> Optional['outputs.DatabaseInstanceSettingsIpConfiguration']:
        ...

    @property
    @pulumi.getter(name="locationPreference")
    def location_preference(self) -> Optional['outputs.DatabaseInstanceSettingsLocationPreference']:
        ...

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional['outputs.DatabaseInstanceSettingsMaintenanceWindow']:
        ...

    @property
    @pulumi.getter(name="pricingPlan")
    def pricing_plan(self) -> Optional[str]:
        """
        Pricing plan for this instance, can only be `PER_USE`.
        """
        ...

    @property
    @pulumi.getter(name="replicationType")
    def replication_type(self) -> Optional[str]:
        """
        This property is only applicable to First Generation instances.
        First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
        for information on how to upgrade to Second Generation instances.
        Replication type for this instance, can be one of `ASYNCHRONOUS` or `SYNCHRONOUS`.
        """
        ...

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        The machine type to use. See [tiers](https://cloud.google.com/sql/docs/admin-api/v1beta4/tiers)
        for more details and supported versions. Postgres supports only shared-core machine types such as `db-f1-micro`,
        and custom machine types such as `db-custom-2-13312`. See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.
        """
        ...

    @property
    @pulumi.getter(name="userLabels")
    def user_labels(self) -> Optional[Mapping[str, str]]:
        """
        A set of key/value user label pairs to assign to the instance.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[float]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInstanceSettingsBackupConfiguration(dict):
    @property
    @pulumi.getter(name="binaryLogEnabled")
    def binary_log_enabled(self) -> Optional[bool]:
        """
        True if binary logging is enabled. If
        `settings.backup_configuration.enabled` is false, this must be as well.
        Cannot be used with Postgres.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        True if backup configuration is enabled.
        """
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="pointInTimeRecoveryEnabled")
    def point_in_time_recovery_enabled(self) -> Optional[bool]:
        """
        True if Point-in-time recovery is enabled. Will restart database if enabled after instance creation.
        """
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        `HH:MM` format time indicating when backup
        configuration starts.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInstanceSettingsDatabaseFlag(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A name for this whitelist entry.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A CIDR notation IPv4 or IPv6 address that is allowed to
        access this instance. Must be set even if other two attributes are not for
        the whitelist to become active.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInstanceSettingsIpConfiguration(dict):
    @property
    @pulumi.getter(name="authorizedNetworks")
    def authorized_networks(self) -> Optional[List['outputs.DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork']]:
        ...

    @property
    @pulumi.getter(name="ipv4Enabled")
    def ipv4_enabled(self) -> Optional[bool]:
        """
        Whether this Cloud SQL instance should be assigned
        a public IPV4 address. Either `ipv4_enabled` must be enabled or a
        `private_network` must be configured.
        """
        ...

    @property
    @pulumi.getter(name="privateNetwork")
    def private_network(self) -> Optional[str]:
        """
        The VPC network from which the Cloud SQL
        instance is accessible for private IP. For example, projects/myProject/global/networks/default.
        Specifying a network enables private IP.
        Either `ipv4_enabled` must be enabled or a `private_network` must be configured.
        This setting can be updated, but it cannot be removed after it is set.
        """
        ...

    @property
    @pulumi.getter(name="requireSsl")
    def require_ssl(self) -> Optional[bool]:
        """
        True if mysqld should default to `REQUIRE X509`
        for users connecting over IP.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork(dict):
    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        """
        The [RFC 3339](https://tools.ietf.org/html/rfc3339)
        formatted date time string indicating when this whitelist expires.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A name for this whitelist entry.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A CIDR notation IPv4 or IPv6 address that is allowed to
        access this instance. Must be set even if other two attributes are not for
        the whitelist to become active.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInstanceSettingsLocationPreference(dict):
    @property
    @pulumi.getter(name="followGaeApplication")
    def follow_gae_application(self) -> Optional[str]:
        """
        A GAE application whose zone to remain
        in. Must be in the same region as this instance.
        """
        ...

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        The preferred compute engine
        [zone](https://cloud.google.com/compute/docs/zones?hl=en).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseInstanceSettingsMaintenanceWindow(dict):
    @property
    @pulumi.getter
    def day(self) -> Optional[float]:
        """
        Day of week (`1-7`), starting on Monday
        """
        ...

    @property
    @pulumi.getter
    def hour(self) -> Optional[float]:
        """
        Hour of day (`0-23`), ignored if `day` not set
        """
        ...

    @property
    @pulumi.getter(name="updateTrack")
    def update_track(self) -> Optional[str]:
        """
        Receive updates earlier (`canary`) or later
        (`stable`)
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCaCertsCert(dict):
    @property
    @pulumi.getter
    def cert(self) -> str:
        """
        The CA certificate used to connect to the SQL instance via SSL.
        """
        ...

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> str:
        """
        The CN valid for the CA cert.
        """
        ...

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of the CA cert.
        """
        ...

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        """
        Expiration time of the CA cert.
        """
        ...

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> str:
        """
        SHA1 fingerprint of the CA cert.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceIpAddress(dict):
    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        ...

    @property
    @pulumi.getter(name="timeToRetire")
    def time_to_retire(self) -> str:
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceReplicaConfiguration(dict):
    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        """
        PEM representation of the trusted CA's x509 certificate.
        """
        ...

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        """
        PEM representation of the slave's x509 certificate.
        """
        ...

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        """
        PEM representation of the slave's private key.
        """
        ...

    @property
    @pulumi.getter(name="connectRetryInterval")
    def connect_retry_interval(self) -> float:
        """
        The number of seconds between connect retries.
        """
        ...

    @property
    @pulumi.getter(name="dumpFilePath")
    def dump_file_path(self) -> str:
        """
        Path to a SQL file in GCS from which slave instances are created.
        """
        ...

    @property
    @pulumi.getter(name="failoverTarget")
    def failover_target(self) -> bool:
        """
        Specifies if the replica is the failover target.
        """
        ...

    @property
    @pulumi.getter(name="masterHeartbeatPeriod")
    def master_heartbeat_period(self) -> float:
        """
        Time in ms between replication heartbeats.
        """
        ...

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password for the replication connection.
        """
        ...

    @property
    @pulumi.getter(name="sslCipher")
    def ssl_cipher(self) -> str:
        ...

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username for replication connection.
        """
        ...

    @property
    @pulumi.getter(name="verifyServerCertificate")
    def verify_server_certificate(self) -> bool:
        """
        True if the master's common name value is checked during the SSL handshake.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceServerCaCert(dict):
    @property
    @pulumi.getter
    def cert(self) -> str:
        ...

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> str:
        ...

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        ...

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        """
        The [RFC 3339](https://tools.ietf.org/html/rfc3339)
        formatted date time string indicating when this whitelist expires.
        """
        ...

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceSetting(dict):
    @property
    @pulumi.getter(name="activationPolicy")
    def activation_policy(self) -> str:
        """
        This specifies when the instance should be
        active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
        """
        ...

    @property
    @pulumi.getter(name="authorizedGaeApplications")
    def authorized_gae_applications(self) -> List[str]:
        """
        (Deprecated) This property is only applicable to First Generation instances.
        First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
        for information on how to upgrade to Second Generation instances.
        A list of Google App Engine (GAE) project names that are allowed to access this instance.
        """
        ...

    @property
    @pulumi.getter(name="availabilityType")
    def availability_type(self) -> str:
        """
        The availability type of the Cloud SQL
        instance, high availability (`REGIONAL`) or single zone (`ZONAL`).
        """
        ...

    @property
    @pulumi.getter(name="backupConfigurations")
    def backup_configurations(self) -> List['outputs.GetDatabaseInstanceSettingBackupConfiguration']:
        ...

    @property
    @pulumi.getter(name="crashSafeReplication")
    def crash_safe_replication(self) -> bool:
        """
        (Deprecated) This property is only applicable to First Generation instances.
        First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
        """
        ...

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> List['outputs.GetDatabaseInstanceSettingDatabaseFlag']:
        ...

    @property
    @pulumi.getter(name="diskAutoresize")
    def disk_autoresize(self) -> bool:
        """
        Configuration to increase storage size automatically.
        """
        ...

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> float:
        """
        The size of data disk, in GB.
        """
        ...

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        The type of data disk.
        """
        ...

    @property
    @pulumi.getter(name="ipConfigurations")
    def ip_configurations(self) -> List['outputs.GetDatabaseInstanceSettingIpConfiguration']:
        ...

    @property
    @pulumi.getter(name="locationPreferences")
    def location_preferences(self) -> List['outputs.GetDatabaseInstanceSettingLocationPreference']:
        ...

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> List['outputs.GetDatabaseInstanceSettingMaintenanceWindow']:
        ...

    @property
    @pulumi.getter(name="pricingPlan")
    def pricing_plan(self) -> str:
        """
        Pricing plan for this instance.
        """
        ...

    @property
    @pulumi.getter(name="replicationType")
    def replication_type(self) -> str:
        """
        This property is only applicable to First Generation instances.
        First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
        """
        ...

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        The machine type to use.
        """
        ...

    @property
    @pulumi.getter(name="userLabels")
    def user_labels(self) -> Mapping[str, str]:
        """
        A set of key/value user label pairs to assign to the instance.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> float:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceSettingBackupConfiguration(dict):
    @property
    @pulumi.getter(name="binaryLogEnabled")
    def binary_log_enabled(self) -> bool:
        """
        True if binary logging is enabled.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        True if backup configuration is enabled.
        """
        ...

    @property
    @pulumi.getter
    def location(self) -> str:
        ...

    @property
    @pulumi.getter(name="pointInTimeRecoveryEnabled")
    def point_in_time_recovery_enabled(self) -> bool:
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        `HH:MM` format time indicating when backup configuration starts.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceSettingDatabaseFlag(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the instance.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A CIDR notation IPv4 or IPv6 address that is allowed to access this instance.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceSettingIpConfiguration(dict):
    @property
    @pulumi.getter(name="authorizedNetworks")
    def authorized_networks(self) -> List['outputs.GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork']:
        ...

    @property
    @pulumi.getter(name="ipv4Enabled")
    def ipv4_enabled(self) -> bool:
        """
        Whether this Cloud SQL instance should be assigned a public IPV4 address.
        """
        ...

    @property
    @pulumi.getter(name="privateNetwork")
    def private_network(self) -> str:
        """
        The VPC network from which the Cloud SQL instance is accessible for private IP.
        """
        ...

    @property
    @pulumi.getter(name="requireSsl")
    def require_ssl(self) -> bool:
        """
        True if mysqld default to `REQUIRE X509` for users connecting over IP.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork(dict):
    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        """
        The [RFC 3339](https://tools.ietf.org/html/rfc3339)
        formatted date time string indicating when this whitelist expires.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the instance.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A CIDR notation IPv4 or IPv6 address that is allowed to access this instance.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceSettingLocationPreference(dict):
    @property
    @pulumi.getter(name="followGaeApplication")
    def follow_gae_application(self) -> str:
        """
        A GAE application whose zone to remain in.
        """
        ...

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The preferred compute engine.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDatabaseInstanceSettingMaintenanceWindow(dict):
    @property
    @pulumi.getter
    def day(self) -> float:
        """
        Day of week (`1-7`), starting on Monday.
        """
        ...

    @property
    @pulumi.getter
    def hour(self) -> float:
        """
        Hour of day (`0-23`), ignored if `day` not set.
        """
        ...

    @property
    @pulumi.getter(name="updateTrack")
    def update_track(self) -> str:
        """
        Receive updates earlier (`canary`) or later (`stable`).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


