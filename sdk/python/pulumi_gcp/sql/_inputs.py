# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DatabaseInstanceIpAddressArgs',
    'DatabaseInstanceReplicaConfigurationArgs',
    'DatabaseInstanceServerCaCertArgs',
    'DatabaseInstanceSettingsArgs',
    'DatabaseInstanceSettingsBackupConfigurationArgs',
    'DatabaseInstanceSettingsDatabaseFlagArgs',
    'DatabaseInstanceSettingsIpConfigurationArgs',
    'DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs',
    'DatabaseInstanceSettingsLocationPreferenceArgs',
    'DatabaseInstanceSettingsMaintenanceWindowArgs',
]

@pulumi.input_type
class DatabaseInstanceIpAddressArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 time_to_retire: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ipAddress", ip_address)
        pulumi.set(__self__, "timeToRetire", time_to_retire)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        ...

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="timeToRetire")
    def time_to_retire(self) -> Optional[pulumi.Input[str]]:
        ...

    @time_to_retire.setter
    def time_to_retire(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DatabaseInstanceReplicaConfigurationArgs:
    def __init__(__self__, *,
                 ca_certificate: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 connect_retry_interval: Optional[pulumi.Input[float]] = None,
                 dump_file_path: Optional[pulumi.Input[str]] = None,
                 failover_target: Optional[pulumi.Input[bool]] = None,
                 master_heartbeat_period: Optional[pulumi.Input[float]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssl_cipher: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 verify_server_certificate: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] ca_certificate: PEM representation of the trusted CA's x509
               certificate.
        :param pulumi.Input[str] client_certificate: PEM representation of the slave's x509
               certificate.
        :param pulumi.Input[str] client_key: PEM representation of the slave's private key. The
               corresponding public key in encoded in the `client_certificate`.
        :param pulumi.Input[float] connect_retry_interval: The number of seconds
               between connect retries.
        :param pulumi.Input[str] dump_file_path: Path to a SQL file in GCS from which slave
               instances are created. Format is `gs://bucket/filename`.
        :param pulumi.Input[bool] failover_target: Specifies if the replica is the failover target.
               If the field is set to true the replica will be designated as a failover replica.
               If the master instance fails, the replica instance will be promoted as
               the new master instance.
        :param pulumi.Input[float] master_heartbeat_period: Time in ms between replication
               heartbeats.
        :param pulumi.Input[str] password: Password for the replication connection.
        :param pulumi.Input[str] username: Username for replication connection.
        :param pulumi.Input[bool] verify_server_certificate: True if the master's common name
               value is checked during the SSL handshake.
        """
        pulumi.set(__self__, "caCertificate", ca_certificate)
        pulumi.set(__self__, "clientCertificate", client_certificate)
        pulumi.set(__self__, "clientKey", client_key)
        pulumi.set(__self__, "connectRetryInterval", connect_retry_interval)
        pulumi.set(__self__, "dumpFilePath", dump_file_path)
        pulumi.set(__self__, "failoverTarget", failover_target)
        pulumi.set(__self__, "masterHeartbeatPeriod", master_heartbeat_period)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "sslCipher", ssl_cipher)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "verifyServerCertificate", verify_server_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM representation of the trusted CA's x509
        certificate.
        """
        ...

    @ca_certificate.setter
    def ca_certificate(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM representation of the slave's x509
        certificate.
        """
        ...

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM representation of the slave's private key. The
        corresponding public key in encoded in the `client_certificate`.
        """
        ...

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="connectRetryInterval")
    def connect_retry_interval(self) -> Optional[pulumi.Input[float]]:
        """
        The number of seconds
        between connect retries.
        """
        ...

    @connect_retry_interval.setter
    def connect_retry_interval(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="dumpFilePath")
    def dump_file_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to a SQL file in GCS from which slave
        instances are created. Format is `gs://bucket/filename`.
        """
        ...

    @dump_file_path.setter
    def dump_file_path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="failoverTarget")
    def failover_target(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if the replica is the failover target.
        If the field is set to true the replica will be designated as a failover replica.
        If the master instance fails, the replica instance will be promoted as
        the new master instance.
        """
        ...

    @failover_target.setter
    def failover_target(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="masterHeartbeatPeriod")
    def master_heartbeat_period(self) -> Optional[pulumi.Input[float]]:
        """
        Time in ms between replication
        heartbeats.
        """
        ...

    @master_heartbeat_period.setter
    def master_heartbeat_period(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the replication connection.
        """
        ...

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="sslCipher")
    def ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        ...

    @ssl_cipher.setter
    def ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for replication connection.
        """
        ...

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="verifyServerCertificate")
    def verify_server_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the master's common name
        value is checked during the SSL handshake.
        """
        ...

    @verify_server_certificate.setter
    def verify_server_certificate(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class DatabaseInstanceServerCaCertArgs:
    def __init__(__self__, *,
                 cert: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 expiration_time: Optional[pulumi.Input[str]] = None,
                 sha1_fingerprint: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expiration_time: The [RFC 3339](https://tools.ietf.org/html/rfc3339)
               formatted date time string indicating when this whitelist expires.
        """
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "commonName", common_name)
        pulumi.set(__self__, "createTime", create_time)
        pulumi.set(__self__, "expirationTime", expiration_time)
        pulumi.set(__self__, "sha1Fingerprint", sha1_fingerprint)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        ...

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        ...

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        ...

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[str]]:
        """
        The [RFC 3339](https://tools.ietf.org/html/rfc3339)
        formatted date time string indicating when this whitelist expires.
        """
        ...

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[pulumi.Input[str]]:
        ...

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DatabaseInstanceSettingsArgs:
    def __init__(__self__, *,
                 tier: pulumi.Input[str],
                 activation_policy: Optional[pulumi.Input[str]] = None,
                 authorized_gae_applications: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 availability_type: Optional[pulumi.Input[str]] = None,
                 backup_configuration: Optional[pulumi.Input['DatabaseInstanceSettingsBackupConfigurationArgs']] = None,
                 crash_safe_replication: Optional[pulumi.Input[bool]] = None,
                 database_flags: Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsDatabaseFlagArgs']]]] = None,
                 disk_autoresize: Optional[pulumi.Input[bool]] = None,
                 disk_size: Optional[pulumi.Input[float]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 ip_configuration: Optional[pulumi.Input['DatabaseInstanceSettingsIpConfigurationArgs']] = None,
                 location_preference: Optional[pulumi.Input['DatabaseInstanceSettingsLocationPreferenceArgs']] = None,
                 maintenance_window: Optional[pulumi.Input['DatabaseInstanceSettingsMaintenanceWindowArgs']] = None,
                 pricing_plan: Optional[pulumi.Input[str]] = None,
                 replication_type: Optional[pulumi.Input[str]] = None,
                 user_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] tier: The machine type to use. See [tiers](https://cloud.google.com/sql/docs/admin-api/v1beta4/tiers)
               for more details and supported versions. Postgres supports only shared-core machine types such as `db-f1-micro`,
               and custom machine types such as `db-custom-2-13312`. See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.
        :param pulumi.Input[str] activation_policy: This specifies when the instance should be
               active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
        :param pulumi.Input[List[pulumi.Input[str]]] authorized_gae_applications: This property is only applicable to First Generation instances.
               First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
               for information on how to upgrade to Second Generation instances.
               A list of Google App Engine (GAE) project names that are allowed to access this instance.
        :param pulumi.Input[str] availability_type: The availability type of the Cloud SQL
               instance, high availability (`REGIONAL`) or single zone (`ZONAL`).' For MySQL
               instances, ensure that `settings.backup_configuration.enabled` and
               `settings.backup_configuration.binary_log_enabled` are both set to `true`.
        :param pulumi.Input[bool] crash_safe_replication: This property is only applicable to First Generation instances.
               First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
               for information on how to upgrade to Second Generation instances.
               Specific to read instances, indicates
               when crash-safe replication flags are enabled.
        :param pulumi.Input[bool] disk_autoresize: Configuration to increase storage size automatically.  Note that future `pulumi apply` calls will attempt to resize the disk to the value specified in `disk_size` - if this is set, do not set `disk_size`.
        :param pulumi.Input[float] disk_size: The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased.
        :param pulumi.Input[str] disk_type: The type of data disk: PD_SSD or PD_HDD.
        :param pulumi.Input[str] pricing_plan: Pricing plan for this instance, can only be `PER_USE`.
        :param pulumi.Input[str] replication_type: This property is only applicable to First Generation instances.
               First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
               for information on how to upgrade to Second Generation instances.
               Replication type for this instance, can be one of `ASYNCHRONOUS` or `SYNCHRONOUS`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_labels: A set of key/value user label pairs to assign to the instance.
        """
        pulumi.set(__self__, "tier", tier)
        pulumi.set(__self__, "activationPolicy", activation_policy)
        if authorized_gae_applications is not None:
            warnings.warn("This property is only applicable to First Generation instances, and First Generation instances are now deprecated.", DeprecationWarning)
            pulumi.log.warn("authorized_gae_applications is deprecated: This property is only applicable to First Generation instances, and First Generation instances are now deprecated.")
        pulumi.set(__self__, "authorizedGaeApplications", authorized_gae_applications)
        pulumi.set(__self__, "availabilityType", availability_type)
        pulumi.set(__self__, "backupConfiguration", backup_configuration)
        if crash_safe_replication is not None:
            warnings.warn("This property is only applicable to First Generation instances, and First Generation instances are now deprecated.", DeprecationWarning)
            pulumi.log.warn("crash_safe_replication is deprecated: This property is only applicable to First Generation instances, and First Generation instances are now deprecated.")
        pulumi.set(__self__, "crashSafeReplication", crash_safe_replication)
        pulumi.set(__self__, "databaseFlags", database_flags)
        pulumi.set(__self__, "diskAutoresize", disk_autoresize)
        pulumi.set(__self__, "diskSize", disk_size)
        pulumi.set(__self__, "diskType", disk_type)
        pulumi.set(__self__, "ipConfiguration", ip_configuration)
        pulumi.set(__self__, "locationPreference", location_preference)
        pulumi.set(__self__, "maintenanceWindow", maintenance_window)
        pulumi.set(__self__, "pricingPlan", pricing_plan)
        if replication_type is not None:
            warnings.warn("This property is only applicable to First Generation instances, and First Generation instances are now deprecated.", DeprecationWarning)
            pulumi.log.warn("replication_type is deprecated: This property is only applicable to First Generation instances, and First Generation instances are now deprecated.")
        pulumi.set(__self__, "replicationType", replication_type)
        pulumi.set(__self__, "userLabels", user_labels)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def tier(self) -> pulumi.Input[str]:
        """
        The machine type to use. See [tiers](https://cloud.google.com/sql/docs/admin-api/v1beta4/tiers)
        for more details and supported versions. Postgres supports only shared-core machine types such as `db-f1-micro`,
        and custom machine types such as `db-custom-2-13312`. See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.
        """
        ...

    @tier.setter
    def tier(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="activationPolicy")
    def activation_policy(self) -> Optional[pulumi.Input[str]]:
        """
        This specifies when the instance should be
        active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
        """
        ...

    @activation_policy.setter
    def activation_policy(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="authorizedGaeApplications")
    def authorized_gae_applications(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        This property is only applicable to First Generation instances.
        First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
        for information on how to upgrade to Second Generation instances.
        A list of Google App Engine (GAE) project names that are allowed to access this instance.
        """
        ...

    @authorized_gae_applications.setter
    def authorized_gae_applications(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="availabilityType")
    def availability_type(self) -> Optional[pulumi.Input[str]]:
        """
        The availability type of the Cloud SQL
        instance, high availability (`REGIONAL`) or single zone (`ZONAL`).' For MySQL
        instances, ensure that `settings.backup_configuration.enabled` and
        `settings.backup_configuration.binary_log_enabled` are both set to `true`.
        """
        ...

    @availability_type.setter
    def availability_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="backupConfiguration")
    def backup_configuration(self) -> Optional[pulumi.Input['DatabaseInstanceSettingsBackupConfigurationArgs']]:
        ...

    @backup_configuration.setter
    def backup_configuration(self, value: Optional[pulumi.Input['DatabaseInstanceSettingsBackupConfigurationArgs']]):
        ...

    @property
    @pulumi.getter(name="crashSafeReplication")
    def crash_safe_replication(self) -> Optional[pulumi.Input[bool]]:
        """
        This property is only applicable to First Generation instances.
        First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
        for information on how to upgrade to Second Generation instances.
        Specific to read instances, indicates
        when crash-safe replication flags are enabled.
        """
        ...

    @crash_safe_replication.setter
    def crash_safe_replication(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsDatabaseFlagArgs']]]]:
        ...

    @database_flags.setter
    def database_flags(self, value: Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsDatabaseFlagArgs']]]]):
        ...

    @property
    @pulumi.getter(name="diskAutoresize")
    def disk_autoresize(self) -> Optional[pulumi.Input[bool]]:
        """
        Configuration to increase storage size automatically.  Note that future `pulumi apply` calls will attempt to resize the disk to the value specified in `disk_size` - if this is set, do not set `disk_size`.
        """
        ...

    @disk_autoresize.setter
    def disk_autoresize(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[float]]:
        """
        The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased.
        """
        ...

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of data disk: PD_SSD or PD_HDD.
        """
        ...

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="ipConfiguration")
    def ip_configuration(self) -> Optional[pulumi.Input['DatabaseInstanceSettingsIpConfigurationArgs']]:
        ...

    @ip_configuration.setter
    def ip_configuration(self, value: Optional[pulumi.Input['DatabaseInstanceSettingsIpConfigurationArgs']]):
        ...

    @property
    @pulumi.getter(name="locationPreference")
    def location_preference(self) -> Optional[pulumi.Input['DatabaseInstanceSettingsLocationPreferenceArgs']]:
        ...

    @location_preference.setter
    def location_preference(self, value: Optional[pulumi.Input['DatabaseInstanceSettingsLocationPreferenceArgs']]):
        ...

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['DatabaseInstanceSettingsMaintenanceWindowArgs']]:
        ...

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['DatabaseInstanceSettingsMaintenanceWindowArgs']]):
        ...

    @property
    @pulumi.getter(name="pricingPlan")
    def pricing_plan(self) -> Optional[pulumi.Input[str]]:
        """
        Pricing plan for this instance, can only be `PER_USE`.
        """
        ...

    @pricing_plan.setter
    def pricing_plan(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="replicationType")
    def replication_type(self) -> Optional[pulumi.Input[str]]:
        """
        This property is only applicable to First Generation instances.
        First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
        for information on how to upgrade to Second Generation instances.
        Replication type for this instance, can be one of `ASYNCHRONOUS` or `SYNCHRONOUS`.
        """
        ...

    @replication_type.setter
    def replication_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="userLabels")
    def user_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value user label pairs to assign to the instance.
        """
        ...

    @user_labels.setter
    def user_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[float]]:
        ...

    @version.setter
    def version(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class DatabaseInstanceSettingsBackupConfigurationArgs:
    def __init__(__self__, *,
                 binary_log_enabled: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 point_in_time_recovery_enabled: Optional[pulumi.Input[bool]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] binary_log_enabled: True if binary logging is enabled. If
               `settings.backup_configuration.enabled` is false, this must be as well.
               Cannot be used with Postgres.
        :param pulumi.Input[bool] enabled: True if backup configuration is enabled.
        :param pulumi.Input[bool] point_in_time_recovery_enabled: True if Point-in-time recovery is enabled. Will restart database if enabled after instance creation.
        :param pulumi.Input[str] start_time: `HH:MM` format time indicating when backup
               configuration starts.
        """
        pulumi.set(__self__, "binaryLogEnabled", binary_log_enabled)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "pointInTimeRecoveryEnabled", point_in_time_recovery_enabled)
        pulumi.set(__self__, "startTime", start_time)

    @property
    @pulumi.getter(name="binaryLogEnabled")
    def binary_log_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if binary logging is enabled. If
        `settings.backup_configuration.enabled` is false, this must be as well.
        Cannot be used with Postgres.
        """
        ...

    @binary_log_enabled.setter
    def binary_log_enabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if backup configuration is enabled.
        """
        ...

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        ...

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="pointInTimeRecoveryEnabled")
    def point_in_time_recovery_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Point-in-time recovery is enabled. Will restart database if enabled after instance creation.
        """
        ...

    @point_in_time_recovery_enabled.setter
    def point_in_time_recovery_enabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        `HH:MM` format time indicating when backup
        configuration starts.
        """
        ...

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DatabaseInstanceSettingsDatabaseFlagArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: A name for this whitelist entry.
        :param pulumi.Input[str] value: A CIDR notation IPv4 or IPv6 address that is allowed to
               access this instance. Must be set even if other two attributes are not for
               the whitelist to become active.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A name for this whitelist entry.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A CIDR notation IPv4 or IPv6 address that is allowed to
        access this instance. Must be set even if other two attributes are not for
        the whitelist to become active.
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class DatabaseInstanceSettingsIpConfigurationArgs:
    def __init__(__self__, *,
                 authorized_networks: Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs']]]] = None,
                 ipv4_enabled: Optional[pulumi.Input[bool]] = None,
                 private_network: Optional[pulumi.Input[str]] = None,
                 require_ssl: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] ipv4_enabled: Whether this Cloud SQL instance should be assigned
               a public IPV4 address. Either `ipv4_enabled` must be enabled or a
               `private_network` must be configured.
        :param pulumi.Input[str] private_network: The VPC network from which the Cloud SQL
               instance is accessible for private IP. For example, projects/myProject/global/networks/default.
               Specifying a network enables private IP.
               Either `ipv4_enabled` must be enabled or a `private_network` must be configured.
               This setting can be updated, but it cannot be removed after it is set.
        :param pulumi.Input[bool] require_ssl: True if mysqld should default to `REQUIRE X509`
               for users connecting over IP.
        """
        pulumi.set(__self__, "authorizedNetworks", authorized_networks)
        pulumi.set(__self__, "ipv4Enabled", ipv4_enabled)
        pulumi.set(__self__, "privateNetwork", private_network)
        pulumi.set(__self__, "requireSsl", require_ssl)

    @property
    @pulumi.getter(name="authorizedNetworks")
    def authorized_networks(self) -> Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs']]]]:
        ...

    @authorized_networks.setter
    def authorized_networks(self, value: Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs']]]]):
        ...

    @property
    @pulumi.getter(name="ipv4Enabled")
    def ipv4_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this Cloud SQL instance should be assigned
        a public IPV4 address. Either `ipv4_enabled` must be enabled or a
        `private_network` must be configured.
        """
        ...

    @ipv4_enabled.setter
    def ipv4_enabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="privateNetwork")
    def private_network(self) -> Optional[pulumi.Input[str]]:
        """
        The VPC network from which the Cloud SQL
        instance is accessible for private IP. For example, projects/myProject/global/networks/default.
        Specifying a network enables private IP.
        Either `ipv4_enabled` must be enabled or a `private_network` must be configured.
        This setting can be updated, but it cannot be removed after it is set.
        """
        ...

    @private_network.setter
    def private_network(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="requireSsl")
    def require_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        True if mysqld should default to `REQUIRE X509`
        for users connecting over IP.
        """
        ...

    @require_ssl.setter
    def require_ssl(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 expiration_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: A CIDR notation IPv4 or IPv6 address that is allowed to
               access this instance. Must be set even if other two attributes are not for
               the whitelist to become active.
        :param pulumi.Input[str] expiration_time: The [RFC 3339](https://tools.ietf.org/html/rfc3339)
               formatted date time string indicating when this whitelist expires.
        :param pulumi.Input[str] name: A name for this whitelist entry.
        """
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "expirationTime", expiration_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A CIDR notation IPv4 or IPv6 address that is allowed to
        access this instance. Must be set even if other two attributes are not for
        the whitelist to become active.
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[str]]:
        """
        The [RFC 3339](https://tools.ietf.org/html/rfc3339)
        formatted date time string indicating when this whitelist expires.
        """
        ...

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for this whitelist entry.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DatabaseInstanceSettingsLocationPreferenceArgs:
    def __init__(__self__, *,
                 follow_gae_application: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] follow_gae_application: A GAE application whose zone to remain
               in. Must be in the same region as this instance.
        :param pulumi.Input[str] zone: The preferred compute engine
               [zone](https://cloud.google.com/compute/docs/zones?hl=en).
        """
        pulumi.set(__self__, "followGaeApplication", follow_gae_application)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="followGaeApplication")
    def follow_gae_application(self) -> Optional[pulumi.Input[str]]:
        """
        A GAE application whose zone to remain
        in. Must be in the same region as this instance.
        """
        ...

    @follow_gae_application.setter
    def follow_gae_application(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The preferred compute engine
        [zone](https://cloud.google.com/compute/docs/zones?hl=en).
        """
        ...

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DatabaseInstanceSettingsMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day: Optional[pulumi.Input[float]] = None,
                 hour: Optional[pulumi.Input[float]] = None,
                 update_track: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] day: Day of week (`1-7`), starting on Monday
        :param pulumi.Input[float] hour: Hour of day (`0-23`), ignored if `day` not set
        :param pulumi.Input[str] update_track: Receive updates earlier (`canary`) or later
               (`stable`)
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "updateTrack", update_track)

    @property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[float]]:
        """
        Day of week (`1-7`), starting on Monday
        """
        ...

    @day.setter
    def day(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def hour(self) -> Optional[pulumi.Input[float]]:
        """
        Hour of day (`0-23`), ignored if `day` not set
        """
        ...

    @hour.setter
    def hour(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="updateTrack")
    def update_track(self) -> Optional[pulumi.Input[str]]:
        """
        Receive updates earlier (`canary`) or later
        (`stable`)
        """
        ...

    @update_track.setter
    def update_track(self, value: Optional[pulumi.Input[str]]):
        ...


