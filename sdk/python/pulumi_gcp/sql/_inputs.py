# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DatabaseInstanceIpAddressArgs',
    'DatabaseInstanceReplicaConfigurationArgs',
    'DatabaseInstanceServerCaCertArgs',
    'DatabaseInstanceSettingsArgs',
    'DatabaseInstanceSettingsBackupConfigurationArgs',
    'DatabaseInstanceSettingsDatabaseFlagArgs',
    'DatabaseInstanceSettingsIpConfigurationArgs',
    'DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs',
    'DatabaseInstanceSettingsLocationPreferenceArgs',
    'DatabaseInstanceSettingsMaintenanceWindowArgs',
]

@pulumi.input_type
class DatabaseInstanceIpAddressArgs:
    ip_address: Optional[pulumi.Input[str]] = pulumi.input_property("ipAddress")
    time_to_retire: Optional[pulumi.Input[str]] = pulumi.input_property("timeToRetire")
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ip_address: Optional[pulumi.Input[str]] = None, time_to_retire: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        __self__.ip_address = ip_address
        __self__.time_to_retire = time_to_retire
        __self__.type = type

@pulumi.input_type
class DatabaseInstanceReplicaConfigurationArgs:
    ca_certificate: Optional[pulumi.Input[str]] = pulumi.input_property("caCertificate")
    """
    PEM representation of the trusted CA's x509
    certificate.
    """
    client_certificate: Optional[pulumi.Input[str]] = pulumi.input_property("clientCertificate")
    """
    PEM representation of the slave's x509
    certificate.
    """
    client_key: Optional[pulumi.Input[str]] = pulumi.input_property("clientKey")
    """
    PEM representation of the slave's private key. The
    corresponding public key in encoded in the `client_certificate`.
    """
    connect_retry_interval: Optional[pulumi.Input[float]] = pulumi.input_property("connectRetryInterval")
    """
    The number of seconds
    between connect retries.
    """
    dump_file_path: Optional[pulumi.Input[str]] = pulumi.input_property("dumpFilePath")
    """
    Path to a SQL file in GCS from which slave
    instances are created. Format is `gs://bucket/filename`.
    """
    failover_target: Optional[pulumi.Input[bool]] = pulumi.input_property("failoverTarget")
    """
    Specifies if the replica is the failover target.
    If the field is set to true the replica will be designated as a failover replica.
    If the master instance fails, the replica instance will be promoted as
    the new master instance.
    """
    master_heartbeat_period: Optional[pulumi.Input[float]] = pulumi.input_property("masterHeartbeatPeriod")
    """
    Time in ms between replication
    heartbeats.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    Password for the replication connection.
    """
    ssl_cipher: Optional[pulumi.Input[str]] = pulumi.input_property("sslCipher")
    username: Optional[pulumi.Input[str]] = pulumi.input_property("username")
    """
    Username for replication connection.
    """
    verify_server_certificate: Optional[pulumi.Input[bool]] = pulumi.input_property("verifyServerCertificate")
    """
    True if the master's common name
    value is checked during the SSL handshake.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ca_certificate: Optional[pulumi.Input[str]] = None, client_certificate: Optional[pulumi.Input[str]] = None, client_key: Optional[pulumi.Input[str]] = None, connect_retry_interval: Optional[pulumi.Input[float]] = None, dump_file_path: Optional[pulumi.Input[str]] = None, failover_target: Optional[pulumi.Input[bool]] = None, master_heartbeat_period: Optional[pulumi.Input[float]] = None, password: Optional[pulumi.Input[str]] = None, ssl_cipher: Optional[pulumi.Input[str]] = None, username: Optional[pulumi.Input[str]] = None, verify_server_certificate: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] ca_certificate: PEM representation of the trusted CA's x509
               certificate.
        :param pulumi.Input[str] client_certificate: PEM representation of the slave's x509
               certificate.
        :param pulumi.Input[str] client_key: PEM representation of the slave's private key. The
               corresponding public key in encoded in the `client_certificate`.
        :param pulumi.Input[float] connect_retry_interval: The number of seconds
               between connect retries.
        :param pulumi.Input[str] dump_file_path: Path to a SQL file in GCS from which slave
               instances are created. Format is `gs://bucket/filename`.
        :param pulumi.Input[bool] failover_target: Specifies if the replica is the failover target.
               If the field is set to true the replica will be designated as a failover replica.
               If the master instance fails, the replica instance will be promoted as
               the new master instance.
        :param pulumi.Input[float] master_heartbeat_period: Time in ms between replication
               heartbeats.
        :param pulumi.Input[str] password: Password for the replication connection.
        :param pulumi.Input[str] username: Username for replication connection.
        :param pulumi.Input[bool] verify_server_certificate: True if the master's common name
               value is checked during the SSL handshake.
        """
        __self__.ca_certificate = ca_certificate
        __self__.client_certificate = client_certificate
        __self__.client_key = client_key
        __self__.connect_retry_interval = connect_retry_interval
        __self__.dump_file_path = dump_file_path
        __self__.failover_target = failover_target
        __self__.master_heartbeat_period = master_heartbeat_period
        __self__.password = password
        __self__.ssl_cipher = ssl_cipher
        __self__.username = username
        __self__.verify_server_certificate = verify_server_certificate

@pulumi.input_type
class DatabaseInstanceServerCaCertArgs:
    cert: Optional[pulumi.Input[str]] = pulumi.input_property("cert")
    common_name: Optional[pulumi.Input[str]] = pulumi.input_property("commonName")
    create_time: Optional[pulumi.Input[str]] = pulumi.input_property("createTime")
    expiration_time: Optional[pulumi.Input[str]] = pulumi.input_property("expirationTime")
    """
    The [RFC 3339](https://tools.ietf.org/html/rfc3339)
    formatted date time string indicating when this whitelist expires.
    """
    sha1_fingerprint: Optional[pulumi.Input[str]] = pulumi.input_property("sha1Fingerprint")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cert: Optional[pulumi.Input[str]] = None, common_name: Optional[pulumi.Input[str]] = None, create_time: Optional[pulumi.Input[str]] = None, expiration_time: Optional[pulumi.Input[str]] = None, sha1_fingerprint: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] expiration_time: The [RFC 3339](https://tools.ietf.org/html/rfc3339)
               formatted date time string indicating when this whitelist expires.
        """
        __self__.cert = cert
        __self__.common_name = common_name
        __self__.create_time = create_time
        __self__.expiration_time = expiration_time
        __self__.sha1_fingerprint = sha1_fingerprint

@pulumi.input_type
class DatabaseInstanceSettingsArgs:
    tier: pulumi.Input[str] = pulumi.input_property("tier")
    """
    The machine type to use. See [tiers](https://cloud.google.com/sql/docs/admin-api/v1beta4/tiers)
    for more details and supported versions. Postgres supports only shared-core machine types such as `db-f1-micro`,
    and custom machine types such as `db-custom-2-13312`. See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.
    """
    activation_policy: Optional[pulumi.Input[str]] = pulumi.input_property("activationPolicy")
    """
    This specifies when the instance should be
    active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
    """
    authorized_gae_applications: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("authorizedGaeApplications")
    """
    This property is only applicable to First Generation instances.
    First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
    for information on how to upgrade to Second Generation instances.
    A list of Google App Engine (GAE) project names that are allowed to access this instance.
    """
    availability_type: Optional[pulumi.Input[str]] = pulumi.input_property("availabilityType")
    """
    The availability type of the Cloud SQL
    instance, high availability (`REGIONAL`) or single zone (`ZONAL`).' For MySQL
    instances, ensure that `settings.backup_configuration.enabled` and
    `settings.backup_configuration.binary_log_enabled` are both set to `true`.
    """
    backup_configuration: Optional[pulumi.Input['DatabaseInstanceSettingsBackupConfigurationArgs']] = pulumi.input_property("backupConfiguration")
    crash_safe_replication: Optional[pulumi.Input[bool]] = pulumi.input_property("crashSafeReplication")
    """
    This property is only applicable to First Generation instances.
    First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
    for information on how to upgrade to Second Generation instances.
    Specific to read instances, indicates
    when crash-safe replication flags are enabled.
    """
    database_flags: Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsDatabaseFlagArgs']]]] = pulumi.input_property("databaseFlags")
    disk_autoresize: Optional[pulumi.Input[bool]] = pulumi.input_property("diskAutoresize")
    """
    Configuration to increase storage size automatically.  Note that future `pulumi apply` calls will attempt to resize the disk to the value specified in `disk_size` - if this is set, do not set `disk_size`.
    """
    disk_size: Optional[pulumi.Input[float]] = pulumi.input_property("diskSize")
    """
    The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased.
    """
    disk_type: Optional[pulumi.Input[str]] = pulumi.input_property("diskType")
    """
    The type of data disk: PD_SSD or PD_HDD.
    """
    ip_configuration: Optional[pulumi.Input['DatabaseInstanceSettingsIpConfigurationArgs']] = pulumi.input_property("ipConfiguration")
    location_preference: Optional[pulumi.Input['DatabaseInstanceSettingsLocationPreferenceArgs']] = pulumi.input_property("locationPreference")
    maintenance_window: Optional[pulumi.Input['DatabaseInstanceSettingsMaintenanceWindowArgs']] = pulumi.input_property("maintenanceWindow")
    pricing_plan: Optional[pulumi.Input[str]] = pulumi.input_property("pricingPlan")
    """
    Pricing plan for this instance, can only be `PER_USE`.
    """
    replication_type: Optional[pulumi.Input[str]] = pulumi.input_property("replicationType")
    """
    This property is only applicable to First Generation instances.
    First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
    for information on how to upgrade to Second Generation instances.
    Replication type for this instance, can be one of `ASYNCHRONOUS` or `SYNCHRONOUS`.
    """
    user_labels: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("userLabels")
    """
    A set of key/value user label pairs to assign to the instance.
    """
    version: Optional[pulumi.Input[float]] = pulumi.input_property("version")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, tier: pulumi.Input[str], activation_policy: Optional[pulumi.Input[str]] = None, authorized_gae_applications: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, availability_type: Optional[pulumi.Input[str]] = None, backup_configuration: Optional[pulumi.Input['DatabaseInstanceSettingsBackupConfigurationArgs']] = None, crash_safe_replication: Optional[pulumi.Input[bool]] = None, database_flags: Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsDatabaseFlagArgs']]]] = None, disk_autoresize: Optional[pulumi.Input[bool]] = None, disk_size: Optional[pulumi.Input[float]] = None, disk_type: Optional[pulumi.Input[str]] = None, ip_configuration: Optional[pulumi.Input['DatabaseInstanceSettingsIpConfigurationArgs']] = None, location_preference: Optional[pulumi.Input['DatabaseInstanceSettingsLocationPreferenceArgs']] = None, maintenance_window: Optional[pulumi.Input['DatabaseInstanceSettingsMaintenanceWindowArgs']] = None, pricing_plan: Optional[pulumi.Input[str]] = None, replication_type: Optional[pulumi.Input[str]] = None, user_labels: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, version: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] tier: The machine type to use. See [tiers](https://cloud.google.com/sql/docs/admin-api/v1beta4/tiers)
               for more details and supported versions. Postgres supports only shared-core machine types such as `db-f1-micro`,
               and custom machine types such as `db-custom-2-13312`. See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.
        :param pulumi.Input[str] activation_policy: This specifies when the instance should be
               active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
        :param pulumi.Input[List[pulumi.Input[str]]] authorized_gae_applications: This property is only applicable to First Generation instances.
               First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
               for information on how to upgrade to Second Generation instances.
               A list of Google App Engine (GAE) project names that are allowed to access this instance.
        :param pulumi.Input[str] availability_type: The availability type of the Cloud SQL
               instance, high availability (`REGIONAL`) or single zone (`ZONAL`).' For MySQL
               instances, ensure that `settings.backup_configuration.enabled` and
               `settings.backup_configuration.binary_log_enabled` are both set to `true`.
        :param pulumi.Input[bool] crash_safe_replication: This property is only applicable to First Generation instances.
               First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
               for information on how to upgrade to Second Generation instances.
               Specific to read instances, indicates
               when crash-safe replication flags are enabled.
        :param pulumi.Input[bool] disk_autoresize: Configuration to increase storage size automatically.  Note that future `pulumi apply` calls will attempt to resize the disk to the value specified in `disk_size` - if this is set, do not set `disk_size`.
        :param pulumi.Input[float] disk_size: The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased.
        :param pulumi.Input[str] disk_type: The type of data disk: PD_SSD or PD_HDD.
        :param pulumi.Input[str] pricing_plan: Pricing plan for this instance, can only be `PER_USE`.
        :param pulumi.Input[str] replication_type: This property is only applicable to First Generation instances.
               First Generation instances are now deprecated, see [here](https://cloud.google.com/sql/docs/mysql/upgrade-2nd-gen)
               for information on how to upgrade to Second Generation instances.
               Replication type for this instance, can be one of `ASYNCHRONOUS` or `SYNCHRONOUS`.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] user_labels: A set of key/value user label pairs to assign to the instance.
        """
        __self__.tier = tier
        __self__.activation_policy = activation_policy
        if authorized_gae_applications is not None:
            warnings.warn("This property is only applicable to First Generation instances, and First Generation instances are now deprecated.", DeprecationWarning)
            pulumi.log.warn("authorized_gae_applications is deprecated: This property is only applicable to First Generation instances, and First Generation instances are now deprecated.")
        __self__.authorized_gae_applications = authorized_gae_applications
        __self__.availability_type = availability_type
        __self__.backup_configuration = backup_configuration
        if crash_safe_replication is not None:
            warnings.warn("This property is only applicable to First Generation instances, and First Generation instances are now deprecated.", DeprecationWarning)
            pulumi.log.warn("crash_safe_replication is deprecated: This property is only applicable to First Generation instances, and First Generation instances are now deprecated.")
        __self__.crash_safe_replication = crash_safe_replication
        __self__.database_flags = database_flags
        __self__.disk_autoresize = disk_autoresize
        __self__.disk_size = disk_size
        __self__.disk_type = disk_type
        __self__.ip_configuration = ip_configuration
        __self__.location_preference = location_preference
        __self__.maintenance_window = maintenance_window
        __self__.pricing_plan = pricing_plan
        if replication_type is not None:
            warnings.warn("This property is only applicable to First Generation instances, and First Generation instances are now deprecated.", DeprecationWarning)
            pulumi.log.warn("replication_type is deprecated: This property is only applicable to First Generation instances, and First Generation instances are now deprecated.")
        __self__.replication_type = replication_type
        __self__.user_labels = user_labels
        __self__.version = version

@pulumi.input_type
class DatabaseInstanceSettingsBackupConfigurationArgs:
    binary_log_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("binaryLogEnabled")
    """
    True if binary logging is enabled. If
    `settings.backup_configuration.enabled` is false, this must be as well.
    Cannot be used with Postgres.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    True if backup configuration is enabled.
    """
    location: Optional[pulumi.Input[str]] = pulumi.input_property("location")
    start_time: Optional[pulumi.Input[str]] = pulumi.input_property("startTime")
    """
    `HH:MM` format time indicating when backup
    configuration starts.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, binary_log_enabled: Optional[pulumi.Input[bool]] = None, enabled: Optional[pulumi.Input[bool]] = None, location: Optional[pulumi.Input[str]] = None, start_time: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] binary_log_enabled: True if binary logging is enabled. If
               `settings.backup_configuration.enabled` is false, this must be as well.
               Cannot be used with Postgres.
        :param pulumi.Input[bool] enabled: True if backup configuration is enabled.
        :param pulumi.Input[str] start_time: `HH:MM` format time indicating when backup
               configuration starts.
        """
        __self__.binary_log_enabled = binary_log_enabled
        __self__.enabled = enabled
        __self__.location = location
        __self__.start_time = start_time

@pulumi.input_type
class DatabaseInstanceSettingsDatabaseFlagArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name for this whitelist entry.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    A CIDR notation IPv4 or IPv6 address that is allowed to
    access this instance. Must be set even if other two attributes are not for
    the whitelist to become active.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: A name for this whitelist entry.
        :param pulumi.Input[str] value: A CIDR notation IPv4 or IPv6 address that is allowed to
               access this instance. Must be set even if other two attributes are not for
               the whitelist to become active.
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class DatabaseInstanceSettingsIpConfigurationArgs:
    authorized_networks: Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs']]]] = pulumi.input_property("authorizedNetworks")
    ipv4_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("ipv4Enabled")
    """
    Whether this Cloud SQL instance should be assigned
    a public IPV4 address. Either `ipv4_enabled` must be enabled or a
    `private_network` must be configured.
    """
    private_network: Optional[pulumi.Input[str]] = pulumi.input_property("privateNetwork")
    """
    The VPC network from which the Cloud SQL
    instance is accessible for private IP. For example, projects/myProject/global/networks/default.
    Specifying a network enables private IP.
    Either `ipv4_enabled` must be enabled or a `private_network` must be configured.
    This setting can be updated, but it cannot be removed after it is set.
    """
    require_ssl: Optional[pulumi.Input[bool]] = pulumi.input_property("requireSsl")
    """
    True if mysqld should default to `REQUIRE X509`
    for users connecting over IP.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, authorized_networks: Optional[pulumi.Input[List[pulumi.Input['DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs']]]] = None, ipv4_enabled: Optional[pulumi.Input[bool]] = None, private_network: Optional[pulumi.Input[str]] = None, require_ssl: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[bool] ipv4_enabled: Whether this Cloud SQL instance should be assigned
               a public IPV4 address. Either `ipv4_enabled` must be enabled or a
               `private_network` must be configured.
        :param pulumi.Input[str] private_network: The VPC network from which the Cloud SQL
               instance is accessible for private IP. For example, projects/myProject/global/networks/default.
               Specifying a network enables private IP.
               Either `ipv4_enabled` must be enabled or a `private_network` must be configured.
               This setting can be updated, but it cannot be removed after it is set.
        :param pulumi.Input[bool] require_ssl: True if mysqld should default to `REQUIRE X509`
               for users connecting over IP.
        """
        __self__.authorized_networks = authorized_networks
        __self__.ipv4_enabled = ipv4_enabled
        __self__.private_network = private_network
        __self__.require_ssl = require_ssl

@pulumi.input_type
class DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs:
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    A CIDR notation IPv4 or IPv6 address that is allowed to
    access this instance. Must be set even if other two attributes are not for
    the whitelist to become active.
    """
    expiration_time: Optional[pulumi.Input[str]] = pulumi.input_property("expirationTime")
    """
    The [RFC 3339](https://tools.ietf.org/html/rfc3339)
    formatted date time string indicating when this whitelist expires.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    A name for this whitelist entry.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, value: pulumi.Input[str], expiration_time: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] value: A CIDR notation IPv4 or IPv6 address that is allowed to
               access this instance. Must be set even if other two attributes are not for
               the whitelist to become active.
        :param pulumi.Input[str] expiration_time: The [RFC 3339](https://tools.ietf.org/html/rfc3339)
               formatted date time string indicating when this whitelist expires.
        :param pulumi.Input[str] name: A name for this whitelist entry.
        """
        __self__.value = value
        __self__.expiration_time = expiration_time
        __self__.name = name

@pulumi.input_type
class DatabaseInstanceSettingsLocationPreferenceArgs:
    follow_gae_application: Optional[pulumi.Input[str]] = pulumi.input_property("followGaeApplication")
    """
    A GAE application whose zone to remain
    in. Must be in the same region as this instance.
    """
    zone: Optional[pulumi.Input[str]] = pulumi.input_property("zone")
    """
    The preferred compute engine
    [zone](https://cloud.google.com/compute/docs/zones?hl=en).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, follow_gae_application: Optional[pulumi.Input[str]] = None, zone: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] follow_gae_application: A GAE application whose zone to remain
               in. Must be in the same region as this instance.
        :param pulumi.Input[str] zone: The preferred compute engine
               [zone](https://cloud.google.com/compute/docs/zones?hl=en).
        """
        __self__.follow_gae_application = follow_gae_application
        __self__.zone = zone

@pulumi.input_type
class DatabaseInstanceSettingsMaintenanceWindowArgs:
    day: Optional[pulumi.Input[float]] = pulumi.input_property("day")
    """
    Day of week (`1-7`), starting on Monday
    """
    hour: Optional[pulumi.Input[float]] = pulumi.input_property("hour")
    """
    Hour of day (`0-23`), ignored if `day` not set
    """
    update_track: Optional[pulumi.Input[str]] = pulumi.input_property("updateTrack")
    """
    Receive updates earlier (`canary`) or later
    (`stable`)
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, day: Optional[pulumi.Input[float]] = None, hour: Optional[pulumi.Input[float]] = None, update_track: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] day: Day of week (`1-7`), starting on Monday
        :param pulumi.Input[float] hour: Hour of day (`0-23`), ignored if `day` not set
        :param pulumi.Input[str] update_track: Receive updates earlier (`canary`) or later
               (`stable`)
        """
        __self__.day = day
        __self__.hour = hour
        __self__.update_track = update_track

