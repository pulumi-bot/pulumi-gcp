# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class EntryBigqueryDateShardedSpecArgs:
    dataset: Optional[pulumi.Input[str]] = pulumi.input_property("dataset")
    shard_count: Optional[pulumi.Input[float]] = pulumi.input_property("shardCount")
    table_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("tablePrefix")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, dataset: Optional[pulumi.Input[str]] = None, shard_count: Optional[pulumi.Input[float]] = None, table_prefix: Optional[pulumi.Input[str]] = None) -> None:
        __self__.dataset = dataset
        __self__.shard_count = shard_count
        __self__.table_prefix = table_prefix

@pulumi.input_type
class EntryBigqueryTableSpecArgs:
    table_source_type: Optional[pulumi.Input[str]] = pulumi.input_property("tableSourceType")
    table_spec: Optional[pulumi.Input['EntryBigqueryTableSpecTableSpecArgs']] = pulumi.input_property("tableSpec")
    view_spec: Optional[pulumi.Input['EntryBigqueryTableSpecViewSpecArgs']] = pulumi.input_property("viewSpec")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, table_source_type: Optional[pulumi.Input[str]] = None, table_spec: Optional[pulumi.Input['EntryBigqueryTableSpecTableSpecArgs']] = None, view_spec: Optional[pulumi.Input['EntryBigqueryTableSpecViewSpecArgs']] = None) -> None:
        __self__.table_source_type = table_source_type
        __self__.table_spec = table_spec
        __self__.view_spec = view_spec

@pulumi.input_type
class EntryBigqueryTableSpecTableSpecArgs:
    grouped_entry: Optional[pulumi.Input[str]] = pulumi.input_property("groupedEntry")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, grouped_entry: Optional[pulumi.Input[str]] = None) -> None:
        __self__.grouped_entry = grouped_entry

@pulumi.input_type
class EntryBigqueryTableSpecViewSpecArgs:
    view_query: Optional[pulumi.Input[str]] = pulumi.input_property("viewQuery")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, view_query: Optional[pulumi.Input[str]] = None) -> None:
        __self__.view_query = view_query

@pulumi.input_type
class EntryGcsFilesetSpecArgs:
    file_patterns: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("filePatterns")
    """
    Patterns to identify a set of files in Google Cloud Storage.
    See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames)
    for more information. Note that bucket wildcards are currently not supported. Examples of valid filePatterns:
    * gs://bucket_name/dir/*: matches all files within bucket_name/dir directory.
    * gs://bucket_name/dir/**: matches all files in bucket_name/dir spanning all subdirectories.
    * gs://bucket_name/file*: matches files prefixed by file in bucket_name
    * gs://bucket_name/??.txt: matches files with two characters followed by .txt in bucket_name
    * gs://bucket_name/[aeiou].txt: matches files that contain a single vowel character followed by .txt in bucket_name
    * gs://bucket_name/[a-m].txt: matches files that contain a, b, ... or m followed by .txt in bucket_name
    * gs://bucket_name/a/*/b: matches all files in bucket_name that match a/*/b pattern, such as a/c/b, a/d/b
    * gs://another_bucket/a.txt: matches gs://another_bucket/a.txt
    """
    sample_gcs_file_specs: Optional[pulumi.Input[List[pulumi.Input['EntryGcsFilesetSpecSampleGcsFileSpecArgs']]]] = pulumi.input_property("sampleGcsFileSpecs")
    """
    -
    Sample files contained in this fileset, not all files contained in this fileset are represented here.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, file_patterns: pulumi.Input[List[pulumi.Input[str]]], sample_gcs_file_specs: Optional[pulumi.Input[List[pulumi.Input['EntryGcsFilesetSpecSampleGcsFileSpecArgs']]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] file_patterns: Patterns to identify a set of files in Google Cloud Storage.
               See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames)
               for more information. Note that bucket wildcards are currently not supported. Examples of valid filePatterns:
               * gs://bucket_name/dir/*: matches all files within bucket_name/dir directory.
               * gs://bucket_name/dir/**: matches all files in bucket_name/dir spanning all subdirectories.
               * gs://bucket_name/file*: matches files prefixed by file in bucket_name
               * gs://bucket_name/??.txt: matches files with two characters followed by .txt in bucket_name
               * gs://bucket_name/[aeiou].txt: matches files that contain a single vowel character followed by .txt in bucket_name
               * gs://bucket_name/[a-m].txt: matches files that contain a, b, ... or m followed by .txt in bucket_name
               * gs://bucket_name/a/*/b: matches all files in bucket_name that match a/*/b pattern, such as a/c/b, a/d/b
               * gs://another_bucket/a.txt: matches gs://another_bucket/a.txt
        :param pulumi.Input[List[pulumi.Input['EntryGcsFilesetSpecSampleGcsFileSpecArgs']]] sample_gcs_file_specs: -
               Sample files contained in this fileset, not all files contained in this fileset are represented here.  Structure is documented below.
        """
        __self__.file_patterns = file_patterns
        __self__.sample_gcs_file_specs = sample_gcs_file_specs

@pulumi.input_type
class EntryGcsFilesetSpecSampleGcsFileSpecArgs:
    file_path: Optional[pulumi.Input[str]] = pulumi.input_property("filePath")
    """
    -
    The full file path
    """
    size_bytes: Optional[pulumi.Input[float]] = pulumi.input_property("sizeBytes")
    """
    -
    The size of the file, in bytes.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, file_path: Optional[pulumi.Input[str]] = None, size_bytes: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] file_path: -
               The full file path
        :param pulumi.Input[float] size_bytes: -
               The size of the file, in bytes.
        """
        __self__.file_path = file_path
        __self__.size_bytes = size_bytes

@pulumi.input_type
class EntryGroupIamBindingConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class EntryGroupIamMemberConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class TagFieldArgs:
    field_name: pulumi.Input[str] = pulumi.input_property("fieldName")
    """
    The identifier for this object. Format specified above.
    """
    bool_value: Optional[pulumi.Input[bool]] = pulumi.input_property("boolValue")
    """
    Holds the value for a tag field with boolean type.
    """
    display_name: Optional[pulumi.Input[str]] = pulumi.input_property("displayName")
    """
    -
    The display name of this field
    """
    double_value: Optional[pulumi.Input[float]] = pulumi.input_property("doubleValue")
    """
    Holds the value for a tag field with double type.
    """
    enum_value: Optional[pulumi.Input[str]] = pulumi.input_property("enumValue")
    """
    Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum.  Structure is documented below.
    """
    order: Optional[pulumi.Input[float]] = pulumi.input_property("order")
    """
    -
    The order of this field with respect to other fields in this tag. For example, a higher value can indicate
    a more important field. The value can be negative. Multiple fields can have the same order, and field orders
    within a tag do not have to be sequential.
    """
    string_value: Optional[pulumi.Input[str]] = pulumi.input_property("stringValue")
    """
    Holds the value for a tag field with string type.
    """
    timestamp_value: Optional[pulumi.Input[str]] = pulumi.input_property("timestampValue")
    """
    Holds the value for a tag field with timestamp type.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, field_name: pulumi.Input[str], bool_value: Optional[pulumi.Input[bool]] = None, display_name: Optional[pulumi.Input[str]] = None, double_value: Optional[pulumi.Input[float]] = None, enum_value: Optional[pulumi.Input[str]] = None, order: Optional[pulumi.Input[float]] = None, string_value: Optional[pulumi.Input[str]] = None, timestamp_value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] field_name: The identifier for this object. Format specified above.
        :param pulumi.Input[bool] bool_value: Holds the value for a tag field with boolean type.
        :param pulumi.Input[str] display_name: -
               The display name of this field
        :param pulumi.Input[float] double_value: Holds the value for a tag field with double type.
        :param pulumi.Input[str] enum_value: Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum.  Structure is documented below.
        :param pulumi.Input[float] order: -
               The order of this field with respect to other fields in this tag. For example, a higher value can indicate
               a more important field. The value can be negative. Multiple fields can have the same order, and field orders
               within a tag do not have to be sequential.
        :param pulumi.Input[str] string_value: Holds the value for a tag field with string type.
        :param pulumi.Input[str] timestamp_value: Holds the value for a tag field with timestamp type.
        """
        __self__.field_name = field_name
        __self__.bool_value = bool_value
        __self__.display_name = display_name
        __self__.double_value = double_value
        __self__.enum_value = enum_value
        __self__.order = order
        __self__.string_value = string_value
        __self__.timestamp_value = timestamp_value

@pulumi.input_type
class TagTemplateFieldArgs:
    field_id: pulumi.Input[str] = pulumi.input_property("fieldId")
    """
    The identifier for this object. Format specified above.
    """
    type: pulumi.Input['TagTemplateFieldTypeArgs'] = pulumi.input_property("type")
    """
    The type of value this tag field can contain.  Structure is documented below.
    """
    display_name: Optional[pulumi.Input[str]] = pulumi.input_property("displayName")
    """
    The display name for this template.
    """
    is_required: Optional[pulumi.Input[bool]] = pulumi.input_property("isRequired")
    """
    Whether this is a required field. Defaults to false.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    -
    The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
    """
    order: Optional[pulumi.Input[float]] = pulumi.input_property("order")
    """
    The order of this field with respect to other fields in this tag template.
    A higher value indicates a more important field. The value can be negative.
    Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, field_id: pulumi.Input[str], type: pulumi.Input['TagTemplateFieldTypeArgs'], display_name: Optional[pulumi.Input[str]] = None, is_required: Optional[pulumi.Input[bool]] = None, name: Optional[pulumi.Input[str]] = None, order: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] field_id: The identifier for this object. Format specified above.
        :param pulumi.Input['TagTemplateFieldTypeArgs'] type: The type of value this tag field can contain.  Structure is documented below.
        :param pulumi.Input[str] display_name: The display name for this template.
        :param pulumi.Input[bool] is_required: Whether this is a required field. Defaults to false.
        :param pulumi.Input[str] name: -
               The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
        :param pulumi.Input[float] order: The order of this field with respect to other fields in this tag template.
               A higher value indicates a more important field. The value can be negative.
               Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
        """
        __self__.field_id = field_id
        __self__.type = type
        __self__.display_name = display_name
        __self__.is_required = is_required
        __self__.name = name
        __self__.order = order

@pulumi.input_type
class TagTemplateFieldTypeArgs:
    enum_type: Optional[pulumi.Input['TagTemplateFieldTypeEnumTypeArgs']] = pulumi.input_property("enumType")
    """
    Represents an enum type.
    Exactly one of `primitive_type` or `enum_type` must be set  Structure is documented below.
    """
    primitive_type: Optional[pulumi.Input[str]] = pulumi.input_property("primitiveType")
    """
    Represents primitive types - string, bool etc.
    Exactly one of `primitive_type` or `enum_type` must be set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enum_type: Optional[pulumi.Input['TagTemplateFieldTypeEnumTypeArgs']] = None, primitive_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input['TagTemplateFieldTypeEnumTypeArgs'] enum_type: Represents an enum type.
               Exactly one of `primitive_type` or `enum_type` must be set  Structure is documented below.
        :param pulumi.Input[str] primitive_type: Represents primitive types - string, bool etc.
               Exactly one of `primitive_type` or `enum_type` must be set
        """
        __self__.enum_type = enum_type
        __self__.primitive_type = primitive_type

@pulumi.input_type
class TagTemplateFieldTypeEnumTypeArgs:
    allowed_values: pulumi.Input[List[pulumi.Input['TagTemplateFieldTypeEnumTypeAllowedValueArgs']]] = pulumi.input_property("allowedValues")
    """
    The set of allowed values for this enum. The display names of the
    values must be case-insensitively unique within this set. Currently,
    enum values can only be added to the list of allowed values. Deletion
    and renaming of enum values are not supported.
    Can have up to 500 allowed values.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_values: pulumi.Input[List[pulumi.Input['TagTemplateFieldTypeEnumTypeAllowedValueArgs']]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['TagTemplateFieldTypeEnumTypeAllowedValueArgs']]] allowed_values: The set of allowed values for this enum. The display names of the
               values must be case-insensitively unique within this set. Currently,
               enum values can only be added to the list of allowed values. Deletion
               and renaming of enum values are not supported.
               Can have up to 500 allowed values.  Structure is documented below.
        """
        __self__.allowed_values = allowed_values

@pulumi.input_type
class TagTemplateFieldTypeEnumTypeAllowedValueArgs:
    display_name: pulumi.Input[str] = pulumi.input_property("displayName")
    """
    The display name for this template.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, display_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] display_name: The display name for this template.
        """
        __self__.display_name = display_name

