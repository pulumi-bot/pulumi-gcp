# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'EntryBigqueryDateShardedSpec',
    'EntryBigqueryTableSpec',
    'EntryBigqueryTableSpecTableSpec',
    'EntryBigqueryTableSpecViewSpec',
    'EntryGcsFilesetSpec',
    'EntryGcsFilesetSpecSampleGcsFileSpec',
    'EntryGroupIamBindingCondition',
    'EntryGroupIamMemberCondition',
    'TagField',
    'TagTemplateField',
    'TagTemplateFieldType',
    'TagTemplateFieldTypeEnumType',
    'TagTemplateFieldTypeEnumTypeAllowedValue',
]

@pulumi.output_type
class EntryBigqueryDateShardedSpec(dict):
    @property
    @pulumi.getter
    def dataset(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="tablePrefix")
    def table_prefix(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EntryBigqueryTableSpec(dict):
    @property
    @pulumi.getter(name="tableSourceType")
    def table_source_type(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="tableSpec")
    def table_spec(self) -> Optional['outputs.EntryBigqueryTableSpecTableSpec']:
        ...

    @property
    @pulumi.getter(name="viewSpec")
    def view_spec(self) -> Optional['outputs.EntryBigqueryTableSpecViewSpec']:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EntryBigqueryTableSpecTableSpec(dict):
    @property
    @pulumi.getter(name="groupedEntry")
    def grouped_entry(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EntryBigqueryTableSpecViewSpec(dict):
    @property
    @pulumi.getter(name="viewQuery")
    def view_query(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EntryGcsFilesetSpec(dict):
    @property
    @pulumi.getter(name="filePatterns")
    def file_patterns(self) -> List[str]:
        """
        Patterns to identify a set of files in Google Cloud Storage.
        See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames)
        for more information. Note that bucket wildcards are currently not supported. Examples of valid filePatterns:
        * gs://bucket_name/dir/*: matches all files within bucket_name/dir directory.
        * gs://bucket_name/dir/**: matches all files in bucket_name/dir spanning all subdirectories.
        * gs://bucket_name/file*: matches files prefixed by file in bucket_name
        * gs://bucket_name/??.txt: matches files with two characters followed by .txt in bucket_name
        * gs://bucket_name/[aeiou].txt: matches files that contain a single vowel character followed by .txt in bucket_name
        * gs://bucket_name/[a-m].txt: matches files that contain a, b, ... or m followed by .txt in bucket_name
        * gs://bucket_name/a/*/b: matches all files in bucket_name that match a/*/b pattern, such as a/c/b, a/d/b
        * gs://another_bucket/a.txt: matches gs://another_bucket/a.txt
        """
        ...

    @property
    @pulumi.getter(name="sampleGcsFileSpecs")
    def sample_gcs_file_specs(self) -> Optional[List['outputs.EntryGcsFilesetSpecSampleGcsFileSpec']]:
        """
        -
        Sample files contained in this fileset, not all files contained in this fileset are represented here.  Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EntryGcsFilesetSpecSampleGcsFileSpec(dict):
    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[str]:
        """
        -
        The full file path
        """
        ...

    @property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> Optional[float]:
        """
        -
        The size of the file, in bytes.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EntryGroupIamBindingCondition(dict):
    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def expression(self) -> str:
        ...

    @property
    @pulumi.getter
    def title(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EntryGroupIamMemberCondition(dict):
    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def expression(self) -> str:
        ...

    @property
    @pulumi.getter
    def title(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TagField(dict):
    @property
    @pulumi.getter(name="boolValue")
    def bool_value(self) -> Optional[bool]:
        """
        Holds the value for a tag field with boolean type.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        -
        The display name of this field
        """
        ...

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[float]:
        """
        Holds the value for a tag field with double type.
        """
        ...

    @property
    @pulumi.getter(name="enumValue")
    def enum_value(self) -> Optional[str]:
        """
        Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum.  Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        """
        The identifier for this object. Format specified above.
        """
        ...

    @property
    @pulumi.getter
    def order(self) -> Optional[float]:
        """
        -
        The order of this field with respect to other fields in this tag. For example, a higher value can indicate
        a more important field. The value can be negative. Multiple fields can have the same order, and field orders
        within a tag do not have to be sequential.
        """
        ...

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[str]:
        """
        Holds the value for a tag field with string type.
        """
        ...

    @property
    @pulumi.getter(name="timestampValue")
    def timestamp_value(self) -> Optional[str]:
        """
        Holds the value for a tag field with timestamp type.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TagTemplateField(dict):
    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name for this template.
        """
        ...

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        """
        The identifier for this object. Format specified above.
        """
        ...

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Whether this is a required field. Defaults to false.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        -
        The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
        """
        ...

    @property
    @pulumi.getter
    def order(self) -> Optional[float]:
        """
        The order of this field with respect to other fields in this tag template.
        A higher value indicates a more important field. The value can be negative.
        Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> 'outputs.TagTemplateFieldType':
        """
        The type of value this tag field can contain.  Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TagTemplateFieldType(dict):
    @property
    @pulumi.getter(name="enumType")
    def enum_type(self) -> Optional['outputs.TagTemplateFieldTypeEnumType']:
        """
        Represents an enum type.
        Exactly one of `primitive_type` or `enum_type` must be set  Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="primitiveType")
    def primitive_type(self) -> Optional[str]:
        """
        Represents primitive types - string, bool etc.
        Exactly one of `primitive_type` or `enum_type` must be set
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TagTemplateFieldTypeEnumType(dict):
    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> List['outputs.TagTemplateFieldTypeEnumTypeAllowedValue']:
        """
        The set of allowed values for this enum. The display names of the
        values must be case-insensitively unique within this set. Currently,
        enum values can only be added to the list of allowed values. Deletion
        and renaming of enum values are not supported.
        Can have up to 500 allowed values.  Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TagTemplateFieldTypeEnumTypeAllowedValue(dict):
    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for this template.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


