# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'GameServerClusterConnectionInfo',
    'GameServerClusterConnectionInfoGkeClusterReference',
    'GameServerConfigFleetConfig',
    'GameServerConfigScalingConfig',
    'GameServerConfigScalingConfigSchedule',
    'GameServerConfigScalingConfigSelector',
    'GameServerDeploymentRolloutGameServerConfigOverride',
    'GameServerDeploymentRolloutGameServerConfigOverrideRealmsSelector',
    'GetGameServerDeploymentRolloutGameServerConfigOverrideResult',
    'GetGameServerDeploymentRolloutGameServerConfigOverrideRealmsSelectorResult',
]

@pulumi.output_type
class GameServerClusterConnectionInfo(dict):
    @property
    @pulumi.getter(name="gkeClusterReference")
    def gke_cluster_reference(self) -> 'outputs.GameServerClusterConnectionInfoGkeClusterReference':
        """
        Reference of the GKE cluster where the game servers are installed.  Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace designated on the game server cluster where the game server
        instances will be created. The namespace existence will be validated
        during creation.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GameServerClusterConnectionInfoGkeClusterReference(dict):
    @property
    @pulumi.getter
    def cluster(self) -> str:
        """
        The full or partial name of a GKE cluster, using one of the following
        forms:
        * `projects/{project_id}/locations/{location}/clusters/{cluster_id}`
        * `locations/{location}/clusters/{cluster_id}`
        * `{cluster_id}`
        If project and location are not specified, the project and location of the
        GameServerCluster resource are used to generate the full name of the
        GKE cluster.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GameServerConfigFleetConfig(dict):
    @property
    @pulumi.getter(name="fleetSpec")
    def fleet_spec(self) -> str:
        """
        The fleet spec, which is sent to Agones to configure fleet.
        The spec can be passed as inline json but it is recommended to use a file reference
        instead. File references can contain the json or yaml format of the fleet spec. Eg:
        * fleet_spec = jsonencode(yamldecode(file("fleet_configs.yaml")))
        * fleet_spec = file("fleet_configs.json")
        The format of the spec can be found :
        `https://agones.dev/site/docs/reference/fleet/`.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the ScalingConfig
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GameServerConfigScalingConfig(dict):
    @property
    @pulumi.getter(name="fleetAutoscalerSpec")
    def fleet_autoscaler_spec(self) -> str:
        """
        Fleet autoscaler spec, which is sent to Agones.
        Example spec can be found :
        https://agones.dev/site/docs/reference/fleetautoscaler/
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ScalingConfig
        """
        ...

    @property
    @pulumi.getter
    def schedules(self) -> Optional[List['outputs.GameServerConfigScalingConfigSchedule']]:
        """
        The schedules to which this scaling config applies.  Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def selectors(self) -> Optional[List['outputs.GameServerConfigScalingConfigSelector']]:
        """
        Labels used to identify the clusters to which this scaling config
        applies. A cluster is subject to this scaling config if its labels match
        any of the selector entries.  Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GameServerConfigScalingConfigSchedule(dict):
    @property
    @pulumi.getter(name="cronJobDuration")
    def cron_job_duration(self) -> Optional[str]:
        """
        The duration for the cron job event. The duration of the event is effective
        after the cron job's start time.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        """
        ...

    @property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> Optional[str]:
        """
        The cron definition of the scheduled event. See
        https://en.wikipedia.org/wiki/Cron. Cron spec specifies the local time as
        defined by the realm.
        """
        ...

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        The end time of the event.
        A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The start time of the event.
        A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GameServerConfigScalingConfigSelector(dict):
    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Set of labels to group by.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GameServerDeploymentRolloutGameServerConfigOverride(dict):
    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> Optional[str]:
        """
        Version of the configuration.
        """
        ...

    @property
    @pulumi.getter(name="realmsSelector")
    def realms_selector(self) -> Optional['outputs.GameServerDeploymentRolloutGameServerConfigOverrideRealmsSelector']:
        """
        Selection by realms.  Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GameServerDeploymentRolloutGameServerConfigOverrideRealmsSelector(dict):
    @property
    @pulumi.getter
    def realms(self) -> Optional[List[str]]:
        """
        List of realms to match against.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetGameServerDeploymentRolloutGameServerConfigOverrideResult(dict):
    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> str:
        ...

    @property
    @pulumi.getter(name="realmsSelectors")
    def realms_selectors(self) -> List['outputs.GetGameServerDeploymentRolloutGameServerConfigOverrideRealmsSelectorResult']:
        ...


@pulumi.output_type
class GetGameServerDeploymentRolloutGameServerConfigOverrideRealmsSelectorResult(dict):
    @property
    @pulumi.getter
    def realms(self) -> List[str]:
        ...


