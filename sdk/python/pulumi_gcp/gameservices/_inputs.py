# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GameServerClusterConnectionInfoArgs',
    'GameServerClusterConnectionInfoGkeClusterReferenceArgs',
    'GameServerConfigFleetConfigArgs',
    'GameServerConfigScalingConfigArgs',
    'GameServerConfigScalingConfigScheduleArgs',
    'GameServerConfigScalingConfigSelectorArgs',
    'GameServerDeploymentRolloutGameServerConfigOverrideArgs',
    'GameServerDeploymentRolloutGameServerConfigOverrideRealmsSelectorArgs',
]

@pulumi.input_type
class GameServerClusterConnectionInfoArgs:
    gke_cluster_reference: pulumi.Input['GameServerClusterConnectionInfoGkeClusterReferenceArgs'] = pulumi.input_property("gkeClusterReference")
    """
    Reference of the GKE cluster where the game servers are installed.  Structure is documented below.
    """
    namespace: pulumi.Input[str] = pulumi.input_property("namespace")
    """
    Namespace designated on the game server cluster where the game server
    instances will be created. The namespace existence will be validated
    during creation.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, gke_cluster_reference: pulumi.Input['GameServerClusterConnectionInfoGkeClusterReferenceArgs'], namespace: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input['GameServerClusterConnectionInfoGkeClusterReferenceArgs'] gke_cluster_reference: Reference of the GKE cluster where the game servers are installed.  Structure is documented below.
        :param pulumi.Input[str] namespace: Namespace designated on the game server cluster where the game server
               instances will be created. The namespace existence will be validated
               during creation.
        """
        __self__.gke_cluster_reference = gke_cluster_reference
        __self__.namespace = namespace

@pulumi.input_type
class GameServerClusterConnectionInfoGkeClusterReferenceArgs:
    cluster: pulumi.Input[str] = pulumi.input_property("cluster")
    """
    The full or partial name of a GKE cluster, using one of the following
    forms:
    * `projects/{project_id}/locations/{location}/clusters/{cluster_id}`
    * `locations/{location}/clusters/{cluster_id}`
    * `{cluster_id}`
    If project and location are not specified, the project and location of the
    GameServerCluster resource are used to generate the full name of the
    GKE cluster.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cluster: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] cluster: The full or partial name of a GKE cluster, using one of the following
               forms:
               * `projects/{project_id}/locations/{location}/clusters/{cluster_id}`
               * `locations/{location}/clusters/{cluster_id}`
               * `{cluster_id}`
               If project and location are not specified, the project and location of the
               GameServerCluster resource are used to generate the full name of the
               GKE cluster.
        """
        __self__.cluster = cluster

@pulumi.input_type
class GameServerConfigFleetConfigArgs:
    fleet_spec: pulumi.Input[str] = pulumi.input_property("fleetSpec")
    """
    The fleet spec, which is sent to Agones to configure fleet.
    The spec can be passed as inline json but it is recommended to use a file reference
    instead. File references can contain the json or yaml format of the fleet spec. Eg:
    * fleet_spec = jsonencode(yamldecode(file("fleet_configs.yaml")))
    * fleet_spec = file("fleet_configs.json")
    The format of the spec can be found :
    `https://agones.dev/site/docs/reference/fleet/`.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of the ScalingConfig
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, fleet_spec: pulumi.Input[str], name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] fleet_spec: The fleet spec, which is sent to Agones to configure fleet.
               The spec can be passed as inline json but it is recommended to use a file reference
               instead. File references can contain the json or yaml format of the fleet spec. Eg:
               * fleet_spec = jsonencode(yamldecode(file("fleet_configs.yaml")))
               * fleet_spec = file("fleet_configs.json")
               The format of the spec can be found :
               `https://agones.dev/site/docs/reference/fleet/`.
        :param pulumi.Input[str] name: The name of the ScalingConfig
        """
        __self__.fleet_spec = fleet_spec
        __self__.name = name

@pulumi.input_type
class GameServerConfigScalingConfigArgs:
    fleet_autoscaler_spec: pulumi.Input[str] = pulumi.input_property("fleetAutoscalerSpec")
    """
    Fleet autoscaler spec, which is sent to Agones.
    Example spec can be found :
    https://agones.dev/site/docs/reference/fleetautoscaler/
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the ScalingConfig
    """
    schedules: Optional[pulumi.Input[List[pulumi.Input['GameServerConfigScalingConfigScheduleArgs']]]] = pulumi.input_property("schedules")
    """
    The schedules to which this scaling config applies.  Structure is documented below.
    """
    selectors: Optional[pulumi.Input[List[pulumi.Input['GameServerConfigScalingConfigSelectorArgs']]]] = pulumi.input_property("selectors")
    """
    Labels used to identify the clusters to which this scaling config
    applies. A cluster is subject to this scaling config if its labels match
    any of the selector entries.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, fleet_autoscaler_spec: pulumi.Input[str], name: pulumi.Input[str], schedules: Optional[pulumi.Input[List[pulumi.Input['GameServerConfigScalingConfigScheduleArgs']]]] = None, selectors: Optional[pulumi.Input[List[pulumi.Input['GameServerConfigScalingConfigSelectorArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] fleet_autoscaler_spec: Fleet autoscaler spec, which is sent to Agones.
               Example spec can be found :
               https://agones.dev/site/docs/reference/fleetautoscaler/
        :param pulumi.Input[str] name: The name of the ScalingConfig
        :param pulumi.Input[List[pulumi.Input['GameServerConfigScalingConfigScheduleArgs']]] schedules: The schedules to which this scaling config applies.  Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['GameServerConfigScalingConfigSelectorArgs']]] selectors: Labels used to identify the clusters to which this scaling config
               applies. A cluster is subject to this scaling config if its labels match
               any of the selector entries.  Structure is documented below.
        """
        __self__.fleet_autoscaler_spec = fleet_autoscaler_spec
        __self__.name = name
        __self__.schedules = schedules
        __self__.selectors = selectors

@pulumi.input_type
class GameServerConfigScalingConfigScheduleArgs:
    cron_job_duration: Optional[pulumi.Input[str]] = pulumi.input_property("cronJobDuration")
    """
    The duration for the cron job event. The duration of the event is effective
    after the cron job's start time.
    A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    """
    cron_spec: Optional[pulumi.Input[str]] = pulumi.input_property("cronSpec")
    """
    The cron definition of the scheduled event. See
    https://en.wikipedia.org/wiki/Cron. Cron spec specifies the local time as
    defined by the realm.
    """
    end_time: Optional[pulumi.Input[str]] = pulumi.input_property("endTime")
    """
    The end time of the event.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    start_time: Optional[pulumi.Input[str]] = pulumi.input_property("startTime")
    """
    The start time of the event.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cron_job_duration: Optional[pulumi.Input[str]] = None, cron_spec: Optional[pulumi.Input[str]] = None, end_time: Optional[pulumi.Input[str]] = None, start_time: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] cron_job_duration: The duration for the cron job event. The duration of the event is effective
               after the cron job's start time.
               A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        :param pulumi.Input[str] cron_spec: The cron definition of the scheduled event. See
               https://en.wikipedia.org/wiki/Cron. Cron spec specifies the local time as
               defined by the realm.
        :param pulumi.Input[str] end_time: The end time of the event.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input[str] start_time: The start time of the event.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        __self__.cron_job_duration = cron_job_duration
        __self__.cron_spec = cron_spec
        __self__.end_time = end_time
        __self__.start_time = start_time

@pulumi.input_type
class GameServerConfigScalingConfigSelectorArgs:
    labels: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("labels")
    """
    Set of labels to group by.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, labels: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] labels: Set of labels to group by.
        """
        __self__.labels = labels

@pulumi.input_type
class GameServerDeploymentRolloutGameServerConfigOverrideArgs:
    config_version: Optional[pulumi.Input[str]] = pulumi.input_property("configVersion")
    """
    Version of the configuration.
    """
    realms_selector: Optional[pulumi.Input['GameServerDeploymentRolloutGameServerConfigOverrideRealmsSelectorArgs']] = pulumi.input_property("realmsSelector")
    """
    Selection by realms.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, config_version: Optional[pulumi.Input[str]] = None, realms_selector: Optional[pulumi.Input['GameServerDeploymentRolloutGameServerConfigOverrideRealmsSelectorArgs']] = None) -> None:
        """
        :param pulumi.Input[str] config_version: Version of the configuration.
        :param pulumi.Input['GameServerDeploymentRolloutGameServerConfigOverrideRealmsSelectorArgs'] realms_selector: Selection by realms.  Structure is documented below.
        """
        __self__.config_version = config_version
        __self__.realms_selector = realms_selector

@pulumi.input_type
class GameServerDeploymentRolloutGameServerConfigOverrideRealmsSelectorArgs:
    realms: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("realms")
    """
    List of realms to match against.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, realms: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] realms: List of realms to match against.
        """
        __self__.realms = realms

