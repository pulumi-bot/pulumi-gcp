# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class DatasetIamBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetIamMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DicomStoreIamBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DicomStoreIamMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DicomStoreNotificationConfig(dict):
    pubsub_topic: str = pulumi.output_property("pubsubTopic")
    """
    The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
    PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
    It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
    was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
    project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
    Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FhirStoreIamBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FhirStoreIamMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FhirStoreNotificationConfig(dict):
    pubsub_topic: str = pulumi.output_property("pubsubTopic")
    """
    The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
    PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
    It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
    was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
    project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
    Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FhirStoreStreamConfig(dict):
    bigquery_destination: 'outputs.FhirStoreStreamConfigBigqueryDestination' = pulumi.output_property("bigqueryDestination")
    """
    The destination BigQuery structure that contains both the dataset location and corresponding schema config.
    The output is organized in one table per resource type. The server reuses the existing tables (if any) that
    are named after the resource types, e.g. "Patient", "Observation". When there is no existing table for a given
    resource type, the server attempts to create one.
    See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.  Structure is documented below.
    """
    resource_types: Optional[List[str]] = pulumi.output_property("resourceTypes")
    """
    Supply a FHIR resource type (such as "Patient" or "Observation"). See
    https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
    an empty list as an intent to stream all the supported resource types in this FHIR store.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FhirStoreStreamConfigBigqueryDestination(dict):
    dataset_uri: str = pulumi.output_property("datasetUri")
    """
    BigQuery URI to a dataset, up to 2000 characters long, in the format bq://projectId.bqDatasetId
    """
    schema_config: 'outputs.FhirStoreStreamConfigBigqueryDestinationSchemaConfig' = pulumi.output_property("schemaConfig")
    """
    The configuration for the exported BigQuery schema.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FhirStoreStreamConfigBigqueryDestinationSchemaConfig(dict):
    recursive_structure_depth: float = pulumi.output_property("recursiveStructureDepth")
    """
    The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
    resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
    concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
    value 2. The maximum depth allowed is 5.
    """
    schema_type: Optional[str] = pulumi.output_property("schemaType")
    """
    Specifies the output schema type. Only ANALYTICS is supported at this time.
    * ANALYTICS: Analytics schema defined by the FHIR community.
    See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class Hl7StoreIamBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class Hl7StoreIamMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class Hl7StoreNotificationConfig(dict):
    pubsub_topic: str = pulumi.output_property("pubsubTopic")
    """
    The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
    PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
    It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
    was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
    project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
    Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class Hl7StoreNotificationConfigs(dict):
    filter: Optional[str] = pulumi.output_property("filter")
    """
    Restricts notifications sent for messages matching a filter. If this is empty, all messages
    are matched. Syntax: https://cloud.google.com/appengine/docs/standard/python/search/query_strings
    Fields/functions available for filtering are:
    * messageType, from the MSH-9.1 field. For example, NOT messageType = "ADT".
    * send_date or sendDate, the YYYY-MM-DD date the message was sent in the dataset's timeZone, from the MSH-7 segment. For example, send_date < "2017-01-02".
    * sendTime, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, sendTime < "2017-01-02T00:00:00-05:00".
    * sendFacility, the care center that the message came from, from the MSH-4 segment. For example, sendFacility = "ABC".
    * PatientId(value, type), which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, PatientId("123456", "MRN").
    * labels.x, a string value of the label with key x as set using the Message.labels map. For example, labels."priority"="high". The operator :* can be used to assert the existence of a label. For example, labels."priority":*.
    """
    pubsub_topic: str = pulumi.output_property("pubsubTopic")
    """
    The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
    PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
    It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
    was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
    project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
    Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class Hl7StoreParserConfig(dict):
    allow_null_header: Optional[bool] = pulumi.output_property("allowNullHeader")
    """
    Determines whether messages with no header are allowed.
    """
    schema: Optional[str] = pulumi.output_property("schema")
    """
    JSON encoded string for schemas used to parse messages in this
    store if schematized parsing is desired.
    """
    segment_terminator: Optional[str] = pulumi.output_property("segmentTerminator")
    """
    Byte(s) to be used as the segment terminator. If this is unset, '\r' will be used as segment terminator.
    A base64-encoded string.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


