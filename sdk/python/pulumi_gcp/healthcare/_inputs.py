# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class DatasetIamBindingConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class DatasetIamMemberConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class DicomStoreIamBindingConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class DicomStoreIamMemberConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class DicomStoreNotificationConfigArgs:
    pubsub_topic: pulumi.Input[str] = pulumi.input_property("pubsubTopic")
    """
    The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
    PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
    It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
    was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
    project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
    Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pubsub_topic: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] pubsub_topic: The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
               PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
               It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
               was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
               project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
               Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
        """
        __self__.pubsub_topic = pubsub_topic

@pulumi.input_type
class FhirStoreIamBindingConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class FhirStoreIamMemberConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class FhirStoreNotificationConfigArgs:
    pubsub_topic: pulumi.Input[str] = pulumi.input_property("pubsubTopic")
    """
    The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
    PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
    It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
    was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
    project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
    Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pubsub_topic: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] pubsub_topic: The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
               PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
               It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
               was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
               project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
               Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
        """
        __self__.pubsub_topic = pubsub_topic

@pulumi.input_type
class FhirStoreStreamConfigArgs:
    bigquery_destination: pulumi.Input['FhirStoreStreamConfigBigqueryDestinationArgs'] = pulumi.input_property("bigqueryDestination")
    """
    The destination BigQuery structure that contains both the dataset location and corresponding schema config.
    The output is organized in one table per resource type. The server reuses the existing tables (if any) that
    are named after the resource types, e.g. "Patient", "Observation". When there is no existing table for a given
    resource type, the server attempts to create one.
    See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.  Structure is documented below.
    """
    resource_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("resourceTypes")
    """
    Supply a FHIR resource type (such as "Patient" or "Observation"). See
    https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
    an empty list as an intent to stream all the supported resource types in this FHIR store.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bigquery_destination: pulumi.Input['FhirStoreStreamConfigBigqueryDestinationArgs'], resource_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input['FhirStoreStreamConfigBigqueryDestinationArgs'] bigquery_destination: The destination BigQuery structure that contains both the dataset location and corresponding schema config.
               The output is organized in one table per resource type. The server reuses the existing tables (if any) that
               are named after the resource types, e.g. "Patient", "Observation". When there is no existing table for a given
               resource type, the server attempts to create one.
               See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.  Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] resource_types: Supply a FHIR resource type (such as "Patient" or "Observation"). See
               https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
               an empty list as an intent to stream all the supported resource types in this FHIR store.
        """
        __self__.bigquery_destination = bigquery_destination
        __self__.resource_types = resource_types

@pulumi.input_type
class FhirStoreStreamConfigBigqueryDestinationArgs:
    dataset_uri: pulumi.Input[str] = pulumi.input_property("datasetUri")
    """
    BigQuery URI to a dataset, up to 2000 characters long, in the format bq://projectId.bqDatasetId
    """
    schema_config: pulumi.Input['FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs'] = pulumi.input_property("schemaConfig")
    """
    The configuration for the exported BigQuery schema.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, dataset_uri: pulumi.Input[str], schema_config: pulumi.Input['FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs']) -> None:
        """
        :param pulumi.Input[str] dataset_uri: BigQuery URI to a dataset, up to 2000 characters long, in the format bq://projectId.bqDatasetId
        :param pulumi.Input['FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs'] schema_config: The configuration for the exported BigQuery schema.  Structure is documented below.
        """
        __self__.dataset_uri = dataset_uri
        __self__.schema_config = schema_config

@pulumi.input_type
class FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs:
    recursive_structure_depth: pulumi.Input[float] = pulumi.input_property("recursiveStructureDepth")
    """
    The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
    resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
    concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
    value 2. The maximum depth allowed is 5.
    """
    schema_type: Optional[pulumi.Input[str]] = pulumi.input_property("schemaType")
    """
    Specifies the output schema type. Only ANALYTICS is supported at this time.
    * ANALYTICS: Analytics schema defined by the FHIR community.
    See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, recursive_structure_depth: pulumi.Input[float], schema_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] recursive_structure_depth: The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
               resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
               concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
               value 2. The maximum depth allowed is 5.
        :param pulumi.Input[str] schema_type: Specifies the output schema type. Only ANALYTICS is supported at this time.
               * ANALYTICS: Analytics schema defined by the FHIR community.
               See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
        """
        __self__.recursive_structure_depth = recursive_structure_depth
        __self__.schema_type = schema_type

@pulumi.input_type
class Hl7StoreIamBindingConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class Hl7StoreIamMemberConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class Hl7StoreNotificationConfigArgs:
    pubsub_topic: pulumi.Input[str] = pulumi.input_property("pubsubTopic")
    """
    The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
    PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
    It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
    was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
    project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
    Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pubsub_topic: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] pubsub_topic: The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
               PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
               It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
               was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
               project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
               Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
        """
        __self__.pubsub_topic = pubsub_topic

@pulumi.input_type
class Hl7StoreNotificationConfigsArgs:
    pubsub_topic: pulumi.Input[str] = pulumi.input_property("pubsubTopic")
    """
    The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
    PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
    It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
    was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
    project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
    Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
    """
    filter: Optional[pulumi.Input[str]] = pulumi.input_property("filter")
    """
    Restricts notifications sent for messages matching a filter. If this is empty, all messages
    are matched. Syntax: https://cloud.google.com/appengine/docs/standard/python/search/query_strings
    Fields/functions available for filtering are:
    * messageType, from the MSH-9.1 field. For example, NOT messageType = "ADT".
    * send_date or sendDate, the YYYY-MM-DD date the message was sent in the dataset's timeZone, from the MSH-7 segment. For example, send_date < "2017-01-02".
    * sendTime, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, sendTime < "2017-01-02T00:00:00-05:00".
    * sendFacility, the care center that the message came from, from the MSH-4 segment. For example, sendFacility = "ABC".
    * PatientId(value, type), which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, PatientId("123456", "MRN").
    * labels.x, a string value of the label with key x as set using the Message.labels map. For example, labels."priority"="high". The operator :* can be used to assert the existence of a label. For example, labels."priority":*.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pubsub_topic: pulumi.Input[str], filter: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] pubsub_topic: The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
               PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
               It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
               was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
               project. cloud-healthcare@system.gserviceaccount.com must have publisher permissions on the given
               Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
        :param pulumi.Input[str] filter: Restricts notifications sent for messages matching a filter. If this is empty, all messages
               are matched. Syntax: https://cloud.google.com/appengine/docs/standard/python/search/query_strings
               Fields/functions available for filtering are:
               * messageType, from the MSH-9.1 field. For example, NOT messageType = "ADT".
               * send_date or sendDate, the YYYY-MM-DD date the message was sent in the dataset's timeZone, from the MSH-7 segment. For example, send_date < "2017-01-02".
               * sendTime, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, sendTime < "2017-01-02T00:00:00-05:00".
               * sendFacility, the care center that the message came from, from the MSH-4 segment. For example, sendFacility = "ABC".
               * PatientId(value, type), which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, PatientId("123456", "MRN").
               * labels.x, a string value of the label with key x as set using the Message.labels map. For example, labels."priority"="high". The operator :* can be used to assert the existence of a label. For example, labels."priority":*.
        """
        __self__.pubsub_topic = pubsub_topic
        __self__.filter = filter

@pulumi.input_type
class Hl7StoreParserConfigArgs:
    allow_null_header: Optional[pulumi.Input[bool]] = pulumi.input_property("allowNullHeader")
    """
    Determines whether messages with no header are allowed.
    """
    schema: Optional[pulumi.Input[str]] = pulumi.input_property("schema")
    """
    JSON encoded string for schemas used to parse messages in this
    store if schematized parsing is desired.
    """
    segment_terminator: Optional[pulumi.Input[str]] = pulumi.input_property("segmentTerminator")
    """
    Byte(s) to be used as the segment terminator. If this is unset, '\r' will be used as segment terminator.
    A base64-encoded string.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allow_null_header: Optional[pulumi.Input[bool]] = None, schema: Optional[pulumi.Input[str]] = None, segment_terminator: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] allow_null_header: Determines whether messages with no header are allowed.
        :param pulumi.Input[str] schema: JSON encoded string for schemas used to parse messages in this
               store if schematized parsing is desired.
        :param pulumi.Input[str] segment_terminator: Byte(s) to be used as the segment terminator. If this is unset, '\r' will be used as segment terminator.
               A base64-encoded string.
        """
        __self__.allow_null_header = allow_null_header
        __self__.schema = schema
        __self__.segment_terminator = segment_terminator

