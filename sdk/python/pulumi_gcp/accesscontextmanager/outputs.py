# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'AccessLevelBasic',
    'AccessLevelBasicCondition',
    'AccessLevelBasicConditionDevicePolicy',
    'AccessLevelBasicConditionDevicePolicyOsConstraint',
    'AccessLevelCustom',
    'AccessLevelCustomExpr',
    'ServicePerimeterSpec',
    'ServicePerimeterSpecVpcAccessibleServices',
    'ServicePerimeterStatus',
    'ServicePerimeterStatusVpcAccessibleServices',
]

@pulumi.output_type
class AccessLevelBasic(dict):
    combining_function: Optional[str] = pulumi.output_property("combiningFunction")
    """
    How the conditions list should be combined to determine if a request
    is granted this AccessLevel. If AND is used, each Condition in
    conditions must be satisfied for the AccessLevel to be applied. If
    OR is used, at least one Condition in conditions must be satisfied
    for the AccessLevel to be applied.
    """
    conditions: List['outputs.AccessLevelBasicCondition'] = pulumi.output_property("conditions")
    """
    A set of requirements for the AccessLevel to be granted.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelBasicCondition(dict):
    device_policy: Optional['outputs.AccessLevelBasicConditionDevicePolicy'] = pulumi.output_property("devicePolicy")
    """
    Device specific restrictions, all restrictions must hold for
    the Condition to be true. If not specified, all devices are
    allowed.  Structure is documented below.
    """
    ip_subnetworks: Optional[List[str]] = pulumi.output_property("ipSubnetworks")
    """
    A list of CIDR block IP subnetwork specification. May be IPv4
    or IPv6.
    Note that for a CIDR IP address block, the specified IP address
    portion must be properly truncated (i.e. all the host bits must
    be zero) or the input is considered malformed. For example,
    "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
    for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
    is not. The originating IP of a request must be in one of the
    listed subnets in order for this Condition to be true.
    If empty, all IP addresses are allowed.
    """
    members: Optional[List[str]] = pulumi.output_property("members")
    """
    An allowed list of members (users, service accounts).
    Using groups is not supported yet.
    The signed-in user originating the request must be a part of one
    of the provided members. If not specified, a request may come
    from any user (logged in/not logged in, not present in any
    groups, etc.).
    Formats: `user:{emailid}`, `serviceAccount:{emailid}`
    """
    negate: Optional[bool] = pulumi.output_property("negate")
    """
    Whether to negate the Condition. If true, the Condition becomes
    a NAND over its non-empty fields, each field must be false for
    the Condition overall to be satisfied. Defaults to false.
    """
    regions: Optional[List[str]] = pulumi.output_property("regions")
    """
    The request must originate from one of the provided
    countries/regions.
    Format: A valid ISO 3166-1 alpha-2 code.
    """
    required_access_levels: Optional[List[str]] = pulumi.output_property("requiredAccessLevels")
    """
    A list of other access levels defined in the same Policy,
    referenced by resource name. Referencing an AccessLevel which
    does not exist is an error. All access levels listed must be
    granted for the Condition to be true.
    Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelBasicConditionDevicePolicy(dict):
    allowed_device_management_levels: Optional[List[str]] = pulumi.output_property("allowedDeviceManagementLevels")
    """
    A list of allowed device management levels.
    An empty list allows all management levels.
    """
    allowed_encryption_statuses: Optional[List[str]] = pulumi.output_property("allowedEncryptionStatuses")
    """
    A list of allowed encryptions statuses.
    An empty list allows all statuses.
    """
    os_constraints: Optional[List['outputs.AccessLevelBasicConditionDevicePolicyOsConstraint']] = pulumi.output_property("osConstraints")
    """
    A list of allowed OS versions.
    An empty list allows all types and all versions.  Structure is documented below.
    """
    require_admin_approval: Optional[bool] = pulumi.output_property("requireAdminApproval")
    """
    Whether the device needs to be approved by the customer admin.
    """
    require_corp_owned: Optional[bool] = pulumi.output_property("requireCorpOwned")
    """
    Whether the device needs to be corp owned.
    """
    require_screen_lock: Optional[bool] = pulumi.output_property("requireScreenLock")
    """
    Whether or not screenlock is required for the DevicePolicy
    to be true. Defaults to false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelBasicConditionDevicePolicyOsConstraint(dict):
    minimum_version: Optional[str] = pulumi.output_property("minimumVersion")
    """
    The minimum allowed OS version. If not set, any version
    of this OS satisfies the constraint.
    Format: "major.minor.patch" such as "10.5.301", "9.2.1".
    """
    os_type: str = pulumi.output_property("osType")
    """
    The operating system type of the device.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelCustom(dict):
    expr: 'outputs.AccessLevelCustomExpr' = pulumi.output_property("expr")
    """
    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
    This page details the objects and attributes that are used to the build the CEL expressions for
    custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelCustomExpr(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of the expression
    """
    expression: str = pulumi.output_property("expression")
    """
    Textual representation of an expression in Common Expression Language syntax.
    """
    location: Optional[str] = pulumi.output_property("location")
    """
    String indicating the location of the expression for error reporting, e.g. a file name and a position in the file
    """
    title: Optional[str] = pulumi.output_property("title")
    """
    Title for the expression, i.e. a short string describing its purpose.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePerimeterSpec(dict):
    access_levels: Optional[List[str]] = pulumi.output_property("accessLevels")
    """
    A list of AccessLevel resource names that allow resources within
    the ServicePerimeter to be accessed from the internet.
    AccessLevels listed must be in the same policy as this
    ServicePerimeter. Referencing a nonexistent AccessLevel is a
    syntax error. If no AccessLevel names are listed, resources within
    the perimeter can only be accessed via GCP calls with request
    origins within the perimeter. For Service Perimeter Bridge, must
    be empty.
    Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
    """
    resources: Optional[List[str]] = pulumi.output_property("resources")
    """
    A list of GCP resources that are inside of the service perimeter.
    Currently only projects are allowed.
    Format: projects/{project_number}
    """
    restricted_services: Optional[List[str]] = pulumi.output_property("restrictedServices")
    """
    GCP services that are subject to the Service Perimeter
    restrictions. Must contain a list of services. For example, if
    `storage.googleapis.com` is specified, access to the storage
    buckets inside the perimeter must meet the perimeter's access
    restrictions.
    """
    vpc_accessible_services: Optional['outputs.ServicePerimeterSpecVpcAccessibleServices'] = pulumi.output_property("vpcAccessibleServices")
    """
    Specifies how APIs are allowed to communicate within the Service
    Perimeter.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePerimeterSpecVpcAccessibleServices(dict):
    allowed_services: Optional[List[str]] = pulumi.output_property("allowedServices")
    """
    The list of APIs usable within the Service Perimeter.
    Must be empty unless `enableRestriction` is True.
    """
    enable_restriction: Optional[bool] = pulumi.output_property("enableRestriction")
    """
    Whether to restrict API calls within the Service Perimeter to the
    list of APIs specified in 'allowedServices'.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePerimeterStatus(dict):
    access_levels: Optional[List[str]] = pulumi.output_property("accessLevels")
    """
    A list of AccessLevel resource names that allow resources within
    the ServicePerimeter to be accessed from the internet.
    AccessLevels listed must be in the same policy as this
    ServicePerimeter. Referencing a nonexistent AccessLevel is a
    syntax error. If no AccessLevel names are listed, resources within
    the perimeter can only be accessed via GCP calls with request
    origins within the perimeter. For Service Perimeter Bridge, must
    be empty.
    Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
    """
    resources: Optional[List[str]] = pulumi.output_property("resources")
    """
    A list of GCP resources that are inside of the service perimeter.
    Currently only projects are allowed.
    Format: projects/{project_number}
    """
    restricted_services: Optional[List[str]] = pulumi.output_property("restrictedServices")
    """
    GCP services that are subject to the Service Perimeter
    restrictions. Must contain a list of services. For example, if
    `storage.googleapis.com` is specified, access to the storage
    buckets inside the perimeter must meet the perimeter's access
    restrictions.
    """
    vpc_accessible_services: Optional['outputs.ServicePerimeterStatusVpcAccessibleServices'] = pulumi.output_property("vpcAccessibleServices")
    """
    Specifies how APIs are allowed to communicate within the Service
    Perimeter.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePerimeterStatusVpcAccessibleServices(dict):
    allowed_services: Optional[List[str]] = pulumi.output_property("allowedServices")
    """
    The list of APIs usable within the Service Perimeter.
    Must be empty unless `enableRestriction` is True.
    """
    enable_restriction: Optional[bool] = pulumi.output_property("enableRestriction")
    """
    Whether to restrict API calls within the Service Perimeter to the
    list of APIs specified in 'allowedServices'.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


