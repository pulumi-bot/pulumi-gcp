# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'AccessLevelBasic',
    'AccessLevelBasicCondition',
    'AccessLevelBasicConditionDevicePolicy',
    'AccessLevelBasicConditionDevicePolicyOsConstraint',
    'AccessLevelCustom',
    'AccessLevelCustomExpr',
    'ServicePerimeterSpec',
    'ServicePerimeterSpecVpcAccessibleServices',
    'ServicePerimeterStatus',
    'ServicePerimeterStatusVpcAccessibleServices',
]

@pulumi.output_type
class AccessLevelBasic(dict):
    @property
    @pulumi.getter(name="combiningFunction")
    def combining_function(self) -> Optional[str]:
        """
        How the conditions list should be combined to determine if a request
        is granted this AccessLevel. If AND is used, each Condition in
        conditions must be satisfied for the AccessLevel to be applied. If
        OR is used, at least one Condition in conditions must be satisfied
        for the AccessLevel to be applied.
        Default value is `AND`.
        Possible values are `AND` and `OR`.
        """
        ...

    @property
    @pulumi.getter
    def conditions(self) -> List['outputs.AccessLevelBasicCondition']:
        """
        A set of requirements for the AccessLevel to be granted.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelBasicCondition(dict):
    @property
    @pulumi.getter(name="devicePolicy")
    def device_policy(self) -> Optional['outputs.AccessLevelBasicConditionDevicePolicy']:
        """
        Device specific restrictions, all restrictions must hold for
        the Condition to be true. If not specified, all devices are
        allowed.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="ipSubnetworks")
    def ip_subnetworks(self) -> Optional[List[str]]:
        """
        A list of CIDR block IP subnetwork specification. May be IPv4
        or IPv6.
        Note that for a CIDR IP address block, the specified IP address
        portion must be properly truncated (i.e. all the host bits must
        be zero) or the input is considered malformed. For example,
        "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
        for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
        is not. The originating IP of a request must be in one of the
        listed subnets in order for this Condition to be true.
        If empty, all IP addresses are allowed.
        """
        ...

    @property
    @pulumi.getter
    def members(self) -> Optional[List[str]]:
        """
        An allowed list of members (users, service accounts).
        Using groups is not supported yet.
        The signed-in user originating the request must be a part of one
        of the provided members. If not specified, a request may come
        from any user (logged in/not logged in, not present in any
        groups, etc.).
        Formats: `user:{emailid}`, `serviceAccount:{emailid}`
        """
        ...

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        """
        Whether to negate the Condition. If true, the Condition becomes
        a NAND over its non-empty fields, each field must be false for
        the Condition overall to be satisfied. Defaults to false.
        """
        ...

    @property
    @pulumi.getter
    def regions(self) -> Optional[List[str]]:
        """
        The request must originate from one of the provided
        countries/regions.
        Format: A valid ISO 3166-1 alpha-2 code.
        """
        ...

    @property
    @pulumi.getter(name="requiredAccessLevels")
    def required_access_levels(self) -> Optional[List[str]]:
        """
        A list of other access levels defined in the same Policy,
        referenced by resource name. Referencing an AccessLevel which
        does not exist is an error. All access levels listed must be
        granted for the Condition to be true.
        Format: accessPolicies/{policy_id}/accessLevels/{short_name}
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelBasicConditionDevicePolicy(dict):
    @property
    @pulumi.getter(name="allowedDeviceManagementLevels")
    def allowed_device_management_levels(self) -> Optional[List[str]]:
        """
        A list of allowed device management levels.
        An empty list allows all management levels.
        """
        ...

    @property
    @pulumi.getter(name="allowedEncryptionStatuses")
    def allowed_encryption_statuses(self) -> Optional[List[str]]:
        """
        A list of allowed encryptions statuses.
        An empty list allows all statuses.
        """
        ...

    @property
    @pulumi.getter(name="osConstraints")
    def os_constraints(self) -> Optional[List['outputs.AccessLevelBasicConditionDevicePolicyOsConstraint']]:
        """
        A list of allowed OS versions.
        An empty list allows all types and all versions.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="requireAdminApproval")
    def require_admin_approval(self) -> Optional[bool]:
        """
        Whether the device needs to be approved by the customer admin.
        """
        ...

    @property
    @pulumi.getter(name="requireCorpOwned")
    def require_corp_owned(self) -> Optional[bool]:
        """
        Whether the device needs to be corp owned.
        """
        ...

    @property
    @pulumi.getter(name="requireScreenLock")
    def require_screen_lock(self) -> Optional[bool]:
        """
        Whether or not screenlock is required for the DevicePolicy
        to be true. Defaults to false.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelBasicConditionDevicePolicyOsConstraint(dict):
    @property
    @pulumi.getter(name="minimumVersion")
    def minimum_version(self) -> Optional[str]:
        """
        The minimum allowed OS version. If not set, any version
        of this OS satisfies the constraint.
        Format: "major.minor.patch" such as "10.5.301", "9.2.1".
        """
        ...

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The operating system type of the device.
        Possible values are `OS_UNSPECIFIED`, `DESKTOP_MAC`, `DESKTOP_WINDOWS`, `DESKTOP_LINUX`, and `DESKTOP_CHROME_OS`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelCustom(dict):
    @property
    @pulumi.getter
    def expr(self) -> 'outputs.AccessLevelCustomExpr':
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
        This page details the objects and attributes that are used to the build the CEL expressions for
        custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessLevelCustomExpr(dict):
    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the expression
        """
        ...

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        String indicating the location of the expression for error reporting, e.g. a file name and a position in the file
        """
        ...

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title for the expression, i.e. a short string describing its purpose.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePerimeterSpec(dict):
    @property
    @pulumi.getter(name="accessLevels")
    def access_levels(self) -> Optional[List[str]]:
        """
        A list of AccessLevel resource names that allow resources within
        the ServicePerimeter to be accessed from the internet.
        AccessLevels listed must be in the same policy as this
        ServicePerimeter. Referencing a nonexistent AccessLevel is a
        syntax error. If no AccessLevel names are listed, resources within
        the perimeter can only be accessed via GCP calls with request
        origins within the perimeter. For Service Perimeter Bridge, must
        be empty.
        Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
        """
        ...

    @property
    @pulumi.getter
    def resources(self) -> Optional[List[str]]:
        """
        A list of GCP resources that are inside of the service perimeter.
        Currently only projects are allowed.
        Format: projects/{project_number}
        """
        ...

    @property
    @pulumi.getter(name="restrictedServices")
    def restricted_services(self) -> Optional[List[str]]:
        """
        GCP services that are subject to the Service Perimeter
        restrictions. Must contain a list of services. For example, if
        `storage.googleapis.com` is specified, access to the storage
        buckets inside the perimeter must meet the perimeter's access
        restrictions.
        """
        ...

    @property
    @pulumi.getter(name="vpcAccessibleServices")
    def vpc_accessible_services(self) -> Optional['outputs.ServicePerimeterSpecVpcAccessibleServices']:
        """
        Specifies how APIs are allowed to communicate within the Service
        Perimeter.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePerimeterSpecVpcAccessibleServices(dict):
    @property
    @pulumi.getter(name="allowedServices")
    def allowed_services(self) -> Optional[List[str]]:
        """
        The list of APIs usable within the Service Perimeter.
        Must be empty unless `enableRestriction` is True.
        """
        ...

    @property
    @pulumi.getter(name="enableRestriction")
    def enable_restriction(self) -> Optional[bool]:
        """
        Whether to restrict API calls within the Service Perimeter to the
        list of APIs specified in 'allowedServices'.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePerimeterStatus(dict):
    @property
    @pulumi.getter(name="accessLevels")
    def access_levels(self) -> Optional[List[str]]:
        """
        A list of AccessLevel resource names that allow resources within
        the ServicePerimeter to be accessed from the internet.
        AccessLevels listed must be in the same policy as this
        ServicePerimeter. Referencing a nonexistent AccessLevel is a
        syntax error. If no AccessLevel names are listed, resources within
        the perimeter can only be accessed via GCP calls with request
        origins within the perimeter. For Service Perimeter Bridge, must
        be empty.
        Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
        """
        ...

    @property
    @pulumi.getter
    def resources(self) -> Optional[List[str]]:
        """
        A list of GCP resources that are inside of the service perimeter.
        Currently only projects are allowed.
        Format: projects/{project_number}
        """
        ...

    @property
    @pulumi.getter(name="restrictedServices")
    def restricted_services(self) -> Optional[List[str]]:
        """
        GCP services that are subject to the Service Perimeter
        restrictions. Must contain a list of services. For example, if
        `storage.googleapis.com` is specified, access to the storage
        buckets inside the perimeter must meet the perimeter's access
        restrictions.
        """
        ...

    @property
    @pulumi.getter(name="vpcAccessibleServices")
    def vpc_accessible_services(self) -> Optional['outputs.ServicePerimeterStatusVpcAccessibleServices']:
        """
        Specifies how APIs are allowed to communicate within the Service
        Perimeter.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePerimeterStatusVpcAccessibleServices(dict):
    @property
    @pulumi.getter(name="allowedServices")
    def allowed_services(self) -> Optional[List[str]]:
        """
        The list of APIs usable within the Service Perimeter.
        Must be empty unless `enableRestriction` is True.
        """
        ...

    @property
    @pulumi.getter(name="enableRestriction")
    def enable_restriction(self) -> Optional[bool]:
        """
        Whether to restrict API calls within the Service Perimeter to the
        list of APIs specified in 'allowedServices'.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


