# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'PatchDeploymentInstanceFilter',
    'PatchDeploymentInstanceFilterGroupLabel',
    'PatchDeploymentOneTimeSchedule',
    'PatchDeploymentPatchConfig',
    'PatchDeploymentPatchConfigApt',
    'PatchDeploymentPatchConfigGoo',
    'PatchDeploymentPatchConfigPostStep',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfig',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfig',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigPreStep',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfig',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfig',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigWindowsUpdate',
    'PatchDeploymentPatchConfigYum',
    'PatchDeploymentPatchConfigZypper',
    'PatchDeploymentRecurringSchedule',
    'PatchDeploymentRecurringScheduleMonthly',
    'PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth',
    'PatchDeploymentRecurringScheduleTimeOfDay',
    'PatchDeploymentRecurringScheduleTimeZone',
    'PatchDeploymentRecurringScheduleWeekly',
]

@pulumi.output_type
class PatchDeploymentInstanceFilter(dict):
    all: Optional[bool] = pulumi.output_property("all")
    """
    Target all VM instances in the project. If true, no other criteria is permitted.
    """
    group_labels: Optional[List['outputs.PatchDeploymentInstanceFilterGroupLabel']] = pulumi.output_property("groupLabels")
    """
    Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.  Structure is documented below.
    """
    instance_name_prefixes: Optional[List[str]] = pulumi.output_property("instanceNamePrefixes")
    """
    Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
    VMs when targeting configs, for example prefix="prod-".
    """
    instances: Optional[List[str]] = pulumi.output_property("instances")
    """
    Targets any of the VM instances specified. Instances are specified by their URI in the `form zones/{{zone}}/instances/{{instance_name}}`,
    `projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`, or
    `https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`
    """
    zones: Optional[List[str]] = pulumi.output_property("zones")
    """
    Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentInstanceFilterGroupLabel(dict):
    labels: Dict[str, str] = pulumi.output_property("labels")
    """
    Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentOneTimeSchedule(dict):
    execute_time: str = pulumi.output_property("executeTime")
    """
    The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
    accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfig(dict):
    apt: Optional['outputs.PatchDeploymentPatchConfigApt'] = pulumi.output_property("apt")
    """
    Apt update settings. Use this setting to override the default apt patch rules.  Structure is documented below.
    """
    goo: Optional['outputs.PatchDeploymentPatchConfigGoo'] = pulumi.output_property("goo")
    """
    goo update settings. Use this setting to override the default goo patch rules.  Structure is documented below.
    """
    post_step: Optional['outputs.PatchDeploymentPatchConfigPostStep'] = pulumi.output_property("postStep")
    """
    The ExecStep to run after the patch update.  Structure is documented below.
    """
    pre_step: Optional['outputs.PatchDeploymentPatchConfigPreStep'] = pulumi.output_property("preStep")
    """
    The ExecStep to run before the patch update.  Structure is documented below.
    """
    reboot_config: Optional[str] = pulumi.output_property("rebootConfig")
    """
    Post-patch reboot settings.
    """
    windows_update: Optional['outputs.PatchDeploymentPatchConfigWindowsUpdate'] = pulumi.output_property("windowsUpdate")
    """
    Windows update settings. Use this setting to override the default Windows patch rules.  Structure is documented below.
    """
    yum: Optional['outputs.PatchDeploymentPatchConfigYum'] = pulumi.output_property("yum")
    """
    Yum update settings. Use this setting to override the default yum patch rules.  Structure is documented below.
    """
    zypper: Optional['outputs.PatchDeploymentPatchConfigZypper'] = pulumi.output_property("zypper")
    """
    zypper update settings. Use this setting to override the default zypper patch rules.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigApt(dict):
    excludes: Optional[List[str]] = pulumi.output_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_packages: Optional[List[str]] = pulumi.output_property("exclusivePackages")
    """
    An exclusive list of packages to be updated. These are the only packages that will be updated.
    If these packages are not installed, they will be ignored. This field cannot be specified with
    any other patch configuration fields.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigGoo(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    goo update settings. Use this setting to override the default goo patch rules.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStep(dict):
    linux_exec_step_config: Optional['outputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfig'] = pulumi.output_property("linuxExecStepConfig")
    """
    The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
    """
    windows_exec_step_config: Optional['outputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfig'] = pulumi.output_property("windowsExecStepConfig")
    """
    The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfig(dict):
    allowed_success_codes: Optional[List[float]] = pulumi.output_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional['outputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject'] = pulumi.output_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: str = pulumi.output_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: str = pulumi.output_property("object")
    """
    Name of the Cloud Storage object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfig(dict):
    allowed_success_codes: Optional[List[float]] = pulumi.output_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional['outputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject'] = pulumi.output_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: str = pulumi.output_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: str = pulumi.output_property("object")
    """
    Name of the Cloud Storage object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStep(dict):
    linux_exec_step_config: Optional['outputs.PatchDeploymentPatchConfigPreStepLinuxExecStepConfig'] = pulumi.output_property("linuxExecStepConfig")
    """
    The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
    """
    windows_exec_step_config: Optional['outputs.PatchDeploymentPatchConfigPreStepWindowsExecStepConfig'] = pulumi.output_property("windowsExecStepConfig")
    """
    The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfig(dict):
    allowed_success_codes: Optional[List[float]] = pulumi.output_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional['outputs.PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject'] = pulumi.output_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: str = pulumi.output_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: str = pulumi.output_property("object")
    """
    Name of the Cloud Storage object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfig(dict):
    allowed_success_codes: Optional[List[float]] = pulumi.output_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional['outputs.PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject'] = pulumi.output_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: str = pulumi.output_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: str = pulumi.output_property("object")
    """
    Name of the Cloud Storage object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigWindowsUpdate(dict):
    classifications: Optional[str] = pulumi.output_property("classifications")
    """
    Only apply updates of these windows update classifications. If empty, all updates are applied.
    """
    excludes: Optional[List[str]] = pulumi.output_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_patches: Optional[List[str]] = pulumi.output_property("exclusivePatches")
    """
    An exclusive list of kbs to be updated. These are the only patches that will be updated.
    This field must not be used with other patch configurations.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigYum(dict):
    excludes: Optional[List[str]] = pulumi.output_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_packages: Optional[List[str]] = pulumi.output_property("exclusivePackages")
    """
    An exclusive list of packages to be updated. These are the only packages that will be updated.
    If these packages are not installed, they will be ignored. This field cannot be specified with
    any other patch configuration fields.
    """
    minimal: Optional[bool] = pulumi.output_property("minimal")
    """
    Will cause patch to run yum update-minimal instead.
    """
    security: Optional[bool] = pulumi.output_property("security")
    """
    Adds the --security flag to yum update. Not supported on all platforms.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigZypper(dict):
    categories: Optional[List[str]] = pulumi.output_property("categories")
    """
    Install only patches with these categories. Common categories include security, recommended, and feature.
    """
    excludes: Optional[List[str]] = pulumi.output_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_patches: Optional[List[str]] = pulumi.output_property("exclusivePatches")
    """
    An exclusive list of kbs to be updated. These are the only patches that will be updated.
    This field must not be used with other patch configurations.
    """
    severities: Optional[List[str]] = pulumi.output_property("severities")
    """
    Install only patches with these severities. Common severities include critical, important, moderate, and low.
    """
    with_optional: Optional[bool] = pulumi.output_property("withOptional")
    """
    Adds the --with-optional flag to zypper patch.
    """
    with_update: Optional[bool] = pulumi.output_property("withUpdate")
    """
    Adds the --with-update flag, to zypper patch.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringSchedule(dict):
    end_time: Optional[str] = pulumi.output_property("endTime")
    """
    The end time at which a recurring patch deployment schedule is no longer active.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    last_execute_time: Optional[str] = pulumi.output_property("lastExecuteTime")
    """
    -
    The time the last patch job ran successfully.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    monthly: Optional['outputs.PatchDeploymentRecurringScheduleMonthly'] = pulumi.output_property("monthly")
    """
    Schedule with monthly executions.  Structure is documented below.
    """
    next_execute_time: Optional[str] = pulumi.output_property("nextExecuteTime")
    """
    -
    The time the next patch job is scheduled to run.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    start_time: Optional[str] = pulumi.output_property("startTime")
    """
    The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    time_of_day: 'outputs.PatchDeploymentRecurringScheduleTimeOfDay' = pulumi.output_property("timeOfDay")
    """
    Time of the day to run a recurring deployment.  Structure is documented below.
    """
    time_zone: 'outputs.PatchDeploymentRecurringScheduleTimeZone' = pulumi.output_property("timeZone")
    """
    Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
    determined by the chosen time zone.  Structure is documented below.
    """
    weekly: Optional['outputs.PatchDeploymentRecurringScheduleWeekly'] = pulumi.output_property("weekly")
    """
    Schedule with weekly executions.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleMonthly(dict):
    month_day: Optional[float] = pulumi.output_property("monthDay")
    """
    One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
    Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
    will not run in February, April, June, etc.
    """
    week_day_of_month: Optional['outputs.PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth'] = pulumi.output_property("weekDayOfMonth")
    """
    Week day in a month.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth(dict):
    day_of_week: str = pulumi.output_property("dayOfWeek")
    """
    A day of the week.
    """
    week_ordinal: float = pulumi.output_property("weekOrdinal")
    """
    Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleTimeOfDay(dict):
    hours: Optional[float] = pulumi.output_property("hours")
    """
    Hours of day in 24 hour format. Should be from 0 to 23.
    An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    """
    minutes: Optional[float] = pulumi.output_property("minutes")
    """
    Minutes of hour of day. Must be from 0 to 59.
    """
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    """
    seconds: Optional[float] = pulumi.output_property("seconds")
    """
    Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleTimeZone(dict):
    id: str = pulumi.output_property("id")
    """
    IANA Time Zone Database time zone, e.g. "America/New_York".
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    IANA Time Zone Database version number, e.g. "2019a".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleWeekly(dict):
    day_of_week: str = pulumi.output_property("dayOfWeek")
    """
    A day of the week.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


