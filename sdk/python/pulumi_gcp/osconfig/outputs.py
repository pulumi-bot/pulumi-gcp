# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'GuestPoliciesAssignment',
    'GuestPoliciesAssignmentGroupLabel',
    'GuestPoliciesAssignmentOsType',
    'GuestPoliciesPackage',
    'GuestPoliciesPackageRepository',
    'GuestPoliciesPackageRepositoryApt',
    'GuestPoliciesPackageRepositoryGoo',
    'GuestPoliciesPackageRepositoryYum',
    'GuestPoliciesPackageRepositoryZypper',
    'GuestPoliciesRecipe',
    'GuestPoliciesRecipeArtifact',
    'GuestPoliciesRecipeArtifactGcs',
    'GuestPoliciesRecipeArtifactRemote',
    'GuestPoliciesRecipeInstallStep',
    'GuestPoliciesRecipeInstallStepArchiveExtraction',
    'GuestPoliciesRecipeInstallStepDpkgInstallation',
    'GuestPoliciesRecipeInstallStepFileCopy',
    'GuestPoliciesRecipeInstallStepFileExec',
    'GuestPoliciesRecipeInstallStepMsiInstallation',
    'GuestPoliciesRecipeInstallStepRpmInstallation',
    'GuestPoliciesRecipeInstallStepScriptRun',
    'GuestPoliciesRecipeUpdateStep',
    'GuestPoliciesRecipeUpdateStepArchiveExtraction',
    'GuestPoliciesRecipeUpdateStepDpkgInstallation',
    'GuestPoliciesRecipeUpdateStepFileCopy',
    'GuestPoliciesRecipeUpdateStepFileExec',
    'GuestPoliciesRecipeUpdateStepMsiInstallation',
    'GuestPoliciesRecipeUpdateStepRpmInstallation',
    'GuestPoliciesRecipeUpdateStepScriptRun',
    'PatchDeploymentInstanceFilter',
    'PatchDeploymentInstanceFilterGroupLabel',
    'PatchDeploymentOneTimeSchedule',
    'PatchDeploymentPatchConfig',
    'PatchDeploymentPatchConfigApt',
    'PatchDeploymentPatchConfigGoo',
    'PatchDeploymentPatchConfigPostStep',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfig',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfig',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigPreStep',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfig',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfig',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigWindowsUpdate',
    'PatchDeploymentPatchConfigYum',
    'PatchDeploymentPatchConfigZypper',
    'PatchDeploymentRecurringSchedule',
    'PatchDeploymentRecurringScheduleMonthly',
    'PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth',
    'PatchDeploymentRecurringScheduleTimeOfDay',
    'PatchDeploymentRecurringScheduleTimeZone',
    'PatchDeploymentRecurringScheduleWeekly',
]

@pulumi.output_type
class GuestPoliciesAssignment(dict):
    group_labels: Optional[List['outputs.GuestPoliciesAssignmentGroupLabel']] = pulumi.output_property("groupLabels")
    """
    Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups,
    for example "env=prod or env=staging".  Structure is documented below.
    """
    instance_name_prefixes: Optional[List[str]] = pulumi.output_property("instanceNamePrefixes")
    """
    Targets VM instances whose name starts with one of these prefixes.
    Like labels, this is another way to group VM instances when targeting configs,
    for example prefix="prod-".
    Only supported for project-level policies.
    """
    instances: Optional[List[str]] = pulumi.output_property("instances")
    """
    Targets any of the instances specified. Instances are specified by their URI in the form
    zones/[ZONE]/instances/[INSTANCE_NAME].
    Instance targeting is uncommon and is supported to facilitate the management of changes
    by the instance or to target specific VM instances for development and testing.
    Only supported for project-level policies and must reference instances within this project.
    """
    os_types: Optional[List['outputs.GuestPoliciesAssignmentOsType']] = pulumi.output_property("osTypes")
    """
    Targets VM instances matching at least one of the following OS types.
    VM instances must match all supplied criteria for a given OsType to be included.  Structure is documented below.
    """
    zones: Optional[List[str]] = pulumi.output_property("zones")
    """
    Targets instances in any of these zones. Leave empty to target instances in any zone.
    Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesAssignmentGroupLabel(dict):
    labels: Dict[str, str] = pulumi.output_property("labels")
    """
    Google Compute Engine instance labels that must be present for an instance to be included in this assignment group.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesAssignmentOsType(dict):
    os_architecture: Optional[str] = pulumi.output_property("osArchitecture")
    """
    Targets VM instances with OS Inventory enabled and having the following OS architecture.
    """
    os_short_name: Optional[str] = pulumi.output_property("osShortName")
    """
    Targets VM instances with OS Inventory enabled and having the following OS short name, for example "debian" or "windows".
    """
    os_version: Optional[str] = pulumi.output_property("osVersion")
    """
    Targets VM instances with OS Inventory enabled and having the following following OS version.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackage(dict):
    desired_state: Optional[str] = pulumi.output_property("desiredState")
    """
    Default is INSTALLED. The desired state the agent should maintain for this recipe.
    INSTALLED: The software recipe is installed on the instance but won't be updated to new versions.
    INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
    if a higher version of the recipe is assigned to this instance.
    REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
    """
    manager: Optional[str] = pulumi.output_property("manager")
    """
    Type of package manager that can be used to install this package. If a system does not have the package manager,
    the package is not installed or removed no error message is returned. By default, or if you specify ANY,
    the agent attempts to install and remove this package using the default package manager.
    This is useful when creating a policy that applies to different types of systems.
    The default behavior is ANY.
    """
    name: str = pulumi.output_property("name")
    """
    Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
    Names are also used to identify resources which helps to determine whether guest policies have conflicts.
    This means that requests to create multiple recipes with the same name and version are rejected since they
    could potentially have conflicting assignments.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepository(dict):
    apt: Optional['outputs.GuestPoliciesPackageRepositoryApt'] = pulumi.output_property("apt")
    """
    An Apt Repository.  Structure is documented below.
    """
    goo: Optional['outputs.GuestPoliciesPackageRepositoryGoo'] = pulumi.output_property("goo")
    """
    A Goo Repository.  Structure is documented below.
    """
    yum: Optional['outputs.GuestPoliciesPackageRepositoryYum'] = pulumi.output_property("yum")
    """
    A Yum Repository.  Structure is documented below.
    """
    zypper: Optional['outputs.GuestPoliciesPackageRepositoryZypper'] = pulumi.output_property("zypper")
    """
    A Zypper Repository.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepositoryApt(dict):
    archive_type: Optional[str] = pulumi.output_property("archiveType")
    """
    Type of archive files in this repository. The default behavior is DEB.
    """
    components: List[str] = pulumi.output_property("components")
    """
    List of components for this repository. Must contain at least one item.
    """
    distribution: str = pulumi.output_property("distribution")
    """
    Distribution of this repository.
    """
    gpg_key: Optional[str] = pulumi.output_property("gpgKey")
    """
    URI of the key file for this repository. The agent maintains a keyring at
    /etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg containing all the keys in any applied guest policy.
    """
    uri: str = pulumi.output_property("uri")
    """
    URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepositoryGoo(dict):
    name: str = pulumi.output_property("name")
    """
    Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
    Names are also used to identify resources which helps to determine whether guest policies have conflicts.
    This means that requests to create multiple recipes with the same name and version are rejected since they
    could potentially have conflicting assignments.
    """
    url: str = pulumi.output_property("url")
    """
    The url of the repository.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepositoryYum(dict):
    base_url: str = pulumi.output_property("baseUrl")
    """
    The location of the repository directory.
    """
    display_name: Optional[str] = pulumi.output_property("displayName")
    """
    The display name of the repository.
    """
    gpg_keys: Optional[List[str]] = pulumi.output_property("gpgKeys")
    """
    URIs of GPG keys.
    """
    id: str = pulumi.output_property("id")
    """
    Id of the artifact, which the installation and update steps of this recipe can reference.
    Artifacts in a recipe cannot have the same id.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepositoryZypper(dict):
    base_url: str = pulumi.output_property("baseUrl")
    """
    The location of the repository directory.
    """
    display_name: Optional[str] = pulumi.output_property("displayName")
    """
    The display name of the repository.
    """
    gpg_keys: Optional[List[str]] = pulumi.output_property("gpgKeys")
    """
    URIs of GPG keys.
    """
    id: str = pulumi.output_property("id")
    """
    Id of the artifact, which the installation and update steps of this recipe can reference.
    Artifacts in a recipe cannot have the same id.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipe(dict):
    artifacts: Optional[List['outputs.GuestPoliciesRecipeArtifact']] = pulumi.output_property("artifacts")
    """
    Resources available to be used in the steps in the recipe.  Structure is documented below.
    """
    desired_state: Optional[str] = pulumi.output_property("desiredState")
    """
    Default is INSTALLED. The desired state the agent should maintain for this recipe.
    INSTALLED: The software recipe is installed on the instance but won't be updated to new versions.
    INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
    if a higher version of the recipe is assigned to this instance.
    REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
    """
    install_steps: Optional[List['outputs.GuestPoliciesRecipeInstallStep']] = pulumi.output_property("installSteps")
    """
    Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation.
    Any steps taken (including partially completed steps) are not rolled back.  Structure is documented below.
    """
    name: str = pulumi.output_property("name")
    """
    Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
    Names are also used to identify resources which helps to determine whether guest policies have conflicts.
    This means that requests to create multiple recipes with the same name and version are rejected since they
    could potentially have conflicting assignments.
    """
    update_steps: Optional[List['outputs.GuestPoliciesRecipeUpdateStep']] = pulumi.output_property("updateSteps")
    """
    Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe.
    Any steps taken (including partially completed steps) are not rolled back.  Structure is documented below.
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeArtifact(dict):
    allow_insecure: Optional[bool] = pulumi.output_property("allowInsecure")
    """
    Defaults to false. When false, recipes are subject to validations based on the artifact type:
    Remote: A checksum must be specified, and only protocols with transport-layer security are permitted.
    GCS: An object generation number must be specified.
    """
    gcs: Optional['outputs.GuestPoliciesRecipeArtifactGcs'] = pulumi.output_property("gcs")
    """
    A Google Cloud Storage artifact.  Structure is documented below.
    """
    id: str = pulumi.output_property("id")
    """
    Id of the artifact, which the installation and update steps of this recipe can reference.
    Artifacts in a recipe cannot have the same id.
    """
    remote: Optional['outputs.GuestPoliciesRecipeArtifactRemote'] = pulumi.output_property("remote")
    """
    A generic remote artifact.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeArtifactGcs(dict):
    bucket: Optional[str] = pulumi.output_property("bucket")
    """
    Bucket of the Google Cloud Storage object. Given an example URL: https://storage.googleapis.com/my-bucket/foo/bar#1234567
    this value would be my-bucket.
    """
    generation: Optional[float] = pulumi.output_property("generation")
    """
    Must be provided if allowInsecure is false. Generation number of the Google Cloud Storage object.
    https://storage.googleapis.com/my-bucket/foo/bar#1234567 this value would be 1234567.
    """
    object: Optional[str] = pulumi.output_property("object")
    """
    Name of the Google Cloud Storage object. Given an example URL: https://storage.googleapis.com/my-bucket/foo/bar#1234567
    this value would be foo/bar.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeArtifactRemote(dict):
    check_sum: Optional[str] = pulumi.output_property("checkSum")
    """
    Must be provided if allowInsecure is false. SHA256 checksum in hex format, to compare to the checksum of the artifact.
    If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any
    of the steps.
    """
    uri: Optional[str] = pulumi.output_property("uri")
    """
    URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStep(dict):
    archive_extraction: Optional['outputs.GuestPoliciesRecipeInstallStepArchiveExtraction'] = pulumi.output_property("archiveExtraction")
    """
    Extracts an archive into the specified directory.  Structure is documented below.
    """
    dpkg_installation: Optional['outputs.GuestPoliciesRecipeInstallStepDpkgInstallation'] = pulumi.output_property("dpkgInstallation")
    """
    Installs a deb file via dpkg.  Structure is documented below.
    """
    file_copy: Optional['outputs.GuestPoliciesRecipeInstallStepFileCopy'] = pulumi.output_property("fileCopy")
    """
    Copies a file onto the instance.  Structure is documented below.
    """
    file_exec: Optional['outputs.GuestPoliciesRecipeInstallStepFileExec'] = pulumi.output_property("fileExec")
    """
    Executes an artifact or local file.  Structure is documented below.
    """
    msi_installation: Optional['outputs.GuestPoliciesRecipeInstallStepMsiInstallation'] = pulumi.output_property("msiInstallation")
    """
    Installs an MSI file.  Structure is documented below.
    """
    rpm_installation: Optional['outputs.GuestPoliciesRecipeInstallStepRpmInstallation'] = pulumi.output_property("rpmInstallation")
    """
    Installs an rpm file via the rpm utility.  Structure is documented below.
    """
    script_run: Optional['outputs.GuestPoliciesRecipeInstallStepScriptRun'] = pulumi.output_property("scriptRun")
    """
    Runs commands in a shell.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepArchiveExtraction(dict):
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    destination: Optional[str] = pulumi.output_property("destination")
    """
    Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the archive to extract.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepDpkgInstallation(dict):
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepFileCopy(dict):
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    destination: str = pulumi.output_property("destination")
    """
    Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
    """
    overwrite: Optional[bool] = pulumi.output_property("overwrite")
    """
    Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
    is not overwritten and the step is considered a success. Defaults to false.
    """
    permissions: Optional[str] = pulumi.output_property("permissions")
    """
    Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
    for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
    number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
    bit corresponds to the execute permission. Default behavior is 755.
    Below are some examples of permissions and their associated values:
    read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepFileExec(dict):
    allowed_exit_codes: Optional[str] = pulumi.output_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    args: Optional[List[str]] = pulumi.output_property("args")
    """
    Arguments to be passed to the provided executable.
    """
    artifact_id: Optional[str] = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    The absolute path of the file on the local filesystem.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepMsiInstallation(dict):
    allowed_exit_codes: Optional[List[float]] = pulumi.output_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    flags: Optional[List[str]] = pulumi.output_property("flags")
    """
    The flags to use when installing the MSI. Defaults to the install flag.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepRpmInstallation(dict):
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepScriptRun(dict):
    allowed_exit_codes: Optional[List[float]] = pulumi.output_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script is executed directly,
    which likely only succeed for scripts with shebang lines.
    """
    script: str = pulumi.output_property("script")
    """
    The shell script to be executed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStep(dict):
    archive_extraction: Optional['outputs.GuestPoliciesRecipeUpdateStepArchiveExtraction'] = pulumi.output_property("archiveExtraction")
    """
    Extracts an archive into the specified directory.  Structure is documented below.
    """
    dpkg_installation: Optional['outputs.GuestPoliciesRecipeUpdateStepDpkgInstallation'] = pulumi.output_property("dpkgInstallation")
    """
    Installs a deb file via dpkg.  Structure is documented below.
    """
    file_copy: Optional['outputs.GuestPoliciesRecipeUpdateStepFileCopy'] = pulumi.output_property("fileCopy")
    """
    Copies a file onto the instance.  Structure is documented below.
    """
    file_exec: Optional['outputs.GuestPoliciesRecipeUpdateStepFileExec'] = pulumi.output_property("fileExec")
    """
    Executes an artifact or local file.  Structure is documented below.
    """
    msi_installation: Optional['outputs.GuestPoliciesRecipeUpdateStepMsiInstallation'] = pulumi.output_property("msiInstallation")
    """
    Installs an MSI file.  Structure is documented below.
    """
    rpm_installation: Optional['outputs.GuestPoliciesRecipeUpdateStepRpmInstallation'] = pulumi.output_property("rpmInstallation")
    """
    Installs an rpm file via the rpm utility.  Structure is documented below.
    """
    script_run: Optional['outputs.GuestPoliciesRecipeUpdateStepScriptRun'] = pulumi.output_property("scriptRun")
    """
    Runs commands in a shell.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepArchiveExtraction(dict):
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    destination: Optional[str] = pulumi.output_property("destination")
    """
    Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the archive to extract.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepDpkgInstallation(dict):
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepFileCopy(dict):
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    destination: str = pulumi.output_property("destination")
    """
    Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
    """
    overwrite: Optional[bool] = pulumi.output_property("overwrite")
    """
    Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
    is not overwritten and the step is considered a success. Defaults to false.
    """
    permissions: Optional[str] = pulumi.output_property("permissions")
    """
    Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
    for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
    number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
    bit corresponds to the execute permission. Default behavior is 755.
    Below are some examples of permissions and their associated values:
    read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepFileExec(dict):
    allowed_exit_codes: Optional[List[float]] = pulumi.output_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    args: Optional[List[str]] = pulumi.output_property("args")
    """
    Arguments to be passed to the provided executable.
    """
    artifact_id: Optional[str] = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    The absolute path of the file on the local filesystem.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepMsiInstallation(dict):
    allowed_exit_codes: Optional[List[float]] = pulumi.output_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    flags: Optional[List[str]] = pulumi.output_property("flags")
    """
    The flags to use when installing the MSI. Defaults to the install flag.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepRpmInstallation(dict):
    artifact_id: str = pulumi.output_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepScriptRun(dict):
    allowed_exit_codes: Optional[List[float]] = pulumi.output_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script is executed directly,
    which likely only succeed for scripts with shebang lines.
    """
    script: str = pulumi.output_property("script")
    """
    The shell script to be executed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentInstanceFilter(dict):
    all: Optional[bool] = pulumi.output_property("all")
    """
    Target all VM instances in the project. If true, no other criteria is permitted.
    """
    group_labels: Optional[List['outputs.PatchDeploymentInstanceFilterGroupLabel']] = pulumi.output_property("groupLabels")
    """
    Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.  Structure is documented below.
    """
    instance_name_prefixes: Optional[List[str]] = pulumi.output_property("instanceNamePrefixes")
    """
    Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
    VMs when targeting configs, for example prefix="prod-".
    """
    instances: Optional[List[str]] = pulumi.output_property("instances")
    """
    Targets any of the VM instances specified. Instances are specified by their URI in the `form zones/{{zone}}/instances/{{instance_name}}`,
    `projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`, or
    `https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`
    """
    zones: Optional[List[str]] = pulumi.output_property("zones")
    """
    Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentInstanceFilterGroupLabel(dict):
    labels: Dict[str, str] = pulumi.output_property("labels")
    """
    Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentOneTimeSchedule(dict):
    execute_time: str = pulumi.output_property("executeTime")
    """
    The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
    accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfig(dict):
    apt: Optional['outputs.PatchDeploymentPatchConfigApt'] = pulumi.output_property("apt")
    """
    Apt update settings. Use this setting to override the default apt patch rules.  Structure is documented below.
    """
    goo: Optional['outputs.PatchDeploymentPatchConfigGoo'] = pulumi.output_property("goo")
    """
    goo update settings. Use this setting to override the default goo patch rules.  Structure is documented below.
    """
    post_step: Optional['outputs.PatchDeploymentPatchConfigPostStep'] = pulumi.output_property("postStep")
    """
    The ExecStep to run after the patch update.  Structure is documented below.
    """
    pre_step: Optional['outputs.PatchDeploymentPatchConfigPreStep'] = pulumi.output_property("preStep")
    """
    The ExecStep to run before the patch update.  Structure is documented below.
    """
    reboot_config: Optional[str] = pulumi.output_property("rebootConfig")
    """
    Post-patch reboot settings.
    """
    windows_update: Optional['outputs.PatchDeploymentPatchConfigWindowsUpdate'] = pulumi.output_property("windowsUpdate")
    """
    Windows update settings. Use this setting to override the default Windows patch rules.  Structure is documented below.
    """
    yum: Optional['outputs.PatchDeploymentPatchConfigYum'] = pulumi.output_property("yum")
    """
    Yum update settings. Use this setting to override the default yum patch rules.  Structure is documented below.
    """
    zypper: Optional['outputs.PatchDeploymentPatchConfigZypper'] = pulumi.output_property("zypper")
    """
    zypper update settings. Use this setting to override the default zypper patch rules.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigApt(dict):
    excludes: Optional[List[str]] = pulumi.output_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_packages: Optional[List[str]] = pulumi.output_property("exclusivePackages")
    """
    An exclusive list of packages to be updated. These are the only packages that will be updated.
    If these packages are not installed, they will be ignored. This field cannot be specified with
    any other patch configuration fields.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigGoo(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    goo update settings. Use this setting to override the default goo patch rules.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStep(dict):
    linux_exec_step_config: Optional['outputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfig'] = pulumi.output_property("linuxExecStepConfig")
    """
    The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
    """
    windows_exec_step_config: Optional['outputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfig'] = pulumi.output_property("windowsExecStepConfig")
    """
    The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfig(dict):
    allowed_success_codes: Optional[List[float]] = pulumi.output_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional['outputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject'] = pulumi.output_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: str = pulumi.output_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: str = pulumi.output_property("object")
    """
    Name of the Cloud Storage object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfig(dict):
    allowed_success_codes: Optional[List[float]] = pulumi.output_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional['outputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject'] = pulumi.output_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: str = pulumi.output_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: str = pulumi.output_property("object")
    """
    Name of the Cloud Storage object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStep(dict):
    linux_exec_step_config: Optional['outputs.PatchDeploymentPatchConfigPreStepLinuxExecStepConfig'] = pulumi.output_property("linuxExecStepConfig")
    """
    The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
    """
    windows_exec_step_config: Optional['outputs.PatchDeploymentPatchConfigPreStepWindowsExecStepConfig'] = pulumi.output_property("windowsExecStepConfig")
    """
    The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfig(dict):
    allowed_success_codes: Optional[List[float]] = pulumi.output_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional['outputs.PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject'] = pulumi.output_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: str = pulumi.output_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: str = pulumi.output_property("object")
    """
    Name of the Cloud Storage object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfig(dict):
    allowed_success_codes: Optional[List[float]] = pulumi.output_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional['outputs.PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject'] = pulumi.output_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[str] = pulumi.output_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[str] = pulumi.output_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject(dict):
    bucket: str = pulumi.output_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: str = pulumi.output_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: str = pulumi.output_property("object")
    """
    Name of the Cloud Storage object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigWindowsUpdate(dict):
    classifications: Optional[str] = pulumi.output_property("classifications")
    """
    Only apply updates of these windows update classifications. If empty, all updates are applied.
    """
    excludes: Optional[List[str]] = pulumi.output_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_patches: Optional[List[str]] = pulumi.output_property("exclusivePatches")
    """
    An exclusive list of kbs to be updated. These are the only patches that will be updated.
    This field must not be used with other patch configurations.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigYum(dict):
    excludes: Optional[List[str]] = pulumi.output_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_packages: Optional[List[str]] = pulumi.output_property("exclusivePackages")
    """
    An exclusive list of packages to be updated. These are the only packages that will be updated.
    If these packages are not installed, they will be ignored. This field cannot be specified with
    any other patch configuration fields.
    """
    minimal: Optional[bool] = pulumi.output_property("minimal")
    """
    Will cause patch to run yum update-minimal instead.
    """
    security: Optional[bool] = pulumi.output_property("security")
    """
    Adds the --security flag to yum update. Not supported on all platforms.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigZypper(dict):
    categories: Optional[List[str]] = pulumi.output_property("categories")
    """
    Install only patches with these categories. Common categories include security, recommended, and feature.
    """
    excludes: Optional[List[str]] = pulumi.output_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_patches: Optional[List[str]] = pulumi.output_property("exclusivePatches")
    """
    An exclusive list of kbs to be updated. These are the only patches that will be updated.
    This field must not be used with other patch configurations.
    """
    severities: Optional[List[str]] = pulumi.output_property("severities")
    """
    Install only patches with these severities. Common severities include critical, important, moderate, and low.
    """
    with_optional: Optional[bool] = pulumi.output_property("withOptional")
    """
    Adds the --with-optional flag to zypper patch.
    """
    with_update: Optional[bool] = pulumi.output_property("withUpdate")
    """
    Adds the --with-update flag, to zypper patch.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringSchedule(dict):
    end_time: Optional[str] = pulumi.output_property("endTime")
    """
    The end time at which a recurring patch deployment schedule is no longer active.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    last_execute_time: Optional[str] = pulumi.output_property("lastExecuteTime")
    """
    -
    The time the last patch job ran successfully.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    monthly: Optional['outputs.PatchDeploymentRecurringScheduleMonthly'] = pulumi.output_property("monthly")
    """
    Schedule with monthly executions.  Structure is documented below.
    """
    next_execute_time: Optional[str] = pulumi.output_property("nextExecuteTime")
    """
    -
    The time the next patch job is scheduled to run.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    start_time: Optional[str] = pulumi.output_property("startTime")
    """
    The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    time_of_day: 'outputs.PatchDeploymentRecurringScheduleTimeOfDay' = pulumi.output_property("timeOfDay")
    """
    Time of the day to run a recurring deployment.  Structure is documented below.
    """
    time_zone: 'outputs.PatchDeploymentRecurringScheduleTimeZone' = pulumi.output_property("timeZone")
    """
    Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
    determined by the chosen time zone.  Structure is documented below.
    """
    weekly: Optional['outputs.PatchDeploymentRecurringScheduleWeekly'] = pulumi.output_property("weekly")
    """
    Schedule with weekly executions.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleMonthly(dict):
    month_day: Optional[float] = pulumi.output_property("monthDay")
    """
    One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
    Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
    will not run in February, April, June, etc.
    """
    week_day_of_month: Optional['outputs.PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth'] = pulumi.output_property("weekDayOfMonth")
    """
    Week day in a month.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth(dict):
    day_of_week: str = pulumi.output_property("dayOfWeek")
    """
    A day of the week.
    """
    week_ordinal: float = pulumi.output_property("weekOrdinal")
    """
    Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleTimeOfDay(dict):
    hours: Optional[float] = pulumi.output_property("hours")
    """
    Hours of day in 24 hour format. Should be from 0 to 23.
    An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    """
    minutes: Optional[float] = pulumi.output_property("minutes")
    """
    Minutes of hour of day. Must be from 0 to 59.
    """
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    """
    seconds: Optional[float] = pulumi.output_property("seconds")
    """
    Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleTimeZone(dict):
    id: str = pulumi.output_property("id")
    """
    IANA Time Zone Database time zone, e.g. "America/New_York".
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    IANA Time Zone Database version number, e.g. "2019a".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleWeekly(dict):
    day_of_week: str = pulumi.output_property("dayOfWeek")
    """
    A day of the week.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


