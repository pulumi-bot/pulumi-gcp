# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'GuestPoliciesAssignment',
    'GuestPoliciesAssignmentGroupLabel',
    'GuestPoliciesAssignmentOsType',
    'GuestPoliciesPackage',
    'GuestPoliciesPackageRepository',
    'GuestPoliciesPackageRepositoryApt',
    'GuestPoliciesPackageRepositoryGoo',
    'GuestPoliciesPackageRepositoryYum',
    'GuestPoliciesPackageRepositoryZypper',
    'GuestPoliciesRecipe',
    'GuestPoliciesRecipeArtifact',
    'GuestPoliciesRecipeArtifactGcs',
    'GuestPoliciesRecipeArtifactRemote',
    'GuestPoliciesRecipeInstallStep',
    'GuestPoliciesRecipeInstallStepArchiveExtraction',
    'GuestPoliciesRecipeInstallStepDpkgInstallation',
    'GuestPoliciesRecipeInstallStepFileCopy',
    'GuestPoliciesRecipeInstallStepFileExec',
    'GuestPoliciesRecipeInstallStepMsiInstallation',
    'GuestPoliciesRecipeInstallStepRpmInstallation',
    'GuestPoliciesRecipeInstallStepScriptRun',
    'GuestPoliciesRecipeUpdateStep',
    'GuestPoliciesRecipeUpdateStepArchiveExtraction',
    'GuestPoliciesRecipeUpdateStepDpkgInstallation',
    'GuestPoliciesRecipeUpdateStepFileCopy',
    'GuestPoliciesRecipeUpdateStepFileExec',
    'GuestPoliciesRecipeUpdateStepMsiInstallation',
    'GuestPoliciesRecipeUpdateStepRpmInstallation',
    'GuestPoliciesRecipeUpdateStepScriptRun',
    'PatchDeploymentInstanceFilter',
    'PatchDeploymentInstanceFilterGroupLabel',
    'PatchDeploymentOneTimeSchedule',
    'PatchDeploymentPatchConfig',
    'PatchDeploymentPatchConfigApt',
    'PatchDeploymentPatchConfigGoo',
    'PatchDeploymentPatchConfigPostStep',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfig',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfig',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigPreStep',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfig',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfig',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject',
    'PatchDeploymentPatchConfigWindowsUpdate',
    'PatchDeploymentPatchConfigYum',
    'PatchDeploymentPatchConfigZypper',
    'PatchDeploymentRecurringSchedule',
    'PatchDeploymentRecurringScheduleMonthly',
    'PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth',
    'PatchDeploymentRecurringScheduleTimeOfDay',
    'PatchDeploymentRecurringScheduleTimeZone',
    'PatchDeploymentRecurringScheduleWeekly',
]

@pulumi.output_type
class GuestPoliciesAssignment(dict):
    @property
    @pulumi.getter(name="groupLabels")
    def group_labels(self) -> Optional[List['outputs.GuestPoliciesAssignmentGroupLabel']]:
        """
        Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups,
        for example "env=prod or env=staging".
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="instanceNamePrefixes")
    def instance_name_prefixes(self) -> Optional[List[str]]:
        """
        Targets VM instances whose name starts with one of these prefixes.
        Like labels, this is another way to group VM instances when targeting configs,
        for example prefix="prod-".
        Only supported for project-level policies.
        """
        ...

    @property
    @pulumi.getter
    def instances(self) -> Optional[List[str]]:
        """
        Targets any of the instances specified. Instances are specified by their URI in the form
        zones/[ZONE]/instances/[INSTANCE_NAME].
        Instance targeting is uncommon and is supported to facilitate the management of changes
        by the instance or to target specific VM instances for development and testing.
        Only supported for project-level policies and must reference instances within this project.
        """
        ...

    @property
    @pulumi.getter(name="osTypes")
    def os_types(self) -> Optional[List['outputs.GuestPoliciesAssignmentOsType']]:
        """
        Targets VM instances matching at least one of the following OS types.
        VM instances must match all supplied criteria for a given OsType to be included.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def zones(self) -> Optional[List[str]]:
        """
        Targets instances in any of these zones. Leave empty to target instances in any zone.
        Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesAssignmentGroupLabel(dict):
    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Google Compute Engine instance labels that must be present for an instance to be included in this assignment group.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesAssignmentOsType(dict):
    @property
    @pulumi.getter(name="osArchitecture")
    def os_architecture(self) -> Optional[str]:
        """
        Targets VM instances with OS Inventory enabled and having the following OS architecture.
        """
        ...

    @property
    @pulumi.getter(name="osShortName")
    def os_short_name(self) -> Optional[str]:
        """
        Targets VM instances with OS Inventory enabled and having the following OS short name, for example "debian" or "windows".
        """
        ...

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        """
        Targets VM instances with OS Inventory enabled and having the following following OS version.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackage(dict):
    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        """
        Default is INSTALLED. The desired state the agent should maintain for this recipe.
        INSTALLED: The software recipe is installed on the instance but won't be updated to new versions.
        INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
        if a higher version of the recipe is assigned to this instance.
        REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
        Default value is `INSTALLED`.
        Possible values are `INSTALLED`, `UPDATED`, and `REMOVED`.
        """
        ...

    @property
    @pulumi.getter
    def manager(self) -> Optional[str]:
        """
        Type of package manager that can be used to install this package. If a system does not have the package manager,
        the package is not installed or removed no error message is returned. By default, or if you specify ANY,
        the agent attempts to install and remove this package using the default package manager.
        This is useful when creating a policy that applies to different types of systems.
        The default behavior is ANY.
        Default value is `ANY`.
        Possible values are `ANY`, `APT`, `YUM`, `ZYPPER`, and `GOO`.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
        Names are also used to identify resources which helps to determine whether guest policies have conflicts.
        This means that requests to create multiple recipes with the same name and version are rejected since they
        could potentially have conflicting assignments.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepository(dict):
    @property
    @pulumi.getter
    def apt(self) -> Optional['outputs.GuestPoliciesPackageRepositoryApt']:
        """
        An Apt Repository.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def goo(self) -> Optional['outputs.GuestPoliciesPackageRepositoryGoo']:
        """
        A Goo Repository.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def yum(self) -> Optional['outputs.GuestPoliciesPackageRepositoryYum']:
        """
        A Yum Repository.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def zypper(self) -> Optional['outputs.GuestPoliciesPackageRepositoryZypper']:
        """
        A Zypper Repository.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepositoryApt(dict):
    @property
    @pulumi.getter(name="archiveType")
    def archive_type(self) -> Optional[str]:
        """
        Type of archive files in this repository. The default behavior is DEB.
        Default value is `DEB`.
        Possible values are `DEB` and `DEB_SRC`.
        """
        ...

    @property
    @pulumi.getter
    def components(self) -> List[str]:
        """
        List of components for this repository. Must contain at least one item.
        """
        ...

    @property
    @pulumi.getter
    def distribution(self) -> str:
        """
        Distribution of this repository.
        """
        ...

    @property
    @pulumi.getter(name="gpgKey")
    def gpg_key(self) -> Optional[str]:
        """
        URI of the key file for this repository. The agent maintains a keyring at
        /etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg containing all the keys in any applied guest policy.
        """
        ...

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepositoryGoo(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
        Names are also used to identify resources which helps to determine whether guest policies have conflicts.
        This means that requests to create multiple recipes with the same name and version are rejected since they
        could potentially have conflicting assignments.
        """
        ...

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The url of the repository.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepositoryYum(dict):
    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        The location of the repository directory.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the repository.
        """
        ...

    @property
    @pulumi.getter(name="gpgKeys")
    def gpg_keys(self) -> Optional[List[str]]:
        """
        URIs of GPG keys.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the artifact, which the installation and update steps of this recipe can reference.
        Artifacts in a recipe cannot have the same id.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesPackageRepositoryZypper(dict):
    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        The location of the repository directory.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the repository.
        """
        ...

    @property
    @pulumi.getter(name="gpgKeys")
    def gpg_keys(self) -> Optional[List[str]]:
        """
        URIs of GPG keys.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the artifact, which the installation and update steps of this recipe can reference.
        Artifacts in a recipe cannot have the same id.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipe(dict):
    @property
    @pulumi.getter
    def artifacts(self) -> Optional[List['outputs.GuestPoliciesRecipeArtifact']]:
        """
        Resources available to be used in the steps in the recipe.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        """
        Default is INSTALLED. The desired state the agent should maintain for this recipe.
        INSTALLED: The software recipe is installed on the instance but won't be updated to new versions.
        INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
        if a higher version of the recipe is assigned to this instance.
        REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
        Default value is `INSTALLED`.
        Possible values are `INSTALLED`, `UPDATED`, and `REMOVED`.
        """
        ...

    @property
    @pulumi.getter(name="installSteps")
    def install_steps(self) -> Optional[List['outputs.GuestPoliciesRecipeInstallStep']]:
        """
        Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation.
        Any steps taken (including partially completed steps) are not rolled back.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
        Names are also used to identify resources which helps to determine whether guest policies have conflicts.
        This means that requests to create multiple recipes with the same name and version are rejected since they
        could potentially have conflicting assignments.
        """
        ...

    @property
    @pulumi.getter(name="updateSteps")
    def update_steps(self) -> Optional[List['outputs.GuestPoliciesRecipeUpdateStep']]:
        """
        Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe.
        Any steps taken (including partially completed steps) are not rolled back.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeArtifact(dict):
    @property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[bool]:
        """
        Defaults to false. When false, recipes are subject to validations based on the artifact type:
        Remote: A checksum must be specified, and only protocols with transport-layer security are permitted.
        GCS: An object generation number must be specified.
        """
        ...

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.GuestPoliciesRecipeArtifactGcs']:
        """
        A Google Cloud Storage artifact.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the artifact, which the installation and update steps of this recipe can reference.
        Artifacts in a recipe cannot have the same id.
        """
        ...

    @property
    @pulumi.getter
    def remote(self) -> Optional['outputs.GuestPoliciesRecipeArtifactRemote']:
        """
        A generic remote artifact.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeArtifactGcs(dict):
    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        Bucket of the Google Cloud Storage object. Given an example URL: https://storage.googleapis.com/my-bucket/foo/bar#1234567
        this value would be my-bucket.
        """
        ...

    @property
    @pulumi.getter
    def generation(self) -> Optional[float]:
        """
        Must be provided if allowInsecure is false. Generation number of the Google Cloud Storage object.
        https://storage.googleapis.com/my-bucket/foo/bar#1234567 this value would be 1234567.
        """
        ...

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        """
        Name of the Google Cloud Storage object. Given an example URL: https://storage.googleapis.com/my-bucket/foo/bar#1234567
        this value would be foo/bar.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeArtifactRemote(dict):
    @property
    @pulumi.getter(name="checkSum")
    def check_sum(self) -> Optional[str]:
        """
        Must be provided if allowInsecure is false. SHA256 checksum in hex format, to compare to the checksum of the artifact.
        If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any
        of the steps.
        """
        ...

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStep(dict):
    @property
    @pulumi.getter(name="archiveExtraction")
    def archive_extraction(self) -> Optional['outputs.GuestPoliciesRecipeInstallStepArchiveExtraction']:
        """
        Extracts an archive into the specified directory.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="dpkgInstallation")
    def dpkg_installation(self) -> Optional['outputs.GuestPoliciesRecipeInstallStepDpkgInstallation']:
        """
        Installs a deb file via dpkg.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="fileCopy")
    def file_copy(self) -> Optional['outputs.GuestPoliciesRecipeInstallStepFileCopy']:
        """
        Copies a file onto the instance.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="fileExec")
    def file_exec(self) -> Optional['outputs.GuestPoliciesRecipeInstallStepFileExec']:
        """
        Executes an artifact or local file.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="msiInstallation")
    def msi_installation(self) -> Optional['outputs.GuestPoliciesRecipeInstallStepMsiInstallation']:
        """
        Installs an MSI file.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="rpmInstallation")
    def rpm_installation(self) -> Optional['outputs.GuestPoliciesRecipeInstallStepRpmInstallation']:
        """
        Installs an rpm file via the rpm utility.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="scriptRun")
    def script_run(self) -> Optional['outputs.GuestPoliciesRecipeInstallStepScriptRun']:
        """
        Runs commands in a shell.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepArchiveExtraction(dict):
    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        """
        Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the archive to extract.
        Possible values are `TAR`, `TAR_GZIP`, `TAR_BZIP`, `TAR_LZMA`, `TAR_XZ`, and `ZIP`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepDpkgInstallation(dict):
    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepFileCopy(dict):
    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
        """
        ...

    @property
    @pulumi.getter
    def overwrite(self) -> Optional[bool]:
        """
        Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
        is not overwritten and the step is considered a success. Defaults to false.
        """
        ...

    @property
    @pulumi.getter
    def permissions(self) -> Optional[str]:
        """
        Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
        for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
        number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
        bit corresponds to the execute permission. Default behavior is 755.
        Below are some examples of permissions and their associated values:
        read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepFileExec(dict):
    @property
    @pulumi.getter(name="allowedExitCodes")
    def allowed_exit_codes(self) -> Optional[str]:
        """
        Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        """
        ...

    @property
    @pulumi.getter
    def args(self) -> Optional[List[str]]:
        """
        Arguments to be passed to the provided executable.
        """
        ...

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> Optional[str]:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[str]:
        """
        The absolute path of the file on the local filesystem.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepMsiInstallation(dict):
    @property
    @pulumi.getter(name="allowedExitCodes")
    def allowed_exit_codes(self) -> Optional[List[float]]:
        """
        Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        """
        ...

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    @property
    @pulumi.getter
    def flags(self) -> Optional[List[str]]:
        """
        The flags to use when installing the MSI. Defaults to the install flag.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepRpmInstallation(dict):
    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeInstallStepScriptRun(dict):
    @property
    @pulumi.getter(name="allowedExitCodes")
    def allowed_exit_codes(self) -> Optional[List[float]]:
        """
        Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        """
        ...

    @property
    @pulumi.getter
    def interpreter(self) -> Optional[str]:
        """
        The script interpreter to use to run the script. If no interpreter is specified the script is executed directly,
        which likely only succeed for scripts with shebang lines.
        Possible values are `SHELL` and `POWERSHELL`.
        """
        ...

    @property
    @pulumi.getter
    def script(self) -> str:
        """
        The shell script to be executed.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStep(dict):
    @property
    @pulumi.getter(name="archiveExtraction")
    def archive_extraction(self) -> Optional['outputs.GuestPoliciesRecipeUpdateStepArchiveExtraction']:
        """
        Extracts an archive into the specified directory.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="dpkgInstallation")
    def dpkg_installation(self) -> Optional['outputs.GuestPoliciesRecipeUpdateStepDpkgInstallation']:
        """
        Installs a deb file via dpkg.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="fileCopy")
    def file_copy(self) -> Optional['outputs.GuestPoliciesRecipeUpdateStepFileCopy']:
        """
        Copies a file onto the instance.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="fileExec")
    def file_exec(self) -> Optional['outputs.GuestPoliciesRecipeUpdateStepFileExec']:
        """
        Executes an artifact or local file.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="msiInstallation")
    def msi_installation(self) -> Optional['outputs.GuestPoliciesRecipeUpdateStepMsiInstallation']:
        """
        Installs an MSI file.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="rpmInstallation")
    def rpm_installation(self) -> Optional['outputs.GuestPoliciesRecipeUpdateStepRpmInstallation']:
        """
        Installs an rpm file via the rpm utility.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="scriptRun")
    def script_run(self) -> Optional['outputs.GuestPoliciesRecipeUpdateStepScriptRun']:
        """
        Runs commands in a shell.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepArchiveExtraction(dict):
    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        """
        Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the archive to extract.
        Possible values are `TAR`, `TAR_GZIP`, `TAR_BZIP`, `TAR_LZMA`, `TAR_XZ`, and `ZIP`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepDpkgInstallation(dict):
    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepFileCopy(dict):
    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
        """
        ...

    @property
    @pulumi.getter
    def overwrite(self) -> Optional[bool]:
        """
        Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
        is not overwritten and the step is considered a success. Defaults to false.
        """
        ...

    @property
    @pulumi.getter
    def permissions(self) -> Optional[str]:
        """
        Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
        for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
        number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
        bit corresponds to the execute permission. Default behavior is 755.
        Below are some examples of permissions and their associated values:
        read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepFileExec(dict):
    @property
    @pulumi.getter(name="allowedExitCodes")
    def allowed_exit_codes(self) -> Optional[List[float]]:
        """
        Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        """
        ...

    @property
    @pulumi.getter
    def args(self) -> Optional[List[str]]:
        """
        Arguments to be passed to the provided executable.
        """
        ...

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> Optional[str]:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[str]:
        """
        The absolute path of the file on the local filesystem.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepMsiInstallation(dict):
    @property
    @pulumi.getter(name="allowedExitCodes")
    def allowed_exit_codes(self) -> Optional[List[float]]:
        """
        Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        """
        ...

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    @property
    @pulumi.getter
    def flags(self) -> Optional[List[str]]:
        """
        The flags to use when installing the MSI. Defaults to the install flag.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepRpmInstallation(dict):
    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        The id of the relevant artifact in the recipe.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GuestPoliciesRecipeUpdateStepScriptRun(dict):
    @property
    @pulumi.getter(name="allowedExitCodes")
    def allowed_exit_codes(self) -> Optional[List[float]]:
        """
        Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        """
        ...

    @property
    @pulumi.getter
    def interpreter(self) -> Optional[str]:
        """
        The script interpreter to use to run the script. If no interpreter is specified the script is executed directly,
        which likely only succeed for scripts with shebang lines.
        Possible values are `SHELL` and `POWERSHELL`.
        """
        ...

    @property
    @pulumi.getter
    def script(self) -> str:
        """
        The shell script to be executed.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentInstanceFilter(dict):
    @property
    @pulumi.getter
    def all(self) -> Optional[bool]:
        """
        Target all VM instances in the project. If true, no other criteria is permitted.
        """
        ...

    @property
    @pulumi.getter(name="groupLabels")
    def group_labels(self) -> Optional[List['outputs.PatchDeploymentInstanceFilterGroupLabel']]:
        """
        Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="instanceNamePrefixes")
    def instance_name_prefixes(self) -> Optional[List[str]]:
        """
        Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
        VMs when targeting configs, for example prefix="prod-".
        """
        ...

    @property
    @pulumi.getter
    def instances(self) -> Optional[List[str]]:
        """
        Targets any of the VM instances specified. Instances are specified by their URI in the `form zones/{{zone}}/instances/{{instance_name}}`,
        `projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`, or
        `https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`
        """
        ...

    @property
    @pulumi.getter
    def zones(self) -> Optional[List[str]]:
        """
        Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentInstanceFilterGroupLabel(dict):
    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentOneTimeSchedule(dict):
    @property
    @pulumi.getter(name="executeTime")
    def execute_time(self) -> str:
        """
        The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
        accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfig(dict):
    @property
    @pulumi.getter
    def apt(self) -> Optional['outputs.PatchDeploymentPatchConfigApt']:
        """
        Apt update settings. Use this setting to override the default apt patch rules.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def goo(self) -> Optional['outputs.PatchDeploymentPatchConfigGoo']:
        """
        goo update settings. Use this setting to override the default goo patch rules.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="postStep")
    def post_step(self) -> Optional['outputs.PatchDeploymentPatchConfigPostStep']:
        """
        The ExecStep to run after the patch update.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="preStep")
    def pre_step(self) -> Optional['outputs.PatchDeploymentPatchConfigPreStep']:
        """
        The ExecStep to run before the patch update.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="rebootConfig")
    def reboot_config(self) -> Optional[str]:
        """
        Post-patch reboot settings.
        Possible values are `DEFAULT`, `ALWAYS`, and `NEVER`.
        """
        ...

    @property
    @pulumi.getter(name="windowsUpdate")
    def windows_update(self) -> Optional['outputs.PatchDeploymentPatchConfigWindowsUpdate']:
        """
        Windows update settings. Use this setting to override the default Windows patch rules.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def yum(self) -> Optional['outputs.PatchDeploymentPatchConfigYum']:
        """
        Yum update settings. Use this setting to override the default yum patch rules.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def zypper(self) -> Optional['outputs.PatchDeploymentPatchConfigZypper']:
        """
        zypper update settings. Use this setting to override the default zypper patch rules.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigApt(dict):
    @property
    @pulumi.getter
    def excludes(self) -> Optional[List[str]]:
        """
        List of KBs to exclude from update.
        """
        ...

    @property
    @pulumi.getter(name="exclusivePackages")
    def exclusive_packages(self) -> Optional[List[str]]:
        """
        An exclusive list of packages to be updated. These are the only packages that will be updated.
        If these packages are not installed, they will be ignored. This field cannot be specified with
        any other patch configuration fields.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
        Possible values are `DIST` and `UPGRADE`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigGoo(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        goo update settings. Use this setting to override the default goo patch rules.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStep(dict):
    @property
    @pulumi.getter(name="linuxExecStepConfig")
    def linux_exec_step_config(self) -> Optional['outputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfig']:
        """
        The ExecStepConfig for all Linux VMs targeted by the PatchJob.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="windowsExecStepConfig")
    def windows_exec_step_config(self) -> Optional['outputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfig']:
        """
        The ExecStepConfig for all Windows VMs targeted by the PatchJob.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfig(dict):
    @property
    @pulumi.getter(name="allowedSuccessCodes")
    def allowed_success_codes(self) -> Optional[List[float]]:
        """
        Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        """
        ...

    @property
    @pulumi.getter(name="gcsObject")
    def gcs_object(self) -> Optional['outputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject']:
        """
        A Cloud Storage object containing the executable.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def interpreter(self) -> Optional[str]:
        """
        The script interpreter to use to run the script. If no interpreter is specified the script will
        be executed directly, which will likely only succeed for scripts with shebang lines.
        Possible values are `SHELL` and `POWERSHELL`.
        """
        ...

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[str]:
        """
        An absolute path to the executable on the VM.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject(dict):
    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Bucket of the Cloud Storage object.
        """
        ...

    @property
    @pulumi.getter(name="generationNumber")
    def generation_number(self) -> str:
        """
        Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        """
        ...

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Name of the Cloud Storage object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfig(dict):
    @property
    @pulumi.getter(name="allowedSuccessCodes")
    def allowed_success_codes(self) -> Optional[List[float]]:
        """
        Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        """
        ...

    @property
    @pulumi.getter(name="gcsObject")
    def gcs_object(self) -> Optional['outputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject']:
        """
        A Cloud Storage object containing the executable.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def interpreter(self) -> Optional[str]:
        """
        The script interpreter to use to run the script. If no interpreter is specified the script will
        be executed directly, which will likely only succeed for scripts with shebang lines.
        Possible values are `SHELL` and `POWERSHELL`.
        """
        ...

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[str]:
        """
        An absolute path to the executable on the VM.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject(dict):
    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Bucket of the Cloud Storage object.
        """
        ...

    @property
    @pulumi.getter(name="generationNumber")
    def generation_number(self) -> str:
        """
        Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        """
        ...

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Name of the Cloud Storage object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStep(dict):
    @property
    @pulumi.getter(name="linuxExecStepConfig")
    def linux_exec_step_config(self) -> Optional['outputs.PatchDeploymentPatchConfigPreStepLinuxExecStepConfig']:
        """
        The ExecStepConfig for all Linux VMs targeted by the PatchJob.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="windowsExecStepConfig")
    def windows_exec_step_config(self) -> Optional['outputs.PatchDeploymentPatchConfigPreStepWindowsExecStepConfig']:
        """
        The ExecStepConfig for all Windows VMs targeted by the PatchJob.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfig(dict):
    @property
    @pulumi.getter(name="allowedSuccessCodes")
    def allowed_success_codes(self) -> Optional[List[float]]:
        """
        Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        """
        ...

    @property
    @pulumi.getter(name="gcsObject")
    def gcs_object(self) -> Optional['outputs.PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject']:
        """
        A Cloud Storage object containing the executable.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def interpreter(self) -> Optional[str]:
        """
        The script interpreter to use to run the script. If no interpreter is specified the script will
        be executed directly, which will likely only succeed for scripts with shebang lines.
        Possible values are `SHELL` and `POWERSHELL`.
        """
        ...

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[str]:
        """
        An absolute path to the executable on the VM.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject(dict):
    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Bucket of the Cloud Storage object.
        """
        ...

    @property
    @pulumi.getter(name="generationNumber")
    def generation_number(self) -> str:
        """
        Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        """
        ...

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Name of the Cloud Storage object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfig(dict):
    @property
    @pulumi.getter(name="allowedSuccessCodes")
    def allowed_success_codes(self) -> Optional[List[float]]:
        """
        Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        """
        ...

    @property
    @pulumi.getter(name="gcsObject")
    def gcs_object(self) -> Optional['outputs.PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject']:
        """
        A Cloud Storage object containing the executable.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def interpreter(self) -> Optional[str]:
        """
        The script interpreter to use to run the script. If no interpreter is specified the script will
        be executed directly, which will likely only succeed for scripts with shebang lines.
        Possible values are `SHELL` and `POWERSHELL`.
        """
        ...

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[str]:
        """
        An absolute path to the executable on the VM.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject(dict):
    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Bucket of the Cloud Storage object.
        """
        ...

    @property
    @pulumi.getter(name="generationNumber")
    def generation_number(self) -> str:
        """
        Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        """
        ...

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Name of the Cloud Storage object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigWindowsUpdate(dict):
    @property
    @pulumi.getter
    def classifications(self) -> Optional[List[str]]:
        """
        Only apply updates of these windows update classifications. If empty, all updates are applied.
        Each value may be one of `CRITICAL`, `SECURITY`, `DEFINITION`, `DRIVER`, `FEATURE_PACK`, `SERVICE_PACK`, `TOOL`, `UPDATE_ROLLUP`, and `UPDATE`.
        """
        ...

    @property
    @pulumi.getter
    def excludes(self) -> Optional[List[str]]:
        """
        List of KBs to exclude from update.
        """
        ...

    @property
    @pulumi.getter(name="exclusivePatches")
    def exclusive_patches(self) -> Optional[List[str]]:
        """
        An exclusive list of kbs to be updated. These are the only patches that will be updated.
        This field must not be used with other patch configurations.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigYum(dict):
    @property
    @pulumi.getter
    def excludes(self) -> Optional[List[str]]:
        """
        List of KBs to exclude from update.
        """
        ...

    @property
    @pulumi.getter(name="exclusivePackages")
    def exclusive_packages(self) -> Optional[List[str]]:
        """
        An exclusive list of packages to be updated. These are the only packages that will be updated.
        If these packages are not installed, they will be ignored. This field cannot be specified with
        any other patch configuration fields.
        """
        ...

    @property
    @pulumi.getter
    def minimal(self) -> Optional[bool]:
        """
        Will cause patch to run yum update-minimal instead.
        """
        ...

    @property
    @pulumi.getter
    def security(self) -> Optional[bool]:
        """
        Adds the --security flag to yum update. Not supported on all platforms.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentPatchConfigZypper(dict):
    @property
    @pulumi.getter
    def categories(self) -> Optional[List[str]]:
        """
        Install only patches with these categories. Common categories include security, recommended, and feature.
        """
        ...

    @property
    @pulumi.getter
    def excludes(self) -> Optional[List[str]]:
        """
        List of KBs to exclude from update.
        """
        ...

    @property
    @pulumi.getter(name="exclusivePatches")
    def exclusive_patches(self) -> Optional[List[str]]:
        """
        An exclusive list of kbs to be updated. These are the only patches that will be updated.
        This field must not be used with other patch configurations.
        """
        ...

    @property
    @pulumi.getter
    def severities(self) -> Optional[List[str]]:
        """
        Install only patches with these severities. Common severities include critical, important, moderate, and low.
        """
        ...

    @property
    @pulumi.getter(name="withOptional")
    def with_optional(self) -> Optional[bool]:
        """
        Adds the --with-optional flag to zypper patch.
        """
        ...

    @property
    @pulumi.getter(name="withUpdate")
    def with_update(self) -> Optional[bool]:
        """
        Adds the --with-update flag, to zypper patch.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringSchedule(dict):
    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        The end time at which a recurring patch deployment schedule is no longer active.
        A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        ...

    @property
    @pulumi.getter(name="lastExecuteTime")
    def last_execute_time(self) -> Optional[str]:
        """
        -
        The time the last patch job ran successfully.
        A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        ...

    @property
    @pulumi.getter
    def monthly(self) -> Optional['outputs.PatchDeploymentRecurringScheduleMonthly']:
        """
        Schedule with monthly executions.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="nextExecuteTime")
    def next_execute_time(self) -> Optional[str]:
        """
        -
        The time the next patch job is scheduled to run.
        A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
        A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        ...

    @property
    @pulumi.getter(name="timeOfDay")
    def time_of_day(self) -> 'outputs.PatchDeploymentRecurringScheduleTimeOfDay':
        """
        Time of the day to run a recurring deployment.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> 'outputs.PatchDeploymentRecurringScheduleTimeZone':
        """
        Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
        determined by the chosen time zone.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def weekly(self) -> Optional['outputs.PatchDeploymentRecurringScheduleWeekly']:
        """
        Schedule with weekly executions.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleMonthly(dict):
    @property
    @pulumi.getter(name="monthDay")
    def month_day(self) -> Optional[float]:
        """
        One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
        Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
        will not run in February, April, June, etc.
        """
        ...

    @property
    @pulumi.getter(name="weekDayOfMonth")
    def week_day_of_month(self) -> Optional['outputs.PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth']:
        """
        Week day in a month.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth(dict):
    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        """
        A day of the week.
        Possible values are `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, and `SUNDAY`.
        """
        ...

    @property
    @pulumi.getter(name="weekOrdinal")
    def week_ordinal(self) -> float:
        """
        Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleTimeOfDay(dict):
    @property
    @pulumi.getter
    def hours(self) -> Optional[float]:
        """
        Hours of day in 24 hour format. Should be from 0 to 23.
        An API may choose to allow the value "24:00:00" for scenarios like business closing time.
        """
        ...

    @property
    @pulumi.getter
    def minutes(self) -> Optional[float]:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[float]:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        ...

    @property
    @pulumi.getter
    def seconds(self) -> Optional[float]:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleTimeZone(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        IANA Time Zone Database time zone, e.g. "America/New_York".
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        IANA Time Zone Database version number, e.g. "2019a".
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PatchDeploymentRecurringScheduleWeekly(dict):
    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        """
        A day of the week.
        Possible values are `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, and `SUNDAY`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


