# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'PatchDeploymentInstanceFilterArgs',
    'PatchDeploymentInstanceFilterGroupLabelArgs',
    'PatchDeploymentOneTimeScheduleArgs',
    'PatchDeploymentPatchConfigArgs',
    'PatchDeploymentPatchConfigAptArgs',
    'PatchDeploymentPatchConfigGooArgs',
    'PatchDeploymentPatchConfigPostStepArgs',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs',
    'PatchDeploymentPatchConfigPreStepArgs',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs',
    'PatchDeploymentPatchConfigWindowsUpdateArgs',
    'PatchDeploymentPatchConfigYumArgs',
    'PatchDeploymentPatchConfigZypperArgs',
    'PatchDeploymentRecurringScheduleArgs',
    'PatchDeploymentRecurringScheduleMonthlyArgs',
    'PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs',
    'PatchDeploymentRecurringScheduleTimeOfDayArgs',
    'PatchDeploymentRecurringScheduleTimeZoneArgs',
    'PatchDeploymentRecurringScheduleWeeklyArgs',
]

@pulumi.input_type
class PatchDeploymentInstanceFilterArgs:
    all: Optional[pulumi.Input[bool]] = pulumi.input_property("all")
    """
    Target all VM instances in the project. If true, no other criteria is permitted.
    """
    group_labels: Optional[pulumi.Input[List[pulumi.Input['PatchDeploymentInstanceFilterGroupLabelArgs']]]] = pulumi.input_property("groupLabels")
    """
    Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.  Structure is documented below.
    """
    instance_name_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("instanceNamePrefixes")
    """
    Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
    VMs when targeting configs, for example prefix="prod-".
    """
    instances: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("instances")
    """
    Targets any of the VM instances specified. Instances are specified by their URI in the `form zones/{{zone}}/instances/{{instance_name}}`,
    `projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`, or
    `https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`
    """
    zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("zones")
    """
    Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, all: Optional[pulumi.Input[bool]] = None, group_labels: Optional[pulumi.Input[List[pulumi.Input['PatchDeploymentInstanceFilterGroupLabelArgs']]]] = None, instance_name_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, instances: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[bool] all: Target all VM instances in the project. If true, no other criteria is permitted.
        :param pulumi.Input[List[pulumi.Input['PatchDeploymentInstanceFilterGroupLabelArgs']]] group_labels: Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.  Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] instance_name_prefixes: Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
               VMs when targeting configs, for example prefix="prod-".
        :param pulumi.Input[List[pulumi.Input[str]]] instances: Targets any of the VM instances specified. Instances are specified by their URI in the `form zones/{{zone}}/instances/{{instance_name}}`,
               `projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`, or
               `https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`
        :param pulumi.Input[List[pulumi.Input[str]]] zones: Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
        """
        __self__.all = all
        __self__.group_labels = group_labels
        __self__.instance_name_prefixes = instance_name_prefixes
        __self__.instances = instances
        __self__.zones = zones

@pulumi.input_type
class PatchDeploymentInstanceFilterGroupLabelArgs:
    labels: pulumi.Input[Dict[str, pulumi.Input[str]]] = pulumi.input_property("labels")
    """
    Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, labels: pulumi.Input[Dict[str, pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] labels: Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
        """
        __self__.labels = labels

@pulumi.input_type
class PatchDeploymentOneTimeScheduleArgs:
    execute_time: pulumi.Input[str] = pulumi.input_property("executeTime")
    """
    The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
    accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, execute_time: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] execute_time: The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
               accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        __self__.execute_time = execute_time

@pulumi.input_type
class PatchDeploymentPatchConfigArgs:
    apt: Optional[pulumi.Input['PatchDeploymentPatchConfigAptArgs']] = pulumi.input_property("apt")
    """
    Apt update settings. Use this setting to override the default apt patch rules.  Structure is documented below.
    """
    goo: Optional[pulumi.Input['PatchDeploymentPatchConfigGooArgs']] = pulumi.input_property("goo")
    """
    goo update settings. Use this setting to override the default goo patch rules.  Structure is documented below.
    """
    post_step: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepArgs']] = pulumi.input_property("postStep")
    """
    The ExecStep to run after the patch update.  Structure is documented below.
    """
    pre_step: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepArgs']] = pulumi.input_property("preStep")
    """
    The ExecStep to run before the patch update.  Structure is documented below.
    """
    reboot_config: Optional[pulumi.Input[str]] = pulumi.input_property("rebootConfig")
    """
    Post-patch reboot settings.
    """
    windows_update: Optional[pulumi.Input['PatchDeploymentPatchConfigWindowsUpdateArgs']] = pulumi.input_property("windowsUpdate")
    """
    Windows update settings. Use this setting to override the default Windows patch rules.  Structure is documented below.
    """
    yum: Optional[pulumi.Input['PatchDeploymentPatchConfigYumArgs']] = pulumi.input_property("yum")
    """
    Yum update settings. Use this setting to override the default yum patch rules.  Structure is documented below.
    """
    zypper: Optional[pulumi.Input['PatchDeploymentPatchConfigZypperArgs']] = pulumi.input_property("zypper")
    """
    zypper update settings. Use this setting to override the default zypper patch rules.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, apt: Optional[pulumi.Input['PatchDeploymentPatchConfigAptArgs']] = None, goo: Optional[pulumi.Input['PatchDeploymentPatchConfigGooArgs']] = None, post_step: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepArgs']] = None, pre_step: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepArgs']] = None, reboot_config: Optional[pulumi.Input[str]] = None, windows_update: Optional[pulumi.Input['PatchDeploymentPatchConfigWindowsUpdateArgs']] = None, yum: Optional[pulumi.Input['PatchDeploymentPatchConfigYumArgs']] = None, zypper: Optional[pulumi.Input['PatchDeploymentPatchConfigZypperArgs']] = None) -> None:
        """
        :param pulumi.Input['PatchDeploymentPatchConfigAptArgs'] apt: Apt update settings. Use this setting to override the default apt patch rules.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigGooArgs'] goo: goo update settings. Use this setting to override the default goo patch rules.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepArgs'] post_step: The ExecStep to run after the patch update.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepArgs'] pre_step: The ExecStep to run before the patch update.  Structure is documented below.
        :param pulumi.Input[str] reboot_config: Post-patch reboot settings.
        :param pulumi.Input['PatchDeploymentPatchConfigWindowsUpdateArgs'] windows_update: Windows update settings. Use this setting to override the default Windows patch rules.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigYumArgs'] yum: Yum update settings. Use this setting to override the default yum patch rules.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigZypperArgs'] zypper: zypper update settings. Use this setting to override the default zypper patch rules.  Structure is documented below.
        """
        __self__.apt = apt
        __self__.goo = goo
        __self__.post_step = post_step
        __self__.pre_step = pre_step
        __self__.reboot_config = reboot_config
        __self__.windows_update = windows_update
        __self__.yum = yum
        __self__.zypper = zypper

@pulumi.input_type
class PatchDeploymentPatchConfigAptArgs:
    excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_packages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusivePackages")
    """
    An exclusive list of packages to be updated. These are the only packages that will be updated.
    If these packages are not installed, they will be ignored. This field cannot be specified with
    any other patch configuration fields.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, exclusive_packages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] excludes: List of KBs to exclude from update.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusive_packages: An exclusive list of packages to be updated. These are the only packages that will be updated.
               If these packages are not installed, they will be ignored. This field cannot be specified with
               any other patch configuration fields.
        :param pulumi.Input[str] type: By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
        """
        __self__.excludes = excludes
        __self__.exclusive_packages = exclusive_packages
        __self__.type = type

@pulumi.input_type
class PatchDeploymentPatchConfigGooArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    goo update settings. Use this setting to override the default goo patch rules.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[bool] enabled: goo update settings. Use this setting to override the default goo patch rules.
        """
        __self__.enabled = enabled

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepArgs:
    linux_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs']] = pulumi.input_property("linuxExecStepConfig")
    """
    The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
    """
    windows_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs']] = pulumi.input_property("windowsExecStepConfig")
    """
    The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, linux_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs']] = None, windows_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs']] = None) -> None:
        """
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs'] linux_exec_step_config: The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs'] windows_exec_step_config: The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
        """
        __self__.linux_exec_step_config = linux_exec_step_config
        __self__.windows_exec_step_config = windows_exec_step_config

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs:
    allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs']] = pulumi.input_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs']] = None, interpreter: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_success_codes: Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs'] gcs_object: A Cloud Storage object containing the executable.  Structure is documented below.
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script will
               be executed directly, which will likely only succeed for scripts with shebang lines.
        :param pulumi.Input[str] local_path: An absolute path to the executable on the VM.
        """
        __self__.allowed_success_codes = allowed_success_codes
        __self__.gcs_object = gcs_object
        __self__.interpreter = interpreter
        __self__.local_path = local_path

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: pulumi.Input[str] = pulumi.input_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: pulumi.Input[str] = pulumi.input_property("object")
    """
    Name of the Cloud Storage object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], generation_number: pulumi.Input[str], object: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket: Bucket of the Cloud Storage object.
        :param pulumi.Input[str] generation_number: Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        :param pulumi.Input[str] object: Name of the Cloud Storage object.
        """
        __self__.bucket = bucket
        __self__.generation_number = generation_number
        __self__.object = object

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs:
    allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs']] = pulumi.input_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs']] = None, interpreter: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_success_codes: Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs'] gcs_object: A Cloud Storage object containing the executable.  Structure is documented below.
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script will
               be executed directly, which will likely only succeed for scripts with shebang lines.
        :param pulumi.Input[str] local_path: An absolute path to the executable on the VM.
        """
        __self__.allowed_success_codes = allowed_success_codes
        __self__.gcs_object = gcs_object
        __self__.interpreter = interpreter
        __self__.local_path = local_path

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: pulumi.Input[str] = pulumi.input_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: pulumi.Input[str] = pulumi.input_property("object")
    """
    Name of the Cloud Storage object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], generation_number: pulumi.Input[str], object: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket: Bucket of the Cloud Storage object.
        :param pulumi.Input[str] generation_number: Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        :param pulumi.Input[str] object: Name of the Cloud Storage object.
        """
        __self__.bucket = bucket
        __self__.generation_number = generation_number
        __self__.object = object

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepArgs:
    linux_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs']] = pulumi.input_property("linuxExecStepConfig")
    """
    The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
    """
    windows_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs']] = pulumi.input_property("windowsExecStepConfig")
    """
    The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, linux_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs']] = None, windows_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs']] = None) -> None:
        """
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs'] linux_exec_step_config: The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs'] windows_exec_step_config: The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
        """
        __self__.linux_exec_step_config = linux_exec_step_config
        __self__.windows_exec_step_config = windows_exec_step_config

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs:
    allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs']] = pulumi.input_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs']] = None, interpreter: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_success_codes: Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs'] gcs_object: A Cloud Storage object containing the executable.  Structure is documented below.
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script will
               be executed directly, which will likely only succeed for scripts with shebang lines.
        :param pulumi.Input[str] local_path: An absolute path to the executable on the VM.
        """
        __self__.allowed_success_codes = allowed_success_codes
        __self__.gcs_object = gcs_object
        __self__.interpreter = interpreter
        __self__.local_path = local_path

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: pulumi.Input[str] = pulumi.input_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: pulumi.Input[str] = pulumi.input_property("object")
    """
    Name of the Cloud Storage object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], generation_number: pulumi.Input[str], object: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket: Bucket of the Cloud Storage object.
        :param pulumi.Input[str] generation_number: Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        :param pulumi.Input[str] object: Name of the Cloud Storage object.
        """
        __self__.bucket = bucket
        __self__.generation_number = generation_number
        __self__.object = object

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs:
    allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs']] = pulumi.input_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs']] = None, interpreter: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_success_codes: Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs'] gcs_object: A Cloud Storage object containing the executable.  Structure is documented below.
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script will
               be executed directly, which will likely only succeed for scripts with shebang lines.
        :param pulumi.Input[str] local_path: An absolute path to the executable on the VM.
        """
        __self__.allowed_success_codes = allowed_success_codes
        __self__.gcs_object = gcs_object
        __self__.interpreter = interpreter
        __self__.local_path = local_path

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: pulumi.Input[str] = pulumi.input_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: pulumi.Input[str] = pulumi.input_property("object")
    """
    Name of the Cloud Storage object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], generation_number: pulumi.Input[str], object: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket: Bucket of the Cloud Storage object.
        :param pulumi.Input[str] generation_number: Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        :param pulumi.Input[str] object: Name of the Cloud Storage object.
        """
        __self__.bucket = bucket
        __self__.generation_number = generation_number
        __self__.object = object

@pulumi.input_type
class PatchDeploymentPatchConfigWindowsUpdateArgs:
    classifications: Optional[pulumi.Input[str]] = pulumi.input_property("classifications")
    """
    Only apply updates of these windows update classifications. If empty, all updates are applied.
    """
    excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_patches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusivePatches")
    """
    An exclusive list of kbs to be updated. These are the only patches that will be updated.
    This field must not be used with other patch configurations.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, classifications: Optional[pulumi.Input[str]] = None, excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, exclusive_patches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] classifications: Only apply updates of these windows update classifications. If empty, all updates are applied.
        :param pulumi.Input[List[pulumi.Input[str]]] excludes: List of KBs to exclude from update.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusive_patches: An exclusive list of kbs to be updated. These are the only patches that will be updated.
               This field must not be used with other patch configurations.
        """
        __self__.classifications = classifications
        __self__.excludes = excludes
        __self__.exclusive_patches = exclusive_patches

@pulumi.input_type
class PatchDeploymentPatchConfigYumArgs:
    excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_packages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusivePackages")
    """
    An exclusive list of packages to be updated. These are the only packages that will be updated.
    If these packages are not installed, they will be ignored. This field cannot be specified with
    any other patch configuration fields.
    """
    minimal: Optional[pulumi.Input[bool]] = pulumi.input_property("minimal")
    """
    Will cause patch to run yum update-minimal instead.
    """
    security: Optional[pulumi.Input[bool]] = pulumi.input_property("security")
    """
    Adds the --security flag to yum update. Not supported on all platforms.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, exclusive_packages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, minimal: Optional[pulumi.Input[bool]] = None, security: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] excludes: List of KBs to exclude from update.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusive_packages: An exclusive list of packages to be updated. These are the only packages that will be updated.
               If these packages are not installed, they will be ignored. This field cannot be specified with
               any other patch configuration fields.
        :param pulumi.Input[bool] minimal: Will cause patch to run yum update-minimal instead.
        :param pulumi.Input[bool] security: Adds the --security flag to yum update. Not supported on all platforms.
        """
        __self__.excludes = excludes
        __self__.exclusive_packages = exclusive_packages
        __self__.minimal = minimal
        __self__.security = security

@pulumi.input_type
class PatchDeploymentPatchConfigZypperArgs:
    categories: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("categories")
    """
    Install only patches with these categories. Common categories include security, recommended, and feature.
    """
    excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_patches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusivePatches")
    """
    An exclusive list of kbs to be updated. These are the only patches that will be updated.
    This field must not be used with other patch configurations.
    """
    severities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("severities")
    """
    Install only patches with these severities. Common severities include critical, important, moderate, and low.
    """
    with_optional: Optional[pulumi.Input[bool]] = pulumi.input_property("withOptional")
    """
    Adds the --with-optional flag to zypper patch.
    """
    with_update: Optional[pulumi.Input[bool]] = pulumi.input_property("withUpdate")
    """
    Adds the --with-update flag, to zypper patch.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, categories: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, exclusive_patches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, severities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, with_optional: Optional[pulumi.Input[bool]] = None, with_update: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] categories: Install only patches with these categories. Common categories include security, recommended, and feature.
        :param pulumi.Input[List[pulumi.Input[str]]] excludes: List of KBs to exclude from update.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusive_patches: An exclusive list of kbs to be updated. These are the only patches that will be updated.
               This field must not be used with other patch configurations.
        :param pulumi.Input[List[pulumi.Input[str]]] severities: Install only patches with these severities. Common severities include critical, important, moderate, and low.
        :param pulumi.Input[bool] with_optional: Adds the --with-optional flag to zypper patch.
        :param pulumi.Input[bool] with_update: Adds the --with-update flag, to zypper patch.
        """
        __self__.categories = categories
        __self__.excludes = excludes
        __self__.exclusive_patches = exclusive_patches
        __self__.severities = severities
        __self__.with_optional = with_optional
        __self__.with_update = with_update

@pulumi.input_type
class PatchDeploymentRecurringScheduleArgs:
    time_of_day: pulumi.Input['PatchDeploymentRecurringScheduleTimeOfDayArgs'] = pulumi.input_property("timeOfDay")
    """
    Time of the day to run a recurring deployment.  Structure is documented below.
    """
    time_zone: pulumi.Input['PatchDeploymentRecurringScheduleTimeZoneArgs'] = pulumi.input_property("timeZone")
    """
    Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
    determined by the chosen time zone.  Structure is documented below.
    """
    end_time: Optional[pulumi.Input[str]] = pulumi.input_property("endTime")
    """
    The end time at which a recurring patch deployment schedule is no longer active.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    last_execute_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastExecuteTime")
    """
    -
    The time the last patch job ran successfully.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    monthly: Optional[pulumi.Input['PatchDeploymentRecurringScheduleMonthlyArgs']] = pulumi.input_property("monthly")
    """
    Schedule with monthly executions.  Structure is documented below.
    """
    next_execute_time: Optional[pulumi.Input[str]] = pulumi.input_property("nextExecuteTime")
    """
    -
    The time the next patch job is scheduled to run.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    start_time: Optional[pulumi.Input[str]] = pulumi.input_property("startTime")
    """
    The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    weekly: Optional[pulumi.Input['PatchDeploymentRecurringScheduleWeeklyArgs']] = pulumi.input_property("weekly")
    """
    Schedule with weekly executions.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, time_of_day: pulumi.Input['PatchDeploymentRecurringScheduleTimeOfDayArgs'], time_zone: pulumi.Input['PatchDeploymentRecurringScheduleTimeZoneArgs'], end_time: Optional[pulumi.Input[str]] = None, last_execute_time: Optional[pulumi.Input[str]] = None, monthly: Optional[pulumi.Input['PatchDeploymentRecurringScheduleMonthlyArgs']] = None, next_execute_time: Optional[pulumi.Input[str]] = None, start_time: Optional[pulumi.Input[str]] = None, weekly: Optional[pulumi.Input['PatchDeploymentRecurringScheduleWeeklyArgs']] = None) -> None:
        """
        :param pulumi.Input['PatchDeploymentRecurringScheduleTimeOfDayArgs'] time_of_day: Time of the day to run a recurring deployment.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentRecurringScheduleTimeZoneArgs'] time_zone: Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
               determined by the chosen time zone.  Structure is documented below.
        :param pulumi.Input[str] end_time: The end time at which a recurring patch deployment schedule is no longer active.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input[str] last_execute_time: -
               The time the last patch job ran successfully.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input['PatchDeploymentRecurringScheduleMonthlyArgs'] monthly: Schedule with monthly executions.  Structure is documented below.
        :param pulumi.Input[str] next_execute_time: -
               The time the next patch job is scheduled to run.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input[str] start_time: The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input['PatchDeploymentRecurringScheduleWeeklyArgs'] weekly: Schedule with weekly executions.  Structure is documented below.
        """
        __self__.time_of_day = time_of_day
        __self__.time_zone = time_zone
        __self__.end_time = end_time
        __self__.last_execute_time = last_execute_time
        __self__.monthly = monthly
        __self__.next_execute_time = next_execute_time
        __self__.start_time = start_time
        __self__.weekly = weekly

@pulumi.input_type
class PatchDeploymentRecurringScheduleMonthlyArgs:
    month_day: Optional[pulumi.Input[float]] = pulumi.input_property("monthDay")
    """
    One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
    Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
    will not run in February, April, June, etc.
    """
    week_day_of_month: Optional[pulumi.Input['PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs']] = pulumi.input_property("weekDayOfMonth")
    """
    Week day in a month.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, month_day: Optional[pulumi.Input[float]] = None, week_day_of_month: Optional[pulumi.Input['PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs']] = None) -> None:
        """
        :param pulumi.Input[float] month_day: One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
               Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
               will not run in February, April, June, etc.
        :param pulumi.Input['PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs'] week_day_of_month: Week day in a month.  Structure is documented below.
        """
        __self__.month_day = month_day
        __self__.week_day_of_month = week_day_of_month

@pulumi.input_type
class PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs:
    day_of_week: pulumi.Input[str] = pulumi.input_property("dayOfWeek")
    """
    A day of the week.
    """
    week_ordinal: pulumi.Input[float] = pulumi.input_property("weekOrdinal")
    """
    Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, day_of_week: pulumi.Input[str], week_ordinal: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[str] day_of_week: A day of the week.
        :param pulumi.Input[float] week_ordinal: Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
        """
        __self__.day_of_week = day_of_week
        __self__.week_ordinal = week_ordinal

@pulumi.input_type
class PatchDeploymentRecurringScheduleTimeOfDayArgs:
    hours: Optional[pulumi.Input[float]] = pulumi.input_property("hours")
    """
    Hours of day in 24 hour format. Should be from 0 to 23.
    An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    """
    minutes: Optional[pulumi.Input[float]] = pulumi.input_property("minutes")
    """
    Minutes of hour of day. Must be from 0 to 59.
    """
    nanos: Optional[pulumi.Input[float]] = pulumi.input_property("nanos")
    """
    Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    """
    seconds: Optional[pulumi.Input[float]] = pulumi.input_property("seconds")
    """
    Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hours: Optional[pulumi.Input[float]] = None, minutes: Optional[pulumi.Input[float]] = None, nanos: Optional[pulumi.Input[float]] = None, seconds: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] hours: Hours of day in 24 hour format. Should be from 0 to 23.
               An API may choose to allow the value "24:00:00" for scenarios like business closing time.
        :param pulumi.Input[float] minutes: Minutes of hour of day. Must be from 0 to 59.
        :param pulumi.Input[float] nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param pulumi.Input[float] seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        """
        __self__.hours = hours
        __self__.minutes = minutes
        __self__.nanos = nanos
        __self__.seconds = seconds

@pulumi.input_type
class PatchDeploymentRecurringScheduleTimeZoneArgs:
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    IANA Time Zone Database time zone, e.g. "America/New_York".
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    IANA Time Zone Database version number, e.g. "2019a".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: pulumi.Input[str], version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] id: IANA Time Zone Database time zone, e.g. "America/New_York".
        :param pulumi.Input[str] version: IANA Time Zone Database version number, e.g. "2019a".
        """
        __self__.id = id
        __self__.version = version

@pulumi.input_type
class PatchDeploymentRecurringScheduleWeeklyArgs:
    day_of_week: pulumi.Input[str] = pulumi.input_property("dayOfWeek")
    """
    A day of the week.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, day_of_week: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] day_of_week: A day of the week.
        """
        __self__.day_of_week = day_of_week

