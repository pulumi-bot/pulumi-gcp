# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GuestPoliciesAssignmentArgs',
    'GuestPoliciesAssignmentGroupLabelArgs',
    'GuestPoliciesAssignmentOsTypeArgs',
    'GuestPoliciesPackageArgs',
    'GuestPoliciesPackageRepositoryArgs',
    'GuestPoliciesPackageRepositoryAptArgs',
    'GuestPoliciesPackageRepositoryGooArgs',
    'GuestPoliciesPackageRepositoryYumArgs',
    'GuestPoliciesPackageRepositoryZypperArgs',
    'GuestPoliciesRecipeArgs',
    'GuestPoliciesRecipeArtifactArgs',
    'GuestPoliciesRecipeArtifactGcsArgs',
    'GuestPoliciesRecipeArtifactRemoteArgs',
    'GuestPoliciesRecipeInstallStepArgs',
    'GuestPoliciesRecipeInstallStepArchiveExtractionArgs',
    'GuestPoliciesRecipeInstallStepDpkgInstallationArgs',
    'GuestPoliciesRecipeInstallStepFileCopyArgs',
    'GuestPoliciesRecipeInstallStepFileExecArgs',
    'GuestPoliciesRecipeInstallStepMsiInstallationArgs',
    'GuestPoliciesRecipeInstallStepRpmInstallationArgs',
    'GuestPoliciesRecipeInstallStepScriptRunArgs',
    'GuestPoliciesRecipeUpdateStepArgs',
    'GuestPoliciesRecipeUpdateStepArchiveExtractionArgs',
    'GuestPoliciesRecipeUpdateStepDpkgInstallationArgs',
    'GuestPoliciesRecipeUpdateStepFileCopyArgs',
    'GuestPoliciesRecipeUpdateStepFileExecArgs',
    'GuestPoliciesRecipeUpdateStepMsiInstallationArgs',
    'GuestPoliciesRecipeUpdateStepRpmInstallationArgs',
    'GuestPoliciesRecipeUpdateStepScriptRunArgs',
    'PatchDeploymentInstanceFilterArgs',
    'PatchDeploymentInstanceFilterGroupLabelArgs',
    'PatchDeploymentOneTimeScheduleArgs',
    'PatchDeploymentPatchConfigArgs',
    'PatchDeploymentPatchConfigAptArgs',
    'PatchDeploymentPatchConfigGooArgs',
    'PatchDeploymentPatchConfigPostStepArgs',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs',
    'PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs',
    'PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs',
    'PatchDeploymentPatchConfigPreStepArgs',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs',
    'PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs',
    'PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs',
    'PatchDeploymentPatchConfigWindowsUpdateArgs',
    'PatchDeploymentPatchConfigYumArgs',
    'PatchDeploymentPatchConfigZypperArgs',
    'PatchDeploymentRecurringScheduleArgs',
    'PatchDeploymentRecurringScheduleMonthlyArgs',
    'PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs',
    'PatchDeploymentRecurringScheduleTimeOfDayArgs',
    'PatchDeploymentRecurringScheduleTimeZoneArgs',
    'PatchDeploymentRecurringScheduleWeeklyArgs',
]

@pulumi.input_type
class GuestPoliciesAssignmentArgs:
    group_labels: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesAssignmentGroupLabelArgs']]]] = pulumi.input_property("groupLabels")
    """
    Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups,
    for example "env=prod or env=staging".  Structure is documented below.
    """
    instance_name_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("instanceNamePrefixes")
    """
    Targets VM instances whose name starts with one of these prefixes.
    Like labels, this is another way to group VM instances when targeting configs,
    for example prefix="prod-".
    Only supported for project-level policies.
    """
    instances: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("instances")
    """
    Targets any of the instances specified. Instances are specified by their URI in the form
    zones/[ZONE]/instances/[INSTANCE_NAME].
    Instance targeting is uncommon and is supported to facilitate the management of changes
    by the instance or to target specific VM instances for development and testing.
    Only supported for project-level policies and must reference instances within this project.
    """
    os_types: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesAssignmentOsTypeArgs']]]] = pulumi.input_property("osTypes")
    """
    Targets VM instances matching at least one of the following OS types.
    VM instances must match all supplied criteria for a given OsType to be included.  Structure is documented below.
    """
    zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("zones")
    """
    Targets instances in any of these zones. Leave empty to target instances in any zone.
    Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, group_labels: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesAssignmentGroupLabelArgs']]]] = None, instance_name_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, instances: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, os_types: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesAssignmentOsTypeArgs']]]] = None, zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['GuestPoliciesAssignmentGroupLabelArgs']]] group_labels: Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups,
               for example "env=prod or env=staging".  Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] instance_name_prefixes: Targets VM instances whose name starts with one of these prefixes.
               Like labels, this is another way to group VM instances when targeting configs,
               for example prefix="prod-".
               Only supported for project-level policies.
        :param pulumi.Input[List[pulumi.Input[str]]] instances: Targets any of the instances specified. Instances are specified by their URI in the form
               zones/[ZONE]/instances/[INSTANCE_NAME].
               Instance targeting is uncommon and is supported to facilitate the management of changes
               by the instance or to target specific VM instances for development and testing.
               Only supported for project-level policies and must reference instances within this project.
        :param pulumi.Input[List[pulumi.Input['GuestPoliciesAssignmentOsTypeArgs']]] os_types: Targets VM instances matching at least one of the following OS types.
               VM instances must match all supplied criteria for a given OsType to be included.  Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] zones: Targets instances in any of these zones. Leave empty to target instances in any zone.
               Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
        """
        __self__.group_labels = group_labels
        __self__.instance_name_prefixes = instance_name_prefixes
        __self__.instances = instances
        __self__.os_types = os_types
        __self__.zones = zones

@pulumi.input_type
class GuestPoliciesAssignmentGroupLabelArgs:
    labels: pulumi.Input[Dict[str, pulumi.Input[str]]] = pulumi.input_property("labels")
    """
    Google Compute Engine instance labels that must be present for an instance to be included in this assignment group.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, labels: pulumi.Input[Dict[str, pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] labels: Google Compute Engine instance labels that must be present for an instance to be included in this assignment group.
        """
        __self__.labels = labels

@pulumi.input_type
class GuestPoliciesAssignmentOsTypeArgs:
    os_architecture: Optional[pulumi.Input[str]] = pulumi.input_property("osArchitecture")
    """
    Targets VM instances with OS Inventory enabled and having the following OS architecture.
    """
    os_short_name: Optional[pulumi.Input[str]] = pulumi.input_property("osShortName")
    """
    Targets VM instances with OS Inventory enabled and having the following OS short name, for example "debian" or "windows".
    """
    os_version: Optional[pulumi.Input[str]] = pulumi.input_property("osVersion")
    """
    Targets VM instances with OS Inventory enabled and having the following following OS version.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, os_architecture: Optional[pulumi.Input[str]] = None, os_short_name: Optional[pulumi.Input[str]] = None, os_version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] os_architecture: Targets VM instances with OS Inventory enabled and having the following OS architecture.
        :param pulumi.Input[str] os_short_name: Targets VM instances with OS Inventory enabled and having the following OS short name, for example "debian" or "windows".
        :param pulumi.Input[str] os_version: Targets VM instances with OS Inventory enabled and having the following following OS version.
        """
        __self__.os_architecture = os_architecture
        __self__.os_short_name = os_short_name
        __self__.os_version = os_version

@pulumi.input_type
class GuestPoliciesPackageArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
    Names are also used to identify resources which helps to determine whether guest policies have conflicts.
    This means that requests to create multiple recipes with the same name and version are rejected since they
    could potentially have conflicting assignments.
    """
    desired_state: Optional[pulumi.Input[str]] = pulumi.input_property("desiredState")
    """
    Default is INSTALLED. The desired state the agent should maintain for this recipe.
    INSTALLED: The software recipe is installed on the instance but won't be updated to new versions.
    INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
    if a higher version of the recipe is assigned to this instance.
    REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
    """
    manager: Optional[pulumi.Input[str]] = pulumi.input_property("manager")
    """
    Type of package manager that can be used to install this package. If a system does not have the package manager,
    the package is not installed or removed no error message is returned. By default, or if you specify ANY,
    the agent attempts to install and remove this package using the default package manager.
    This is useful when creating a policy that applies to different types of systems.
    The default behavior is ANY.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], desired_state: Optional[pulumi.Input[str]] = None, manager: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
               Names are also used to identify resources which helps to determine whether guest policies have conflicts.
               This means that requests to create multiple recipes with the same name and version are rejected since they
               could potentially have conflicting assignments.
        :param pulumi.Input[str] desired_state: Default is INSTALLED. The desired state the agent should maintain for this recipe.
               INSTALLED: The software recipe is installed on the instance but won't be updated to new versions.
               INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
               if a higher version of the recipe is assigned to this instance.
               REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
        :param pulumi.Input[str] manager: Type of package manager that can be used to install this package. If a system does not have the package manager,
               the package is not installed or removed no error message is returned. By default, or if you specify ANY,
               the agent attempts to install and remove this package using the default package manager.
               This is useful when creating a policy that applies to different types of systems.
               The default behavior is ANY.
        """
        __self__.name = name
        __self__.desired_state = desired_state
        __self__.manager = manager

@pulumi.input_type
class GuestPoliciesPackageRepositoryArgs:
    apt: Optional[pulumi.Input['GuestPoliciesPackageRepositoryAptArgs']] = pulumi.input_property("apt")
    """
    An Apt Repository.  Structure is documented below.
    """
    goo: Optional[pulumi.Input['GuestPoliciesPackageRepositoryGooArgs']] = pulumi.input_property("goo")
    """
    A Goo Repository.  Structure is documented below.
    """
    yum: Optional[pulumi.Input['GuestPoliciesPackageRepositoryYumArgs']] = pulumi.input_property("yum")
    """
    A Yum Repository.  Structure is documented below.
    """
    zypper: Optional[pulumi.Input['GuestPoliciesPackageRepositoryZypperArgs']] = pulumi.input_property("zypper")
    """
    A Zypper Repository.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, apt: Optional[pulumi.Input['GuestPoliciesPackageRepositoryAptArgs']] = None, goo: Optional[pulumi.Input['GuestPoliciesPackageRepositoryGooArgs']] = None, yum: Optional[pulumi.Input['GuestPoliciesPackageRepositoryYumArgs']] = None, zypper: Optional[pulumi.Input['GuestPoliciesPackageRepositoryZypperArgs']] = None) -> None:
        """
        :param pulumi.Input['GuestPoliciesPackageRepositoryAptArgs'] apt: An Apt Repository.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesPackageRepositoryGooArgs'] goo: A Goo Repository.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesPackageRepositoryYumArgs'] yum: A Yum Repository.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesPackageRepositoryZypperArgs'] zypper: A Zypper Repository.  Structure is documented below.
        """
        __self__.apt = apt
        __self__.goo = goo
        __self__.yum = yum
        __self__.zypper = zypper

@pulumi.input_type
class GuestPoliciesPackageRepositoryAptArgs:
    components: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("components")
    """
    List of components for this repository. Must contain at least one item.
    """
    distribution: pulumi.Input[str] = pulumi.input_property("distribution")
    """
    Distribution of this repository.
    """
    uri: pulumi.Input[str] = pulumi.input_property("uri")
    """
    URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
    """
    archive_type: Optional[pulumi.Input[str]] = pulumi.input_property("archiveType")
    """
    Type of archive files in this repository. The default behavior is DEB.
    """
    gpg_key: Optional[pulumi.Input[str]] = pulumi.input_property("gpgKey")
    """
    URI of the key file for this repository. The agent maintains a keyring at
    /etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg containing all the keys in any applied guest policy.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, components: pulumi.Input[List[pulumi.Input[str]]], distribution: pulumi.Input[str], uri: pulumi.Input[str], archive_type: Optional[pulumi.Input[str]] = None, gpg_key: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] components: List of components for this repository. Must contain at least one item.
        :param pulumi.Input[str] distribution: Distribution of this repository.
        :param pulumi.Input[str] uri: URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
        :param pulumi.Input[str] archive_type: Type of archive files in this repository. The default behavior is DEB.
        :param pulumi.Input[str] gpg_key: URI of the key file for this repository. The agent maintains a keyring at
               /etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg containing all the keys in any applied guest policy.
        """
        __self__.components = components
        __self__.distribution = distribution
        __self__.uri = uri
        __self__.archive_type = archive_type
        __self__.gpg_key = gpg_key

@pulumi.input_type
class GuestPoliciesPackageRepositoryGooArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
    Names are also used to identify resources which helps to determine whether guest policies have conflicts.
    This means that requests to create multiple recipes with the same name and version are rejected since they
    could potentially have conflicting assignments.
    """
    url: pulumi.Input[str] = pulumi.input_property("url")
    """
    The url of the repository.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], url: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
               Names are also used to identify resources which helps to determine whether guest policies have conflicts.
               This means that requests to create multiple recipes with the same name and version are rejected since they
               could potentially have conflicting assignments.
        :param pulumi.Input[str] url: The url of the repository.
        """
        __self__.name = name
        __self__.url = url

@pulumi.input_type
class GuestPoliciesPackageRepositoryYumArgs:
    base_url: pulumi.Input[str] = pulumi.input_property("baseUrl")
    """
    The location of the repository directory.
    """
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    Id of the artifact, which the installation and update steps of this recipe can reference.
    Artifacts in a recipe cannot have the same id.
    """
    display_name: Optional[pulumi.Input[str]] = pulumi.input_property("displayName")
    """
    The display name of the repository.
    """
    gpg_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("gpgKeys")
    """
    URIs of GPG keys.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, base_url: pulumi.Input[str], id: pulumi.Input[str], display_name: Optional[pulumi.Input[str]] = None, gpg_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] base_url: The location of the repository directory.
        :param pulumi.Input[str] id: Id of the artifact, which the installation and update steps of this recipe can reference.
               Artifacts in a recipe cannot have the same id.
        :param pulumi.Input[str] display_name: The display name of the repository.
        :param pulumi.Input[List[pulumi.Input[str]]] gpg_keys: URIs of GPG keys.
        """
        __self__.base_url = base_url
        __self__.id = id
        __self__.display_name = display_name
        __self__.gpg_keys = gpg_keys

@pulumi.input_type
class GuestPoliciesPackageRepositoryZypperArgs:
    base_url: pulumi.Input[str] = pulumi.input_property("baseUrl")
    """
    The location of the repository directory.
    """
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    Id of the artifact, which the installation and update steps of this recipe can reference.
    Artifacts in a recipe cannot have the same id.
    """
    display_name: Optional[pulumi.Input[str]] = pulumi.input_property("displayName")
    """
    The display name of the repository.
    """
    gpg_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("gpgKeys")
    """
    URIs of GPG keys.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, base_url: pulumi.Input[str], id: pulumi.Input[str], display_name: Optional[pulumi.Input[str]] = None, gpg_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] base_url: The location of the repository directory.
        :param pulumi.Input[str] id: Id of the artifact, which the installation and update steps of this recipe can reference.
               Artifacts in a recipe cannot have the same id.
        :param pulumi.Input[str] display_name: The display name of the repository.
        :param pulumi.Input[List[pulumi.Input[str]]] gpg_keys: URIs of GPG keys.
        """
        __self__.base_url = base_url
        __self__.id = id
        __self__.display_name = display_name
        __self__.gpg_keys = gpg_keys

@pulumi.input_type
class GuestPoliciesRecipeArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
    Names are also used to identify resources which helps to determine whether guest policies have conflicts.
    This means that requests to create multiple recipes with the same name and version are rejected since they
    could potentially have conflicting assignments.
    """
    artifacts: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesRecipeArtifactArgs']]]] = pulumi.input_property("artifacts")
    """
    Resources available to be used in the steps in the recipe.  Structure is documented below.
    """
    desired_state: Optional[pulumi.Input[str]] = pulumi.input_property("desiredState")
    """
    Default is INSTALLED. The desired state the agent should maintain for this recipe.
    INSTALLED: The software recipe is installed on the instance but won't be updated to new versions.
    INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
    if a higher version of the recipe is assigned to this instance.
    REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
    """
    install_steps: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesRecipeInstallStepArgs']]]] = pulumi.input_property("installSteps")
    """
    Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation.
    Any steps taken (including partially completed steps) are not rolled back.  Structure is documented below.
    """
    update_steps: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesRecipeUpdateStepArgs']]]] = pulumi.input_property("updateSteps")
    """
    Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe.
    Any steps taken (including partially completed steps) are not rolled back.  Structure is documented below.
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], artifacts: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesRecipeArtifactArgs']]]] = None, desired_state: Optional[pulumi.Input[str]] = None, install_steps: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesRecipeInstallStepArgs']]]] = None, update_steps: Optional[pulumi.Input[List[pulumi.Input['GuestPoliciesRecipeUpdateStepArgs']]]] = None, version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
               Names are also used to identify resources which helps to determine whether guest policies have conflicts.
               This means that requests to create multiple recipes with the same name and version are rejected since they
               could potentially have conflicting assignments.
        :param pulumi.Input[List[pulumi.Input['GuestPoliciesRecipeArtifactArgs']]] artifacts: Resources available to be used in the steps in the recipe.  Structure is documented below.
        :param pulumi.Input[str] desired_state: Default is INSTALLED. The desired state the agent should maintain for this recipe.
               INSTALLED: The software recipe is installed on the instance but won't be updated to new versions.
               INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
               if a higher version of the recipe is assigned to this instance.
               REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
        :param pulumi.Input[List[pulumi.Input['GuestPoliciesRecipeInstallStepArgs']]] install_steps: Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation.
               Any steps taken (including partially completed steps) are not rolled back.  Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['GuestPoliciesRecipeUpdateStepArgs']]] update_steps: Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe.
               Any steps taken (including partially completed steps) are not rolled back.  Structure is documented below.
        :param pulumi.Input[str] version: The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
        """
        __self__.name = name
        __self__.artifacts = artifacts
        __self__.desired_state = desired_state
        __self__.install_steps = install_steps
        __self__.update_steps = update_steps
        __self__.version = version

@pulumi.input_type
class GuestPoliciesRecipeArtifactArgs:
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    Id of the artifact, which the installation and update steps of this recipe can reference.
    Artifacts in a recipe cannot have the same id.
    """
    allow_insecure: Optional[pulumi.Input[bool]] = pulumi.input_property("allowInsecure")
    """
    Defaults to false. When false, recipes are subject to validations based on the artifact type:
    Remote: A checksum must be specified, and only protocols with transport-layer security are permitted.
    GCS: An object generation number must be specified.
    """
    gcs: Optional[pulumi.Input['GuestPoliciesRecipeArtifactGcsArgs']] = pulumi.input_property("gcs")
    """
    A Google Cloud Storage artifact.  Structure is documented below.
    """
    remote: Optional[pulumi.Input['GuestPoliciesRecipeArtifactRemoteArgs']] = pulumi.input_property("remote")
    """
    A generic remote artifact.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: pulumi.Input[str], allow_insecure: Optional[pulumi.Input[bool]] = None, gcs: Optional[pulumi.Input['GuestPoliciesRecipeArtifactGcsArgs']] = None, remote: Optional[pulumi.Input['GuestPoliciesRecipeArtifactRemoteArgs']] = None) -> None:
        """
        :param pulumi.Input[str] id: Id of the artifact, which the installation and update steps of this recipe can reference.
               Artifacts in a recipe cannot have the same id.
        :param pulumi.Input[bool] allow_insecure: Defaults to false. When false, recipes are subject to validations based on the artifact type:
               Remote: A checksum must be specified, and only protocols with transport-layer security are permitted.
               GCS: An object generation number must be specified.
        :param pulumi.Input['GuestPoliciesRecipeArtifactGcsArgs'] gcs: A Google Cloud Storage artifact.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeArtifactRemoteArgs'] remote: A generic remote artifact.  Structure is documented below.
        """
        __self__.id = id
        __self__.allow_insecure = allow_insecure
        __self__.gcs = gcs
        __self__.remote = remote

@pulumi.input_type
class GuestPoliciesRecipeArtifactGcsArgs:
    bucket: Optional[pulumi.Input[str]] = pulumi.input_property("bucket")
    """
    Bucket of the Google Cloud Storage object. Given an example URL: https://storage.googleapis.com/my-bucket/foo/bar#1234567
    this value would be my-bucket.
    """
    generation: Optional[pulumi.Input[float]] = pulumi.input_property("generation")
    """
    Must be provided if allowInsecure is false. Generation number of the Google Cloud Storage object.
    https://storage.googleapis.com/my-bucket/foo/bar#1234567 this value would be 1234567.
    """
    object: Optional[pulumi.Input[str]] = pulumi.input_property("object")
    """
    Name of the Google Cloud Storage object. Given an example URL: https://storage.googleapis.com/my-bucket/foo/bar#1234567
    this value would be foo/bar.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: Optional[pulumi.Input[str]] = None, generation: Optional[pulumi.Input[float]] = None, object: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] bucket: Bucket of the Google Cloud Storage object. Given an example URL: https://storage.googleapis.com/my-bucket/foo/bar#1234567
               this value would be my-bucket.
        :param pulumi.Input[float] generation: Must be provided if allowInsecure is false. Generation number of the Google Cloud Storage object.
               https://storage.googleapis.com/my-bucket/foo/bar#1234567 this value would be 1234567.
        :param pulumi.Input[str] object: Name of the Google Cloud Storage object. Given an example URL: https://storage.googleapis.com/my-bucket/foo/bar#1234567
               this value would be foo/bar.
        """
        __self__.bucket = bucket
        __self__.generation = generation
        __self__.object = object

@pulumi.input_type
class GuestPoliciesRecipeArtifactRemoteArgs:
    check_sum: Optional[pulumi.Input[str]] = pulumi.input_property("checkSum")
    """
    Must be provided if allowInsecure is false. SHA256 checksum in hex format, to compare to the checksum of the artifact.
    If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any
    of the steps.
    """
    uri: Optional[pulumi.Input[str]] = pulumi.input_property("uri")
    """
    URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, check_sum: Optional[pulumi.Input[str]] = None, uri: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] check_sum: Must be provided if allowInsecure is false. SHA256 checksum in hex format, to compare to the checksum of the artifact.
               If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any
               of the steps.
        :param pulumi.Input[str] uri: URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
        """
        __self__.check_sum = check_sum
        __self__.uri = uri

@pulumi.input_type
class GuestPoliciesRecipeInstallStepArgs:
    archive_extraction: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepArchiveExtractionArgs']] = pulumi.input_property("archiveExtraction")
    """
    Extracts an archive into the specified directory.  Structure is documented below.
    """
    dpkg_installation: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepDpkgInstallationArgs']] = pulumi.input_property("dpkgInstallation")
    """
    Installs a deb file via dpkg.  Structure is documented below.
    """
    file_copy: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepFileCopyArgs']] = pulumi.input_property("fileCopy")
    """
    Copies a file onto the instance.  Structure is documented below.
    """
    file_exec: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepFileExecArgs']] = pulumi.input_property("fileExec")
    """
    Executes an artifact or local file.  Structure is documented below.
    """
    msi_installation: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepMsiInstallationArgs']] = pulumi.input_property("msiInstallation")
    """
    Installs an MSI file.  Structure is documented below.
    """
    rpm_installation: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepRpmInstallationArgs']] = pulumi.input_property("rpmInstallation")
    """
    Installs an rpm file via the rpm utility.  Structure is documented below.
    """
    script_run: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepScriptRunArgs']] = pulumi.input_property("scriptRun")
    """
    Runs commands in a shell.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, archive_extraction: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepArchiveExtractionArgs']] = None, dpkg_installation: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepDpkgInstallationArgs']] = None, file_copy: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepFileCopyArgs']] = None, file_exec: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepFileExecArgs']] = None, msi_installation: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepMsiInstallationArgs']] = None, rpm_installation: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepRpmInstallationArgs']] = None, script_run: Optional[pulumi.Input['GuestPoliciesRecipeInstallStepScriptRunArgs']] = None) -> None:
        """
        :param pulumi.Input['GuestPoliciesRecipeInstallStepArchiveExtractionArgs'] archive_extraction: Extracts an archive into the specified directory.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeInstallStepDpkgInstallationArgs'] dpkg_installation: Installs a deb file via dpkg.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeInstallStepFileCopyArgs'] file_copy: Copies a file onto the instance.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeInstallStepFileExecArgs'] file_exec: Executes an artifact or local file.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeInstallStepMsiInstallationArgs'] msi_installation: Installs an MSI file.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeInstallStepRpmInstallationArgs'] rpm_installation: Installs an rpm file via the rpm utility.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeInstallStepScriptRunArgs'] script_run: Runs commands in a shell.  Structure is documented below.
        """
        __self__.archive_extraction = archive_extraction
        __self__.dpkg_installation = dpkg_installation
        __self__.file_copy = file_copy
        __self__.file_exec = file_exec
        __self__.msi_installation = msi_installation
        __self__.rpm_installation = rpm_installation
        __self__.script_run = script_run

@pulumi.input_type
class GuestPoliciesRecipeInstallStepArchiveExtractionArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of the archive to extract.
    """
    destination: Optional[pulumi.Input[str]] = pulumi.input_property("destination")
    """
    Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str], type: pulumi.Input[str], destination: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        :param pulumi.Input[str] type: The type of the archive to extract.
        :param pulumi.Input[str] destination: Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
        """
        __self__.artifact_id = artifact_id
        __self__.type = type
        __self__.destination = destination

@pulumi.input_type
class GuestPoliciesRecipeInstallStepDpkgInstallationArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        """
        __self__.artifact_id = artifact_id

@pulumi.input_type
class GuestPoliciesRecipeInstallStepFileCopyArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    destination: pulumi.Input[str] = pulumi.input_property("destination")
    """
    Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
    """
    overwrite: Optional[pulumi.Input[bool]] = pulumi.input_property("overwrite")
    """
    Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
    is not overwritten and the step is considered a success. Defaults to false.
    """
    permissions: Optional[pulumi.Input[str]] = pulumi.input_property("permissions")
    """
    Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
    for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
    number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
    bit corresponds to the execute permission. Default behavior is 755.
    Below are some examples of permissions and their associated values:
    read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str], destination: pulumi.Input[str], overwrite: Optional[pulumi.Input[bool]] = None, permissions: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        :param pulumi.Input[str] destination: Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
        :param pulumi.Input[bool] overwrite: Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
               is not overwritten and the step is considered a success. Defaults to false.
        :param pulumi.Input[str] permissions: Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
               for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
               number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
               bit corresponds to the execute permission. Default behavior is 755.
               Below are some examples of permissions and their associated values:
               read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
        """
        __self__.artifact_id = artifact_id
        __self__.destination = destination
        __self__.overwrite = overwrite
        __self__.permissions = permissions

@pulumi.input_type
class GuestPoliciesRecipeInstallStepFileExecArgs:
    allowed_exit_codes: Optional[pulumi.Input[str]] = pulumi.input_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("args")
    """
    Arguments to be passed to the provided executable.
    """
    artifact_id: Optional[pulumi.Input[str]] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    The absolute path of the file on the local filesystem.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_exit_codes: Optional[pulumi.Input[str]] = None, args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, artifact_id: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] allowed_exit_codes: Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        :param pulumi.Input[List[pulumi.Input[str]]] args: Arguments to be passed to the provided executable.
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        :param pulumi.Input[str] local_path: The absolute path of the file on the local filesystem.
        """
        __self__.allowed_exit_codes = allowed_exit_codes
        __self__.args = args
        __self__.artifact_id = artifact_id
        __self__.local_path = local_path

@pulumi.input_type
class GuestPoliciesRecipeInstallStepMsiInstallationArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    flags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("flags")
    """
    The flags to use when installing the MSI. Defaults to the install flag.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str], allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, flags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_exit_codes: Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        :param pulumi.Input[List[pulumi.Input[str]]] flags: The flags to use when installing the MSI. Defaults to the install flag.
        """
        __self__.artifact_id = artifact_id
        __self__.allowed_exit_codes = allowed_exit_codes
        __self__.flags = flags

@pulumi.input_type
class GuestPoliciesRecipeInstallStepRpmInstallationArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        """
        __self__.artifact_id = artifact_id

@pulumi.input_type
class GuestPoliciesRecipeInstallStepScriptRunArgs:
    script: pulumi.Input[str] = pulumi.input_property("script")
    """
    The shell script to be executed.
    """
    allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script is executed directly,
    which likely only succeed for scripts with shebang lines.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, script: pulumi.Input[str], allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, interpreter: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] script: The shell script to be executed.
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_exit_codes: Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script is executed directly,
               which likely only succeed for scripts with shebang lines.
        """
        __self__.script = script
        __self__.allowed_exit_codes = allowed_exit_codes
        __self__.interpreter = interpreter

@pulumi.input_type
class GuestPoliciesRecipeUpdateStepArgs:
    archive_extraction: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepArchiveExtractionArgs']] = pulumi.input_property("archiveExtraction")
    """
    Extracts an archive into the specified directory.  Structure is documented below.
    """
    dpkg_installation: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepDpkgInstallationArgs']] = pulumi.input_property("dpkgInstallation")
    """
    Installs a deb file via dpkg.  Structure is documented below.
    """
    file_copy: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepFileCopyArgs']] = pulumi.input_property("fileCopy")
    """
    Copies a file onto the instance.  Structure is documented below.
    """
    file_exec: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepFileExecArgs']] = pulumi.input_property("fileExec")
    """
    Executes an artifact or local file.  Structure is documented below.
    """
    msi_installation: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepMsiInstallationArgs']] = pulumi.input_property("msiInstallation")
    """
    Installs an MSI file.  Structure is documented below.
    """
    rpm_installation: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepRpmInstallationArgs']] = pulumi.input_property("rpmInstallation")
    """
    Installs an rpm file via the rpm utility.  Structure is documented below.
    """
    script_run: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepScriptRunArgs']] = pulumi.input_property("scriptRun")
    """
    Runs commands in a shell.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, archive_extraction: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepArchiveExtractionArgs']] = None, dpkg_installation: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepDpkgInstallationArgs']] = None, file_copy: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepFileCopyArgs']] = None, file_exec: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepFileExecArgs']] = None, msi_installation: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepMsiInstallationArgs']] = None, rpm_installation: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepRpmInstallationArgs']] = None, script_run: Optional[pulumi.Input['GuestPoliciesRecipeUpdateStepScriptRunArgs']] = None) -> None:
        """
        :param pulumi.Input['GuestPoliciesRecipeUpdateStepArchiveExtractionArgs'] archive_extraction: Extracts an archive into the specified directory.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeUpdateStepDpkgInstallationArgs'] dpkg_installation: Installs a deb file via dpkg.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeUpdateStepFileCopyArgs'] file_copy: Copies a file onto the instance.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeUpdateStepFileExecArgs'] file_exec: Executes an artifact or local file.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeUpdateStepMsiInstallationArgs'] msi_installation: Installs an MSI file.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeUpdateStepRpmInstallationArgs'] rpm_installation: Installs an rpm file via the rpm utility.  Structure is documented below.
        :param pulumi.Input['GuestPoliciesRecipeUpdateStepScriptRunArgs'] script_run: Runs commands in a shell.  Structure is documented below.
        """
        __self__.archive_extraction = archive_extraction
        __self__.dpkg_installation = dpkg_installation
        __self__.file_copy = file_copy
        __self__.file_exec = file_exec
        __self__.msi_installation = msi_installation
        __self__.rpm_installation = rpm_installation
        __self__.script_run = script_run

@pulumi.input_type
class GuestPoliciesRecipeUpdateStepArchiveExtractionArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of the archive to extract.
    """
    destination: Optional[pulumi.Input[str]] = pulumi.input_property("destination")
    """
    Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str], type: pulumi.Input[str], destination: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        :param pulumi.Input[str] type: The type of the archive to extract.
        :param pulumi.Input[str] destination: Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
        """
        __self__.artifact_id = artifact_id
        __self__.type = type
        __self__.destination = destination

@pulumi.input_type
class GuestPoliciesRecipeUpdateStepDpkgInstallationArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        """
        __self__.artifact_id = artifact_id

@pulumi.input_type
class GuestPoliciesRecipeUpdateStepFileCopyArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    destination: pulumi.Input[str] = pulumi.input_property("destination")
    """
    Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
    """
    overwrite: Optional[pulumi.Input[bool]] = pulumi.input_property("overwrite")
    """
    Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
    is not overwritten and the step is considered a success. Defaults to false.
    """
    permissions: Optional[pulumi.Input[str]] = pulumi.input_property("permissions")
    """
    Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
    for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
    number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
    bit corresponds to the execute permission. Default behavior is 755.
    Below are some examples of permissions and their associated values:
    read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str], destination: pulumi.Input[str], overwrite: Optional[pulumi.Input[bool]] = None, permissions: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        :param pulumi.Input[str] destination: Directory to extract archive to. Defaults to / on Linux or C:\ on Windows.
        :param pulumi.Input[bool] overwrite: Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
               is not overwritten and the step is considered a success. Defaults to false.
        :param pulumi.Input[str] permissions: Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
               for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
               number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
               bit corresponds to the execute permission. Default behavior is 755.
               Below are some examples of permissions and their associated values:
               read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
        """
        __self__.artifact_id = artifact_id
        __self__.destination = destination
        __self__.overwrite = overwrite
        __self__.permissions = permissions

@pulumi.input_type
class GuestPoliciesRecipeUpdateStepFileExecArgs:
    allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("args")
    """
    Arguments to be passed to the provided executable.
    """
    artifact_id: Optional[pulumi.Input[str]] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    The absolute path of the file on the local filesystem.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, artifact_id: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_exit_codes: Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        :param pulumi.Input[List[pulumi.Input[str]]] args: Arguments to be passed to the provided executable.
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        :param pulumi.Input[str] local_path: The absolute path of the file on the local filesystem.
        """
        __self__.allowed_exit_codes = allowed_exit_codes
        __self__.args = args
        __self__.artifact_id = artifact_id
        __self__.local_path = local_path

@pulumi.input_type
class GuestPoliciesRecipeUpdateStepMsiInstallationArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """
    allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    flags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("flags")
    """
    The flags to use when installing the MSI. Defaults to the install flag.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str], allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, flags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_exit_codes: Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        :param pulumi.Input[List[pulumi.Input[str]]] flags: The flags to use when installing the MSI. Defaults to the install flag.
        """
        __self__.artifact_id = artifact_id
        __self__.allowed_exit_codes = allowed_exit_codes
        __self__.flags = flags

@pulumi.input_type
class GuestPoliciesRecipeUpdateStepRpmInstallationArgs:
    artifact_id: pulumi.Input[str] = pulumi.input_property("artifactId")
    """
    The id of the relevant artifact in the recipe.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, artifact_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] artifact_id: The id of the relevant artifact in the recipe.
        """
        __self__.artifact_id = artifact_id

@pulumi.input_type
class GuestPoliciesRecipeUpdateStepScriptRunArgs:
    script: pulumi.Input[str] = pulumi.input_property("script")
    """
    The shell script to be executed.
    """
    allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedExitCodes")
    """
    Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script is executed directly,
    which likely only succeed for scripts with shebang lines.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, script: pulumi.Input[str], allowed_exit_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, interpreter: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] script: The shell script to be executed.
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_exit_codes: Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script is executed directly,
               which likely only succeed for scripts with shebang lines.
        """
        __self__.script = script
        __self__.allowed_exit_codes = allowed_exit_codes
        __self__.interpreter = interpreter

@pulumi.input_type
class PatchDeploymentInstanceFilterArgs:
    all: Optional[pulumi.Input[bool]] = pulumi.input_property("all")
    """
    Target all VM instances in the project. If true, no other criteria is permitted.
    """
    group_labels: Optional[pulumi.Input[List[pulumi.Input['PatchDeploymentInstanceFilterGroupLabelArgs']]]] = pulumi.input_property("groupLabels")
    """
    Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.  Structure is documented below.
    """
    instance_name_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("instanceNamePrefixes")
    """
    Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
    VMs when targeting configs, for example prefix="prod-".
    """
    instances: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("instances")
    """
    Targets any of the VM instances specified. Instances are specified by their URI in the `form zones/{{zone}}/instances/{{instance_name}}`,
    `projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`, or
    `https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`
    """
    zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("zones")
    """
    Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, all: Optional[pulumi.Input[bool]] = None, group_labels: Optional[pulumi.Input[List[pulumi.Input['PatchDeploymentInstanceFilterGroupLabelArgs']]]] = None, instance_name_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, instances: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[bool] all: Target all VM instances in the project. If true, no other criteria is permitted.
        :param pulumi.Input[List[pulumi.Input['PatchDeploymentInstanceFilterGroupLabelArgs']]] group_labels: Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.  Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] instance_name_prefixes: Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
               VMs when targeting configs, for example prefix="prod-".
        :param pulumi.Input[List[pulumi.Input[str]]] instances: Targets any of the VM instances specified. Instances are specified by their URI in the `form zones/{{zone}}/instances/{{instance_name}}`,
               `projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`, or
               `https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}`
        :param pulumi.Input[List[pulumi.Input[str]]] zones: Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
        """
        __self__.all = all
        __self__.group_labels = group_labels
        __self__.instance_name_prefixes = instance_name_prefixes
        __self__.instances = instances
        __self__.zones = zones

@pulumi.input_type
class PatchDeploymentInstanceFilterGroupLabelArgs:
    labels: pulumi.Input[Dict[str, pulumi.Input[str]]] = pulumi.input_property("labels")
    """
    Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, labels: pulumi.Input[Dict[str, pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] labels: Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
        """
        __self__.labels = labels

@pulumi.input_type
class PatchDeploymentOneTimeScheduleArgs:
    execute_time: pulumi.Input[str] = pulumi.input_property("executeTime")
    """
    The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
    accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, execute_time: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] execute_time: The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
               accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        __self__.execute_time = execute_time

@pulumi.input_type
class PatchDeploymentPatchConfigArgs:
    apt: Optional[pulumi.Input['PatchDeploymentPatchConfigAptArgs']] = pulumi.input_property("apt")
    """
    Apt update settings. Use this setting to override the default apt patch rules.  Structure is documented below.
    """
    goo: Optional[pulumi.Input['PatchDeploymentPatchConfigGooArgs']] = pulumi.input_property("goo")
    """
    goo update settings. Use this setting to override the default goo patch rules.  Structure is documented below.
    """
    post_step: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepArgs']] = pulumi.input_property("postStep")
    """
    The ExecStep to run after the patch update.  Structure is documented below.
    """
    pre_step: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepArgs']] = pulumi.input_property("preStep")
    """
    The ExecStep to run before the patch update.  Structure is documented below.
    """
    reboot_config: Optional[pulumi.Input[str]] = pulumi.input_property("rebootConfig")
    """
    Post-patch reboot settings.
    """
    windows_update: Optional[pulumi.Input['PatchDeploymentPatchConfigWindowsUpdateArgs']] = pulumi.input_property("windowsUpdate")
    """
    Windows update settings. Use this setting to override the default Windows patch rules.  Structure is documented below.
    """
    yum: Optional[pulumi.Input['PatchDeploymentPatchConfigYumArgs']] = pulumi.input_property("yum")
    """
    Yum update settings. Use this setting to override the default yum patch rules.  Structure is documented below.
    """
    zypper: Optional[pulumi.Input['PatchDeploymentPatchConfigZypperArgs']] = pulumi.input_property("zypper")
    """
    zypper update settings. Use this setting to override the default zypper patch rules.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, apt: Optional[pulumi.Input['PatchDeploymentPatchConfigAptArgs']] = None, goo: Optional[pulumi.Input['PatchDeploymentPatchConfigGooArgs']] = None, post_step: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepArgs']] = None, pre_step: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepArgs']] = None, reboot_config: Optional[pulumi.Input[str]] = None, windows_update: Optional[pulumi.Input['PatchDeploymentPatchConfigWindowsUpdateArgs']] = None, yum: Optional[pulumi.Input['PatchDeploymentPatchConfigYumArgs']] = None, zypper: Optional[pulumi.Input['PatchDeploymentPatchConfigZypperArgs']] = None) -> None:
        """
        :param pulumi.Input['PatchDeploymentPatchConfigAptArgs'] apt: Apt update settings. Use this setting to override the default apt patch rules.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigGooArgs'] goo: goo update settings. Use this setting to override the default goo patch rules.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepArgs'] post_step: The ExecStep to run after the patch update.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepArgs'] pre_step: The ExecStep to run before the patch update.  Structure is documented below.
        :param pulumi.Input[str] reboot_config: Post-patch reboot settings.
        :param pulumi.Input['PatchDeploymentPatchConfigWindowsUpdateArgs'] windows_update: Windows update settings. Use this setting to override the default Windows patch rules.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigYumArgs'] yum: Yum update settings. Use this setting to override the default yum patch rules.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigZypperArgs'] zypper: zypper update settings. Use this setting to override the default zypper patch rules.  Structure is documented below.
        """
        __self__.apt = apt
        __self__.goo = goo
        __self__.post_step = post_step
        __self__.pre_step = pre_step
        __self__.reboot_config = reboot_config
        __self__.windows_update = windows_update
        __self__.yum = yum
        __self__.zypper = zypper

@pulumi.input_type
class PatchDeploymentPatchConfigAptArgs:
    excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_packages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusivePackages")
    """
    An exclusive list of packages to be updated. These are the only packages that will be updated.
    If these packages are not installed, they will be ignored. This field cannot be specified with
    any other patch configuration fields.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, exclusive_packages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] excludes: List of KBs to exclude from update.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusive_packages: An exclusive list of packages to be updated. These are the only packages that will be updated.
               If these packages are not installed, they will be ignored. This field cannot be specified with
               any other patch configuration fields.
        :param pulumi.Input[str] type: By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
        """
        __self__.excludes = excludes
        __self__.exclusive_packages = exclusive_packages
        __self__.type = type

@pulumi.input_type
class PatchDeploymentPatchConfigGooArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    goo update settings. Use this setting to override the default goo patch rules.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[bool] enabled: goo update settings. Use this setting to override the default goo patch rules.
        """
        __self__.enabled = enabled

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepArgs:
    linux_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs']] = pulumi.input_property("linuxExecStepConfig")
    """
    The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
    """
    windows_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs']] = pulumi.input_property("windowsExecStepConfig")
    """
    The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, linux_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs']] = None, windows_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs']] = None) -> None:
        """
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs'] linux_exec_step_config: The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs'] windows_exec_step_config: The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
        """
        __self__.linux_exec_step_config = linux_exec_step_config
        __self__.windows_exec_step_config = windows_exec_step_config

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs:
    allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs']] = pulumi.input_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs']] = None, interpreter: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_success_codes: Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs'] gcs_object: A Cloud Storage object containing the executable.  Structure is documented below.
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script will
               be executed directly, which will likely only succeed for scripts with shebang lines.
        :param pulumi.Input[str] local_path: An absolute path to the executable on the VM.
        """
        __self__.allowed_success_codes = allowed_success_codes
        __self__.gcs_object = gcs_object
        __self__.interpreter = interpreter
        __self__.local_path = local_path

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: pulumi.Input[str] = pulumi.input_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: pulumi.Input[str] = pulumi.input_property("object")
    """
    Name of the Cloud Storage object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], generation_number: pulumi.Input[str], object: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket: Bucket of the Cloud Storage object.
        :param pulumi.Input[str] generation_number: Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        :param pulumi.Input[str] object: Name of the Cloud Storage object.
        """
        __self__.bucket = bucket
        __self__.generation_number = generation_number
        __self__.object = object

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs:
    allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs']] = pulumi.input_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs']] = None, interpreter: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_success_codes: Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        :param pulumi.Input['PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs'] gcs_object: A Cloud Storage object containing the executable.  Structure is documented below.
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script will
               be executed directly, which will likely only succeed for scripts with shebang lines.
        :param pulumi.Input[str] local_path: An absolute path to the executable on the VM.
        """
        __self__.allowed_success_codes = allowed_success_codes
        __self__.gcs_object = gcs_object
        __self__.interpreter = interpreter
        __self__.local_path = local_path

@pulumi.input_type
class PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: pulumi.Input[str] = pulumi.input_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: pulumi.Input[str] = pulumi.input_property("object")
    """
    Name of the Cloud Storage object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], generation_number: pulumi.Input[str], object: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket: Bucket of the Cloud Storage object.
        :param pulumi.Input[str] generation_number: Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        :param pulumi.Input[str] object: Name of the Cloud Storage object.
        """
        __self__.bucket = bucket
        __self__.generation_number = generation_number
        __self__.object = object

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepArgs:
    linux_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs']] = pulumi.input_property("linuxExecStepConfig")
    """
    The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
    """
    windows_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs']] = pulumi.input_property("windowsExecStepConfig")
    """
    The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, linux_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs']] = None, windows_exec_step_config: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs']] = None) -> None:
        """
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs'] linux_exec_step_config: The ExecStepConfig for all Linux VMs targeted by the PatchJob.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs'] windows_exec_step_config: The ExecStepConfig for all Windows VMs targeted by the PatchJob.  Structure is documented below.
        """
        __self__.linux_exec_step_config = linux_exec_step_config
        __self__.windows_exec_step_config = windows_exec_step_config

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs:
    allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs']] = pulumi.input_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs']] = None, interpreter: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_success_codes: Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs'] gcs_object: A Cloud Storage object containing the executable.  Structure is documented below.
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script will
               be executed directly, which will likely only succeed for scripts with shebang lines.
        :param pulumi.Input[str] local_path: An absolute path to the executable on the VM.
        """
        __self__.allowed_success_codes = allowed_success_codes
        __self__.gcs_object = gcs_object
        __self__.interpreter = interpreter
        __self__.local_path = local_path

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: pulumi.Input[str] = pulumi.input_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: pulumi.Input[str] = pulumi.input_property("object")
    """
    Name of the Cloud Storage object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], generation_number: pulumi.Input[str], object: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket: Bucket of the Cloud Storage object.
        :param pulumi.Input[str] generation_number: Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        :param pulumi.Input[str] object: Name of the Cloud Storage object.
        """
        __self__.bucket = bucket
        __self__.generation_number = generation_number
        __self__.object = object

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs:
    allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("allowedSuccessCodes")
    """
    Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
    """
    gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs']] = pulumi.input_property("gcsObject")
    """
    A Cloud Storage object containing the executable.  Structure is documented below.
    """
    interpreter: Optional[pulumi.Input[str]] = pulumi.input_property("interpreter")
    """
    The script interpreter to use to run the script. If no interpreter is specified the script will
    be executed directly, which will likely only succeed for scripts with shebang lines.
    """
    local_path: Optional[pulumi.Input[str]] = pulumi.input_property("localPath")
    """
    An absolute path to the executable on the VM.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_success_codes: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, gcs_object: Optional[pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs']] = None, interpreter: Optional[pulumi.Input[str]] = None, local_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[float]]] allowed_success_codes: Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
        :param pulumi.Input['PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs'] gcs_object: A Cloud Storage object containing the executable.  Structure is documented below.
        :param pulumi.Input[str] interpreter: The script interpreter to use to run the script. If no interpreter is specified the script will
               be executed directly, which will likely only succeed for scripts with shebang lines.
        :param pulumi.Input[str] local_path: An absolute path to the executable on the VM.
        """
        __self__.allowed_success_codes = allowed_success_codes
        __self__.gcs_object = gcs_object
        __self__.interpreter = interpreter
        __self__.local_path = local_path

@pulumi.input_type
class PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectArgs:
    bucket: pulumi.Input[str] = pulumi.input_property("bucket")
    """
    Bucket of the Cloud Storage object.
    """
    generation_number: pulumi.Input[str] = pulumi.input_property("generationNumber")
    """
    Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
    """
    object: pulumi.Input[str] = pulumi.input_property("object")
    """
    Name of the Cloud Storage object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, bucket: pulumi.Input[str], generation_number: pulumi.Input[str], object: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] bucket: Bucket of the Cloud Storage object.
        :param pulumi.Input[str] generation_number: Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
        :param pulumi.Input[str] object: Name of the Cloud Storage object.
        """
        __self__.bucket = bucket
        __self__.generation_number = generation_number
        __self__.object = object

@pulumi.input_type
class PatchDeploymentPatchConfigWindowsUpdateArgs:
    classifications: Optional[pulumi.Input[str]] = pulumi.input_property("classifications")
    """
    Only apply updates of these windows update classifications. If empty, all updates are applied.
    """
    excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_patches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusivePatches")
    """
    An exclusive list of kbs to be updated. These are the only patches that will be updated.
    This field must not be used with other patch configurations.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, classifications: Optional[pulumi.Input[str]] = None, excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, exclusive_patches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] classifications: Only apply updates of these windows update classifications. If empty, all updates are applied.
        :param pulumi.Input[List[pulumi.Input[str]]] excludes: List of KBs to exclude from update.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusive_patches: An exclusive list of kbs to be updated. These are the only patches that will be updated.
               This field must not be used with other patch configurations.
        """
        __self__.classifications = classifications
        __self__.excludes = excludes
        __self__.exclusive_patches = exclusive_patches

@pulumi.input_type
class PatchDeploymentPatchConfigYumArgs:
    excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_packages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusivePackages")
    """
    An exclusive list of packages to be updated. These are the only packages that will be updated.
    If these packages are not installed, they will be ignored. This field cannot be specified with
    any other patch configuration fields.
    """
    minimal: Optional[pulumi.Input[bool]] = pulumi.input_property("minimal")
    """
    Will cause patch to run yum update-minimal instead.
    """
    security: Optional[pulumi.Input[bool]] = pulumi.input_property("security")
    """
    Adds the --security flag to yum update. Not supported on all platforms.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, exclusive_packages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, minimal: Optional[pulumi.Input[bool]] = None, security: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] excludes: List of KBs to exclude from update.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusive_packages: An exclusive list of packages to be updated. These are the only packages that will be updated.
               If these packages are not installed, they will be ignored. This field cannot be specified with
               any other patch configuration fields.
        :param pulumi.Input[bool] minimal: Will cause patch to run yum update-minimal instead.
        :param pulumi.Input[bool] security: Adds the --security flag to yum update. Not supported on all platforms.
        """
        __self__.excludes = excludes
        __self__.exclusive_packages = exclusive_packages
        __self__.minimal = minimal
        __self__.security = security

@pulumi.input_type
class PatchDeploymentPatchConfigZypperArgs:
    categories: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("categories")
    """
    Install only patches with these categories. Common categories include security, recommended, and feature.
    """
    excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("excludes")
    """
    List of KBs to exclude from update.
    """
    exclusive_patches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("exclusivePatches")
    """
    An exclusive list of kbs to be updated. These are the only patches that will be updated.
    This field must not be used with other patch configurations.
    """
    severities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("severities")
    """
    Install only patches with these severities. Common severities include critical, important, moderate, and low.
    """
    with_optional: Optional[pulumi.Input[bool]] = pulumi.input_property("withOptional")
    """
    Adds the --with-optional flag to zypper patch.
    """
    with_update: Optional[pulumi.Input[bool]] = pulumi.input_property("withUpdate")
    """
    Adds the --with-update flag, to zypper patch.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, categories: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, excludes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, exclusive_patches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, severities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, with_optional: Optional[pulumi.Input[bool]] = None, with_update: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] categories: Install only patches with these categories. Common categories include security, recommended, and feature.
        :param pulumi.Input[List[pulumi.Input[str]]] excludes: List of KBs to exclude from update.
        :param pulumi.Input[List[pulumi.Input[str]]] exclusive_patches: An exclusive list of kbs to be updated. These are the only patches that will be updated.
               This field must not be used with other patch configurations.
        :param pulumi.Input[List[pulumi.Input[str]]] severities: Install only patches with these severities. Common severities include critical, important, moderate, and low.
        :param pulumi.Input[bool] with_optional: Adds the --with-optional flag to zypper patch.
        :param pulumi.Input[bool] with_update: Adds the --with-update flag, to zypper patch.
        """
        __self__.categories = categories
        __self__.excludes = excludes
        __self__.exclusive_patches = exclusive_patches
        __self__.severities = severities
        __self__.with_optional = with_optional
        __self__.with_update = with_update

@pulumi.input_type
class PatchDeploymentRecurringScheduleArgs:
    time_of_day: pulumi.Input['PatchDeploymentRecurringScheduleTimeOfDayArgs'] = pulumi.input_property("timeOfDay")
    """
    Time of the day to run a recurring deployment.  Structure is documented below.
    """
    time_zone: pulumi.Input['PatchDeploymentRecurringScheduleTimeZoneArgs'] = pulumi.input_property("timeZone")
    """
    Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
    determined by the chosen time zone.  Structure is documented below.
    """
    end_time: Optional[pulumi.Input[str]] = pulumi.input_property("endTime")
    """
    The end time at which a recurring patch deployment schedule is no longer active.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    last_execute_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastExecuteTime")
    """
    -
    The time the last patch job ran successfully.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    monthly: Optional[pulumi.Input['PatchDeploymentRecurringScheduleMonthlyArgs']] = pulumi.input_property("monthly")
    """
    Schedule with monthly executions.  Structure is documented below.
    """
    next_execute_time: Optional[pulumi.Input[str]] = pulumi.input_property("nextExecuteTime")
    """
    -
    The time the next patch job is scheduled to run.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    start_time: Optional[pulumi.Input[str]] = pulumi.input_property("startTime")
    """
    The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
    A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
    """
    weekly: Optional[pulumi.Input['PatchDeploymentRecurringScheduleWeeklyArgs']] = pulumi.input_property("weekly")
    """
    Schedule with weekly executions.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, time_of_day: pulumi.Input['PatchDeploymentRecurringScheduleTimeOfDayArgs'], time_zone: pulumi.Input['PatchDeploymentRecurringScheduleTimeZoneArgs'], end_time: Optional[pulumi.Input[str]] = None, last_execute_time: Optional[pulumi.Input[str]] = None, monthly: Optional[pulumi.Input['PatchDeploymentRecurringScheduleMonthlyArgs']] = None, next_execute_time: Optional[pulumi.Input[str]] = None, start_time: Optional[pulumi.Input[str]] = None, weekly: Optional[pulumi.Input['PatchDeploymentRecurringScheduleWeeklyArgs']] = None) -> None:
        """
        :param pulumi.Input['PatchDeploymentRecurringScheduleTimeOfDayArgs'] time_of_day: Time of the day to run a recurring deployment.  Structure is documented below.
        :param pulumi.Input['PatchDeploymentRecurringScheduleTimeZoneArgs'] time_zone: Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
               determined by the chosen time zone.  Structure is documented below.
        :param pulumi.Input[str] end_time: The end time at which a recurring patch deployment schedule is no longer active.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input[str] last_execute_time: -
               The time the last patch job ran successfully.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input['PatchDeploymentRecurringScheduleMonthlyArgs'] monthly: Schedule with monthly executions.  Structure is documented below.
        :param pulumi.Input[str] next_execute_time: -
               The time the next patch job is scheduled to run.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input[str] start_time: The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
               A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input['PatchDeploymentRecurringScheduleWeeklyArgs'] weekly: Schedule with weekly executions.  Structure is documented below.
        """
        __self__.time_of_day = time_of_day
        __self__.time_zone = time_zone
        __self__.end_time = end_time
        __self__.last_execute_time = last_execute_time
        __self__.monthly = monthly
        __self__.next_execute_time = next_execute_time
        __self__.start_time = start_time
        __self__.weekly = weekly

@pulumi.input_type
class PatchDeploymentRecurringScheduleMonthlyArgs:
    month_day: Optional[pulumi.Input[float]] = pulumi.input_property("monthDay")
    """
    One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
    Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
    will not run in February, April, June, etc.
    """
    week_day_of_month: Optional[pulumi.Input['PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs']] = pulumi.input_property("weekDayOfMonth")
    """
    Week day in a month.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, month_day: Optional[pulumi.Input[float]] = None, week_day_of_month: Optional[pulumi.Input['PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs']] = None) -> None:
        """
        :param pulumi.Input[float] month_day: One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
               Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
               will not run in February, April, June, etc.
        :param pulumi.Input['PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs'] week_day_of_month: Week day in a month.  Structure is documented below.
        """
        __self__.month_day = month_day
        __self__.week_day_of_month = week_day_of_month

@pulumi.input_type
class PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs:
    day_of_week: pulumi.Input[str] = pulumi.input_property("dayOfWeek")
    """
    A day of the week.
    """
    week_ordinal: pulumi.Input[float] = pulumi.input_property("weekOrdinal")
    """
    Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, day_of_week: pulumi.Input[str], week_ordinal: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[str] day_of_week: A day of the week.
        :param pulumi.Input[float] week_ordinal: Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
        """
        __self__.day_of_week = day_of_week
        __self__.week_ordinal = week_ordinal

@pulumi.input_type
class PatchDeploymentRecurringScheduleTimeOfDayArgs:
    hours: Optional[pulumi.Input[float]] = pulumi.input_property("hours")
    """
    Hours of day in 24 hour format. Should be from 0 to 23.
    An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    """
    minutes: Optional[pulumi.Input[float]] = pulumi.input_property("minutes")
    """
    Minutes of hour of day. Must be from 0 to 59.
    """
    nanos: Optional[pulumi.Input[float]] = pulumi.input_property("nanos")
    """
    Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    """
    seconds: Optional[pulumi.Input[float]] = pulumi.input_property("seconds")
    """
    Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hours: Optional[pulumi.Input[float]] = None, minutes: Optional[pulumi.Input[float]] = None, nanos: Optional[pulumi.Input[float]] = None, seconds: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] hours: Hours of day in 24 hour format. Should be from 0 to 23.
               An API may choose to allow the value "24:00:00" for scenarios like business closing time.
        :param pulumi.Input[float] minutes: Minutes of hour of day. Must be from 0 to 59.
        :param pulumi.Input[float] nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param pulumi.Input[float] seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        """
        __self__.hours = hours
        __self__.minutes = minutes
        __self__.nanos = nanos
        __self__.seconds = seconds

@pulumi.input_type
class PatchDeploymentRecurringScheduleTimeZoneArgs:
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    IANA Time Zone Database time zone, e.g. "America/New_York".
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    IANA Time Zone Database version number, e.g. "2019a".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: pulumi.Input[str], version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] id: IANA Time Zone Database time zone, e.g. "America/New_York".
        :param pulumi.Input[str] version: IANA Time Zone Database version number, e.g. "2019a".
        """
        __self__.id = id
        __self__.version = version

@pulumi.input_type
class PatchDeploymentRecurringScheduleWeeklyArgs:
    day_of_week: pulumi.Input[str] = pulumi.input_property("dayOfWeek")
    """
    A day of the week.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, day_of_week: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] day_of_week: A day of the week.
        """
        __self__.day_of_week = day_of_week

