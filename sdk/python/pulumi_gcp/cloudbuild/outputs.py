# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class TriggerBuild(dict):
    images: Optional[List[str]] = pulumi.output_property("images")
    """
    A list of images to be pushed upon the successful completion of all build steps.
    The images are pushed using the builder service account's credentials.
    The digests of the pushed images will be stored in the Build resource's results field.
    If any of the images fail to be pushed, the build status is marked FAILURE.
    """
    steps: List['outputs.TriggerBuildStep'] = pulumi.output_property("steps")
    """
    The operations to be performed on the workspace.  Structure is documented below.
    """
    tags: Optional[List[str]] = pulumi.output_property("tags")
    """
    Tags for annotation of a Build. These are not docker tags.
    """
    timeout: Optional[str] = pulumi.output_property("timeout")
    """
    Time limit for executing this build step. If not defined,
    the step has no
    time limit and will be allowed to continue to run until either it
    completes or the build itself times out.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TriggerBuildStep(dict):
    args: Optional[List[str]] = pulumi.output_property("args")
    """
    A list of arguments that will be presented to the step when it is started.
    If the image used to run the step's container has an entrypoint, the args
    are used as arguments to that entrypoint. If the image does not define an
    entrypoint, the first element in args is used as the entrypoint, and the
    remainder will be used as arguments.
    """
    dir: Optional[str] = pulumi.output_property("dir")
    """
    Working directory to use when running this step's container.
    If this value is a relative path, it is relative to the build's working
    directory. If this value is absolute, it may be outside the build's working
    directory, in which case the contents of the path may not be persisted
    across build step executions, unless a `volume` for that path is specified.
    If the build specifies a `RepoSource` with `dir` and a step with a
    `dir`,
    which specifies an absolute path, the `RepoSource` `dir` is ignored
    for the step's execution.
    """
    entrypoint: Optional[str] = pulumi.output_property("entrypoint")
    """
    Entrypoint to be used instead of the build step image's
    default entrypoint.
    If unset, the image's default entrypoint is used
    """
    envs: Optional[List[str]] = pulumi.output_property("envs")
    """
    A list of environment variable definitions to be used when
    running a step.
    The elements are of the form "KEY=VALUE" for the environment variable
    "KEY" being given the value "VALUE".
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Unique identifier for this build step, used in `wait_for` to
    reference this build step as a dependency.
    """
    name: str = pulumi.output_property("name")
    """
    Name of the volume to mount.
    Volume names must be unique per build step and must be valid names for
    Docker volumes. Each named volume must be used by at least two build steps.
    """
    secret_envs: Optional[List[str]] = pulumi.output_property("secretEnvs")
    """
    A list of environment variables which are encrypted using
    a Cloud Key
    Management Service crypto key. These values must be specified in
    the build's `Secret`.
    """
    timeout: Optional[str] = pulumi.output_property("timeout")
    """
    Time limit for executing this build step. If not defined,
    the step has no
    time limit and will be allowed to continue to run until either it
    completes or the build itself times out.
    """
    timing: Optional[str] = pulumi.output_property("timing")
    """
    Output only. Stores timing information for executing this
    build step.
    """
    volumes: Optional[List['outputs.TriggerBuildStepVolume']] = pulumi.output_property("volumes")
    """
    List of volumes to mount into the build step.
    Each volume is created as an empty volume prior to execution of the
    build step. Upon completion of the build, volumes and their contents
    are discarded.
    Using a named volume in only one step is not valid as it is
    indicative of a build request with an incorrect configuration.  Structure is documented below.
    """
    wait_fors: Optional[List[str]] = pulumi.output_property("waitFors")
    """
    The ID(s) of the step(s) that this build step depends on.
    This build step will not start until all the build steps in `wait_for`
    have completed successfully. If `wait_for` is empty, this build step
    will start when all previous build steps in the `Build.Steps` list
    have completed successfully.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TriggerBuildStepVolume(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the volume to mount.
    Volume names must be unique per build step and must be valid names for
    Docker volumes. Each named volume must be used by at least two build steps.
    """
    path: str = pulumi.output_property("path")
    """
    Path at which to mount the volume.
    Paths must be absolute and cannot conflict with other volume paths on
    the same build step or with certain reserved volume paths.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TriggerGithub(dict):
    name: Optional[str] = pulumi.output_property("name")
    """
    Name of the volume to mount.
    Volume names must be unique per build step and must be valid names for
    Docker volumes. Each named volume must be used by at least two build steps.
    """
    owner: Optional[str] = pulumi.output_property("owner")
    """
    Owner of the repository. For example: The owner for
    https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
    """
    pull_request: Optional['outputs.TriggerGithubPullRequest'] = pulumi.output_property("pullRequest")
    """
    filter to match changes in pull requests.  Specify only one of pullRequest or push.  Structure is documented below.
    """
    push: Optional['outputs.TriggerGithubPush'] = pulumi.output_property("push")
    """
    filter to match changes in refs, like branches or tags.  Specify only one of pullRequest or push.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TriggerGithubPullRequest(dict):
    branch: str = pulumi.output_property("branch")
    """
    Regex of branches to match.  Specify only one of branch or tag.
    """
    comment_control: Optional[str] = pulumi.output_property("commentControl")
    """
    Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator.
    """
    invert_regex: Optional[bool] = pulumi.output_property("invertRegex")
    """
    When true, only trigger a build if the revision regex does NOT match the git_ref regex.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TriggerGithubPush(dict):
    branch: Optional[str] = pulumi.output_property("branch")
    """
    Regex of branches to match.  Specify only one of branch or tag.
    """
    invert_regex: Optional[bool] = pulumi.output_property("invertRegex")
    """
    When true, only trigger a build if the revision regex does NOT match the git_ref regex.
    """
    tag: Optional[str] = pulumi.output_property("tag")
    """
    Regex of tags to match.  Specify only one of branch or tag.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TriggerTriggerTemplate(dict):
    branch_name: Optional[str] = pulumi.output_property("branchName")
    """
    Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
    This field is a regular expression.
    """
    commit_sha: Optional[str] = pulumi.output_property("commitSha")
    """
    Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
    """
    dir: Optional[str] = pulumi.output_property("dir")
    """
    Working directory to use when running this step's container.
    If this value is a relative path, it is relative to the build's working
    directory. If this value is absolute, it may be outside the build's working
    directory, in which case the contents of the path may not be persisted
    across build step executions, unless a `volume` for that path is specified.
    If the build specifies a `RepoSource` with `dir` and a step with a
    `dir`,
    which specifies an absolute path, the `RepoSource` `dir` is ignored
    for the step's execution.
    """
    invert_regex: Optional[bool] = pulumi.output_property("invertRegex")
    """
    When true, only trigger a build if the revision regex does NOT match the git_ref regex.
    """
    project_id: Optional[str] = pulumi.output_property("projectId")
    """
    ID of the project that owns the Cloud Source Repository. If
    omitted, the project ID requesting the build is assumed.
    """
    repo_name: Optional[str] = pulumi.output_property("repoName")
    """
    Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
    """
    tag_name: Optional[str] = pulumi.output_property("tagName")
    """
    Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
    This field is a regular expression.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


