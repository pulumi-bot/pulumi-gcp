# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'TriggerBuildArgs',
    'TriggerBuildSecretArgs',
    'TriggerBuildSourceArgs',
    'TriggerBuildSourceRepoSourceArgs',
    'TriggerBuildSourceStorageSourceArgs',
    'TriggerBuildStepArgs',
    'TriggerBuildStepVolumeArgs',
    'TriggerGithubArgs',
    'TriggerGithubPullRequestArgs',
    'TriggerGithubPushArgs',
    'TriggerTriggerTemplateArgs',
]

@pulumi.input_type
class TriggerBuildArgs:
    def __init__(__self__, *,
                 steps: pulumi.Input[List[pulumi.Input['TriggerBuildStepArgs']]],
                 images: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 logs_bucket: Optional[pulumi.Input[str]] = None,
                 queue_ttl: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[List[pulumi.Input['TriggerBuildSecretArgs']]]] = None,
                 source: Optional[pulumi.Input['TriggerBuildSourceArgs']] = None,
                 substitutions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['TriggerBuildStepArgs']]] steps: The operations to be performed on the workspace.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] images: A list of images to be pushed upon the successful completion of all build steps.
               The images are pushed using the builder service account's credentials.
               The digests of the pushed images will be stored in the Build resource's results field.
               If any of the images fail to be pushed, the build status is marked FAILURE.
        :param pulumi.Input[str] logs_bucket: Google Cloud Storage bucket where logs should be written.
               Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
        :param pulumi.Input[str] queue_ttl: TTL in queue for this build. If provided and the build is enqueued longer than this value,
               the build will expire and the build status will be EXPIRED.
               The TTL starts ticking from createTime.
               A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        :param pulumi.Input[List[pulumi.Input['TriggerBuildSecretArgs']]] secrets: Secrets to decrypt using Cloud Key Management Service.
               Structure is documented below.
        :param pulumi.Input['TriggerBuildSourceArgs'] source: The location of the source files to build.
               One of `storageSource` or `repoSource` must be provided.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] substitutions: Substitutions to use in a triggered build. Should only be used with triggers.run
        :param pulumi.Input[List[pulumi.Input[str]]] tags: Tags for annotation of a Build. These are not docker tags.
        :param pulumi.Input[str] timeout: Time limit for executing this build step. If not defined,
               the step has no
               time limit and will be allowed to continue to run until either it
               completes or the build itself times out.
        """
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "images", images)
        pulumi.set(__self__, "logsBucket", logs_bucket)
        pulumi.set(__self__, "queueTtl", queue_ttl)
        pulumi.set(__self__, "secrets", secrets)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "substitutions", substitutions)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Input[List[pulumi.Input['TriggerBuildStepArgs']]]:
        """
        The operations to be performed on the workspace.
        Structure is documented below.
        """
        ...

    @steps.setter
    def steps(self, value: pulumi.Input[List[pulumi.Input['TriggerBuildStepArgs']]]):
        ...

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of images to be pushed upon the successful completion of all build steps.
        The images are pushed using the builder service account's credentials.
        The digests of the pushed images will be stored in the Build resource's results field.
        If any of the images fail to be pushed, the build status is marked FAILURE.
        """
        ...

    @images.setter
    def images(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="logsBucket")
    def logs_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Google Cloud Storage bucket where logs should be written.
        Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
        """
        ...

    @logs_bucket.setter
    def logs_bucket(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="queueTtl")
    def queue_ttl(self) -> Optional[pulumi.Input[str]]:
        """
        TTL in queue for this build. If provided and the build is enqueued longer than this value,
        the build will expire and the build status will be EXPIRED.
        The TTL starts ticking from createTime.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        """
        ...

    @queue_ttl.setter
    def queue_ttl(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[List[pulumi.Input['TriggerBuildSecretArgs']]]]:
        """
        Secrets to decrypt using Cloud Key Management Service.
        Structure is documented below.
        """
        ...

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[List[pulumi.Input['TriggerBuildSecretArgs']]]]):
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['TriggerBuildSourceArgs']]:
        """
        The location of the source files to build.
        One of `storageSource` or `repoSource` must be provided.
        Structure is documented below.
        """
        ...

    @source.setter
    def source(self, value: Optional[pulumi.Input['TriggerBuildSourceArgs']]):
        ...

    @property
    @pulumi.getter
    def substitutions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Substitutions to use in a triggered build. Should only be used with triggers.run
        """
        ...

    @substitutions.setter
    def substitutions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Tags for annotation of a Build. These are not docker tags.
        """
        ...

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Time limit for executing this build step. If not defined,
        the step has no
        time limit and will be allowed to continue to run until either it
        completes or the build itself times out.
        """
        ...

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TriggerBuildSecretArgs:
    def __init__(__self__, *,
                 kms_key_name: pulumi.Input[str],
                 secret_env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] kms_key_name: Cloud KMS key name to use to decrypt these envs.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] secret_env: A list of environment variables which are encrypted using
               a Cloud Key
               Management Service crypto key. These values must be specified in
               the build's `Secret`.
        """
        pulumi.set(__self__, "kmsKeyName", kms_key_name)
        pulumi.set(__self__, "secretEnv", secret_env)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> pulumi.Input[str]:
        """
        Cloud KMS key name to use to decrypt these envs.
        """
        ...

    @kms_key_name.setter
    def kms_key_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="secretEnv")
    def secret_env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of environment variables which are encrypted using
        a Cloud Key
        Management Service crypto key. These values must be specified in
        the build's `Secret`.
        """
        ...

    @secret_env.setter
    def secret_env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class TriggerBuildSourceArgs:
    def __init__(__self__, *,
                 repo_source: Optional[pulumi.Input['TriggerBuildSourceRepoSourceArgs']] = None,
                 storage_source: Optional[pulumi.Input['TriggerBuildSourceStorageSourceArgs']] = None):
        """
        :param pulumi.Input['TriggerBuildSourceRepoSourceArgs'] repo_source: Location of the source in a Google Cloud Source Repository.
               Structure is documented below.
        :param pulumi.Input['TriggerBuildSourceStorageSourceArgs'] storage_source: Location of the source in an archive file in Google Cloud Storage.
               Structure is documented below.
        """
        pulumi.set(__self__, "repoSource", repo_source)
        pulumi.set(__self__, "storageSource", storage_source)

    @property
    @pulumi.getter(name="repoSource")
    def repo_source(self) -> Optional[pulumi.Input['TriggerBuildSourceRepoSourceArgs']]:
        """
        Location of the source in a Google Cloud Source Repository.
        Structure is documented below.
        """
        ...

    @repo_source.setter
    def repo_source(self, value: Optional[pulumi.Input['TriggerBuildSourceRepoSourceArgs']]):
        ...

    @property
    @pulumi.getter(name="storageSource")
    def storage_source(self) -> Optional[pulumi.Input['TriggerBuildSourceStorageSourceArgs']]:
        """
        Location of the source in an archive file in Google Cloud Storage.
        Structure is documented below.
        """
        ...

    @storage_source.setter
    def storage_source(self, value: Optional[pulumi.Input['TriggerBuildSourceStorageSourceArgs']]):
        ...


@pulumi.input_type
class TriggerBuildSourceRepoSourceArgs:
    def __init__(__self__, *,
                 repo_name: pulumi.Input[str],
                 branch_name: Optional[pulumi.Input[str]] = None,
                 commit_sha: Optional[pulumi.Input[str]] = None,
                 dir: Optional[pulumi.Input[str]] = None,
                 invert_regex: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 substitutions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] repo_name: Name of the Cloud Source Repository.
        :param pulumi.Input[str] branch_name: Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
               The syntax of the regular expressions accepted is the syntax accepted by RE2 and
               described at https://github.com/google/re2/wiki/Syntax
        :param pulumi.Input[str] commit_sha: Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
        :param pulumi.Input[str] dir: Working directory to use when running this step's container.
               If this value is a relative path, it is relative to the build's working
               directory. If this value is absolute, it may be outside the build's working
               directory, in which case the contents of the path may not be persisted
               across build step executions, unless a `volume` for that path is specified.
               If the build specifies a `RepoSource` with `dir` and a step with a
               `dir`,
               which specifies an absolute path, the `RepoSource` `dir` is ignored
               for the step's execution.
        :param pulumi.Input[bool] invert_regex: Only trigger a build if the revision regex does NOT match the revision regex.
        :param pulumi.Input[str] project_id: ID of the project that owns the Cloud Source Repository.
               If omitted, the project ID requesting the build is assumed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] substitutions: Substitutions to use in a triggered build. Should only be used with triggers.run
        :param pulumi.Input[str] tag_name: Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
               The syntax of the regular expressions accepted is the syntax accepted by RE2 and
               described at https://github.com/google/re2/wiki/Syntax
        """
        pulumi.set(__self__, "repoName", repo_name)
        pulumi.set(__self__, "branchName", branch_name)
        pulumi.set(__self__, "commitSha", commit_sha)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "invertRegex", invert_regex)
        pulumi.set(__self__, "projectId", project_id)
        pulumi.set(__self__, "substitutions", substitutions)
        pulumi.set(__self__, "tagName", tag_name)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> pulumi.Input[str]:
        """
        Name of the Cloud Source Repository.
        """
        ...

    @repo_name.setter
    def repo_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
        The syntax of the regular expressions accepted is the syntax accepted by RE2 and
        described at https://github.com/google/re2/wiki/Syntax
        """
        ...

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="commitSha")
    def commit_sha(self) -> Optional[pulumi.Input[str]]:
        """
        Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
        """
        ...

    @commit_sha.setter
    def commit_sha(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[str]]:
        """
        Working directory to use when running this step's container.
        If this value is a relative path, it is relative to the build's working
        directory. If this value is absolute, it may be outside the build's working
        directory, in which case the contents of the path may not be persisted
        across build step executions, unless a `volume` for that path is specified.
        If the build specifies a `RepoSource` with `dir` and a step with a
        `dir`,
        which specifies an absolute path, the `RepoSource` `dir` is ignored
        for the step's execution.
        """
        ...

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="invertRegex")
    def invert_regex(self) -> Optional[pulumi.Input[bool]]:
        """
        Only trigger a build if the revision regex does NOT match the revision regex.
        """
        ...

    @invert_regex.setter
    def invert_regex(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the project that owns the Cloud Source Repository.
        If omitted, the project ID requesting the build is assumed.
        """
        ...

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def substitutions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Substitutions to use in a triggered build. Should only be used with triggers.run
        """
        ...

    @substitutions.setter
    def substitutions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
        The syntax of the regular expressions accepted is the syntax accepted by RE2 and
        described at https://github.com/google/re2/wiki/Syntax
        """
        ...

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TriggerBuildSourceStorageSourceArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 generation: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: Google Cloud Storage bucket containing the source.
        :param pulumi.Input[str] object: Google Cloud Storage object containing the source.
               This object must be a gzipped archive file (.tar.gz) containing source to build.
        :param pulumi.Input[str] generation: Google Cloud Storage generation for the object.
               If the generation is omitted, the latest generation will be used
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "generation", generation)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Google Cloud Storage bucket containing the source.
        """
        ...

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Google Cloud Storage object containing the source.
        This object must be a gzipped archive file (.tar.gz) containing source to build.
        """
        ...

    @object.setter
    def object(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[str]]:
        """
        Google Cloud Storage generation for the object.
        If the generation is omitted, the latest generation will be used
        """
        ...

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TriggerBuildStepArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 dir: Optional[pulumi.Input[str]] = None,
                 entrypoint: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 secret_envs: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 volumes: Optional[pulumi.Input[List[pulumi.Input['TriggerBuildStepVolumeArgs']]]] = None,
                 wait_fors: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Name of the volume to mount.
               Volume names must be unique per build step and must be valid names for
               Docker volumes. Each named volume must be used by at least two build steps.
        :param pulumi.Input[List[pulumi.Input[str]]] args: A list of arguments that will be presented to the step when it is started.
               If the image used to run the step's container has an entrypoint, the args
               are used as arguments to that entrypoint. If the image does not define an
               entrypoint, the first element in args is used as the entrypoint, and the
               remainder will be used as arguments.
        :param pulumi.Input[str] dir: Working directory to use when running this step's container.
               If this value is a relative path, it is relative to the build's working
               directory. If this value is absolute, it may be outside the build's working
               directory, in which case the contents of the path may not be persisted
               across build step executions, unless a `volume` for that path is specified.
               If the build specifies a `RepoSource` with `dir` and a step with a
               `dir`,
               which specifies an absolute path, the `RepoSource` `dir` is ignored
               for the step's execution.
        :param pulumi.Input[str] entrypoint: Entrypoint to be used instead of the build step image's
               default entrypoint.
               If unset, the image's default entrypoint is used
        :param pulumi.Input[List[pulumi.Input[str]]] envs: A list of environment variable definitions to be used when
               running a step.
               The elements are of the form "KEY=VALUE" for the environment variable
               "KEY" being given the value "VALUE".
        :param pulumi.Input[str] id: Unique identifier for this build step, used in `wait_for` to
               reference this build step as a dependency.
        :param pulumi.Input[List[pulumi.Input[str]]] secret_envs: A list of environment variables which are encrypted using
               a Cloud Key
               Management Service crypto key. These values must be specified in
               the build's `Secret`.
        :param pulumi.Input[str] timeout: Time limit for executing this build step. If not defined,
               the step has no
               time limit and will be allowed to continue to run until either it
               completes or the build itself times out.
        :param pulumi.Input[str] timing: Output only. Stores timing information for executing this
               build step.
        :param pulumi.Input[List[pulumi.Input['TriggerBuildStepVolumeArgs']]] volumes: List of volumes to mount into the build step.
               Each volume is created as an empty volume prior to execution of the
               build step. Upon completion of the build, volumes and their contents
               are discarded.
               Using a named volume in only one step is not valid as it is
               indicative of a build request with an incorrect configuration.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] wait_fors: The ID(s) of the step(s) that this build step depends on.
               This build step will not start until all the build steps in `wait_for`
               have completed successfully. If `wait_for` is empty, this build step
               will start when all previous build steps in the `Build.Steps` list
               have completed successfully.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "entrypoint", entrypoint)
        pulumi.set(__self__, "envs", envs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "secretEnvs", secret_envs)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "timing", timing)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "waitFors", wait_fors)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the volume to mount.
        Volume names must be unique per build step and must be valid names for
        Docker volumes. Each named volume must be used by at least two build steps.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of arguments that will be presented to the step when it is started.
        If the image used to run the step's container has an entrypoint, the args
        are used as arguments to that entrypoint. If the image does not define an
        entrypoint, the first element in args is used as the entrypoint, and the
        remainder will be used as arguments.
        """
        ...

    @args.setter
    def args(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[str]]:
        """
        Working directory to use when running this step's container.
        If this value is a relative path, it is relative to the build's working
        directory. If this value is absolute, it may be outside the build's working
        directory, in which case the contents of the path may not be persisted
        across build step executions, unless a `volume` for that path is specified.
        If the build specifies a `RepoSource` with `dir` and a step with a
        `dir`,
        which specifies an absolute path, the `RepoSource` `dir` is ignored
        for the step's execution.
        """
        ...

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def entrypoint(self) -> Optional[pulumi.Input[str]]:
        """
        Entrypoint to be used instead of the build step image's
        default entrypoint.
        If unset, the image's default entrypoint is used
        """
        ...

    @entrypoint.setter
    def entrypoint(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of environment variable definitions to be used when
        running a step.
        The elements are of the form "KEY=VALUE" for the environment variable
        "KEY" being given the value "VALUE".
        """
        ...

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for this build step, used in `wait_for` to
        reference this build step as a dependency.
        """
        ...

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="secretEnvs")
    def secret_envs(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of environment variables which are encrypted using
        a Cloud Key
        Management Service crypto key. These values must be specified in
        the build's `Secret`.
        """
        ...

    @secret_envs.setter
    def secret_envs(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Time limit for executing this build step. If not defined,
        the step has no
        time limit and will be allowed to continue to run until either it
        completes or the build itself times out.
        """
        ...

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def timing(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Stores timing information for executing this
        build step.
        """
        ...

    @timing.setter
    def timing(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[List[pulumi.Input['TriggerBuildStepVolumeArgs']]]]:
        """
        List of volumes to mount into the build step.
        Each volume is created as an empty volume prior to execution of the
        build step. Upon completion of the build, volumes and their contents
        are discarded.
        Using a named volume in only one step is not valid as it is
        indicative of a build request with an incorrect configuration.
        Structure is documented below.
        """
        ...

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[List[pulumi.Input['TriggerBuildStepVolumeArgs']]]]):
        ...

    @property
    @pulumi.getter(name="waitFors")
    def wait_fors(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The ID(s) of the step(s) that this build step depends on.
        This build step will not start until all the build steps in `wait_for`
        have completed successfully. If `wait_for` is empty, this build step
        will start when all previous build steps in the `Build.Steps` list
        have completed successfully.
        """
        ...

    @wait_fors.setter
    def wait_fors(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class TriggerBuildStepVolumeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of the volume to mount.
               Volume names must be unique per build step and must be valid names for
               Docker volumes. Each named volume must be used by at least two build steps.
        :param pulumi.Input[str] path: Path at which to mount the volume.
               Paths must be absolute and cannot conflict with other volume paths on
               the same build step or with certain reserved volume paths.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the volume to mount.
        Volume names must be unique per build step and must be valid names for
        Docker volumes. Each named volume must be used by at least two build steps.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path at which to mount the volume.
        Paths must be absolute and cannot conflict with other volume paths on
        the same build step or with certain reserved volume paths.
        """
        ...

    @path.setter
    def path(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class TriggerGithubArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 pull_request: Optional[pulumi.Input['TriggerGithubPullRequestArgs']] = None,
                 push: Optional[pulumi.Input['TriggerGithubPushArgs']] = None):
        """
        :param pulumi.Input[str] name: Name of the volume to mount.
               Volume names must be unique per build step and must be valid names for
               Docker volumes. Each named volume must be used by at least two build steps.
        :param pulumi.Input[str] owner: Owner of the repository. For example: The owner for
               https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
        :param pulumi.Input['TriggerGithubPullRequestArgs'] pull_request: filter to match changes in pull requests.  Specify only one of pullRequest or push.
               Structure is documented below.
        :param pulumi.Input['TriggerGithubPushArgs'] push: filter to match changes in refs, like branches or tags.  Specify only one of pullRequest or push.
               Structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "pullRequest", pull_request)
        pulumi.set(__self__, "push", push)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the volume to mount.
        Volume names must be unique per build step and must be valid names for
        Docker volumes. Each named volume must be used by at least two build steps.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Owner of the repository. For example: The owner for
        https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
        """
        ...

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="pullRequest")
    def pull_request(self) -> Optional[pulumi.Input['TriggerGithubPullRequestArgs']]:
        """
        filter to match changes in pull requests.  Specify only one of pullRequest or push.
        Structure is documented below.
        """
        ...

    @pull_request.setter
    def pull_request(self, value: Optional[pulumi.Input['TriggerGithubPullRequestArgs']]):
        ...

    @property
    @pulumi.getter
    def push(self) -> Optional[pulumi.Input['TriggerGithubPushArgs']]:
        """
        filter to match changes in refs, like branches or tags.  Specify only one of pullRequest or push.
        Structure is documented below.
        """
        ...

    @push.setter
    def push(self, value: Optional[pulumi.Input['TriggerGithubPushArgs']]):
        ...


@pulumi.input_type
class TriggerGithubPullRequestArgs:
    def __init__(__self__, *,
                 branch: pulumi.Input[str],
                 comment_control: Optional[pulumi.Input[str]] = None,
                 invert_regex: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] branch: Regex of branches to match.  Specify only one of branch or tag.
        :param pulumi.Input[str] comment_control: Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator.
               Possible values are `COMMENTS_DISABLED` and `COMMENTS_ENABLED`.
        :param pulumi.Input[bool] invert_regex: Only trigger a build if the revision regex does NOT match the revision regex.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "commentControl", comment_control)
        pulumi.set(__self__, "invertRegex", invert_regex)

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Input[str]:
        """
        Regex of branches to match.  Specify only one of branch or tag.
        """
        ...

    @branch.setter
    def branch(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="commentControl")
    def comment_control(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator.
        Possible values are `COMMENTS_DISABLED` and `COMMENTS_ENABLED`.
        """
        ...

    @comment_control.setter
    def comment_control(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="invertRegex")
    def invert_regex(self) -> Optional[pulumi.Input[bool]]:
        """
        Only trigger a build if the revision regex does NOT match the revision regex.
        """
        ...

    @invert_regex.setter
    def invert_regex(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class TriggerGithubPushArgs:
    def __init__(__self__, *,
                 branch: Optional[pulumi.Input[str]] = None,
                 invert_regex: Optional[pulumi.Input[bool]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] branch: Regex of branches to match.  Specify only one of branch or tag.
        :param pulumi.Input[bool] invert_regex: Only trigger a build if the revision regex does NOT match the revision regex.
        :param pulumi.Input[str] tag: Regex of tags to match.  Specify only one of branch or tag.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "invertRegex", invert_regex)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        Regex of branches to match.  Specify only one of branch or tag.
        """
        ...

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="invertRegex")
    def invert_regex(self) -> Optional[pulumi.Input[bool]]:
        """
        Only trigger a build if the revision regex does NOT match the revision regex.
        """
        ...

    @invert_regex.setter
    def invert_regex(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Regex of tags to match.  Specify only one of branch or tag.
        """
        ...

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class TriggerTriggerTemplateArgs:
    def __init__(__self__, *,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 commit_sha: Optional[pulumi.Input[str]] = None,
                 dir: Optional[pulumi.Input[str]] = None,
                 invert_regex: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] branch_name: Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
               The syntax of the regular expressions accepted is the syntax accepted by RE2 and
               described at https://github.com/google/re2/wiki/Syntax
        :param pulumi.Input[str] commit_sha: Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
        :param pulumi.Input[str] dir: Working directory to use when running this step's container.
               If this value is a relative path, it is relative to the build's working
               directory. If this value is absolute, it may be outside the build's working
               directory, in which case the contents of the path may not be persisted
               across build step executions, unless a `volume` for that path is specified.
               If the build specifies a `RepoSource` with `dir` and a step with a
               `dir`,
               which specifies an absolute path, the `RepoSource` `dir` is ignored
               for the step's execution.
        :param pulumi.Input[bool] invert_regex: Only trigger a build if the revision regex does NOT match the revision regex.
        :param pulumi.Input[str] project_id: ID of the project that owns the Cloud Source Repository.
               If omitted, the project ID requesting the build is assumed.
        :param pulumi.Input[str] repo_name: Name of the Cloud Source Repository.
        :param pulumi.Input[str] tag_name: Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
               The syntax of the regular expressions accepted is the syntax accepted by RE2 and
               described at https://github.com/google/re2/wiki/Syntax
        """
        pulumi.set(__self__, "branchName", branch_name)
        pulumi.set(__self__, "commitSha", commit_sha)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "invertRegex", invert_regex)
        pulumi.set(__self__, "projectId", project_id)
        pulumi.set(__self__, "repoName", repo_name)
        pulumi.set(__self__, "tagName", tag_name)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
        The syntax of the regular expressions accepted is the syntax accepted by RE2 and
        described at https://github.com/google/re2/wiki/Syntax
        """
        ...

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="commitSha")
    def commit_sha(self) -> Optional[pulumi.Input[str]]:
        """
        Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
        """
        ...

    @commit_sha.setter
    def commit_sha(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[str]]:
        """
        Working directory to use when running this step's container.
        If this value is a relative path, it is relative to the build's working
        directory. If this value is absolute, it may be outside the build's working
        directory, in which case the contents of the path may not be persisted
        across build step executions, unless a `volume` for that path is specified.
        If the build specifies a `RepoSource` with `dir` and a step with a
        `dir`,
        which specifies an absolute path, the `RepoSource` `dir` is ignored
        for the step's execution.
        """
        ...

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="invertRegex")
    def invert_regex(self) -> Optional[pulumi.Input[bool]]:
        """
        Only trigger a build if the revision regex does NOT match the revision regex.
        """
        ...

    @invert_regex.setter
    def invert_regex(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the project that owns the Cloud Source Repository.
        If omitted, the project ID requesting the build is assumed.
        """
        ...

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Cloud Source Repository.
        """
        ...

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
        The syntax of the regular expressions accepted is the syntax accepted by RE2 and
        described at https://github.com/google/re2/wiki/Syntax
        """
        ...

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        ...


