# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'SubscriptionDeadLetterPolicy',
    'SubscriptionExpirationPolicy',
    'SubscriptionIAMBindingCondition',
    'SubscriptionIAMMemberCondition',
    'SubscriptionPushConfig',
    'SubscriptionPushConfigOidcToken',
    'TopicIAMBindingCondition',
    'TopicIAMMemberCondition',
    'TopicMessageStoragePolicy',
]

@pulumi.output_type
class SubscriptionDeadLetterPolicy(dict):
    dead_letter_topic: Optional[str] = pulumi.output_property("deadLetterTopic")
    """
    The name of the topic to which dead letter messages should be published.
    Format is `projects/{project}/topics/{topic}`.
    The Cloud Pub/Sub service\naccount associated with the enclosing subscription's
    parent project (i.e.,
    service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
    permission to Publish() to this topic.
    The operation will fail if the topic does not exist.
    Users should ensure that there is a subscription attached to this topic
    since messages published to a topic with no subscriptions are lost.
    """
    max_delivery_attempts: Optional[float] = pulumi.output_property("maxDeliveryAttempts")
    """
    The maximum number of delivery attempts for any message. The value must be
    between 5 and 100.
    The number of delivery attempts is defined as 1 + (the sum of number of
    NACKs and number of times the acknowledgement deadline has been exceeded for the message).
    A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
    client libraries may automatically extend ack_deadlines.
    This field will be honored on a best effort basis.
    If this parameter is 0, a default value of 5 is used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubscriptionExpirationPolicy(dict):
    ttl: str = pulumi.output_property("ttl")
    """
    Specifies the "time-to-live" duration for an associated resource. The
    resource expires if it is not active for a period of ttl.
    If ttl is not set, the associated resource never expires.
    A duration in seconds with up to nine fractional digits, terminated by 's'.
    Example - "3.5s".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubscriptionIAMBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubscriptionIAMMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubscriptionPushConfig(dict):
    attributes: Optional[Dict[str, str]] = pulumi.output_property("attributes")
    """
    Endpoint configuration attributes.
    Every endpoint has a set of API supported attributes that can
    be used to control different aspects of the message delivery.
    The currently supported attribute is x-goog-version, which you
    can use to change the format of the pushed message. This
    attribute indicates the version of the data expected by
    the endpoint. This controls the shape of the pushed message
    (i.e., its fields and metadata). The endpoint version is
    based on the version of the Pub/Sub API.
    If not present during the subscriptions.create call,
    it will default to the version of the API used to make
    such call. If not present during a subscriptions.modifyPushConfig
    call, its value will not be changed. subscriptions.get
    calls will always return a valid version, even if the
    subscription was created without this attribute.
    The possible values for this attribute are:
    - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
    - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
    """
    oidc_token: Optional['outputs.SubscriptionPushConfigOidcToken'] = pulumi.output_property("oidcToken")
    """
    If specified, Pub/Sub will generate and attach an OIDC JWT token as
    an Authorization header in the HTTP request for every pushed message.  Structure is documented below.
    """
    push_endpoint: str = pulumi.output_property("pushEndpoint")
    """
    A URL locating the endpoint to which messages should be pushed.
    For example, a Webhook endpoint might use
    "https://example.com/push".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubscriptionPushConfigOidcToken(dict):
    audience: Optional[str] = pulumi.output_property("audience")
    """
    Audience to be used when generating OIDC token. The audience claim
    identifies the recipients that the JWT is intended for. The audience
    value is a single case-sensitive string. Having multiple values (array)
    for the audience field is not supported. More info about the OIDC JWT
    token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
    Note: if not specified, the Push endpoint URL will be used.
    """
    service_account_email: str = pulumi.output_property("serviceAccountEmail")
    """
    Service account email to be used for generating the OIDC token.
    The caller (for subscriptions.create, subscriptions.patch, and
    subscriptions.modifyPushConfig RPCs) must have the
    iam.serviceAccounts.actAs permission for the service account.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TopicIAMBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TopicIAMMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TopicMessageStoragePolicy(dict):
    allowed_persistence_regions: List[str] = pulumi.output_property("allowedPersistenceRegions")
    """
    A list of IDs of GCP regions where messages that are published to
    the topic may be persisted in storage. Messages published by
    publishers running in non-allowed GCP regions (or running outside
    of GCP altogether) will be routed for storage in one of the
    allowed regions. An empty list means that no regions are allowed,
    and is not a valid configuration.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


