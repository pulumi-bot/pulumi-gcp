# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class RegistryCredentialArgs:
    public_key_certificate: pulumi.Input['RegistryCredentialPublicKeyCertificateArgs'] = pulumi.input_property("publicKeyCertificate")
    """
    A public key certificate format and data.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, public_key_certificate: pulumi.Input['RegistryCredentialPublicKeyCertificateArgs']) -> None:
        """
        :param pulumi.Input['RegistryCredentialPublicKeyCertificateArgs'] public_key_certificate: A public key certificate format and data.
        """
        __self__.public_key_certificate = public_key_certificate

@pulumi.input_type
class RegistryCredentialPublicKeyCertificateArgs:
    certificate: pulumi.Input[str] = pulumi.input_property("certificate")
    """
    The certificate data.
    """
    format: pulumi.Input[str] = pulumi.input_property("format")
    """
    The field allows only `X509_CERTIFICATE_PEM`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, certificate: pulumi.Input[str], format: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] certificate: The certificate data.
        :param pulumi.Input[str] format: The field allows only `X509_CERTIFICATE_PEM`.
        """
        __self__.certificate = certificate
        __self__.format = format

@pulumi.input_type
class RegistryEventNotificationConfigItemArgs:
    pubsub_topic_name: pulumi.Input[str] = pulumi.input_property("pubsubTopicName")
    """
    PubSub topic name to publish device events.
    """
    subfolder_matches: Optional[pulumi.Input[str]] = pulumi.input_property("subfolderMatches")
    """
    If the subfolder name matches this string exactly, this
    configuration will be used. The string must not include the
    leading '/' character. If empty, all strings are matched. Empty
    value can only be used for the last `event_notification_configs`
    item.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pubsub_topic_name: pulumi.Input[str], subfolder_matches: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] pubsub_topic_name: PubSub topic name to publish device events.
        :param pulumi.Input[str] subfolder_matches: If the subfolder name matches this string exactly, this
               configuration will be used. The string must not include the
               leading '/' character. If empty, all strings are matched. Empty
               value can only be used for the last `event_notification_configs`
               item.
        """
        __self__.pubsub_topic_name = pubsub_topic_name
        __self__.subfolder_matches = subfolder_matches

@pulumi.input_type
class RegistryHttpConfigArgs:
    http_enabled_state: pulumi.Input[str] = pulumi.input_property("httpEnabledState")
    """
    The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, http_enabled_state: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] http_enabled_state: The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
        """
        __self__.http_enabled_state = http_enabled_state

@pulumi.input_type
class RegistryMqttConfigArgs:
    mqtt_enabled_state: pulumi.Input[str] = pulumi.input_property("mqttEnabledState")
    """
    The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mqtt_enabled_state: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] mqtt_enabled_state: The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
        """
        __self__.mqtt_enabled_state = mqtt_enabled_state

@pulumi.input_type
class RegistryStateNotificationConfigArgs:
    pubsub_topic_name: pulumi.Input[str] = pulumi.input_property("pubsubTopicName")
    """
    PubSub topic name to publish device events.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pubsub_topic_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] pubsub_topic_name: PubSub topic name to publish device events.
        """
        __self__.pubsub_topic_name = pubsub_topic_name

