# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.input_type
class DeviceConfigArgs:
    binary_data: Optional[pulumi.Input[str]] = pulumi.input_property("binaryData")
    cloud_update_time: Optional[pulumi.Input[str]] = pulumi.input_property("cloudUpdateTime")
    device_ack_time: Optional[pulumi.Input[str]] = pulumi.input_property("deviceAckTime")
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, binary_data: Optional[pulumi.Input[str]] = None, cloud_update_time: Optional[pulumi.Input[str]] = None, device_ack_time: Optional[pulumi.Input[str]] = None, version: Optional[pulumi.Input[str]] = None) -> None:
        __self__.binary_data = binary_data
        __self__.cloud_update_time = cloud_update_time
        __self__.device_ack_time = device_ack_time
        __self__.version = version

@pulumi.input_type
class DeviceCredentialArgs:
    public_key: pulumi.Input['DeviceCredentialPublicKeyArgs'] = pulumi.input_property("publicKey")
    """
    A public key used to verify the signature of JSON Web Tokens (JWTs).  Structure is documented below.
    """
    expiration_time: Optional[pulumi.Input[str]] = pulumi.input_property("expirationTime")
    """
    The time at which this credential becomes invalid.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, public_key: pulumi.Input['DeviceCredentialPublicKeyArgs'], expiration_time: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input['DeviceCredentialPublicKeyArgs'] public_key: A public key used to verify the signature of JSON Web Tokens (JWTs).  Structure is documented below.
        :param pulumi.Input[str] expiration_time: The time at which this credential becomes invalid.
        """
        __self__.public_key = public_key
        __self__.expiration_time = expiration_time

@pulumi.input_type
class DeviceCredentialPublicKeyArgs:
    format: pulumi.Input[str] = pulumi.input_property("format")
    """
    The format of the key.
    """
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    The key data.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, format: pulumi.Input[str], key: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] format: The format of the key.
        :param pulumi.Input[str] key: The key data.
        """
        __self__.format = format
        __self__.key = key

@pulumi.input_type
class DeviceGatewayConfigArgs:
    gateway_auth_method: Optional[pulumi.Input[str]] = pulumi.input_property("gatewayAuthMethod")
    """
    Indicates whether the device is a gateway.
    """
    gateway_type: Optional[pulumi.Input[str]] = pulumi.input_property("gatewayType")
    """
    Indicates whether the device is a gateway.
    """
    last_accessed_gateway_id: Optional[pulumi.Input[str]] = pulumi.input_property("lastAccessedGatewayId")
    """
    -
    The ID of the gateway the device accessed most recently.
    """
    last_accessed_gateway_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastAccessedGatewayTime")
    """
    -
    The most recent time at which the device accessed the gateway specified in last_accessed_gateway.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, gateway_auth_method: Optional[pulumi.Input[str]] = None, gateway_type: Optional[pulumi.Input[str]] = None, last_accessed_gateway_id: Optional[pulumi.Input[str]] = None, last_accessed_gateway_time: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] gateway_auth_method: Indicates whether the device is a gateway.
        :param pulumi.Input[str] gateway_type: Indicates whether the device is a gateway.
        :param pulumi.Input[str] last_accessed_gateway_id: -
               The ID of the gateway the device accessed most recently.
        :param pulumi.Input[str] last_accessed_gateway_time: -
               The most recent time at which the device accessed the gateway specified in last_accessed_gateway.
        """
        __self__.gateway_auth_method = gateway_auth_method
        __self__.gateway_type = gateway_type
        __self__.last_accessed_gateway_id = last_accessed_gateway_id
        __self__.last_accessed_gateway_time = last_accessed_gateway_time

@pulumi.input_type
class DeviceLastErrorStatusArgs:
    details: Optional[pulumi.Input[List[pulumi.Input[Dict[str, Any]]]]] = pulumi.input_property("details")
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    number: Optional[pulumi.Input[float]] = pulumi.input_property("number")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, details: Optional[pulumi.Input[List[pulumi.Input[Dict[str, Any]]]]] = None, message: Optional[pulumi.Input[str]] = None, number: Optional[pulumi.Input[float]] = None) -> None:
        __self__.details = details
        __self__.message = message
        __self__.number = number

@pulumi.input_type
class DeviceStateArgs:
    binary_data: Optional[pulumi.Input[str]] = pulumi.input_property("binaryData")
    update_time: Optional[pulumi.Input[str]] = pulumi.input_property("updateTime")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, binary_data: Optional[pulumi.Input[str]] = None, update_time: Optional[pulumi.Input[str]] = None) -> None:
        __self__.binary_data = binary_data
        __self__.update_time = update_time

@pulumi.input_type
class RegistryCredentialArgs:
    public_key_certificate: pulumi.Input['RegistryCredentialPublicKeyCertificateArgs'] = pulumi.input_property("publicKeyCertificate")
    """
    A public key certificate format and data.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, public_key_certificate: pulumi.Input['RegistryCredentialPublicKeyCertificateArgs']) -> None:
        """
        :param pulumi.Input['RegistryCredentialPublicKeyCertificateArgs'] public_key_certificate: A public key certificate format and data.
        """
        __self__.public_key_certificate = public_key_certificate

@pulumi.input_type
class RegistryCredentialPublicKeyCertificateArgs:
    certificate: pulumi.Input[str] = pulumi.input_property("certificate")
    """
    The certificate data.
    """
    format: pulumi.Input[str] = pulumi.input_property("format")
    """
    The field allows only `X509_CERTIFICATE_PEM`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, certificate: pulumi.Input[str], format: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] certificate: The certificate data.
        :param pulumi.Input[str] format: The field allows only `X509_CERTIFICATE_PEM`.
        """
        __self__.certificate = certificate
        __self__.format = format

@pulumi.input_type
class RegistryEventNotificationConfigItemArgs:
    pubsub_topic_name: pulumi.Input[str] = pulumi.input_property("pubsubTopicName")
    """
    PubSub topic name to publish device events.
    """
    subfolder_matches: Optional[pulumi.Input[str]] = pulumi.input_property("subfolderMatches")
    """
    If the subfolder name matches this string exactly, this
    configuration will be used. The string must not include the
    leading '/' character. If empty, all strings are matched. Empty
    value can only be used for the last `event_notification_configs`
    item.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pubsub_topic_name: pulumi.Input[str], subfolder_matches: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] pubsub_topic_name: PubSub topic name to publish device events.
        :param pulumi.Input[str] subfolder_matches: If the subfolder name matches this string exactly, this
               configuration will be used. The string must not include the
               leading '/' character. If empty, all strings are matched. Empty
               value can only be used for the last `event_notification_configs`
               item.
        """
        __self__.pubsub_topic_name = pubsub_topic_name
        __self__.subfolder_matches = subfolder_matches

@pulumi.input_type
class RegistryHttpConfigArgs:
    http_enabled_state: pulumi.Input[str] = pulumi.input_property("httpEnabledState")
    """
    The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, http_enabled_state: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] http_enabled_state: The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
        """
        __self__.http_enabled_state = http_enabled_state

@pulumi.input_type
class RegistryMqttConfigArgs:
    mqtt_enabled_state: pulumi.Input[str] = pulumi.input_property("mqttEnabledState")
    """
    The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mqtt_enabled_state: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] mqtt_enabled_state: The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
        """
        __self__.mqtt_enabled_state = mqtt_enabled_state

@pulumi.input_type
class RegistryStateNotificationConfigArgs:
    pubsub_topic_name: pulumi.Input[str] = pulumi.input_property("pubsubTopicName")
    """
    PubSub topic name to publish device events.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pubsub_topic_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] pubsub_topic_name: PubSub topic name to publish device events.
        """
        __self__.pubsub_topic_name = pubsub_topic_name

