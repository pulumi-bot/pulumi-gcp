# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.output_type
class RegistryCredential(dict):
    public_key_certificate: 'outputs.RegistryCredentialPublicKeyCertificate' = pulumi.output_property("publicKeyCertificate")
    """
    A public key certificate format and data.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegistryCredentialPublicKeyCertificate(dict):
    certificate: str = pulumi.output_property("certificate")
    """
    The certificate data.
    """
    format: str = pulumi.output_property("format")
    """
    The field allows only `X509_CERTIFICATE_PEM`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegistryEventNotificationConfigItem(dict):
    pubsub_topic_name: str = pulumi.output_property("pubsubTopicName")
    """
    PubSub topic name to publish device events.
    """
    subfolder_matches: Optional[str] = pulumi.output_property("subfolderMatches")
    """
    If the subfolder name matches this string exactly, this
    configuration will be used. The string must not include the
    leading '/' character. If empty, all strings are matched. Empty
    value can only be used for the last `event_notification_configs`
    item.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegistryHttpConfig(dict):
    http_enabled_state: str = pulumi.output_property("httpEnabledState")
    """
    The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegistryMqttConfig(dict):
    mqtt_enabled_state: str = pulumi.output_property("mqttEnabledState")
    """
    The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegistryStateNotificationConfig(dict):
    pubsub_topic_name: str = pulumi.output_property("pubsubTopicName")
    """
    PubSub topic name to publish device events.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


