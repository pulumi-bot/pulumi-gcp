# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.output_type
class ApplicationFeatureSettings(dict):
    split_health_checks: bool = pulumi.output_property("splitHealthChecks")
    """
    Set to false to use the legacy health check instead of the readiness
    and liveness checks.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationIap(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    oauth2_client_id: str = pulumi.output_property("oauth2ClientId")
    """
    OAuth2 client ID to use for the authentication flow.
    """
    oauth2_client_secret: str = pulumi.output_property("oauth2ClientSecret")
    """
    OAuth2 client secret to use for the authentication flow.
    The SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field.
    """
    oauth2_client_secret_sha256: Optional[str] = pulumi.output_property("oauth2ClientSecretSha256")
    """
    Hex-encoded SHA-256 hash of the client secret.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationUrlDispatchRule(dict):
    domain: Optional[str] = pulumi.output_property("domain")
    path: Optional[str] = pulumi.output_property("path")
    service: Optional[str] = pulumi.output_property("service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationUrlDispatchRulesDispatchRule(dict):
    domain: Optional[str] = pulumi.output_property("domain")
    """
    Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".
    Defaults to matching all domains: "*".
    """
    path: str = pulumi.output_property("path")
    """
    Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.
    The sum of the lengths of the domain and path may not exceed 100 characters.
    """
    service: str = pulumi.output_property("service")
    """
    Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.
    The sum of the lengths of the domain and path may not exceed 100 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainMappingResourceRecord(dict):
    name: Optional[str] = pulumi.output_property("name")
    rrdata: Optional[str] = pulumi.output_property("rrdata")
    type: Optional[str] = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainMappingSslSettings(dict):
    certificate_id: Optional[str] = pulumi.output_property("certificateId")
    """
    ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
    remove SSL support.
    By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
    or to configure SSL manually, specify `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must be
    authorized to administer the `AuthorizedCertificate` resource to manually map it to a DomainMapping resource.
    Example: 12345.
    """
    pending_managed_certificate_id: Optional[str] = pulumi.output_property("pendingManagedCertificateId")
    """
    -
    ID of the managed `AuthorizedCertificate` resource currently being provisioned, if applicable. Until the new
    managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
    provisioning process completes, the `certificateId` field will reflect the new managed certificate and this
    field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
    `certificateId` field with an update request.
    """
    ssl_management_type: str = pulumi.output_property("sslManagementType")
    """
    SSL management type for this domain. If `AUTOMATIC`, a managed certificate is automatically provisioned.
    If `MANUAL`, `certificateId` must be manually specified in order to configure SSL for this domain.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EngineSplitTrafficSplit(dict):
    allocations: Dict[str, str] = pulumi.output_property("allocations")
    """
    Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.
    """
    shard_by: Optional[str] = pulumi.output_property("shardBy")
    """
    Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionApiConfig(dict):
    auth_fail_action: Optional[str] = pulumi.output_property("authFailAction")
    """
    Action to take when users access resources that require authentication.
    """
    login: Optional[str] = pulumi.output_property("login")
    """
    Level of login required to access this resource.
    """
    script: str = pulumi.output_property("script")
    """
    Path to the script from the application root directory.
    """
    security_level: Optional[str] = pulumi.output_property("securityLevel")
    """
    Security (HTTPS) enforcement for this URL.
    """
    url: Optional[str] = pulumi.output_property("url")
    """
    URL to serve the endpoint at.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScaling(dict):
    cool_down_period: Optional[str] = pulumi.output_property("coolDownPeriod")
    """
    The time period that the Autoscaler should wait before it starts collecting information from a new instance.
    This prevents the autoscaler from collecting information when the instance is initializing,
    during which the collected usage would not be reliable. Default: 120s
    """
    cpu_utilization: 'outputs.FlexibleAppVersionAutomaticScalingCpuUtilization' = pulumi.output_property("cpuUtilization")
    """
    Target scaling by CPU usage.  Structure is documented below.
    """
    disk_utilization: Optional['outputs.FlexibleAppVersionAutomaticScalingDiskUtilization'] = pulumi.output_property("diskUtilization")
    """
    Target scaling by disk usage.  Structure is documented below.
    """
    max_concurrent_requests: Optional[float] = pulumi.output_property("maxConcurrentRequests")
    """
    Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
    Defaults to a runtime-specific value.
    """
    max_idle_instances: Optional[float] = pulumi.output_property("maxIdleInstances")
    """
    Maximum number of idle instances that should be maintained for this version.
    """
    max_pending_latency: Optional[str] = pulumi.output_property("maxPendingLatency")
    """
    Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
    """
    max_total_instances: Optional[float] = pulumi.output_property("maxTotalInstances")
    """
    Maximum number of instances that should be started to handle requests for this version. Default: 20
    """
    min_idle_instances: Optional[float] = pulumi.output_property("minIdleInstances")
    """
    Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
    """
    min_pending_latency: Optional[str] = pulumi.output_property("minPendingLatency")
    """
    Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
    """
    min_total_instances: Optional[float] = pulumi.output_property("minTotalInstances")
    """
    Minimum number of running instances that should be maintained for this version. Default: 2
    """
    network_utilization: Optional['outputs.FlexibleAppVersionAutomaticScalingNetworkUtilization'] = pulumi.output_property("networkUtilization")
    """
    Target scaling by network usage.  Structure is documented below.
    """
    request_utilization: Optional['outputs.FlexibleAppVersionAutomaticScalingRequestUtilization'] = pulumi.output_property("requestUtilization")
    """
    Target scaling by request utilization.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScalingCpuUtilization(dict):
    aggregation_window_length: Optional[str] = pulumi.output_property("aggregationWindowLength")
    """
    Period of time over which CPU utilization is calculated.
    """
    target_utilization: float = pulumi.output_property("targetUtilization")
    """
    Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScalingDiskUtilization(dict):
    target_read_bytes_per_second: Optional[float] = pulumi.output_property("targetReadBytesPerSecond")
    """
    Target bytes read per second.
    """
    target_read_ops_per_second: Optional[float] = pulumi.output_property("targetReadOpsPerSecond")
    """
    Target ops read per seconds.
    """
    target_write_bytes_per_second: Optional[float] = pulumi.output_property("targetWriteBytesPerSecond")
    """
    Target bytes written per second.
    """
    target_write_ops_per_second: Optional[float] = pulumi.output_property("targetWriteOpsPerSecond")
    """
    Target ops written per second.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScalingNetworkUtilization(dict):
    target_received_bytes_per_second: Optional[float] = pulumi.output_property("targetReceivedBytesPerSecond")
    """
    Target bytes received per second.
    """
    target_received_packets_per_second: Optional[float] = pulumi.output_property("targetReceivedPacketsPerSecond")
    """
    Target packets received per second.
    """
    target_sent_bytes_per_second: Optional[float] = pulumi.output_property("targetSentBytesPerSecond")
    """
    Target bytes sent per second.
    """
    target_sent_packets_per_second: Optional[float] = pulumi.output_property("targetSentPacketsPerSecond")
    """
    Target packets sent per second.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScalingRequestUtilization(dict):
    target_concurrent_requests: Optional[float] = pulumi.output_property("targetConcurrentRequests")
    """
    Target number of concurrent requests.
    """
    target_request_count_per_second: Optional[str] = pulumi.output_property("targetRequestCountPerSecond")
    """
    Target requests per second.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeployment(dict):
    cloud_build_options: Optional['outputs.FlexibleAppVersionDeploymentCloudBuildOptions'] = pulumi.output_property("cloudBuildOptions")
    """
    Options for the build operations performed as a part of the version deployment. Only applicable when creating a version using source code directly.  Structure is documented below.
    """
    container: Optional['outputs.FlexibleAppVersionDeploymentContainer'] = pulumi.output_property("container")
    """
    The Docker image for the container that runs the version.  Structure is documented below.
    """
    files: Optional[List['outputs.FlexibleAppVersionDeploymentFile']] = pulumi.output_property("files")
    """
    Manifest of the files stored in Google Cloud Storage that are included as part of this version.
    All files must be readable using the credentials supplied with this call.  Structure is documented below.
    """
    zip: Optional['outputs.FlexibleAppVersionDeploymentZip'] = pulumi.output_property("zip")
    """
    Zip File  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeploymentCloudBuildOptions(dict):
    app_yaml_path: str = pulumi.output_property("appYamlPath")
    """
    Path to the yaml file used in deployment, used to determine runtime configuration details.
    """
    cloud_build_timeout: Optional[str] = pulumi.output_property("cloudBuildTimeout")
    """
    The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
    A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeploymentContainer(dict):
    image: str = pulumi.output_property("image")
    """
    URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest.
    Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeploymentFile(dict):
    name: str = pulumi.output_property("name")
    """
    Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    """
    sha1_sum: Optional[str] = pulumi.output_property("sha1Sum")
    """
    SHA1 checksum of the file
    """
    source_url: str = pulumi.output_property("sourceUrl")
    """
    Source URL
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeploymentZip(dict):
    files_count: Optional[float] = pulumi.output_property("filesCount")
    """
    files count
    """
    source_url: str = pulumi.output_property("sourceUrl")
    """
    Source URL
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionEndpointsApiService(dict):
    config_id: Optional[str] = pulumi.output_property("configId")
    """
    Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".
    By default, the rollout strategy for Endpoints is "FIXED". This means that Endpoints starts up with a particular configuration ID.
    When a new configuration is rolled out, Endpoints must be given the new configuration ID. The configId field is used to give the configuration ID
    and is required in this case.
    Endpoints also has a rollout strategy called "MANAGED". When using this, Endpoints fetches the latest configuration and does not need
    the configuration ID. In this case, configId must be omitted.
    """
    disable_trace_sampling: Optional[bool] = pulumi.output_property("disableTraceSampling")
    """
    Enable or disable trace sampling. By default, this is set to false for enabled.
    """
    name: str = pulumi.output_property("name")
    """
    Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    """
    rollout_strategy: Optional[str] = pulumi.output_property("rolloutStrategy")
    """
    Endpoints rollout strategy. If FIXED, configId must be specified. If MANAGED, configId must be omitted.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionEntrypoint(dict):
    shell: str = pulumi.output_property("shell")
    """
    The format should be a shell command that can be fed to bash -c.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionHandler(dict):
    auth_fail_action: Optional[str] = pulumi.output_property("authFailAction")
    """
    Action to take when users access resources that require authentication.
    """
    login: Optional[str] = pulumi.output_property("login")
    """
    Level of login required to access this resource.
    """
    redirect_http_response_code: Optional[str] = pulumi.output_property("redirectHttpResponseCode")
    """
    30x code to use when performing redirects for the secure field.
    """
    script: Optional['outputs.FlexibleAppVersionHandlerScript'] = pulumi.output_property("script")
    """
    Path to the script from the application root directory.
    """
    security_level: Optional[str] = pulumi.output_property("securityLevel")
    """
    Security (HTTPS) enforcement for this URL.
    """
    static_files: Optional['outputs.FlexibleAppVersionHandlerStaticFiles'] = pulumi.output_property("staticFiles")
    """
    Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files.
    Static file handlers describe which files in the application directory are static files, and which URLs serve them.  Structure is documented below.
    """
    url_regex: Optional[str] = pulumi.output_property("urlRegex")
    """
    URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
    All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionHandlerScript(dict):
    script_path: str = pulumi.output_property("scriptPath")
    """
    Path to the script from the application root directory.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionHandlerStaticFiles(dict):
    application_readable: Optional[bool] = pulumi.output_property("applicationReadable")
    """
    Whether files should also be uploaded as code data. By default, files declared in static file handlers are
    uploaded as static data and are only served to end users; they cannot be read by the application. If enabled,
    uploads are charged against both your code and static data storage resource quotas.
    """
    expiration: Optional[str] = pulumi.output_property("expiration")
    """
    Time a static file served by this handler should be cached by web proxies and browsers.
    A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".
    Default is '0s'
    """
    http_headers: Optional[Dict[str, str]] = pulumi.output_property("httpHeaders")
    """
    HTTP headers to use for all responses from these URLs.
    An object containing a list of "key:value" value pairs.".
    """
    mime_type: Optional[str] = pulumi.output_property("mimeType")
    """
    MIME type used to serve all files served by this handler.
    Defaults to file-specific MIME types, which are derived from each file's filename extension.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    Path to the static files matched by the URL pattern, from the application root directory.
    The path can refer to text matched in groupings in the URL pattern.
    """
    require_matching_file: Optional[bool] = pulumi.output_property("requireMatchingFile")
    """
    Whether this handler should match the request if the file referenced by the handler does not exist.
    """
    upload_path_regex: Optional[str] = pulumi.output_property("uploadPathRegex")
    """
    Regular expression that matches the file paths for all files that should be referenced by this handler.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionLivenessCheck(dict):
    check_interval: Optional[str] = pulumi.output_property("checkInterval")
    """
    Interval between health checks.
    """
    failure_threshold: Optional[float] = pulumi.output_property("failureThreshold")
    """
    Number of consecutive failed checks required before considering the VM unhealthy. Default: 4.
    """
    host: Optional[str] = pulumi.output_property("host")
    """
    Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
    """
    initial_delay: Optional[str] = pulumi.output_property("initialDelay")
    """
    The initial delay before starting to execute the checks. Default: "300s"
    """
    path: str = pulumi.output_property("path")
    """
    Path to the static files matched by the URL pattern, from the application root directory.
    The path can refer to text matched in groupings in the URL pattern.
    """
    success_threshold: Optional[float] = pulumi.output_property("successThreshold")
    """
    Number of consecutive successful checks required before considering the VM healthy. Default: 2.
    """
    timeout: Optional[str] = pulumi.output_property("timeout")
    """
    Time before the check is considered failed. Default: "4s"
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionManualScaling(dict):
    instances: float = pulumi.output_property("instances")
    """
    Number of instances to assign to the service at the start.
    **Note:** When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2
    Modules API set_num_instances() you must use `lifecycle.ignore_changes = ["manual_scaling"[0].instances]` to prevent drift detection.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionNetwork(dict):
    forwarded_ports: Optional[List[str]] = pulumi.output_property("forwardedPorts")
    """
    List of ports, or port pairs, to forward from the virtual machine to the application container.
    """
    instance_tag: Optional[str] = pulumi.output_property("instanceTag")
    """
    Tag to apply to the instance during creation.
    """
    name: str = pulumi.output_property("name")
    """
    Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    """
    session_affinity: Optional[bool] = pulumi.output_property("sessionAffinity")
    """
    Enable session affinity.
    """
    subnetwork: Optional[str] = pulumi.output_property("subnetwork")
    """
    Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.
    If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range.
    If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetworkName) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network.
    If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetworkName must be specified and the IP address is created from the IPCidrRange of the subnetwork.
    If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionReadinessCheck(dict):
    app_start_timeout: Optional[str] = pulumi.output_property("appStartTimeout")
    """
    A maximum time limit on application initialization, measured from moment the application successfully
    replies to a healthcheck until it is ready to serve traffic. Default: "300s"
    """
    check_interval: Optional[str] = pulumi.output_property("checkInterval")
    """
    Interval between health checks.
    """
    failure_threshold: Optional[float] = pulumi.output_property("failureThreshold")
    """
    Number of consecutive failed checks required before considering the VM unhealthy. Default: 4.
    """
    host: Optional[str] = pulumi.output_property("host")
    """
    Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
    """
    path: str = pulumi.output_property("path")
    """
    Path to the static files matched by the URL pattern, from the application root directory.
    The path can refer to text matched in groupings in the URL pattern.
    """
    success_threshold: Optional[float] = pulumi.output_property("successThreshold")
    """
    Number of consecutive successful checks required before considering the VM healthy. Default: 2.
    """
    timeout: Optional[str] = pulumi.output_property("timeout")
    """
    Time before the check is considered failed. Default: "4s"
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionResources(dict):
    cpu: Optional[float] = pulumi.output_property("cpu")
    """
    Number of CPU cores needed.
    """
    disk_gb: Optional[float] = pulumi.output_property("diskGb")
    """
    Disk size (GB) needed.
    """
    memory_gb: Optional[float] = pulumi.output_property("memoryGb")
    """
    Memory (GB) needed.
    """
    volumes: Optional[List['outputs.FlexibleAppVersionResourcesVolume']] = pulumi.output_property("volumes")
    """
    List of ports, or port pairs, to forward from the virtual machine to the application container.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionResourcesVolume(dict):
    name: str = pulumi.output_property("name")
    """
    Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    """
    size_gb: float = pulumi.output_property("sizeGb")
    """
    Volume size in gigabytes.
    """
    volume_type: str = pulumi.output_property("volumeType")
    """
    Underlying volume type, e.g. 'tmpfs'.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionVpcAccessConnector(dict):
    name: str = pulumi.output_property("name")
    """
    Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionAutomaticScaling(dict):
    max_concurrent_requests: Optional[float] = pulumi.output_property("maxConcurrentRequests")
    """
    Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
    Defaults to a runtime-specific value.
    """
    max_idle_instances: Optional[float] = pulumi.output_property("maxIdleInstances")
    """
    Maximum number of idle instances that should be maintained for this version.
    """
    max_pending_latency: Optional[str] = pulumi.output_property("maxPendingLatency")
    """
    Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
    A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    """
    min_idle_instances: Optional[float] = pulumi.output_property("minIdleInstances")
    """
    Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
    """
    min_pending_latency: Optional[str] = pulumi.output_property("minPendingLatency")
    """
    Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
    A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    """
    standard_scheduler_settings: Optional['outputs.StandardAppVersionAutomaticScalingStandardSchedulerSettings'] = pulumi.output_property("standardSchedulerSettings")
    """
    Scheduler settings for standard environment.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionAutomaticScalingStandardSchedulerSettings(dict):
    max_instances: Optional[float] = pulumi.output_property("maxInstances")
    """
    Maximum number of instances to create for this version. Must be in the range [1.0, 200.0].
    """
    min_instances: Optional[float] = pulumi.output_property("minInstances")
    """
    Minimum number of instances to run for this version. Set to zero to disable minInstances configuration.
    """
    target_cpu_utilization: Optional[float] = pulumi.output_property("targetCpuUtilization")
    """
    Target CPU utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
    """
    target_throughput_utilization: Optional[float] = pulumi.output_property("targetThroughputUtilization")
    """
    Target throughput utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionBasicScaling(dict):
    idle_timeout: Optional[str] = pulumi.output_property("idleTimeout")
    """
    Duration of time after the last request that an instance must wait before the instance is shut down.
    A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
    """
    max_instances: float = pulumi.output_property("maxInstances")
    """
    Maximum number of instances to create for this version. Must be in the range [1.0, 200.0].
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionDeployment(dict):
    files: Optional[List['outputs.StandardAppVersionDeploymentFile']] = pulumi.output_property("files")
    """
    Manifest of the files stored in Google Cloud Storage that are included as part of this version.
    All files must be readable using the credentials supplied with this call.  Structure is documented below.
    """
    zip: Optional['outputs.StandardAppVersionDeploymentZip'] = pulumi.output_property("zip")
    """
    Zip File  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionDeploymentFile(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the library. Example "django".
    """
    sha1_sum: Optional[str] = pulumi.output_property("sha1Sum")
    """
    SHA1 checksum of the file
    """
    source_url: str = pulumi.output_property("sourceUrl")
    """
    Source URL
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionDeploymentZip(dict):
    files_count: Optional[float] = pulumi.output_property("filesCount")
    """
    files count
    """
    source_url: str = pulumi.output_property("sourceUrl")
    """
    Source URL
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionEntrypoint(dict):
    shell: str = pulumi.output_property("shell")
    """
    The format should be a shell command that can be fed to bash -c.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionHandler(dict):
    auth_fail_action: Optional[str] = pulumi.output_property("authFailAction")
    """
    Actions to take when the user is not logged in.
    """
    login: Optional[str] = pulumi.output_property("login")
    """
    Methods to restrict access to a URL based on login status.
    """
    redirect_http_response_code: Optional[str] = pulumi.output_property("redirectHttpResponseCode")
    """
    30x code to use when performing redirects for the secure field.
    """
    script: Optional['outputs.StandardAppVersionHandlerScript'] = pulumi.output_property("script")
    """
    Executes a script to handle the requests that match this URL pattern.
    Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".  Structure is documented below.
    """
    security_level: Optional[str] = pulumi.output_property("securityLevel")
    """
    Security (HTTPS) enforcement for this URL.
    """
    static_files: Optional['outputs.StandardAppVersionHandlerStaticFiles'] = pulumi.output_property("staticFiles")
    """
    Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.  Structure is documented below.
    """
    url_regex: Optional[str] = pulumi.output_property("urlRegex")
    """
    URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
    All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionHandlerScript(dict):
    script_path: str = pulumi.output_property("scriptPath")
    """
    Path to the script from the application root directory.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionHandlerStaticFiles(dict):
    application_readable: Optional[bool] = pulumi.output_property("applicationReadable")
    """
    Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as
    static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged
    against both your code and static data storage resource quotas.
    """
    expiration: Optional[str] = pulumi.output_property("expiration")
    """
    Time a static file served by this handler should be cached by web proxies and browsers.
    A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".
    """
    http_headers: Optional[Dict[str, str]] = pulumi.output_property("httpHeaders")
    """
    HTTP headers to use for all responses from these URLs.
    An object containing a list of "key:value" value pairs.".
    """
    mime_type: Optional[str] = pulumi.output_property("mimeType")
    """
    MIME type used to serve all files served by this handler.
    Defaults to file-specific MIME types, which are derived from each file's filename extension.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
    """
    require_matching_file: Optional[bool] = pulumi.output_property("requireMatchingFile")
    """
    Whether this handler should match the request if the file referenced by the handler does not exist.
    """
    upload_path_regex: Optional[str] = pulumi.output_property("uploadPathRegex")
    """
    Regular expression that matches the file paths for all files that should be referenced by this handler.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionLibrary(dict):
    name: Optional[str] = pulumi.output_property("name")
    """
    Name of the library. Example "django".
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    Version of the library to select, or "latest".
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionManualScaling(dict):
    instances: float = pulumi.output_property("instances")
    """
    Number of instances to assign to the service at the start.
    **Note:** When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2
    Modules API set_num_instances() you must use `lifecycle.ignore_changes = ["manual_scaling"[0].instances]` to prevent drift detection.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


