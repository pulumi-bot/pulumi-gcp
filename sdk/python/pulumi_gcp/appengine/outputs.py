# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'ApplicationFeatureSettings',
    'ApplicationIap',
    'ApplicationUrlDispatchRule',
    'ApplicationUrlDispatchRulesDispatchRule',
    'DomainMappingResourceRecord',
    'DomainMappingSslSettings',
    'EngineSplitTrafficSplit',
    'FlexibleAppVersionApiConfig',
    'FlexibleAppVersionAutomaticScaling',
    'FlexibleAppVersionAutomaticScalingCpuUtilization',
    'FlexibleAppVersionAutomaticScalingDiskUtilization',
    'FlexibleAppVersionAutomaticScalingNetworkUtilization',
    'FlexibleAppVersionAutomaticScalingRequestUtilization',
    'FlexibleAppVersionDeployment',
    'FlexibleAppVersionDeploymentCloudBuildOptions',
    'FlexibleAppVersionDeploymentContainer',
    'FlexibleAppVersionDeploymentFile',
    'FlexibleAppVersionDeploymentZip',
    'FlexibleAppVersionEndpointsApiService',
    'FlexibleAppVersionEntrypoint',
    'FlexibleAppVersionHandler',
    'FlexibleAppVersionHandlerScript',
    'FlexibleAppVersionHandlerStaticFiles',
    'FlexibleAppVersionLivenessCheck',
    'FlexibleAppVersionManualScaling',
    'FlexibleAppVersionNetwork',
    'FlexibleAppVersionReadinessCheck',
    'FlexibleAppVersionResources',
    'FlexibleAppVersionResourcesVolume',
    'FlexibleAppVersionVpcAccessConnector',
    'StandardAppVersionAutomaticScaling',
    'StandardAppVersionAutomaticScalingStandardSchedulerSettings',
    'StandardAppVersionBasicScaling',
    'StandardAppVersionDeployment',
    'StandardAppVersionDeploymentFile',
    'StandardAppVersionDeploymentZip',
    'StandardAppVersionEntrypoint',
    'StandardAppVersionHandler',
    'StandardAppVersionHandlerScript',
    'StandardAppVersionHandlerStaticFiles',
    'StandardAppVersionLibrary',
    'StandardAppVersionManualScaling',
]

@pulumi.output_type
class ApplicationFeatureSettings(dict):
    @property
    @pulumi.getter(name="splitHealthChecks")
    def split_health_checks(self) -> bool:
        """
        Set to false to use the legacy health check instead of the readiness
        and liveness checks.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationIap(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        ...

    @property
    @pulumi.getter(name="oauth2ClientId")
    def oauth2_client_id(self) -> str:
        """
        OAuth2 client ID to use for the authentication flow.
        """
        ...

    @property
    @pulumi.getter(name="oauth2ClientSecret")
    def oauth2_client_secret(self) -> str:
        """
        OAuth2 client secret to use for the authentication flow.
        The SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field.
        """
        ...

    @property
    @pulumi.getter(name="oauth2ClientSecretSha256")
    def oauth2_client_secret_sha256(self) -> Optional[str]:
        """
        Hex-encoded SHA-256 hash of the client secret.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationUrlDispatchRule(dict):
    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationUrlDispatchRulesDispatchRule(dict):
    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".
        Defaults to matching all domains: "*".
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.
        The sum of the lengths of the domain and path may not exceed 100 characters.
        """
        ...

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.
        The sum of the lengths of the domain and path may not exceed 100 characters.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainMappingResourceRecord(dict):
    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def rrdata(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainMappingSslSettings(dict):
    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        """
        ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
        remove SSL support.
        By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
        or to configure SSL manually, specify `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must be
        authorized to administer the `AuthorizedCertificate` resource to manually map it to a DomainMapping resource.
        Example: 12345.
        """
        ...

    @property
    @pulumi.getter(name="pendingManagedCertificateId")
    def pending_managed_certificate_id(self) -> Optional[str]:
        """
        -
        ID of the managed `AuthorizedCertificate` resource currently being provisioned, if applicable. Until the new
        managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
        provisioning process completes, the `certificateId` field will reflect the new managed certificate and this
        field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
        `certificateId` field with an update request.
        """
        ...

    @property
    @pulumi.getter(name="sslManagementType")
    def ssl_management_type(self) -> str:
        """
        SSL management type for this domain. If `AUTOMATIC`, a managed certificate is automatically provisioned.
        If `MANUAL`, `certificateId` must be manually specified in order to configure SSL for this domain.
        Possible values are `AUTOMATIC` and `MANUAL`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EngineSplitTrafficSplit(dict):
    @property
    @pulumi.getter
    def allocations(self) -> Mapping[str, str]:
        """
        Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.
        """
        ...

    @property
    @pulumi.getter(name="shardBy")
    def shard_by(self) -> Optional[str]:
        """
        Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.
        Possible values are `UNSPECIFIED`, `COOKIE`, `IP`, and `RANDOM`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionApiConfig(dict):
    @property
    @pulumi.getter(name="authFailAction")
    def auth_fail_action(self) -> Optional[str]:
        """
        Action to take when users access resources that require authentication.
        Default value is `AUTH_FAIL_ACTION_REDIRECT`.
        Possible values are `AUTH_FAIL_ACTION_REDIRECT` and `AUTH_FAIL_ACTION_UNAUTHORIZED`.
        """
        ...

    @property
    @pulumi.getter
    def login(self) -> Optional[str]:
        """
        Level of login required to access this resource.
        Default value is `LOGIN_OPTIONAL`.
        Possible values are `LOGIN_OPTIONAL`, `LOGIN_ADMIN`, and `LOGIN_REQUIRED`.
        """
        ...

    @property
    @pulumi.getter
    def script(self) -> str:
        """
        Path to the script from the application root directory.
        """
        ...

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[str]:
        """
        Security (HTTPS) enforcement for this URL.
        Possible values are `SECURE_DEFAULT`, `SECURE_NEVER`, `SECURE_OPTIONAL`, and `SECURE_ALWAYS`.
        """
        ...

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL to serve the endpoint at.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScaling(dict):
    @property
    @pulumi.getter(name="coolDownPeriod")
    def cool_down_period(self) -> Optional[str]:
        """
        The time period that the Autoscaler should wait before it starts collecting information from a new instance.
        This prevents the autoscaler from collecting information when the instance is initializing,
        during which the collected usage would not be reliable. Default: 120s
        """
        ...

    @property
    @pulumi.getter(name="cpuUtilization")
    def cpu_utilization(self) -> 'outputs.FlexibleAppVersionAutomaticScalingCpuUtilization':
        """
        Target scaling by CPU usage.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="diskUtilization")
    def disk_utilization(self) -> Optional['outputs.FlexibleAppVersionAutomaticScalingDiskUtilization']:
        """
        Target scaling by disk usage.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="maxConcurrentRequests")
    def max_concurrent_requests(self) -> Optional[float]:
        """
        Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
        Defaults to a runtime-specific value.
        """
        ...

    @property
    @pulumi.getter(name="maxIdleInstances")
    def max_idle_instances(self) -> Optional[float]:
        """
        Maximum number of idle instances that should be maintained for this version.
        """
        ...

    @property
    @pulumi.getter(name="maxPendingLatency")
    def max_pending_latency(self) -> Optional[str]:
        """
        Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
        """
        ...

    @property
    @pulumi.getter(name="maxTotalInstances")
    def max_total_instances(self) -> Optional[float]:
        """
        Maximum number of instances that should be started to handle requests for this version. Default: 20
        """
        ...

    @property
    @pulumi.getter(name="minIdleInstances")
    def min_idle_instances(self) -> Optional[float]:
        """
        Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
        """
        ...

    @property
    @pulumi.getter(name="minPendingLatency")
    def min_pending_latency(self) -> Optional[str]:
        """
        Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
        """
        ...

    @property
    @pulumi.getter(name="minTotalInstances")
    def min_total_instances(self) -> Optional[float]:
        """
        Minimum number of running instances that should be maintained for this version. Default: 2
        """
        ...

    @property
    @pulumi.getter(name="networkUtilization")
    def network_utilization(self) -> Optional['outputs.FlexibleAppVersionAutomaticScalingNetworkUtilization']:
        """
        Target scaling by network usage.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="requestUtilization")
    def request_utilization(self) -> Optional['outputs.FlexibleAppVersionAutomaticScalingRequestUtilization']:
        """
        Target scaling by request utilization.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScalingCpuUtilization(dict):
    @property
    @pulumi.getter(name="aggregationWindowLength")
    def aggregation_window_length(self) -> Optional[str]:
        """
        Period of time over which CPU utilization is calculated.
        """
        ...

    @property
    @pulumi.getter(name="targetUtilization")
    def target_utilization(self) -> float:
        """
        Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScalingDiskUtilization(dict):
    @property
    @pulumi.getter(name="targetReadBytesPerSecond")
    def target_read_bytes_per_second(self) -> Optional[float]:
        """
        Target bytes read per second.
        """
        ...

    @property
    @pulumi.getter(name="targetReadOpsPerSecond")
    def target_read_ops_per_second(self) -> Optional[float]:
        """
        Target ops read per seconds.
        """
        ...

    @property
    @pulumi.getter(name="targetWriteBytesPerSecond")
    def target_write_bytes_per_second(self) -> Optional[float]:
        """
        Target bytes written per second.
        """
        ...

    @property
    @pulumi.getter(name="targetWriteOpsPerSecond")
    def target_write_ops_per_second(self) -> Optional[float]:
        """
        Target ops written per second.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScalingNetworkUtilization(dict):
    @property
    @pulumi.getter(name="targetReceivedBytesPerSecond")
    def target_received_bytes_per_second(self) -> Optional[float]:
        """
        Target bytes received per second.
        """
        ...

    @property
    @pulumi.getter(name="targetReceivedPacketsPerSecond")
    def target_received_packets_per_second(self) -> Optional[float]:
        """
        Target packets received per second.
        """
        ...

    @property
    @pulumi.getter(name="targetSentBytesPerSecond")
    def target_sent_bytes_per_second(self) -> Optional[float]:
        """
        Target bytes sent per second.
        """
        ...

    @property
    @pulumi.getter(name="targetSentPacketsPerSecond")
    def target_sent_packets_per_second(self) -> Optional[float]:
        """
        Target packets sent per second.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionAutomaticScalingRequestUtilization(dict):
    @property
    @pulumi.getter(name="targetConcurrentRequests")
    def target_concurrent_requests(self) -> Optional[float]:
        """
        Target number of concurrent requests.
        """
        ...

    @property
    @pulumi.getter(name="targetRequestCountPerSecond")
    def target_request_count_per_second(self) -> Optional[str]:
        """
        Target requests per second.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeployment(dict):
    @property
    @pulumi.getter(name="cloudBuildOptions")
    def cloud_build_options(self) -> Optional['outputs.FlexibleAppVersionDeploymentCloudBuildOptions']:
        """
        Options for the build operations performed as a part of the version deployment. Only applicable when creating a version using source code directly.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.FlexibleAppVersionDeploymentContainer']:
        """
        The Docker image for the container that runs the version.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def files(self) -> Optional[List['outputs.FlexibleAppVersionDeploymentFile']]:
        """
        Manifest of the files stored in Google Cloud Storage that are included as part of this version.
        All files must be readable using the credentials supplied with this call.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def zip(self) -> Optional['outputs.FlexibleAppVersionDeploymentZip']:
        """
        Zip File
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeploymentCloudBuildOptions(dict):
    @property
    @pulumi.getter(name="appYamlPath")
    def app_yaml_path(self) -> str:
        """
        Path to the yaml file used in deployment, used to determine runtime configuration details.
        """
        ...

    @property
    @pulumi.getter(name="cloudBuildTimeout")
    def cloud_build_timeout(self) -> Optional[str]:
        """
        The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeploymentContainer(dict):
    @property
    @pulumi.getter
    def image(self) -> str:
        """
        URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest.
        Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeploymentFile(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
        """
        ...

    @property
    @pulumi.getter(name="sha1Sum")
    def sha1_sum(self) -> Optional[str]:
        """
        SHA1 checksum of the file
        """
        ...

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> str:
        """
        Source URL
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionDeploymentZip(dict):
    @property
    @pulumi.getter(name="filesCount")
    def files_count(self) -> Optional[float]:
        """
        files count
        """
        ...

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> str:
        """
        Source URL
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionEndpointsApiService(dict):
    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[str]:
        """
        Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".
        By default, the rollout strategy for Endpoints is "FIXED". This means that Endpoints starts up with a particular configuration ID.
        When a new configuration is rolled out, Endpoints must be given the new configuration ID. The configId field is used to give the configuration ID
        and is required in this case.
        Endpoints also has a rollout strategy called "MANAGED". When using this, Endpoints fetches the latest configuration and does not need
        the configuration ID. In this case, configId must be omitted.
        """
        ...

    @property
    @pulumi.getter(name="disableTraceSampling")
    def disable_trace_sampling(self) -> Optional[bool]:
        """
        Enable or disable trace sampling. By default, this is set to false for enabled.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
        """
        ...

    @property
    @pulumi.getter(name="rolloutStrategy")
    def rollout_strategy(self) -> Optional[str]:
        """
        Endpoints rollout strategy. If FIXED, configId must be specified. If MANAGED, configId must be omitted.
        Default value is `FIXED`.
        Possible values are `FIXED` and `MANAGED`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionEntrypoint(dict):
    @property
    @pulumi.getter
    def shell(self) -> str:
        """
        The format should be a shell command that can be fed to bash -c.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionHandler(dict):
    @property
    @pulumi.getter(name="authFailAction")
    def auth_fail_action(self) -> Optional[str]:
        """
        Action to take when users access resources that require authentication.
        Default value is `AUTH_FAIL_ACTION_REDIRECT`.
        Possible values are `AUTH_FAIL_ACTION_REDIRECT` and `AUTH_FAIL_ACTION_UNAUTHORIZED`.
        """
        ...

    @property
    @pulumi.getter
    def login(self) -> Optional[str]:
        """
        Level of login required to access this resource.
        Default value is `LOGIN_OPTIONAL`.
        Possible values are `LOGIN_OPTIONAL`, `LOGIN_ADMIN`, and `LOGIN_REQUIRED`.
        """
        ...

    @property
    @pulumi.getter(name="redirectHttpResponseCode")
    def redirect_http_response_code(self) -> Optional[str]:
        """
        30x code to use when performing redirects for the secure field.
        Possible values are `REDIRECT_HTTP_RESPONSE_CODE_301`, `REDIRECT_HTTP_RESPONSE_CODE_302`, `REDIRECT_HTTP_RESPONSE_CODE_303`, and `REDIRECT_HTTP_RESPONSE_CODE_307`.
        """
        ...

    @property
    @pulumi.getter
    def script(self) -> Optional['outputs.FlexibleAppVersionHandlerScript']:
        """
        Path to the script from the application root directory.
        """
        ...

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[str]:
        """
        Security (HTTPS) enforcement for this URL.
        Possible values are `SECURE_DEFAULT`, `SECURE_NEVER`, `SECURE_OPTIONAL`, and `SECURE_ALWAYS`.
        """
        ...

    @property
    @pulumi.getter(name="staticFiles")
    def static_files(self) -> Optional['outputs.FlexibleAppVersionHandlerStaticFiles']:
        """
        Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files.
        Static file handlers describe which files in the application directory are static files, and which URLs serve them.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="urlRegex")
    def url_regex(self) -> Optional[str]:
        """
        URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
        All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionHandlerScript(dict):
    @property
    @pulumi.getter(name="scriptPath")
    def script_path(self) -> str:
        """
        Path to the script from the application root directory.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionHandlerStaticFiles(dict):
    @property
    @pulumi.getter(name="applicationReadable")
    def application_readable(self) -> Optional[bool]:
        """
        Whether files should also be uploaded as code data. By default, files declared in static file handlers are
        uploaded as static data and are only served to end users; they cannot be read by the application. If enabled,
        uploads are charged against both your code and static data storage resource quotas.
        """
        ...

    @property
    @pulumi.getter
    def expiration(self) -> Optional[str]:
        """
        Time a static file served by this handler should be cached by web proxies and browsers.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".
        Default is '0s'
        """
        ...

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        """
        HTTP headers to use for all responses from these URLs.
        An object containing a list of "key:value" value pairs.".
        """
        ...

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> Optional[str]:
        """
        MIME type used to serve all files served by this handler.
        Defaults to file-specific MIME types, which are derived from each file's filename extension.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the static files matched by the URL pattern, from the application root directory.
        The path can refer to text matched in groupings in the URL pattern.
        """
        ...

    @property
    @pulumi.getter(name="requireMatchingFile")
    def require_matching_file(self) -> Optional[bool]:
        """
        Whether this handler should match the request if the file referenced by the handler does not exist.
        """
        ...

    @property
    @pulumi.getter(name="uploadPathRegex")
    def upload_path_regex(self) -> Optional[str]:
        """
        Regular expression that matches the file paths for all files that should be referenced by this handler.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionLivenessCheck(dict):
    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[str]:
        """
        Interval between health checks.
        """
        ...

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[float]:
        """
        Number of consecutive failed checks required before considering the VM unhealthy. Default: 4.
        """
        ...

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
        """
        ...

    @property
    @pulumi.getter(name="initialDelay")
    def initial_delay(self) -> Optional[str]:
        """
        The initial delay before starting to execute the checks. Default: "300s"
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the static files matched by the URL pattern, from the application root directory.
        The path can refer to text matched in groupings in the URL pattern.
        """
        ...

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[float]:
        """
        Number of consecutive successful checks required before considering the VM healthy. Default: 2.
        """
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        """
        Time before the check is considered failed. Default: "4s"
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionManualScaling(dict):
    @property
    @pulumi.getter
    def instances(self) -> float:
        """
        Number of instances to assign to the service at the start.
        **Note:** When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2
        Modules API set_num_instances() you must use `lifecycle.ignore_changes = ["manual_scaling"[0].instances]` to prevent drift detection.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionNetwork(dict):
    @property
    @pulumi.getter(name="forwardedPorts")
    def forwarded_ports(self) -> Optional[List[str]]:
        """
        List of ports, or port pairs, to forward from the virtual machine to the application container.
        """
        ...

    @property
    @pulumi.getter(name="instanceTag")
    def instance_tag(self) -> Optional[str]:
        """
        Tag to apply to the instance during creation.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
        """
        ...

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[bool]:
        """
        Enable session affinity.
        """
        ...

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[str]:
        """
        Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.
        If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range.
        If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetworkName) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network.
        If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetworkName must be specified and the IP address is created from the IPCidrRange of the subnetwork.
        If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionReadinessCheck(dict):
    @property
    @pulumi.getter(name="appStartTimeout")
    def app_start_timeout(self) -> Optional[str]:
        """
        A maximum time limit on application initialization, measured from moment the application successfully
        replies to a healthcheck until it is ready to serve traffic. Default: "300s"
        """
        ...

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[str]:
        """
        Interval between health checks.
        """
        ...

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[float]:
        """
        Number of consecutive failed checks required before considering the VM unhealthy. Default: 4.
        """
        ...

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the static files matched by the URL pattern, from the application root directory.
        The path can refer to text matched in groupings in the URL pattern.
        """
        ...

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[float]:
        """
        Number of consecutive successful checks required before considering the VM healthy. Default: 2.
        """
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        """
        Time before the check is considered failed. Default: "4s"
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionResources(dict):
    @property
    @pulumi.getter
    def cpu(self) -> Optional[float]:
        """
        Number of CPU cores needed.
        """
        ...

    @property
    @pulumi.getter(name="diskGb")
    def disk_gb(self) -> Optional[float]:
        """
        Disk size (GB) needed.
        """
        ...

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> Optional[float]:
        """
        Memory (GB) needed.
        """
        ...

    @property
    @pulumi.getter
    def volumes(self) -> Optional[List['outputs.FlexibleAppVersionResourcesVolume']]:
        """
        List of ports, or port pairs, to forward from the virtual machine to the application container.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionResourcesVolume(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
        """
        ...

    @property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> float:
        """
        Volume size in gigabytes.
        """
        ...

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        Underlying volume type, e.g. 'tmpfs'.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FlexibleAppVersionVpcAccessConnector(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionAutomaticScaling(dict):
    @property
    @pulumi.getter(name="maxConcurrentRequests")
    def max_concurrent_requests(self) -> Optional[float]:
        """
        Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
        Defaults to a runtime-specific value.
        """
        ...

    @property
    @pulumi.getter(name="maxIdleInstances")
    def max_idle_instances(self) -> Optional[float]:
        """
        Maximum number of idle instances that should be maintained for this version.
        """
        ...

    @property
    @pulumi.getter(name="maxPendingLatency")
    def max_pending_latency(self) -> Optional[str]:
        """
        Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        """
        ...

    @property
    @pulumi.getter(name="minIdleInstances")
    def min_idle_instances(self) -> Optional[float]:
        """
        Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
        """
        ...

    @property
    @pulumi.getter(name="minPendingLatency")
    def min_pending_latency(self) -> Optional[str]:
        """
        Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        """
        ...

    @property
    @pulumi.getter(name="standardSchedulerSettings")
    def standard_scheduler_settings(self) -> Optional['outputs.StandardAppVersionAutomaticScalingStandardSchedulerSettings']:
        """
        Scheduler settings for standard environment.
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionAutomaticScalingStandardSchedulerSettings(dict):
    @property
    @pulumi.getter(name="maxInstances")
    def max_instances(self) -> Optional[float]:
        """
        Maximum number of instances to create for this version. Must be in the range [1.0, 200.0].
        """
        ...

    @property
    @pulumi.getter(name="minInstances")
    def min_instances(self) -> Optional[float]:
        """
        Minimum number of instances to run for this version. Set to zero to disable minInstances configuration.
        """
        ...

    @property
    @pulumi.getter(name="targetCpuUtilization")
    def target_cpu_utilization(self) -> Optional[float]:
        """
        Target CPU utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
        """
        ...

    @property
    @pulumi.getter(name="targetThroughputUtilization")
    def target_throughput_utilization(self) -> Optional[float]:
        """
        Target throughput utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionBasicScaling(dict):
    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[str]:
        """
        Duration of time after the last request that an instance must wait before the instance is shut down.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
        """
        ...

    @property
    @pulumi.getter(name="maxInstances")
    def max_instances(self) -> float:
        """
        Maximum number of instances to create for this version. Must be in the range [1.0, 200.0].
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionDeployment(dict):
    @property
    @pulumi.getter
    def files(self) -> Optional[List['outputs.StandardAppVersionDeploymentFile']]:
        """
        Manifest of the files stored in Google Cloud Storage that are included as part of this version.
        All files must be readable using the credentials supplied with this call.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def zip(self) -> Optional['outputs.StandardAppVersionDeploymentZip']:
        """
        Zip File
        Structure is documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionDeploymentFile(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the library. Example "django".
        """
        ...

    @property
    @pulumi.getter(name="sha1Sum")
    def sha1_sum(self) -> Optional[str]:
        """
        SHA1 checksum of the file
        """
        ...

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> str:
        """
        Source URL
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionDeploymentZip(dict):
    @property
    @pulumi.getter(name="filesCount")
    def files_count(self) -> Optional[float]:
        """
        files count
        """
        ...

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> str:
        """
        Source URL
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionEntrypoint(dict):
    @property
    @pulumi.getter
    def shell(self) -> str:
        """
        The format should be a shell command that can be fed to bash -c.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionHandler(dict):
    @property
    @pulumi.getter(name="authFailAction")
    def auth_fail_action(self) -> Optional[str]:
        """
        Actions to take when the user is not logged in.
        Possible values are `AUTH_FAIL_ACTION_REDIRECT` and `AUTH_FAIL_ACTION_UNAUTHORIZED`.
        """
        ...

    @property
    @pulumi.getter
    def login(self) -> Optional[str]:
        """
        Methods to restrict access to a URL based on login status.
        Possible values are `LOGIN_OPTIONAL`, `LOGIN_ADMIN`, and `LOGIN_REQUIRED`.
        """
        ...

    @property
    @pulumi.getter(name="redirectHttpResponseCode")
    def redirect_http_response_code(self) -> Optional[str]:
        """
        30x code to use when performing redirects for the secure field.
        Possible values are `REDIRECT_HTTP_RESPONSE_CODE_301`, `REDIRECT_HTTP_RESPONSE_CODE_302`, `REDIRECT_HTTP_RESPONSE_CODE_303`, and `REDIRECT_HTTP_RESPONSE_CODE_307`.
        """
        ...

    @property
    @pulumi.getter
    def script(self) -> Optional['outputs.StandardAppVersionHandlerScript']:
        """
        Executes a script to handle the requests that match this URL pattern.
        Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[str]:
        """
        Security (HTTPS) enforcement for this URL.
        Possible values are `SECURE_DEFAULT`, `SECURE_NEVER`, `SECURE_OPTIONAL`, and `SECURE_ALWAYS`.
        """
        ...

    @property
    @pulumi.getter(name="staticFiles")
    def static_files(self) -> Optional['outputs.StandardAppVersionHandlerStaticFiles']:
        """
        Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
        Structure is documented below.
        """
        ...

    @property
    @pulumi.getter(name="urlRegex")
    def url_regex(self) -> Optional[str]:
        """
        URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
        All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionHandlerScript(dict):
    @property
    @pulumi.getter(name="scriptPath")
    def script_path(self) -> str:
        """
        Path to the script from the application root directory.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionHandlerStaticFiles(dict):
    @property
    @pulumi.getter(name="applicationReadable")
    def application_readable(self) -> Optional[bool]:
        """
        Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as
        static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged
        against both your code and static data storage resource quotas.
        """
        ...

    @property
    @pulumi.getter
    def expiration(self) -> Optional[str]:
        """
        Time a static file served by this handler should be cached by web proxies and browsers.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".
        """
        ...

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        """
        HTTP headers to use for all responses from these URLs.
        An object containing a list of "key:value" value pairs.".
        """
        ...

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> Optional[str]:
        """
        MIME type used to serve all files served by this handler.
        Defaults to file-specific MIME types, which are derived from each file's filename extension.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
        """
        ...

    @property
    @pulumi.getter(name="requireMatchingFile")
    def require_matching_file(self) -> Optional[bool]:
        """
        Whether this handler should match the request if the file referenced by the handler does not exist.
        """
        ...

    @property
    @pulumi.getter(name="uploadPathRegex")
    def upload_path_regex(self) -> Optional[str]:
        """
        Regular expression that matches the file paths for all files that should be referenced by this handler.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionLibrary(dict):
    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the library. Example "django".
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the library to select, or "latest".
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardAppVersionManualScaling(dict):
    @property
    @pulumi.getter
    def instances(self) -> float:
        """
        Number of instances to assign to the service at the start.
        **Note:** When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2
        Modules API set_num_instances() you must use `lifecycle.ignore_changes = ["manual_scaling"[0].instances]` to prevent drift detection.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


