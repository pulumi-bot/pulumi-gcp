# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AutoscalarAutoscalingPolicyArgs',
    'AutoscalarAutoscalingPolicyCpuUtilizationArgs',
    'AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs',
    'AutoscalarAutoscalingPolicyMetricArgs',
    'AutoscalarAutoscalingPolicyScaleDownControlArgs',
    'AutoscalarAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs',
    'AutoscalerAutoscalingPolicyArgs',
    'AutoscalerAutoscalingPolicyCpuUtilizationArgs',
    'AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs',
    'AutoscalerAutoscalingPolicyMetricArgs',
    'AutoscalerAutoscalingPolicyScaleDownControlArgs',
    'AutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs',
    'BackendBucketCdnPolicyArgs',
    'BackendServiceBackendArgs',
    'BackendServiceCdnPolicyArgs',
    'BackendServiceCdnPolicyCacheKeyPolicyArgs',
    'BackendServiceCircuitBreakersArgs',
    'BackendServiceCircuitBreakersConnectTimeoutArgs',
    'BackendServiceConsistentHashArgs',
    'BackendServiceConsistentHashHttpCookieArgs',
    'BackendServiceConsistentHashHttpCookieTtlArgs',
    'BackendServiceIapArgs',
    'BackendServiceLogConfigArgs',
    'BackendServiceOutlierDetectionArgs',
    'BackendServiceOutlierDetectionBaseEjectionTimeArgs',
    'BackendServiceOutlierDetectionIntervalArgs',
    'DiskDiskEncryptionKeyArgs',
    'DiskSourceImageEncryptionKeyArgs',
    'DiskSourceSnapshotEncryptionKeyArgs',
    'ExternalVpnGatewayInterfaceArgs',
    'FirewallAllowArgs',
    'FirewallDenyArgs',
    'FirewallLogConfigArgs',
    'GlobalForwardingRuleMetadataFilterArgs',
    'GlobalForwardingRuleMetadataFilterFilterLabelArgs',
    'HaVpnGatewayVpnInterfaceArgs',
    'HealthCheckHttp2HealthCheckArgs',
    'HealthCheckHttpHealthCheckArgs',
    'HealthCheckHttpsHealthCheckArgs',
    'HealthCheckLogConfigArgs',
    'HealthCheckSslHealthCheckArgs',
    'HealthCheckTcpHealthCheckArgs',
    'ImageGuestOsFeatureArgs',
    'ImageRawDiskArgs',
    'InstanceAttachedDiskArgs',
    'InstanceBootDiskArgs',
    'InstanceBootDiskInitializeParamsArgs',
    'InstanceConfidentialInstanceConfigArgs',
    'InstanceFromTemplateAttachedDiskArgs',
    'InstanceFromTemplateBootDiskArgs',
    'InstanceFromTemplateBootDiskInitializeParamsArgs',
    'InstanceFromTemplateConfidentialInstanceConfigArgs',
    'InstanceFromTemplateGuestAcceleratorArgs',
    'InstanceFromTemplateNetworkInterfaceArgs',
    'InstanceFromTemplateNetworkInterfaceAccessConfigArgs',
    'InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs',
    'InstanceFromTemplateSchedulingArgs',
    'InstanceFromTemplateSchedulingNodeAffinityArgs',
    'InstanceFromTemplateScratchDiskArgs',
    'InstanceFromTemplateServiceAccountArgs',
    'InstanceFromTemplateShieldedInstanceConfigArgs',
    'InstanceGroupManagerAutoHealingPoliciesArgs',
    'InstanceGroupManagerNamedPortArgs',
    'InstanceGroupManagerStatefulDiskArgs',
    'InstanceGroupManagerUpdatePolicyArgs',
    'InstanceGroupManagerVersionArgs',
    'InstanceGroupManagerVersionTargetSizeArgs',
    'InstanceGroupNamedPortArgs',
    'InstanceGuestAcceleratorArgs',
    'InstanceIAMBindingConditionArgs',
    'InstanceIAMMemberConditionArgs',
    'InstanceNetworkInterfaceArgs',
    'InstanceNetworkInterfaceAccessConfigArgs',
    'InstanceNetworkInterfaceAliasIpRangeArgs',
    'InstanceSchedulingArgs',
    'InstanceSchedulingNodeAffinityArgs',
    'InstanceScratchDiskArgs',
    'InstanceServiceAccountArgs',
    'InstanceShieldedInstanceConfigArgs',
    'InstanceTemplateConfidentialInstanceConfigArgs',
    'InstanceTemplateDiskArgs',
    'InstanceTemplateDiskDiskEncryptionKeyArgs',
    'InstanceTemplateGuestAcceleratorArgs',
    'InstanceTemplateNetworkInterfaceArgs',
    'InstanceTemplateNetworkInterfaceAccessConfigArgs',
    'InstanceTemplateNetworkInterfaceAliasIpRangeArgs',
    'InstanceTemplateSchedulingArgs',
    'InstanceTemplateSchedulingNodeAffinityArgs',
    'InstanceTemplateServiceAccountArgs',
    'InstanceTemplateShieldedInstanceConfigArgs',
    'InterconnectAttachmentPrivateInterconnectInfoArgs',
    'ManagedSslCertificateManagedArgs',
    'MangedSslCertificateManagedArgs',
    'NodeGroupAutoscalingPolicyArgs',
    'NodeTemplateNodeTypeFlexibilityArgs',
    'NodeTemplateServerBindingArgs',
    'OrganizationSecurityPolicyRuleMatchArgs',
    'OrganizationSecurityPolicyRuleMatchConfigArgs',
    'OrganizationSecurityPolicyRuleMatchConfigLayer4ConfigArgs',
    'PacketMirroringCollectorIlbArgs',
    'PacketMirroringFilterArgs',
    'PacketMirroringMirroredResourcesArgs',
    'PacketMirroringMirroredResourcesInstanceArgs',
    'PacketMirroringMirroredResourcesSubnetworkArgs',
    'PacketMirroringNetworkArgs',
    'PerInstanceConfigPreservedStateArgs',
    'PerInstanceConfigPreservedStateDiskArgs',
    'RegionAutoscalerAutoscalingPolicyArgs',
    'RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs',
    'RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs',
    'RegionAutoscalerAutoscalingPolicyMetricArgs',
    'RegionAutoscalerAutoscalingPolicyScaleDownControlArgs',
    'RegionAutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs',
    'RegionBackendServiceBackendArgs',
    'RegionBackendServiceCircuitBreakersArgs',
    'RegionBackendServiceCircuitBreakersConnectTimeoutArgs',
    'RegionBackendServiceConsistentHashArgs',
    'RegionBackendServiceConsistentHashHttpCookieArgs',
    'RegionBackendServiceConsistentHashHttpCookieTtlArgs',
    'RegionBackendServiceFailoverPolicyArgs',
    'RegionBackendServiceLogConfigArgs',
    'RegionBackendServiceOutlierDetectionArgs',
    'RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs',
    'RegionBackendServiceOutlierDetectionIntervalArgs',
    'RegionDiskDiskEncryptionKeyArgs',
    'RegionDiskSourceSnapshotEncryptionKeyArgs',
    'RegionHealthCheckHttp2HealthCheckArgs',
    'RegionHealthCheckHttpHealthCheckArgs',
    'RegionHealthCheckHttpsHealthCheckArgs',
    'RegionHealthCheckLogConfigArgs',
    'RegionHealthCheckSslHealthCheckArgs',
    'RegionHealthCheckTcpHealthCheckArgs',
    'RegionInstanceGroupManagerAutoHealingPoliciesArgs',
    'RegionInstanceGroupManagerNamedPortArgs',
    'RegionInstanceGroupManagerStatefulDiskArgs',
    'RegionInstanceGroupManagerUpdatePolicyArgs',
    'RegionInstanceGroupManagerVersionArgs',
    'RegionInstanceGroupManagerVersionTargetSizeArgs',
    'RegionNetworkEndpointGroupAppEngineArgs',
    'RegionNetworkEndpointGroupCloudFunctionArgs',
    'RegionNetworkEndpointGroupCloudRunArgs',
    'RegionPerInstanceConfigPreservedStateArgs',
    'RegionPerInstanceConfigPreservedStateDiskArgs',
    'RegionUrlMapDefaultUrlRedirectArgs',
    'RegionUrlMapHostRuleArgs',
    'RegionUrlMapPathMatcherArgs',
    'RegionUrlMapPathMatcherDefaultUrlRedirectArgs',
    'RegionUrlMapPathMatcherPathRuleArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs',
    'RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs',
    'RegionUrlMapPathMatcherPathRuleUrlRedirectArgs',
    'RegionUrlMapPathMatcherRouteRuleArgs',
    'RegionUrlMapPathMatcherRouteRuleHeaderActionArgs',
    'RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs',
    'RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs',
    'RegionUrlMapPathMatcherRouteRuleMatchRuleArgs',
    'RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs',
    'RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs',
    'RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs',
    'RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs',
    'RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs',
    'RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs',
    'RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs',
    'RegionUrlMapTestArgs',
    'ReservationSpecificReservationArgs',
    'ReservationSpecificReservationInstancePropertiesArgs',
    'ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs',
    'ReservationSpecificReservationInstancePropertiesLocalSsdArgs',
    'ResourcePolicyGroupPlacementPolicyArgs',
    'ResourcePolicySnapshotSchedulePolicyArgs',
    'ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs',
    'ResourcePolicySnapshotSchedulePolicyScheduleArgs',
    'ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs',
    'ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs',
    'ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs',
    'ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs',
    'ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs',
    'RouterBgpArgs',
    'RouterBgpAdvertisedIpRangeArgs',
    'RouterNatLogConfigArgs',
    'RouterNatSubnetworkArgs',
    'RouterPeerAdvertisedIpRangeArgs',
    'SecurityPolicyRuleArgs',
    'SecurityPolicyRuleMatchArgs',
    'SecurityPolicyRuleMatchConfigArgs',
    'SecurityPolicyRuleMatchExprArgs',
    'SecurityScanConfigAuthenticationArgs',
    'SecurityScanConfigAuthenticationCustomAccountArgs',
    'SecurityScanConfigAuthenticationGoogleAccountArgs',
    'SecurityScanConfigScheduleArgs',
    'SnapshotSnapshotEncryptionKeyArgs',
    'SnapshotSourceDiskEncryptionKeyArgs',
    'SubnetworkIAMBindingConditionArgs',
    'SubnetworkIAMMemberConditionArgs',
    'SubnetworkLogConfigArgs',
    'SubnetworkSecondaryIpRangeArgs',
    'URLMapDefaultRouteActionArgs',
    'URLMapDefaultRouteActionCorsPolicyArgs',
    'URLMapDefaultRouteActionFaultInjectionPolicyArgs',
    'URLMapDefaultRouteActionFaultInjectionPolicyAbortArgs',
    'URLMapDefaultRouteActionFaultInjectionPolicyDelayArgs',
    'URLMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs',
    'URLMapDefaultRouteActionRequestMirrorPolicyArgs',
    'URLMapDefaultRouteActionRetryPolicyArgs',
    'URLMapDefaultRouteActionRetryPolicyPerTryTimeoutArgs',
    'URLMapDefaultRouteActionTimeoutArgs',
    'URLMapDefaultRouteActionUrlRewriteArgs',
    'URLMapDefaultRouteActionWeightedBackendServiceArgs',
    'URLMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs',
    'URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs',
    'URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs',
    'URLMapDefaultUrlRedirectArgs',
    'URLMapHeaderActionArgs',
    'URLMapHeaderActionRequestHeadersToAddArgs',
    'URLMapHeaderActionResponseHeadersToAddArgs',
    'URLMapHostRuleArgs',
    'URLMapPathMatcherArgs',
    'URLMapPathMatcherDefaultRouteActionArgs',
    'URLMapPathMatcherDefaultRouteActionCorsPolicyArgs',
    'URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyArgs',
    'URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs',
    'URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayArgs',
    'URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs',
    'URLMapPathMatcherDefaultRouteActionRequestMirrorPolicyArgs',
    'URLMapPathMatcherDefaultRouteActionRetryPolicyArgs',
    'URLMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutArgs',
    'URLMapPathMatcherDefaultRouteActionTimeoutArgs',
    'URLMapPathMatcherDefaultRouteActionUrlRewriteArgs',
    'URLMapPathMatcherDefaultRouteActionWeightedBackendServiceArgs',
    'URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionArgs',
    'URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs',
    'URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs',
    'URLMapPathMatcherDefaultUrlRedirectArgs',
    'URLMapPathMatcherHeaderActionArgs',
    'URLMapPathMatcherHeaderActionRequestHeadersToAddArgs',
    'URLMapPathMatcherHeaderActionResponseHeadersToAddArgs',
    'URLMapPathMatcherPathRuleArgs',
    'URLMapPathMatcherPathRuleRouteActionArgs',
    'URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs',
    'URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs',
    'URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs',
    'URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs',
    'URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs',
    'URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs',
    'URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs',
    'URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs',
    'URLMapPathMatcherPathRuleRouteActionTimeoutArgs',
    'URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs',
    'URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs',
    'URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs',
    'URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs',
    'URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs',
    'URLMapPathMatcherPathRuleUrlRedirectArgs',
    'URLMapPathMatcherRouteRuleArgs',
    'URLMapPathMatcherRouteRuleHeaderActionArgs',
    'URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs',
    'URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs',
    'URLMapPathMatcherRouteRuleMatchRuleArgs',
    'URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs',
    'URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs',
    'URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs',
    'URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs',
    'URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs',
    'URLMapPathMatcherRouteRuleRouteActionArgs',
    'URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs',
    'URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs',
    'URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs',
    'URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs',
    'URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs',
    'URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs',
    'URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs',
    'URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs',
    'URLMapPathMatcherRouteRuleRouteActionTimeoutArgs',
    'URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs',
    'URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs',
    'URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs',
    'URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs',
    'URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs',
    'URLMapPathMatcherRouteRuleUrlRedirectArgs',
    'URLMapTestArgs',
]

@pulumi.input_type
class AutoscalarAutoscalingPolicyArgs:
    def __init__(__self__, *,
                 max_replicas: pulumi.Input[float],
                 min_replicas: pulumi.Input[float],
                 cooldown_period: Optional[pulumi.Input[float]] = None,
                 cpu_utilization: Optional[pulumi.Input['AutoscalarAutoscalingPolicyCpuUtilizationArgs']] = None,
                 load_balancing_utilization: Optional[pulumi.Input['AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs']] = None,
                 metrics: Optional[pulumi.Input[List[pulumi.Input['AutoscalarAutoscalingPolicyMetricArgs']]]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 scale_down_control: Optional[pulumi.Input['AutoscalarAutoscalingPolicyScaleDownControlArgs']] = None):
        """
        :param pulumi.Input[float] max_replicas: The maximum number of instances that the autoscaler can scale up
               to. This is required when creating or updating an autoscaler. The
               maximum number of replicas should not be lower than minimal number
               of replicas.
        :param pulumi.Input[float] min_replicas: The minimum number of replicas that the autoscaler can scale down
               to. This cannot be less than 0. If not provided, autoscaler will
               choose a default value depending on maximum number of instances
               allowed.
        :param pulumi.Input[float] cooldown_period: The number of seconds that the autoscaler should wait before it
               starts collecting information from a new instance. This prevents
               the autoscaler from collecting information when the instance is
               initializing, during which the collected usage would not be
               reliable. The default time autoscaler waits is 60 seconds.
               Virtual machine initialization times might vary because of
               numerous factors. We recommend that you test how long an
               instance may take to initialize. To do this, create an instance
               and time the startup process.
        :param pulumi.Input['AutoscalarAutoscalingPolicyCpuUtilizationArgs'] cpu_utilization: Defines the CPU utilization policy that allows the autoscaler to
               scale based on the average CPU utilization of a managed instance
               group.
               Structure is documented below.
        :param pulumi.Input['AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs'] load_balancing_utilization: Configuration parameters of autoscaling based on a load balancer.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['AutoscalarAutoscalingPolicyMetricArgs']]] metrics: Configuration parameters of autoscaling based on a custom metric.
               Structure is documented below.
        :param pulumi.Input[str] mode: Defines operating mode for this policy.
               Default value is `ON`.
               Possible values are `OFF`, `ONLY_UP`, and `ON`.
        """
        pulumi.set(__self__, "maxReplicas", max_replicas)
        pulumi.set(__self__, "minReplicas", min_replicas)
        pulumi.set(__self__, "cooldownPeriod", cooldown_period)
        pulumi.set(__self__, "cpuUtilization", cpu_utilization)
        pulumi.set(__self__, "loadBalancingUtilization", load_balancing_utilization)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "scaleDownControl", scale_down_control)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[float]:
        """
        The maximum number of instances that the autoscaler can scale up
        to. This is required when creating or updating an autoscaler. The
        maximum number of replicas should not be lower than minimal number
        of replicas.
        """
        ...

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[float]:
        """
        The minimum number of replicas that the autoscaler can scale down
        to. This cannot be less than 0. If not provided, autoscaler will
        choose a default value depending on maximum number of instances
        allowed.
        """
        ...

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> Optional[pulumi.Input[float]]:
        """
        The number of seconds that the autoscaler should wait before it
        starts collecting information from a new instance. This prevents
        the autoscaler from collecting information when the instance is
        initializing, during which the collected usage would not be
        reliable. The default time autoscaler waits is 60 seconds.
        Virtual machine initialization times might vary because of
        numerous factors. We recommend that you test how long an
        instance may take to initialize. To do this, create an instance
        and time the startup process.
        """
        ...

    @cooldown_period.setter
    def cooldown_period(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="cpuUtilization")
    def cpu_utilization(self) -> Optional[pulumi.Input['AutoscalarAutoscalingPolicyCpuUtilizationArgs']]:
        """
        Defines the CPU utilization policy that allows the autoscaler to
        scale based on the average CPU utilization of a managed instance
        group.
        Structure is documented below.
        """
        ...

    @cpu_utilization.setter
    def cpu_utilization(self, value: Optional[pulumi.Input['AutoscalarAutoscalingPolicyCpuUtilizationArgs']]):
        ...

    @property
    @pulumi.getter(name="loadBalancingUtilization")
    def load_balancing_utilization(self) -> Optional[pulumi.Input['AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs']]:
        """
        Configuration parameters of autoscaling based on a load balancer.
        Structure is documented below.
        """
        ...

    @load_balancing_utilization.setter
    def load_balancing_utilization(self, value: Optional[pulumi.Input['AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs']]):
        ...

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[List[pulumi.Input['AutoscalarAutoscalingPolicyMetricArgs']]]]:
        """
        Configuration parameters of autoscaling based on a custom metric.
        Structure is documented below.
        """
        ...

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[List[pulumi.Input['AutoscalarAutoscalingPolicyMetricArgs']]]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Defines operating mode for this policy.
        Default value is `ON`.
        Possible values are `OFF`, `ONLY_UP`, and `ON`.
        """
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="scaleDownControl")
    def scale_down_control(self) -> Optional[pulumi.Input['AutoscalarAutoscalingPolicyScaleDownControlArgs']]:
        ...

    @scale_down_control.setter
    def scale_down_control(self, value: Optional[pulumi.Input['AutoscalarAutoscalingPolicyScaleDownControlArgs']]):
        ...


@pulumi.input_type
class AutoscalarAutoscalingPolicyCpuUtilizationArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float]):
        """
        :param pulumi.Input[float] target: Fraction of backend capacity utilization (set in HTTP(s) load
               balancing configuration) that autoscaler should maintain. Must
               be a positive float value. If not defined, the default is 0.8.
        """
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        Fraction of backend capacity utilization (set in HTTP(s) load
        balancing configuration) that autoscaler should maintain. Must
        be a positive float value. If not defined, the default is 0.8.
        """
        ...

    @target.setter
    def target(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float]):
        """
        :param pulumi.Input[float] target: Fraction of backend capacity utilization (set in HTTP(s) load
               balancing configuration) that autoscaler should maintain. Must
               be a positive float value. If not defined, the default is 0.8.
        """
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        Fraction of backend capacity utilization (set in HTTP(s) load
        balancing configuration) that autoscaler should maintain. Must
        be a positive float value. If not defined, the default is 0.8.
        """
        ...

    @target.setter
    def target(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class AutoscalarAutoscalingPolicyMetricArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 filter: Optional[pulumi.Input[str]] = None,
                 single_instance_assignment: Optional[pulumi.Input[float]] = None,
                 target: Optional[pulumi.Input[float]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier (type) of the Stackdriver Monitoring metric.
               The metric cannot have negative values.
               The metric must have a value type of INT64 or DOUBLE.
        :param pulumi.Input[str] filter: A filter string to be used as the filter string for
               a Stackdriver Monitoring TimeSeries.list API call.
               This filter is used to select a specific TimeSeries for
               the purpose of autoscaling and to determine whether the metric
               is exporting per-instance or per-group data.
               You can only use the AND operator for joining selectors.
               You can only use direct equality comparison operator (=) without
               any functions for each selector.
               You can specify the metric in both the filter string and in the
               metric field. However, if specified in both places, the metric must
               be identical.
               The monitored resource type determines what kind of values are
               expected for the metric. If it is a gce_instance, the autoscaler
               expects the metric to include a separate TimeSeries for each
               instance in a group. In such a case, you cannot filter on resource
               labels.
               If the resource type is any other value, the autoscaler expects
               this metric to contain values that apply to the entire autoscaled
               instance group and resource label filtering can be performed to
               point autoscaler at the correct TimeSeries to scale upon.
               This is called a per-group metric for the purpose of autoscaling.
               If not specified, the type defaults to gce_instance.
               You should provide a filter that is selective enough to pick just
               one TimeSeries for the autoscaled group or for each of the instances
               (if you are using gce_instance resource type). If multiple
               TimeSeries are returned upon the query execution, the autoscaler
               will sum their respective values to obtain its scaling value.
        :param pulumi.Input[float] single_instance_assignment: If scaling is based on a per-group metric value that represents the
               total amount of work to be done or resource usage, set this value to
               an amount assigned for a single instance of the scaled group.
               The autoscaler will keep the number of instances proportional to the
               value of this metric, the metric itself should not change value due
               to group resizing.
               For example, a good metric to use with the target is
               `pubsub.googleapis.com/subscription/num_undelivered_messages`
               or a custom metric exporting the total number of requests coming to
               your instances.
               A bad example would be a metric exporting an average or median
               latency, since this value can't include a chunk assignable to a
               single instance, it could be better used with utilization_target
               instead.
        :param pulumi.Input[float] target: Fraction of backend capacity utilization (set in HTTP(s) load
               balancing configuration) that autoscaler should maintain. Must
               be a positive float value. If not defined, the default is 0.8.
        :param pulumi.Input[str] type: Defines how target utilization value is expressed for a
               Stackdriver Monitoring metric.
               Possible values are `GAUGE`, `DELTA_PER_SECOND`, and `DELTA_PER_MINUTE`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "singleInstanceAssignment", single_instance_assignment)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier (type) of the Stackdriver Monitoring metric.
        The metric cannot have negative values.
        The metric must have a value type of INT64 or DOUBLE.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter string to be used as the filter string for
        a Stackdriver Monitoring TimeSeries.list API call.
        This filter is used to select a specific TimeSeries for
        the purpose of autoscaling and to determine whether the metric
        is exporting per-instance or per-group data.
        You can only use the AND operator for joining selectors.
        You can only use direct equality comparison operator (=) without
        any functions for each selector.
        You can specify the metric in both the filter string and in the
        metric field. However, if specified in both places, the metric must
        be identical.
        The monitored resource type determines what kind of values are
        expected for the metric. If it is a gce_instance, the autoscaler
        expects the metric to include a separate TimeSeries for each
        instance in a group. In such a case, you cannot filter on resource
        labels.
        If the resource type is any other value, the autoscaler expects
        this metric to contain values that apply to the entire autoscaled
        instance group and resource label filtering can be performed to
        point autoscaler at the correct TimeSeries to scale upon.
        This is called a per-group metric for the purpose of autoscaling.
        If not specified, the type defaults to gce_instance.
        You should provide a filter that is selective enough to pick just
        one TimeSeries for the autoscaled group or for each of the instances
        (if you are using gce_instance resource type). If multiple
        TimeSeries are returned upon the query execution, the autoscaler
        will sum their respective values to obtain its scaling value.
        """
        ...

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="singleInstanceAssignment")
    def single_instance_assignment(self) -> Optional[pulumi.Input[float]]:
        """
        If scaling is based on a per-group metric value that represents the
        total amount of work to be done or resource usage, set this value to
        an amount assigned for a single instance of the scaled group.
        The autoscaler will keep the number of instances proportional to the
        value of this metric, the metric itself should not change value due
        to group resizing.
        For example, a good metric to use with the target is
        `pubsub.googleapis.com/subscription/num_undelivered_messages`
        or a custom metric exporting the total number of requests coming to
        your instances.
        A bad example would be a metric exporting an average or median
        latency, since this value can't include a chunk assignable to a
        single instance, it could be better used with utilization_target
        instead.
        """
        ...

    @single_instance_assignment.setter
    def single_instance_assignment(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[float]]:
        """
        Fraction of backend capacity utilization (set in HTTP(s) load
        balancing configuration) that autoscaler should maintain. Must
        be a positive float value. If not defined, the default is 0.8.
        """
        ...

    @target.setter
    def target(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Defines how target utilization value is expressed for a
        Stackdriver Monitoring metric.
        Possible values are `GAUGE`, `DELTA_PER_SECOND`, and `DELTA_PER_MINUTE`.
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class AutoscalarAutoscalingPolicyScaleDownControlArgs:
    def __init__(__self__, *,
                 max_scaled_down_replicas: Optional[pulumi.Input['AutoscalarAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs']] = None,
                 time_window_sec: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['AutoscalarAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs'] max_scaled_down_replicas: A nested object resource
               Structure is documented below.
        :param pulumi.Input[float] time_window_sec: How long back autoscaling should look when computing recommendations
               to include directives regarding slower scale down, as described above.
        """
        pulumi.set(__self__, "maxScaledDownReplicas", max_scaled_down_replicas)
        pulumi.set(__self__, "timeWindowSec", time_window_sec)

    @property
    @pulumi.getter(name="maxScaledDownReplicas")
    def max_scaled_down_replicas(self) -> Optional[pulumi.Input['AutoscalarAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs']]:
        """
        A nested object resource
        Structure is documented below.
        """
        ...

    @max_scaled_down_replicas.setter
    def max_scaled_down_replicas(self, value: Optional[pulumi.Input['AutoscalarAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs']]):
        ...

    @property
    @pulumi.getter(name="timeWindowSec")
    def time_window_sec(self) -> Optional[pulumi.Input[float]]:
        """
        How long back autoscaling should look when computing recommendations
        to include directives regarding slower scale down, as described above.
        """
        ...

    @time_window_sec.setter
    def time_window_sec(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class AutoscalarAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs:
    def __init__(__self__, *,
                 fixed: Optional[pulumi.Input[float]] = None,
                 percent: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] fixed: Specifies a fixed number of VM instances. This must be a positive
               integer.
        :param pulumi.Input[float] percent: Specifies a percentage of instances between 0 to 100%, inclusive.
               For example, specify 80 for 80%.
        """
        pulumi.set(__self__, "fixed", fixed)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def fixed(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies a fixed number of VM instances. This must be a positive
        integer.
        """
        ...

    @fixed.setter
    def fixed(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies a percentage of instances between 0 to 100%, inclusive.
        For example, specify 80 for 80%.
        """
        ...

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class AutoscalerAutoscalingPolicyArgs:
    def __init__(__self__, *,
                 max_replicas: pulumi.Input[float],
                 min_replicas: pulumi.Input[float],
                 cooldown_period: Optional[pulumi.Input[float]] = None,
                 cpu_utilization: Optional[pulumi.Input['AutoscalerAutoscalingPolicyCpuUtilizationArgs']] = None,
                 load_balancing_utilization: Optional[pulumi.Input['AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs']] = None,
                 metrics: Optional[pulumi.Input[List[pulumi.Input['AutoscalerAutoscalingPolicyMetricArgs']]]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 scale_down_control: Optional[pulumi.Input['AutoscalerAutoscalingPolicyScaleDownControlArgs']] = None):
        """
        :param pulumi.Input[float] max_replicas: The maximum number of instances that the autoscaler can scale up
               to. This is required when creating or updating an autoscaler. The
               maximum number of replicas should not be lower than minimal number
               of replicas.
        :param pulumi.Input[float] min_replicas: The minimum number of replicas that the autoscaler can scale down
               to. This cannot be less than 0. If not provided, autoscaler will
               choose a default value depending on maximum number of instances
               allowed.
        :param pulumi.Input[float] cooldown_period: The number of seconds that the autoscaler should wait before it
               starts collecting information from a new instance. This prevents
               the autoscaler from collecting information when the instance is
               initializing, during which the collected usage would not be
               reliable. The default time autoscaler waits is 60 seconds.
               Virtual machine initialization times might vary because of
               numerous factors. We recommend that you test how long an
               instance may take to initialize. To do this, create an instance
               and time the startup process.
        :param pulumi.Input['AutoscalerAutoscalingPolicyCpuUtilizationArgs'] cpu_utilization: Defines the CPU utilization policy that allows the autoscaler to
               scale based on the average CPU utilization of a managed instance
               group.
               Structure is documented below.
        :param pulumi.Input['AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs'] load_balancing_utilization: Configuration parameters of autoscaling based on a load balancer.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['AutoscalerAutoscalingPolicyMetricArgs']]] metrics: Configuration parameters of autoscaling based on a custom metric.
               Structure is documented below.
        :param pulumi.Input[str] mode: Defines operating mode for this policy.
               Default value is `ON`.
               Possible values are `OFF`, `ONLY_UP`, and `ON`.
        """
        pulumi.set(__self__, "maxReplicas", max_replicas)
        pulumi.set(__self__, "minReplicas", min_replicas)
        pulumi.set(__self__, "cooldownPeriod", cooldown_period)
        pulumi.set(__self__, "cpuUtilization", cpu_utilization)
        pulumi.set(__self__, "loadBalancingUtilization", load_balancing_utilization)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "scaleDownControl", scale_down_control)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[float]:
        """
        The maximum number of instances that the autoscaler can scale up
        to. This is required when creating or updating an autoscaler. The
        maximum number of replicas should not be lower than minimal number
        of replicas.
        """
        ...

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[float]:
        """
        The minimum number of replicas that the autoscaler can scale down
        to. This cannot be less than 0. If not provided, autoscaler will
        choose a default value depending on maximum number of instances
        allowed.
        """
        ...

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> Optional[pulumi.Input[float]]:
        """
        The number of seconds that the autoscaler should wait before it
        starts collecting information from a new instance. This prevents
        the autoscaler from collecting information when the instance is
        initializing, during which the collected usage would not be
        reliable. The default time autoscaler waits is 60 seconds.
        Virtual machine initialization times might vary because of
        numerous factors. We recommend that you test how long an
        instance may take to initialize. To do this, create an instance
        and time the startup process.
        """
        ...

    @cooldown_period.setter
    def cooldown_period(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="cpuUtilization")
    def cpu_utilization(self) -> Optional[pulumi.Input['AutoscalerAutoscalingPolicyCpuUtilizationArgs']]:
        """
        Defines the CPU utilization policy that allows the autoscaler to
        scale based on the average CPU utilization of a managed instance
        group.
        Structure is documented below.
        """
        ...

    @cpu_utilization.setter
    def cpu_utilization(self, value: Optional[pulumi.Input['AutoscalerAutoscalingPolicyCpuUtilizationArgs']]):
        ...

    @property
    @pulumi.getter(name="loadBalancingUtilization")
    def load_balancing_utilization(self) -> Optional[pulumi.Input['AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs']]:
        """
        Configuration parameters of autoscaling based on a load balancer.
        Structure is documented below.
        """
        ...

    @load_balancing_utilization.setter
    def load_balancing_utilization(self, value: Optional[pulumi.Input['AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs']]):
        ...

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[List[pulumi.Input['AutoscalerAutoscalingPolicyMetricArgs']]]]:
        """
        Configuration parameters of autoscaling based on a custom metric.
        Structure is documented below.
        """
        ...

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[List[pulumi.Input['AutoscalerAutoscalingPolicyMetricArgs']]]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Defines operating mode for this policy.
        Default value is `ON`.
        Possible values are `OFF`, `ONLY_UP`, and `ON`.
        """
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="scaleDownControl")
    def scale_down_control(self) -> Optional[pulumi.Input['AutoscalerAutoscalingPolicyScaleDownControlArgs']]:
        ...

    @scale_down_control.setter
    def scale_down_control(self, value: Optional[pulumi.Input['AutoscalerAutoscalingPolicyScaleDownControlArgs']]):
        ...


@pulumi.input_type
class AutoscalerAutoscalingPolicyCpuUtilizationArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float]):
        """
        :param pulumi.Input[float] target: Fraction of backend capacity utilization (set in HTTP(s) load
               balancing configuration) that autoscaler should maintain. Must
               be a positive float value. If not defined, the default is 0.8.
        """
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        Fraction of backend capacity utilization (set in HTTP(s) load
        balancing configuration) that autoscaler should maintain. Must
        be a positive float value. If not defined, the default is 0.8.
        """
        ...

    @target.setter
    def target(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float]):
        """
        :param pulumi.Input[float] target: Fraction of backend capacity utilization (set in HTTP(s) load
               balancing configuration) that autoscaler should maintain. Must
               be a positive float value. If not defined, the default is 0.8.
        """
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        Fraction of backend capacity utilization (set in HTTP(s) load
        balancing configuration) that autoscaler should maintain. Must
        be a positive float value. If not defined, the default is 0.8.
        """
        ...

    @target.setter
    def target(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class AutoscalerAutoscalingPolicyMetricArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 filter: Optional[pulumi.Input[str]] = None,
                 single_instance_assignment: Optional[pulumi.Input[float]] = None,
                 target: Optional[pulumi.Input[float]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier (type) of the Stackdriver Monitoring metric.
               The metric cannot have negative values.
               The metric must have a value type of INT64 or DOUBLE.
        :param pulumi.Input[str] filter: A filter string to be used as the filter string for
               a Stackdriver Monitoring TimeSeries.list API call.
               This filter is used to select a specific TimeSeries for
               the purpose of autoscaling and to determine whether the metric
               is exporting per-instance or per-group data.
               You can only use the AND operator for joining selectors.
               You can only use direct equality comparison operator (=) without
               any functions for each selector.
               You can specify the metric in both the filter string and in the
               metric field. However, if specified in both places, the metric must
               be identical.
               The monitored resource type determines what kind of values are
               expected for the metric. If it is a gce_instance, the autoscaler
               expects the metric to include a separate TimeSeries for each
               instance in a group. In such a case, you cannot filter on resource
               labels.
               If the resource type is any other value, the autoscaler expects
               this metric to contain values that apply to the entire autoscaled
               instance group and resource label filtering can be performed to
               point autoscaler at the correct TimeSeries to scale upon.
               This is called a per-group metric for the purpose of autoscaling.
               If not specified, the type defaults to gce_instance.
               You should provide a filter that is selective enough to pick just
               one TimeSeries for the autoscaled group or for each of the instances
               (if you are using gce_instance resource type). If multiple
               TimeSeries are returned upon the query execution, the autoscaler
               will sum their respective values to obtain its scaling value.
        :param pulumi.Input[float] single_instance_assignment: If scaling is based on a per-group metric value that represents the
               total amount of work to be done or resource usage, set this value to
               an amount assigned for a single instance of the scaled group.
               The autoscaler will keep the number of instances proportional to the
               value of this metric, the metric itself should not change value due
               to group resizing.
               For example, a good metric to use with the target is
               `pubsub.googleapis.com/subscription/num_undelivered_messages`
               or a custom metric exporting the total number of requests coming to
               your instances.
               A bad example would be a metric exporting an average or median
               latency, since this value can't include a chunk assignable to a
               single instance, it could be better used with utilization_target
               instead.
        :param pulumi.Input[float] target: Fraction of backend capacity utilization (set in HTTP(s) load
               balancing configuration) that autoscaler should maintain. Must
               be a positive float value. If not defined, the default is 0.8.
        :param pulumi.Input[str] type: Defines how target utilization value is expressed for a
               Stackdriver Monitoring metric.
               Possible values are `GAUGE`, `DELTA_PER_SECOND`, and `DELTA_PER_MINUTE`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "singleInstanceAssignment", single_instance_assignment)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier (type) of the Stackdriver Monitoring metric.
        The metric cannot have negative values.
        The metric must have a value type of INT64 or DOUBLE.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter string to be used as the filter string for
        a Stackdriver Monitoring TimeSeries.list API call.
        This filter is used to select a specific TimeSeries for
        the purpose of autoscaling and to determine whether the metric
        is exporting per-instance or per-group data.
        You can only use the AND operator for joining selectors.
        You can only use direct equality comparison operator (=) without
        any functions for each selector.
        You can specify the metric in both the filter string and in the
        metric field. However, if specified in both places, the metric must
        be identical.
        The monitored resource type determines what kind of values are
        expected for the metric. If it is a gce_instance, the autoscaler
        expects the metric to include a separate TimeSeries for each
        instance in a group. In such a case, you cannot filter on resource
        labels.
        If the resource type is any other value, the autoscaler expects
        this metric to contain values that apply to the entire autoscaled
        instance group and resource label filtering can be performed to
        point autoscaler at the correct TimeSeries to scale upon.
        This is called a per-group metric for the purpose of autoscaling.
        If not specified, the type defaults to gce_instance.
        You should provide a filter that is selective enough to pick just
        one TimeSeries for the autoscaled group or for each of the instances
        (if you are using gce_instance resource type). If multiple
        TimeSeries are returned upon the query execution, the autoscaler
        will sum their respective values to obtain its scaling value.
        """
        ...

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="singleInstanceAssignment")
    def single_instance_assignment(self) -> Optional[pulumi.Input[float]]:
        """
        If scaling is based on a per-group metric value that represents the
        total amount of work to be done or resource usage, set this value to
        an amount assigned for a single instance of the scaled group.
        The autoscaler will keep the number of instances proportional to the
        value of this metric, the metric itself should not change value due
        to group resizing.
        For example, a good metric to use with the target is
        `pubsub.googleapis.com/subscription/num_undelivered_messages`
        or a custom metric exporting the total number of requests coming to
        your instances.
        A bad example would be a metric exporting an average or median
        latency, since this value can't include a chunk assignable to a
        single instance, it could be better used with utilization_target
        instead.
        """
        ...

    @single_instance_assignment.setter
    def single_instance_assignment(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[float]]:
        """
        Fraction of backend capacity utilization (set in HTTP(s) load
        balancing configuration) that autoscaler should maintain. Must
        be a positive float value. If not defined, the default is 0.8.
        """
        ...

    @target.setter
    def target(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Defines how target utilization value is expressed for a
        Stackdriver Monitoring metric.
        Possible values are `GAUGE`, `DELTA_PER_SECOND`, and `DELTA_PER_MINUTE`.
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class AutoscalerAutoscalingPolicyScaleDownControlArgs:
    def __init__(__self__, *,
                 max_scaled_down_replicas: Optional[pulumi.Input['AutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs']] = None,
                 time_window_sec: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['AutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs'] max_scaled_down_replicas: A nested object resource
               Structure is documented below.
        :param pulumi.Input[float] time_window_sec: How long back autoscaling should look when computing recommendations
               to include directives regarding slower scale down, as described above.
        """
        pulumi.set(__self__, "maxScaledDownReplicas", max_scaled_down_replicas)
        pulumi.set(__self__, "timeWindowSec", time_window_sec)

    @property
    @pulumi.getter(name="maxScaledDownReplicas")
    def max_scaled_down_replicas(self) -> Optional[pulumi.Input['AutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs']]:
        """
        A nested object resource
        Structure is documented below.
        """
        ...

    @max_scaled_down_replicas.setter
    def max_scaled_down_replicas(self, value: Optional[pulumi.Input['AutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs']]):
        ...

    @property
    @pulumi.getter(name="timeWindowSec")
    def time_window_sec(self) -> Optional[pulumi.Input[float]]:
        """
        How long back autoscaling should look when computing recommendations
        to include directives regarding slower scale down, as described above.
        """
        ...

    @time_window_sec.setter
    def time_window_sec(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class AutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs:
    def __init__(__self__, *,
                 fixed: Optional[pulumi.Input[float]] = None,
                 percent: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] fixed: Specifies a fixed number of VM instances. This must be a positive
               integer.
        :param pulumi.Input[float] percent: Specifies a percentage of instances between 0 to 100%, inclusive.
               For example, specify 80 for 80%.
        """
        pulumi.set(__self__, "fixed", fixed)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def fixed(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies a fixed number of VM instances. This must be a positive
        integer.
        """
        ...

    @fixed.setter
    def fixed(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies a percentage of instances between 0 to 100%, inclusive.
        For example, specify 80 for 80%.
        """
        ...

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendBucketCdnPolicyArgs:
    def __init__(__self__, *,
                 signed_url_cache_max_age_sec: pulumi.Input[float]):
        """
        :param pulumi.Input[float] signed_url_cache_max_age_sec: Maximum number of seconds the response to a signed URL request will
               be considered fresh. After this time period,
               the response will be revalidated before being served.
               When serving responses to signed URL requests,
               Cloud CDN will internally behave as though
               all responses from this backend had a "Cache-Control: public,
               max-age=[TTL]" header, regardless of any existing Cache-Control
               header. The actual headers served in responses will not be altered.
        """
        pulumi.set(__self__, "signedUrlCacheMaxAgeSec", signed_url_cache_max_age_sec)

    @property
    @pulumi.getter(name="signedUrlCacheMaxAgeSec")
    def signed_url_cache_max_age_sec(self) -> pulumi.Input[float]:
        """
        Maximum number of seconds the response to a signed URL request will
        be considered fresh. After this time period,
        the response will be revalidated before being served.
        When serving responses to signed URL requests,
        Cloud CDN will internally behave as though
        all responses from this backend had a "Cache-Control: public,
        max-age=[TTL]" header, regardless of any existing Cache-Control
        header. The actual headers served in responses will not be altered.
        """
        ...

    @signed_url_cache_max_age_sec.setter
    def signed_url_cache_max_age_sec(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class BackendServiceBackendArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 balancing_mode: Optional[pulumi.Input[str]] = None,
                 capacity_scaler: Optional[pulumi.Input[float]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[float]] = None,
                 max_connections_per_endpoint: Optional[pulumi.Input[float]] = None,
                 max_connections_per_instance: Optional[pulumi.Input[float]] = None,
                 max_rate: Optional[pulumi.Input[float]] = None,
                 max_rate_per_endpoint: Optional[pulumi.Input[float]] = None,
                 max_rate_per_instance: Optional[pulumi.Input[float]] = None,
                 max_utilization: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] group: The fully-qualified URL of an Instance Group or Network Endpoint
               Group resource. In case of instance group this defines the list
               of instances that serve traffic. Member virtual machine
               instances from each instance group must live in the same zone as
               the instance group itself. No two backends in a backend service
               are allowed to use same Instance Group resource.
               For Network Endpoint Groups this defines list of endpoints. All
               endpoints of Network Endpoint Group must be hosted on instances
               located in the same zone as the Network Endpoint Group.
               Backend services cannot mix Instance Group and
               Network Endpoint Group backends.
               Note that you must specify an Instance Group or Network Endpoint
               Group resource using the fully-qualified URL, rather than a
               partial URL.
        :param pulumi.Input[str] balancing_mode: Specifies the balancing mode for this backend.
               For global HTTP(S) or TCP/SSL load balancing, the default is
               UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
               and CONNECTION (for TCP/SSL).
               Default value is `UTILIZATION`.
               Possible values are `UTILIZATION`, `RATE`, and `CONNECTION`.
        :param pulumi.Input[float] capacity_scaler: A multiplier applied to the group's maximum servicing capacity
               (based on UTILIZATION, RATE or CONNECTION).
               Default value is 1, which means the group will serve up to 100%
               of its configured capacity (depending on balancingMode). A
               setting of 0 means the group is completely drained, offering
               0% of its available Capacity. Valid range is [0.0,1.0].
        :param pulumi.Input[str] description: An optional description of this resource.
               Provide this property when you create the resource.
        :param pulumi.Input[float] max_connections: The maximum number of connections to the backend cluster.
               Defaults to 1024.
        :param pulumi.Input[float] max_connections_per_endpoint: The max number of simultaneous connections that a single backend
               network endpoint can handle. This is used to calculate the
               capacity of the group. Can be used in either CONNECTION or
               UTILIZATION balancing modes.
               For CONNECTION mode, either
               maxConnections or maxConnectionsPerEndpoint must be set.
        :param pulumi.Input[float] max_connections_per_instance: The max number of simultaneous connections that a single
               backend instance can handle. This is used to calculate the
               capacity of the group. Can be used in either CONNECTION or
               UTILIZATION balancing modes.
               For CONNECTION mode, either maxConnections or
               maxConnectionsPerInstance must be set.
        :param pulumi.Input[float] max_rate: The max requests per second (RPS) of the group.
               Can be used with either RATE or UTILIZATION balancing modes,
               but required if RATE mode. For RATE mode, either maxRate or one
               of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
               group type, must be set.
        :param pulumi.Input[float] max_rate_per_endpoint: The max requests per second (RPS) that a single backend network
               endpoint can handle. This is used to calculate the capacity of
               the group. Can be used in either balancing mode. For RATE mode,
               either maxRate or maxRatePerEndpoint must be set.
        :param pulumi.Input[float] max_rate_per_instance: The max requests per second (RPS) that a single backend
               instance can handle. This is used to calculate the capacity of
               the group. Can be used in either balancing mode. For RATE mode,
               either maxRate or maxRatePerInstance must be set.
        :param pulumi.Input[float] max_utilization: Used when balancingMode is UTILIZATION. This ratio defines the
               CPU utilization target for the group. The default is 0.8. Valid
               range is [0.0, 1.0].
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "balancingMode", balancing_mode)
        pulumi.set(__self__, "capacityScaler", capacity_scaler)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "maxConnections", max_connections)
        pulumi.set(__self__, "maxConnectionsPerEndpoint", max_connections_per_endpoint)
        pulumi.set(__self__, "maxConnectionsPerInstance", max_connections_per_instance)
        pulumi.set(__self__, "maxRate", max_rate)
        pulumi.set(__self__, "maxRatePerEndpoint", max_rate_per_endpoint)
        pulumi.set(__self__, "maxRatePerInstance", max_rate_per_instance)
        pulumi.set(__self__, "maxUtilization", max_utilization)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        The fully-qualified URL of an Instance Group or Network Endpoint
        Group resource. In case of instance group this defines the list
        of instances that serve traffic. Member virtual machine
        instances from each instance group must live in the same zone as
        the instance group itself. No two backends in a backend service
        are allowed to use same Instance Group resource.
        For Network Endpoint Groups this defines list of endpoints. All
        endpoints of Network Endpoint Group must be hosted on instances
        located in the same zone as the Network Endpoint Group.
        Backend services cannot mix Instance Group and
        Network Endpoint Group backends.
        Note that you must specify an Instance Group or Network Endpoint
        Group resource using the fully-qualified URL, rather than a
        partial URL.
        """
        ...

    @group.setter
    def group(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="balancingMode")
    def balancing_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the balancing mode for this backend.
        For global HTTP(S) or TCP/SSL load balancing, the default is
        UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
        and CONNECTION (for TCP/SSL).
        Default value is `UTILIZATION`.
        Possible values are `UTILIZATION`, `RATE`, and `CONNECTION`.
        """
        ...

    @balancing_mode.setter
    def balancing_mode(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="capacityScaler")
    def capacity_scaler(self) -> Optional[pulumi.Input[float]]:
        """
        A multiplier applied to the group's maximum servicing capacity
        (based on UTILIZATION, RATE or CONNECTION).
        Default value is 1, which means the group will serve up to 100%
        of its configured capacity (depending on balancingMode). A
        setting of 0 means the group is completely drained, offering
        0% of its available Capacity. Valid range is [0.0,1.0].
        """
        ...

    @capacity_scaler.setter
    def capacity_scaler(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of this resource.
        Provide this property when you create the resource.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of connections to the backend cluster.
        Defaults to 1024.
        """
        ...

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxConnectionsPerEndpoint")
    def max_connections_per_endpoint(self) -> Optional[pulumi.Input[float]]:
        """
        The max number of simultaneous connections that a single backend
        network endpoint can handle. This is used to calculate the
        capacity of the group. Can be used in either CONNECTION or
        UTILIZATION balancing modes.
        For CONNECTION mode, either
        maxConnections or maxConnectionsPerEndpoint must be set.
        """
        ...

    @max_connections_per_endpoint.setter
    def max_connections_per_endpoint(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxConnectionsPerInstance")
    def max_connections_per_instance(self) -> Optional[pulumi.Input[float]]:
        """
        The max number of simultaneous connections that a single
        backend instance can handle. This is used to calculate the
        capacity of the group. Can be used in either CONNECTION or
        UTILIZATION balancing modes.
        For CONNECTION mode, either maxConnections or
        maxConnectionsPerInstance must be set.
        """
        ...

    @max_connections_per_instance.setter
    def max_connections_per_instance(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRate")
    def max_rate(self) -> Optional[pulumi.Input[float]]:
        """
        The max requests per second (RPS) of the group.
        Can be used with either RATE or UTILIZATION balancing modes,
        but required if RATE mode. For RATE mode, either maxRate or one
        of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        group type, must be set.
        """
        ...

    @max_rate.setter
    def max_rate(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRatePerEndpoint")
    def max_rate_per_endpoint(self) -> Optional[pulumi.Input[float]]:
        """
        The max requests per second (RPS) that a single backend network
        endpoint can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerEndpoint must be set.
        """
        ...

    @max_rate_per_endpoint.setter
    def max_rate_per_endpoint(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRatePerInstance")
    def max_rate_per_instance(self) -> Optional[pulumi.Input[float]]:
        """
        The max requests per second (RPS) that a single backend
        instance can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerInstance must be set.
        """
        ...

    @max_rate_per_instance.setter
    def max_rate_per_instance(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxUtilization")
    def max_utilization(self) -> Optional[pulumi.Input[float]]:
        """
        Used when balancingMode is UTILIZATION. This ratio defines the
        CPU utilization target for the group. The default is 0.8. Valid
        range is [0.0, 1.0].
        """
        ...

    @max_utilization.setter
    def max_utilization(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendServiceCdnPolicyArgs:
    def __init__(__self__, *,
                 cache_key_policy: Optional[pulumi.Input['BackendServiceCdnPolicyCacheKeyPolicyArgs']] = None,
                 signed_url_cache_max_age_sec: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['BackendServiceCdnPolicyCacheKeyPolicyArgs'] cache_key_policy: The CacheKeyPolicy for this CdnPolicy.
               Structure is documented below.
        :param pulumi.Input[float] signed_url_cache_max_age_sec: Maximum number of seconds the response to a signed URL request
               will be considered fresh, defaults to 1hr (3600s). After this
               time period, the response will be revalidated before
               being served.
               When serving responses to signed URL requests, Cloud CDN will
               internally behave as though all responses from this backend had a
               "Cache-Control: public, max-age=[TTL]" header, regardless of any
               existing Cache-Control header. The actual headers served in
               responses will not be altered.
        """
        pulumi.set(__self__, "cacheKeyPolicy", cache_key_policy)
        pulumi.set(__self__, "signedUrlCacheMaxAgeSec", signed_url_cache_max_age_sec)

    @property
    @pulumi.getter(name="cacheKeyPolicy")
    def cache_key_policy(self) -> Optional[pulumi.Input['BackendServiceCdnPolicyCacheKeyPolicyArgs']]:
        """
        The CacheKeyPolicy for this CdnPolicy.
        Structure is documented below.
        """
        ...

    @cache_key_policy.setter
    def cache_key_policy(self, value: Optional[pulumi.Input['BackendServiceCdnPolicyCacheKeyPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="signedUrlCacheMaxAgeSec")
    def signed_url_cache_max_age_sec(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum number of seconds the response to a signed URL request
        will be considered fresh, defaults to 1hr (3600s). After this
        time period, the response will be revalidated before
        being served.
        When serving responses to signed URL requests, Cloud CDN will
        internally behave as though all responses from this backend had a
        "Cache-Control: public, max-age=[TTL]" header, regardless of any
        existing Cache-Control header. The actual headers served in
        responses will not be altered.
        """
        ...

    @signed_url_cache_max_age_sec.setter
    def signed_url_cache_max_age_sec(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendServiceCdnPolicyCacheKeyPolicyArgs:
    def __init__(__self__, *,
                 include_host: Optional[pulumi.Input[bool]] = None,
                 include_protocol: Optional[pulumi.Input[bool]] = None,
                 include_query_string: Optional[pulumi.Input[bool]] = None,
                 query_string_blacklists: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 query_string_whitelists: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] include_host: If true requests to different hosts will be cached separately.
        :param pulumi.Input[bool] include_protocol: If true, http and https requests will be cached separately.
        :param pulumi.Input[bool] include_query_string: If true, include query string parameters in the cache key
               according to query_string_whitelist and
               query_string_blacklist. If neither is set, the entire query
               string will be included.
               If false, the query string will be excluded from the cache
               key entirely.
        :param pulumi.Input[List[pulumi.Input[str]]] query_string_blacklists: Names of query string parameters to exclude in cache keys.
               All other parameters will be included. Either specify
               query_string_whitelist or query_string_blacklist, not both.
               '&' and '=' will be percent encoded and not treated as
               delimiters.
        :param pulumi.Input[List[pulumi.Input[str]]] query_string_whitelists: Names of query string parameters to include in cache keys.
               All other parameters will be excluded. Either specify
               query_string_whitelist or query_string_blacklist, not both.
               '&' and '=' will be percent encoded and not treated as
               delimiters.
        """
        pulumi.set(__self__, "includeHost", include_host)
        pulumi.set(__self__, "includeProtocol", include_protocol)
        pulumi.set(__self__, "includeQueryString", include_query_string)
        pulumi.set(__self__, "queryStringBlacklists", query_string_blacklists)
        pulumi.set(__self__, "queryStringWhitelists", query_string_whitelists)

    @property
    @pulumi.getter(name="includeHost")
    def include_host(self) -> Optional[pulumi.Input[bool]]:
        """
        If true requests to different hosts will be cached separately.
        """
        ...

    @include_host.setter
    def include_host(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="includeProtocol")
    def include_protocol(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, http and https requests will be cached separately.
        """
        ...

    @include_protocol.setter
    def include_protocol(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="includeQueryString")
    def include_query_string(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, include query string parameters in the cache key
        according to query_string_whitelist and
        query_string_blacklist. If neither is set, the entire query
        string will be included.
        If false, the query string will be excluded from the cache
        key entirely.
        """
        ...

    @include_query_string.setter
    def include_query_string(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="queryStringBlacklists")
    def query_string_blacklists(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Names of query string parameters to exclude in cache keys.
        All other parameters will be included. Either specify
        query_string_whitelist or query_string_blacklist, not both.
        '&' and '=' will be percent encoded and not treated as
        delimiters.
        """
        ...

    @query_string_blacklists.setter
    def query_string_blacklists(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="queryStringWhitelists")
    def query_string_whitelists(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Names of query string parameters to include in cache keys.
        All other parameters will be excluded. Either specify
        query_string_whitelist or query_string_blacklist, not both.
        '&' and '=' will be percent encoded and not treated as
        delimiters.
        """
        ...

    @query_string_whitelists.setter
    def query_string_whitelists(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class BackendServiceCircuitBreakersArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input['BackendServiceCircuitBreakersConnectTimeoutArgs']] = None,
                 max_connections: Optional[pulumi.Input[float]] = None,
                 max_pending_requests: Optional[pulumi.Input[float]] = None,
                 max_requests: Optional[pulumi.Input[float]] = None,
                 max_requests_per_connection: Optional[pulumi.Input[float]] = None,
                 max_retries: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['BackendServiceCircuitBreakersConnectTimeoutArgs'] connect_timeout: The timeout for new network connections to hosts.  Structure is documented below.
        :param pulumi.Input[float] max_connections: The maximum number of connections to the backend cluster.
               Defaults to 1024.
        :param pulumi.Input[float] max_pending_requests: The maximum number of pending requests to the backend cluster.
               Defaults to 1024.
        :param pulumi.Input[float] max_requests: The maximum number of parallel requests to the backend cluster.
               Defaults to 1024.
        :param pulumi.Input[float] max_requests_per_connection: Maximum requests for a single backend connection. This parameter
               is respected by both the HTTP/1.1 and HTTP/2 implementations. If
               not specified, there is no limit. Setting this parameter to 1
               will effectively disable keep alive.
        :param pulumi.Input[float] max_retries: The maximum number of parallel retries to the backend cluster.
               Defaults to 3.
        """
        pulumi.set(__self__, "connectTimeout", connect_timeout)
        pulumi.set(__self__, "maxConnections", max_connections)
        pulumi.set(__self__, "maxPendingRequests", max_pending_requests)
        pulumi.set(__self__, "maxRequests", max_requests)
        pulumi.set(__self__, "maxRequestsPerConnection", max_requests_per_connection)
        pulumi.set(__self__, "maxRetries", max_retries)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input['BackendServiceCircuitBreakersConnectTimeoutArgs']]:
        """
        The timeout for new network connections to hosts.  Structure is documented below.
        """
        ...

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input['BackendServiceCircuitBreakersConnectTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of connections to the backend cluster.
        Defaults to 1024.
        """
        ...

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxPendingRequests")
    def max_pending_requests(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of pending requests to the backend cluster.
        Defaults to 1024.
        """
        ...

    @max_pending_requests.setter
    def max_pending_requests(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRequests")
    def max_requests(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of parallel requests to the backend cluster.
        Defaults to 1024.
        """
        ...

    @max_requests.setter
    def max_requests(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRequestsPerConnection")
    def max_requests_per_connection(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum requests for a single backend connection. This parameter
        is respected by both the HTTP/1.1 and HTTP/2 implementations. If
        not specified, there is no limit. Setting this parameter to 1
        will effectively disable keep alive.
        """
        ...

    @max_requests_per_connection.setter
    def max_requests_per_connection(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of parallel retries to the backend cluster.
        Defaults to 3.
        """
        ...

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendServiceCircuitBreakersConnectTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[float],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[float]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendServiceConsistentHashArgs:
    def __init__(__self__, *,
                 http_cookie: Optional[pulumi.Input['BackendServiceConsistentHashHttpCookieArgs']] = None,
                 http_header_name: Optional[pulumi.Input[str]] = None,
                 minimum_ring_size: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['BackendServiceConsistentHashHttpCookieArgs'] http_cookie: Hash is based on HTTP Cookie. This field describes a HTTP cookie
               that will be used as the hash key for the consistent hash load
               balancer. If the cookie is not present, it will be generated.
               This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
               Structure is documented below.
        :param pulumi.Input[str] http_header_name: The hash based on the value of the specified header field.
               This field is applicable if the sessionAffinity is set to HEADER_FIELD.
        :param pulumi.Input[float] minimum_ring_size: The minimum number of virtual nodes to use for the hash ring.
               Larger ring sizes result in more granular load
               distributions. If the number of hosts in the load balancing pool
               is larger than the ring size, each host will be assigned a single
               virtual node.
               Defaults to 1024.
        """
        pulumi.set(__self__, "httpCookie", http_cookie)
        pulumi.set(__self__, "httpHeaderName", http_header_name)
        pulumi.set(__self__, "minimumRingSize", minimum_ring_size)

    @property
    @pulumi.getter(name="httpCookie")
    def http_cookie(self) -> Optional[pulumi.Input['BackendServiceConsistentHashHttpCookieArgs']]:
        """
        Hash is based on HTTP Cookie. This field describes a HTTP cookie
        that will be used as the hash key for the consistent hash load
        balancer. If the cookie is not present, it will be generated.
        This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
        Structure is documented below.
        """
        ...

    @http_cookie.setter
    def http_cookie(self, value: Optional[pulumi.Input['BackendServiceConsistentHashHttpCookieArgs']]):
        ...

    @property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The hash based on the value of the specified header field.
        This field is applicable if the sessionAffinity is set to HEADER_FIELD.
        """
        ...

    @http_header_name.setter
    def http_header_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="minimumRingSize")
    def minimum_ring_size(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum number of virtual nodes to use for the hash ring.
        Larger ring sizes result in more granular load
        distributions. If the number of hosts in the load balancing pool
        is larger than the ring size, each host will be assigned a single
        virtual node.
        Defaults to 1024.
        """
        ...

    @minimum_ring_size.setter
    def minimum_ring_size(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendServiceConsistentHashHttpCookieArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input['BackendServiceConsistentHashHttpCookieTtlArgs']] = None):
        """
        :param pulumi.Input[str] name: Name of the cookie.
        :param pulumi.Input[str] path: Path to set for the cookie.
        :param pulumi.Input['BackendServiceConsistentHashHttpCookieTtlArgs'] ttl: Lifetime of the cookie.
               Structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cookie.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to set for the cookie.
        """
        ...

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input['BackendServiceConsistentHashHttpCookieTtlArgs']]:
        """
        Lifetime of the cookie.
        Structure is documented below.
        """
        ...

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input['BackendServiceConsistentHashHttpCookieTtlArgs']]):
        ...


@pulumi.input_type
class BackendServiceConsistentHashHttpCookieTtlArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[float],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[float]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendServiceIapArgs:
    def __init__(__self__, *,
                 oauth2_client_id: pulumi.Input[str],
                 oauth2_client_secret: pulumi.Input[str],
                 oauth2_client_secret_sha256: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] oauth2_client_id: OAuth2 Client ID for IAP
        :param pulumi.Input[str] oauth2_client_secret: OAuth2 Client Secret for IAP
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] oauth2_client_secret_sha256: -
               OAuth2 Client Secret SHA-256 for IAP
               **Note**: This property is sensitive and will not be displayed in the plan.
        """
        pulumi.set(__self__, "oauth2ClientId", oauth2_client_id)
        pulumi.set(__self__, "oauth2ClientSecret", oauth2_client_secret)
        pulumi.set(__self__, "oauth2ClientSecretSha256", oauth2_client_secret_sha256)

    @property
    @pulumi.getter(name="oauth2ClientId")
    def oauth2_client_id(self) -> pulumi.Input[str]:
        """
        OAuth2 Client ID for IAP
        """
        ...

    @oauth2_client_id.setter
    def oauth2_client_id(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="oauth2ClientSecret")
    def oauth2_client_secret(self) -> pulumi.Input[str]:
        """
        OAuth2 Client Secret for IAP
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @oauth2_client_secret.setter
    def oauth2_client_secret(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="oauth2ClientSecretSha256")
    def oauth2_client_secret_sha256(self) -> Optional[pulumi.Input[str]]:
        """
        -
        OAuth2 Client Secret SHA-256 for IAP
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @oauth2_client_secret_sha256.setter
    def oauth2_client_secret_sha256(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class BackendServiceLogConfigArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 sample_rate: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] enable: Whether to enable logging for the load balancer traffic served by this backend service.
        :param pulumi.Input[float] sample_rate: This field can only be specified if logging is enabled for this backend service. The value of
               the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
               where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
               The default value is 1.0.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "sampleRate", sample_rate)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable logging for the load balancer traffic served by this backend service.
        """
        ...

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[float]]:
        """
        This field can only be specified if logging is enabled for this backend service. The value of
        the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
        where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
        The default value is 1.0.
        """
        ...

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendServiceOutlierDetectionArgs:
    def __init__(__self__, *,
                 base_ejection_time: Optional[pulumi.Input['BackendServiceOutlierDetectionBaseEjectionTimeArgs']] = None,
                 consecutive_errors: Optional[pulumi.Input[float]] = None,
                 consecutive_gateway_failure: Optional[pulumi.Input[float]] = None,
                 enforcing_consecutive_errors: Optional[pulumi.Input[float]] = None,
                 enforcing_consecutive_gateway_failure: Optional[pulumi.Input[float]] = None,
                 enforcing_success_rate: Optional[pulumi.Input[float]] = None,
                 interval: Optional[pulumi.Input['BackendServiceOutlierDetectionIntervalArgs']] = None,
                 max_ejection_percent: Optional[pulumi.Input[float]] = None,
                 success_rate_minimum_hosts: Optional[pulumi.Input[float]] = None,
                 success_rate_request_volume: Optional[pulumi.Input[float]] = None,
                 success_rate_stdev_factor: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['BackendServiceOutlierDetectionBaseEjectionTimeArgs'] base_ejection_time: The base time that a host is ejected for. The real time is equal to the base
               time multiplied by the number of times the host has been ejected. Defaults to
               30000ms or 30s.
               Structure is documented below.
        :param pulumi.Input[float] consecutive_errors: Number of errors before a host is ejected from the connection pool. When the
               backend host is accessed over HTTP, a 5xx return code qualifies as an error.
               Defaults to 5.
        :param pulumi.Input[float] consecutive_gateway_failure: The number of consecutive gateway failures (502, 503, 504 status or connection
               errors that are mapped to one of those status codes) before a consecutive
               gateway failure ejection occurs. Defaults to 5.
        :param pulumi.Input[float] enforcing_consecutive_errors: The percentage chance that a host will be actually ejected when an outlier
               status is detected through consecutive 5xx. This setting can be used to disable
               ejection or to ramp it up slowly. Defaults to 100.
        :param pulumi.Input[float] enforcing_consecutive_gateway_failure: The percentage chance that a host will be actually ejected when an outlier
               status is detected through consecutive gateway failures. This setting can be
               used to disable ejection or to ramp it up slowly. Defaults to 0.
        :param pulumi.Input[float] enforcing_success_rate: The percentage chance that a host will be actually ejected when an outlier
               status is detected through success rate statistics. This setting can be used to
               disable ejection or to ramp it up slowly. Defaults to 100.
        :param pulumi.Input['BackendServiceOutlierDetectionIntervalArgs'] interval: Time interval between ejection sweep analysis. This can result in both new
               ejections as well as hosts being returned to service. Defaults to 10 seconds.
               Structure is documented below.
        :param pulumi.Input[float] max_ejection_percent: Maximum percentage of hosts in the load balancing pool for the backend service
               that can be ejected. Defaults to 10%.
        :param pulumi.Input[float] success_rate_minimum_hosts: The number of hosts in a cluster that must have enough request volume to detect
               success rate outliers. If the number of hosts is less than this setting, outlier
               detection via success rate statistics is not performed for any host in the
               cluster. Defaults to 5.
        :param pulumi.Input[float] success_rate_request_volume: The minimum number of total requests that must be collected in one interval (as
               defined by the interval duration above) to include this host in success rate
               based outlier detection. If the volume is lower than this setting, outlier
               detection via success rate statistics is not performed for that host. Defaults
               to 100.
        :param pulumi.Input[float] success_rate_stdev_factor: This factor is used to determine the ejection threshold for success rate outlier
               ejection. The ejection threshold is the difference between the mean success
               rate, and the product of this factor and the standard deviation of the mean
               success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
               by a thousand to get a double. That is, if the desired factor is 1.9, the
               runtime value should be 1900. Defaults to 1900.
        """
        pulumi.set(__self__, "baseEjectionTime", base_ejection_time)
        pulumi.set(__self__, "consecutiveErrors", consecutive_errors)
        pulumi.set(__self__, "consecutiveGatewayFailure", consecutive_gateway_failure)
        pulumi.set(__self__, "enforcingConsecutiveErrors", enforcing_consecutive_errors)
        pulumi.set(__self__, "enforcingConsecutiveGatewayFailure", enforcing_consecutive_gateway_failure)
        pulumi.set(__self__, "enforcingSuccessRate", enforcing_success_rate)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maxEjectionPercent", max_ejection_percent)
        pulumi.set(__self__, "successRateMinimumHosts", success_rate_minimum_hosts)
        pulumi.set(__self__, "successRateRequestVolume", success_rate_request_volume)
        pulumi.set(__self__, "successRateStdevFactor", success_rate_stdev_factor)

    @property
    @pulumi.getter(name="baseEjectionTime")
    def base_ejection_time(self) -> Optional[pulumi.Input['BackendServiceOutlierDetectionBaseEjectionTimeArgs']]:
        """
        The base time that a host is ejected for. The real time is equal to the base
        time multiplied by the number of times the host has been ejected. Defaults to
        30000ms or 30s.
        Structure is documented below.
        """
        ...

    @base_ejection_time.setter
    def base_ejection_time(self, value: Optional[pulumi.Input['BackendServiceOutlierDetectionBaseEjectionTimeArgs']]):
        ...

    @property
    @pulumi.getter(name="consecutiveErrors")
    def consecutive_errors(self) -> Optional[pulumi.Input[float]]:
        """
        Number of errors before a host is ejected from the connection pool. When the
        backend host is accessed over HTTP, a 5xx return code qualifies as an error.
        Defaults to 5.
        """
        ...

    @consecutive_errors.setter
    def consecutive_errors(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="consecutiveGatewayFailure")
    def consecutive_gateway_failure(self) -> Optional[pulumi.Input[float]]:
        """
        The number of consecutive gateway failures (502, 503, 504 status or connection
        errors that are mapped to one of those status codes) before a consecutive
        gateway failure ejection occurs. Defaults to 5.
        """
        ...

    @consecutive_gateway_failure.setter
    def consecutive_gateway_failure(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="enforcingConsecutiveErrors")
    def enforcing_consecutive_errors(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive 5xx. This setting can be used to disable
        ejection or to ramp it up slowly. Defaults to 100.
        """
        ...

    @enforcing_consecutive_errors.setter
    def enforcing_consecutive_errors(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="enforcingConsecutiveGatewayFailure")
    def enforcing_consecutive_gateway_failure(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive gateway failures. This setting can be
        used to disable ejection or to ramp it up slowly. Defaults to 0.
        """
        ...

    @enforcing_consecutive_gateway_failure.setter
    def enforcing_consecutive_gateway_failure(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="enforcingSuccessRate")
    def enforcing_success_rate(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through success rate statistics. This setting can be used to
        disable ejection or to ramp it up slowly. Defaults to 100.
        """
        ...

    @enforcing_success_rate.setter
    def enforcing_success_rate(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input['BackendServiceOutlierDetectionIntervalArgs']]:
        """
        Time interval between ejection sweep analysis. This can result in both new
        ejections as well as hosts being returned to service. Defaults to 10 seconds.
        Structure is documented below.
        """
        ...

    @interval.setter
    def interval(self, value: Optional[pulumi.Input['BackendServiceOutlierDetectionIntervalArgs']]):
        ...

    @property
    @pulumi.getter(name="maxEjectionPercent")
    def max_ejection_percent(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum percentage of hosts in the load balancing pool for the backend service
        that can be ejected. Defaults to 10%.
        """
        ...

    @max_ejection_percent.setter
    def max_ejection_percent(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="successRateMinimumHosts")
    def success_rate_minimum_hosts(self) -> Optional[pulumi.Input[float]]:
        """
        The number of hosts in a cluster that must have enough request volume to detect
        success rate outliers. If the number of hosts is less than this setting, outlier
        detection via success rate statistics is not performed for any host in the
        cluster. Defaults to 5.
        """
        ...

    @success_rate_minimum_hosts.setter
    def success_rate_minimum_hosts(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="successRateRequestVolume")
    def success_rate_request_volume(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum number of total requests that must be collected in one interval (as
        defined by the interval duration above) to include this host in success rate
        based outlier detection. If the volume is lower than this setting, outlier
        detection via success rate statistics is not performed for that host. Defaults
        to 100.
        """
        ...

    @success_rate_request_volume.setter
    def success_rate_request_volume(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="successRateStdevFactor")
    def success_rate_stdev_factor(self) -> Optional[pulumi.Input[float]]:
        """
        This factor is used to determine the ejection threshold for success rate outlier
        ejection. The ejection threshold is the difference between the mean success
        rate, and the product of this factor and the standard deviation of the mean
        success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
        by a thousand to get a double. That is, if the desired factor is 1.9, the
        runtime value should be 1900. Defaults to 1900.
        """
        ...

    @success_rate_stdev_factor.setter
    def success_rate_stdev_factor(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendServiceOutlierDetectionBaseEjectionTimeArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[float],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[float]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class BackendServiceOutlierDetectionIntervalArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[float],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[float]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class DiskDiskEncryptionKeyArgs:
    def __init__(__self__, *,
                 kms_key_self_link: Optional[pulumi.Input[str]] = None,
                 raw_key: Optional[pulumi.Input[str]] = None,
                 sha256: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_self_link: The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
               in the cloud console. Your project's Compute Engine System service account
               (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
               `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
               See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
        :param pulumi.Input[str] raw_key: Specifies a 256-bit customer-supplied encryption key, encoded in
               RFC 4648 base64 to either encrypt or decrypt this resource.
        :param pulumi.Input[str] sha256: -
               The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
               encryption key that protects this resource.
        """
        pulumi.set(__self__, "kmsKeySelfLink", kms_key_self_link)
        pulumi.set(__self__, "rawKey", raw_key)
        pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter(name="kmsKeySelfLink")
    def kms_key_self_link(self) -> Optional[pulumi.Input[str]]:
        """
        The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
        in the cloud console. Your project's Compute Engine System service account
        (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
        `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
        See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
        """
        ...

    @kms_key_self_link.setter
    def kms_key_self_link(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rawKey")
    def raw_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a 256-bit customer-supplied encryption key, encoded in
        RFC 4648 base64 to either encrypt or decrypt this resource.
        """
        ...

    @raw_key.setter
    def raw_key(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sha256(self) -> Optional[pulumi.Input[str]]:
        """
        -
        The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
        encryption key that protects this resource.
        """
        ...

    @sha256.setter
    def sha256(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DiskSourceImageEncryptionKeyArgs:
    def __init__(__self__, *,
                 kms_key_self_link: Optional[pulumi.Input[str]] = None,
                 raw_key: Optional[pulumi.Input[str]] = None,
                 sha256: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_self_link: The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
               in the cloud console. Your project's Compute Engine System service account
               (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
               `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
               See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
        :param pulumi.Input[str] raw_key: Specifies a 256-bit customer-supplied encryption key, encoded in
               RFC 4648 base64 to either encrypt or decrypt this resource.
        :param pulumi.Input[str] sha256: -
               The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
               encryption key that protects this resource.
        """
        pulumi.set(__self__, "kmsKeySelfLink", kms_key_self_link)
        pulumi.set(__self__, "rawKey", raw_key)
        pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter(name="kmsKeySelfLink")
    def kms_key_self_link(self) -> Optional[pulumi.Input[str]]:
        """
        The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
        in the cloud console. Your project's Compute Engine System service account
        (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
        `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
        See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
        """
        ...

    @kms_key_self_link.setter
    def kms_key_self_link(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rawKey")
    def raw_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a 256-bit customer-supplied encryption key, encoded in
        RFC 4648 base64 to either encrypt or decrypt this resource.
        """
        ...

    @raw_key.setter
    def raw_key(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sha256(self) -> Optional[pulumi.Input[str]]:
        """
        -
        The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
        encryption key that protects this resource.
        """
        ...

    @sha256.setter
    def sha256(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DiskSourceSnapshotEncryptionKeyArgs:
    def __init__(__self__, *,
                 kms_key_self_link: Optional[pulumi.Input[str]] = None,
                 raw_key: Optional[pulumi.Input[str]] = None,
                 sha256: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_self_link: The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
               in the cloud console. Your project's Compute Engine System service account
               (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
               `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
               See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
        :param pulumi.Input[str] raw_key: Specifies a 256-bit customer-supplied encryption key, encoded in
               RFC 4648 base64 to either encrypt or decrypt this resource.
        :param pulumi.Input[str] sha256: -
               The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
               encryption key that protects this resource.
        """
        pulumi.set(__self__, "kmsKeySelfLink", kms_key_self_link)
        pulumi.set(__self__, "rawKey", raw_key)
        pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter(name="kmsKeySelfLink")
    def kms_key_self_link(self) -> Optional[pulumi.Input[str]]:
        """
        The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
        in the cloud console. Your project's Compute Engine System service account
        (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
        `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
        See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
        """
        ...

    @kms_key_self_link.setter
    def kms_key_self_link(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rawKey")
    def raw_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a 256-bit customer-supplied encryption key, encoded in
        RFC 4648 base64 to either encrypt or decrypt this resource.
        """
        ...

    @raw_key.setter
    def raw_key(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sha256(self) -> Optional[pulumi.Input[str]]:
        """
        -
        The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
        encryption key that protects this resource.
        """
        ...

    @sha256.setter
    def sha256(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ExternalVpnGatewayInterfaceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[float]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] id: The numberic ID for this interface. Allowed values are based on the redundancy type
               of this external VPN gateway
               * `0 - SINGLE_IP_INTERNALLY_REDUNDANT`
               * `0, 1 - TWO_IPS_REDUNDANCY`
               * `0, 1, 2, 3 - FOUR_IPS_REDUNDANCY`
        :param pulumi.Input[str] ip_address: IP address of the interface in the external VPN gateway.
               Only IPv4 is supported. This IP address can be either from
               your on-premise gateway or another Cloud provider's VPN gateway,
               it cannot be an IP address from Google Compute Engine.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipAddress", ip_address)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[float]]:
        """
        The numberic ID for this interface. Allowed values are based on the redundancy type
        of this external VPN gateway
        * `0 - SINGLE_IP_INTERNALLY_REDUNDANT`
        * `0, 1 - TWO_IPS_REDUNDANCY`
        * `0, 1, 2, 3 - FOUR_IPS_REDUNDANCY`
        """
        ...

    @id.setter
    def id(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the interface in the external VPN gateway.
        Only IPv4 is supported. This IP address can be either from
        your on-premise gateway or another Cloud provider's VPN gateway,
        it cannot be an IP address from Google Compute Engine.
        """
        ...

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class FirewallAllowArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 ports: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] protocol: The IP protocol to which this rule applies. The protocol type is
               required when creating a firewall rule. This value can either be
               one of the following well known protocol strings (tcp, udp,
               icmp, esp, ah, sctp, ipip), or the IP protocol number.
        :param pulumi.Input[List[pulumi.Input[str]]] ports: An optional list of ports to which this rule applies. This field
               is only applicable for UDP or TCP protocol. Each entry must be
               either an integer or a range. If not specified, this rule
               applies to connections through any port.
               Example inputs include: ["22"], ["80","443"], and
               ["12345-12349"].
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The IP protocol to which this rule applies. The protocol type is
        required when creating a firewall rule. This value can either be
        one of the following well known protocol strings (tcp, udp,
        icmp, esp, ah, sctp, ipip), or the IP protocol number.
        """
        ...

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        An optional list of ports to which this rule applies. This field
        is only applicable for UDP or TCP protocol. Each entry must be
        either an integer or a range. If not specified, this rule
        applies to connections through any port.
        Example inputs include: ["22"], ["80","443"], and
        ["12345-12349"].
        """
        ...

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class FirewallDenyArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 ports: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] protocol: The IP protocol to which this rule applies. The protocol type is
               required when creating a firewall rule. This value can either be
               one of the following well known protocol strings (tcp, udp,
               icmp, esp, ah, sctp, ipip), or the IP protocol number.
        :param pulumi.Input[List[pulumi.Input[str]]] ports: An optional list of ports to which this rule applies. This field
               is only applicable for UDP or TCP protocol. Each entry must be
               either an integer or a range. If not specified, this rule
               applies to connections through any port.
               Example inputs include: ["22"], ["80","443"], and
               ["12345-12349"].
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The IP protocol to which this rule applies. The protocol type is
        required when creating a firewall rule. This value can either be
        one of the following well known protocol strings (tcp, udp,
        icmp, esp, ah, sctp, ipip), or the IP protocol number.
        """
        ...

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        An optional list of ports to which this rule applies. This field
        is only applicable for UDP or TCP protocol. Each entry must be
        either an integer or a range. If not specified, this rule
        applies to connections through any port.
        Example inputs include: ["22"], ["80","443"], and
        ["12345-12349"].
        """
        ...

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class FirewallLogConfigArgs:
    def __init__(__self__, *,
                 metadata: pulumi.Input[str]):
        """
        :param pulumi.Input[str] metadata: This field denotes whether to include or exclude metadata for firewall logs.
               Possible values are `EXCLUDE_ALL_METADATA` and `INCLUDE_ALL_METADATA`.
        """
        pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Input[str]:
        """
        This field denotes whether to include or exclude metadata for firewall logs.
        Possible values are `EXCLUDE_ALL_METADATA` and `INCLUDE_ALL_METADATA`.
        """
        ...

    @metadata.setter
    def metadata(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class GlobalForwardingRuleMetadataFilterArgs:
    def __init__(__self__, *,
                 filter_labels: pulumi.Input[List[pulumi.Input['GlobalForwardingRuleMetadataFilterFilterLabelArgs']]],
                 filter_match_criteria: pulumi.Input[str]):
        """
        :param pulumi.Input[List[pulumi.Input['GlobalForwardingRuleMetadataFilterFilterLabelArgs']]] filter_labels: The list of label value pairs that must match labels in the
               provided metadata based on filterMatchCriteria
               This list must not be empty and can have at the most 64 entries.
               Structure is documented below.
        :param pulumi.Input[str] filter_match_criteria: Specifies how individual filterLabel matches within the list of
               filterLabels contribute towards the overall metadataFilter match.
               MATCH_ANY - At least one of the filterLabels must have a matching
               label in the provided metadata.
               MATCH_ALL - All filterLabels must have matching labels in the
               provided metadata.
               Possible values are `MATCH_ANY` and `MATCH_ALL`.
        """
        pulumi.set(__self__, "filterLabels", filter_labels)
        pulumi.set(__self__, "filterMatchCriteria", filter_match_criteria)

    @property
    @pulumi.getter(name="filterLabels")
    def filter_labels(self) -> pulumi.Input[List[pulumi.Input['GlobalForwardingRuleMetadataFilterFilterLabelArgs']]]:
        """
        The list of label value pairs that must match labels in the
        provided metadata based on filterMatchCriteria
        This list must not be empty and can have at the most 64 entries.
        Structure is documented below.
        """
        ...

    @filter_labels.setter
    def filter_labels(self, value: pulumi.Input[List[pulumi.Input['GlobalForwardingRuleMetadataFilterFilterLabelArgs']]]):
        ...

    @property
    @pulumi.getter(name="filterMatchCriteria")
    def filter_match_criteria(self) -> pulumi.Input[str]:
        """
        Specifies how individual filterLabel matches within the list of
        filterLabels contribute towards the overall metadataFilter match.
        MATCH_ANY - At least one of the filterLabels must have a matching
        label in the provided metadata.
        MATCH_ALL - All filterLabels must have matching labels in the
        provided metadata.
        Possible values are `MATCH_ANY` and `MATCH_ALL`.
        """
        ...

    @filter_match_criteria.setter
    def filter_match_criteria(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class GlobalForwardingRuleMetadataFilterFilterLabelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of the metadata label. The length must be between
               1 and 1024 characters, inclusive.
        :param pulumi.Input[str] value: The value that the label must match. The value has a maximum
               length of 1024 characters.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the metadata label. The length must be between
        1 and 1024 characters, inclusive.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value that the label must match. The value has a maximum
        length of 1024 characters.
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class HaVpnGatewayVpnInterfaceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[float]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] id: an identifier for the resource with format `projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}`
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipAddress", ip_address)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[float]]:
        """
        an identifier for the resource with format `projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}`
        """
        ...

    @id.setter
    def id(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        ...

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class HealthCheckHttp2HealthCheckArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: The value of the host header in the HTTP2 health check request.
               If left empty (default value), the public IP on behalf of which this health
               check is performed will be used.
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request_path: The request path of the HTTP2 health check request.
               The default value is /.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "requestPath", request_path)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the host header in the HTTP2 health check request.
        If left empty (default value), the public IP on behalf of which this health
        check is performed will be used.
        """
        ...

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        """
        The request path of the HTTP2 health check request.
        The default value is /.
        """
        ...

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class HealthCheckHttpHealthCheckArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: The value of the host header in the HTTP2 health check request.
               If left empty (default value), the public IP on behalf of which this health
               check is performed will be used.
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request_path: The request path of the HTTP2 health check request.
               The default value is /.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "requestPath", request_path)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the host header in the HTTP2 health check request.
        If left empty (default value), the public IP on behalf of which this health
        check is performed will be used.
        """
        ...

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        """
        The request path of the HTTP2 health check request.
        The default value is /.
        """
        ...

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class HealthCheckHttpsHealthCheckArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: The value of the host header in the HTTP2 health check request.
               If left empty (default value), the public IP on behalf of which this health
               check is performed will be used.
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request_path: The request path of the HTTP2 health check request.
               The default value is /.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "requestPath", request_path)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the host header in the HTTP2 health check request.
        If left empty (default value), the public IP on behalf of which this health
        check is performed will be used.
        """
        ...

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        """
        The request path of the HTTP2 health check request.
        The default value is /.
        """
        ...

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class HealthCheckLogConfigArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable: Indicates whether or not to export logs. This is false by default,
               which means no health check logging will be done.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not to export logs. This is false by default,
        which means no health check logging will be done.
        """
        ...

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class HealthCheckSslHealthCheckArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request: The application data to send once the SSL connection has been
               established (default value is empty). If both request and response are
               empty, the connection establishment alone will indicate health. The request
               data can only be ASCII.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        The application data to send once the SSL connection has been
        established (default value is empty). If both request and response are
        empty, the connection establishment alone will indicate health. The request
        data can only be ASCII.
        """
        ...

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class HealthCheckTcpHealthCheckArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request: The application data to send once the SSL connection has been
               established (default value is empty). If both request and response are
               empty, the connection establishment alone will indicate health. The request
               data can only be ASCII.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        The application data to send once the SSL connection has been
        established (default value is empty). If both request and response are
        empty, the connection establishment alone will indicate health. The request
        data can only be ASCII.
        """
        ...

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ImageGuestOsFeatureArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] type: The type of supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options.
               Possible values are `MULTI_IP_SUBNET`, `SECURE_BOOT`, `UEFI_COMPATIBLE`, `VIRTIO_SCSI_MULTIQUEUE`, and `WINDOWS`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options.
        Possible values are `MULTI_IP_SUBNET`, `SECURE_BOOT`, `UEFI_COMPATIBLE`, `VIRTIO_SCSI_MULTIQUEUE`, and `WINDOWS`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ImageRawDiskArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 container_type: Optional[pulumi.Input[str]] = None,
                 sha1: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source: The full Google Cloud Storage URL where disk storage is stored
               You must provide either this property or the sourceDisk property
               but not both.
        :param pulumi.Input[str] container_type: The format used to encode and transmit the block device, which
               should be TAR. This is just a container and transmission format
               and not a runtime format. Provided by the client when the disk
               image is created.
               Default value is `TAR`.
               Possible values are `TAR`.
        :param pulumi.Input[str] sha1: An optional SHA1 checksum of the disk image before unpackaging.
               This is provided by the client when the disk image is created.
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "containerType", container_type)
        pulumi.set(__self__, "sha1", sha1)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The full Google Cloud Storage URL where disk storage is stored
        You must provide either this property or the sourceDisk property
        but not both.
        """
        ...

    @source.setter
    def source(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> Optional[pulumi.Input[str]]:
        """
        The format used to encode and transmit the block device, which
        should be TAR. This is just a container and transmission format
        and not a runtime format. Provided by the client when the disk
        image is created.
        Default value is `TAR`.
        Possible values are `TAR`.
        """
        ...

    @container_type.setter
    def container_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sha1(self) -> Optional[pulumi.Input[str]]:
        """
        An optional SHA1 checksum of the disk image before unpackaging.
        This is provided by the client when the disk image is created.
        """
        ...

    @sha1.setter
    def sha1(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceAttachedDiskArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 device_name: Optional[pulumi.Input[str]] = None,
                 disk_encryption_key_raw: Optional[pulumi.Input[str]] = None,
                 disk_encryption_key_sha256: Optional[pulumi.Input[str]] = None,
                 kms_key_self_link: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source: The name or self_link of the disk to attach to this instance.
        :param pulumi.Input[str] device_name: Name with which the attached disk will be accessible
               under `/dev/disk/by-id/google-*`
        :param pulumi.Input[str] disk_encryption_key_raw: A 256-bit [customer-supplied encryption key]
               (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
               encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
               to encrypt this disk. Only one of `kms_key_self_link` and `disk_encryption_key_raw` may be set.
        :param pulumi.Input[str] kms_key_self_link: The self_link of the encryption key that is
               stored in Google Cloud KMS to encrypt this disk. Only one of `kms_key_self_link`
               and `disk_encryption_key_raw` may be set.
        :param pulumi.Input[str] mode: Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
               If you have a persistent disk with data that you want to share
               between multiple instances, detach it from any read-write instances and
               attach it to one or more instances in read-only mode.
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "deviceName", device_name)
        pulumi.set(__self__, "diskEncryptionKeyRaw", disk_encryption_key_raw)
        pulumi.set(__self__, "diskEncryptionKeySha256", disk_encryption_key_sha256)
        pulumi.set(__self__, "kmsKeySelfLink", kms_key_self_link)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The name or self_link of the disk to attach to this instance.
        """
        ...

    @source.setter
    def source(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name with which the attached disk will be accessible
        under `/dev/disk/by-id/google-*`
        """
        ...

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskEncryptionKeyRaw")
    def disk_encryption_key_raw(self) -> Optional[pulumi.Input[str]]:
        """
        A 256-bit [customer-supplied encryption key]
        (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
        encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
        to encrypt this disk. Only one of `kms_key_self_link` and `disk_encryption_key_raw` may be set.
        """
        ...

    @disk_encryption_key_raw.setter
    def disk_encryption_key_raw(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskEncryptionKeySha256")
    def disk_encryption_key_sha256(self) -> Optional[pulumi.Input[str]]:
        ...

    @disk_encryption_key_sha256.setter
    def disk_encryption_key_sha256(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="kmsKeySelfLink")
    def kms_key_self_link(self) -> Optional[pulumi.Input[str]]:
        """
        The self_link of the encryption key that is
        stored in Google Cloud KMS to encrypt this disk. Only one of `kms_key_self_link`
        and `disk_encryption_key_raw` may be set.
        """
        ...

    @kms_key_self_link.setter
    def kms_key_self_link(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
        If you have a persistent disk with data that you want to share
        between multiple instances, detach it from any read-write instances and
        attach it to one or more instances in read-only mode.
        """
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceBootDiskArgs:
    def __init__(__self__, *,
                 auto_delete: Optional[pulumi.Input[bool]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 disk_encryption_key_raw: Optional[pulumi.Input[str]] = None,
                 disk_encryption_key_sha256: Optional[pulumi.Input[str]] = None,
                 initialize_params: Optional[pulumi.Input['InstanceBootDiskInitializeParamsArgs']] = None,
                 kms_key_self_link: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_delete: Whether the disk will be auto-deleted when the instance
               is deleted. Defaults to true.
        :param pulumi.Input[str] device_name: Name with which the attached disk will be accessible
               under `/dev/disk/by-id/google-*`
        :param pulumi.Input[str] disk_encryption_key_raw: A 256-bit [customer-supplied encryption key]
               (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
               encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
               to encrypt this disk. Only one of `kms_key_self_link` and `disk_encryption_key_raw` may be set.
        :param pulumi.Input['InstanceBootDiskInitializeParamsArgs'] initialize_params: Parameters for a new disk that will be created
               alongside the new instance. Either `initialize_params` or `source` must be set.
               Structure is documented below.
        :param pulumi.Input[str] kms_key_self_link: The self_link of the encryption key that is
               stored in Google Cloud KMS to encrypt this disk. Only one of `kms_key_self_link`
               and `disk_encryption_key_raw` may be set.
        :param pulumi.Input[str] mode: Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
               If you have a persistent disk with data that you want to share
               between multiple instances, detach it from any read-write instances and
               attach it to one or more instances in read-only mode.
        :param pulumi.Input[str] source: The name or self_link of the disk to attach to this instance.
        """
        pulumi.set(__self__, "autoDelete", auto_delete)
        pulumi.set(__self__, "deviceName", device_name)
        pulumi.set(__self__, "diskEncryptionKeyRaw", disk_encryption_key_raw)
        pulumi.set(__self__, "diskEncryptionKeySha256", disk_encryption_key_sha256)
        pulumi.set(__self__, "initializeParams", initialize_params)
        pulumi.set(__self__, "kmsKeySelfLink", kms_key_self_link)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the disk will be auto-deleted when the instance
        is deleted. Defaults to true.
        """
        ...

    @auto_delete.setter
    def auto_delete(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name with which the attached disk will be accessible
        under `/dev/disk/by-id/google-*`
        """
        ...

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskEncryptionKeyRaw")
    def disk_encryption_key_raw(self) -> Optional[pulumi.Input[str]]:
        """
        A 256-bit [customer-supplied encryption key]
        (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
        encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
        to encrypt this disk. Only one of `kms_key_self_link` and `disk_encryption_key_raw` may be set.
        """
        ...

    @disk_encryption_key_raw.setter
    def disk_encryption_key_raw(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskEncryptionKeySha256")
    def disk_encryption_key_sha256(self) -> Optional[pulumi.Input[str]]:
        ...

    @disk_encryption_key_sha256.setter
    def disk_encryption_key_sha256(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> Optional[pulumi.Input['InstanceBootDiskInitializeParamsArgs']]:
        """
        Parameters for a new disk that will be created
        alongside the new instance. Either `initialize_params` or `source` must be set.
        Structure is documented below.
        """
        ...

    @initialize_params.setter
    def initialize_params(self, value: Optional[pulumi.Input['InstanceBootDiskInitializeParamsArgs']]):
        ...

    @property
    @pulumi.getter(name="kmsKeySelfLink")
    def kms_key_self_link(self) -> Optional[pulumi.Input[str]]:
        """
        The self_link of the encryption key that is
        stored in Google Cloud KMS to encrypt this disk. Only one of `kms_key_self_link`
        and `disk_encryption_key_raw` may be set.
        """
        ...

    @kms_key_self_link.setter
    def kms_key_self_link(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
        If you have a persistent disk with data that you want to share
        between multiple instances, detach it from any read-write instances and
        attach it to one or more instances in read-only mode.
        """
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The name or self_link of the disk to attach to this instance.
        """
        ...

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceBootDiskInitializeParamsArgs:
    def __init__(__self__, *,
                 image: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 size: Optional[pulumi.Input[float]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] image: The image from which to initialize this disk. This can be
               one of: the image's `self_link`, `projects/{project}/global/images/{image}`,
               `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
               `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
               `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
               images names must include the family name. If they don't, use the
               [compute.Image data source](https://www.terraform.io/docs/providers/google/d/compute_image.html).
               For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
               These images can be referred by family name here.
        :param pulumi.Input[Mapping[str, Any]] labels: A map of key/value label pairs to assign to the instance.
        :param pulumi.Input[float] size: The size of the image in gigabytes. If not specified, it
               will inherit the size of its base image.
        :param pulumi.Input[str] type: The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        The image from which to initialize this disk. This can be
        one of: the image's `self_link`, `projects/{project}/global/images/{image}`,
        `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
        `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
        `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
        images names must include the family name. If they don't, use the
        [compute.Image data source](https://www.terraform.io/docs/providers/google/d/compute_image.html).
        For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
        These images can be referred by family name here.
        """
        ...

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A map of key/value label pairs to assign to the instance.
        """
        ...

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        ...

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        """
        The size of the image in gigabytes. If not specified, it
        will inherit the size of its base image.
        """
        ...

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceConfidentialInstanceConfigArgs:
    def __init__(__self__, *,
                 enable_confidential_compute: pulumi.Input[bool]):
        pulumi.set(__self__, "enableConfidentialCompute", enable_confidential_compute)

    @property
    @pulumi.getter(name="enableConfidentialCompute")
    def enable_confidential_compute(self) -> pulumi.Input[bool]:
        ...

    @enable_confidential_compute.setter
    def enable_confidential_compute(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class InstanceFromTemplateAttachedDiskArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 device_name: Optional[pulumi.Input[str]] = None,
                 disk_encryption_key_raw: Optional[pulumi.Input[str]] = None,
                 disk_encryption_key_sha256: Optional[pulumi.Input[str]] = None,
                 kms_key_self_link: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "deviceName", device_name)
        pulumi.set(__self__, "diskEncryptionKeyRaw", disk_encryption_key_raw)
        pulumi.set(__self__, "diskEncryptionKeySha256", disk_encryption_key_sha256)
        pulumi.set(__self__, "kmsKeySelfLink", kms_key_self_link)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        ...

    @source.setter
    def source(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        ...

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskEncryptionKeyRaw")
    def disk_encryption_key_raw(self) -> Optional[pulumi.Input[str]]:
        ...

    @disk_encryption_key_raw.setter
    def disk_encryption_key_raw(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskEncryptionKeySha256")
    def disk_encryption_key_sha256(self) -> Optional[pulumi.Input[str]]:
        ...

    @disk_encryption_key_sha256.setter
    def disk_encryption_key_sha256(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="kmsKeySelfLink")
    def kms_key_self_link(self) -> Optional[pulumi.Input[str]]:
        ...

    @kms_key_self_link.setter
    def kms_key_self_link(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceFromTemplateBootDiskArgs:
    def __init__(__self__, *,
                 auto_delete: Optional[pulumi.Input[bool]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 disk_encryption_key_raw: Optional[pulumi.Input[str]] = None,
                 disk_encryption_key_sha256: Optional[pulumi.Input[str]] = None,
                 initialize_params: Optional[pulumi.Input['InstanceFromTemplateBootDiskInitializeParamsArgs']] = None,
                 kms_key_self_link: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "autoDelete", auto_delete)
        pulumi.set(__self__, "deviceName", device_name)
        pulumi.set(__self__, "diskEncryptionKeyRaw", disk_encryption_key_raw)
        pulumi.set(__self__, "diskEncryptionKeySha256", disk_encryption_key_sha256)
        pulumi.set(__self__, "initializeParams", initialize_params)
        pulumi.set(__self__, "kmsKeySelfLink", kms_key_self_link)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[pulumi.Input[bool]]:
        ...

    @auto_delete.setter
    def auto_delete(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        ...

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskEncryptionKeyRaw")
    def disk_encryption_key_raw(self) -> Optional[pulumi.Input[str]]:
        ...

    @disk_encryption_key_raw.setter
    def disk_encryption_key_raw(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskEncryptionKeySha256")
    def disk_encryption_key_sha256(self) -> Optional[pulumi.Input[str]]:
        ...

    @disk_encryption_key_sha256.setter
    def disk_encryption_key_sha256(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> Optional[pulumi.Input['InstanceFromTemplateBootDiskInitializeParamsArgs']]:
        ...

    @initialize_params.setter
    def initialize_params(self, value: Optional[pulumi.Input['InstanceFromTemplateBootDiskInitializeParamsArgs']]):
        ...

    @property
    @pulumi.getter(name="kmsKeySelfLink")
    def kms_key_self_link(self) -> Optional[pulumi.Input[str]]:
        ...

    @kms_key_self_link.setter
    def kms_key_self_link(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        ...

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceFromTemplateBootDiskInitializeParamsArgs:
    def __init__(__self__, *,
                 image: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 size: Optional[pulumi.Input[float]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        ...

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        ...

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        ...

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        ...

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceFromTemplateConfidentialInstanceConfigArgs:
    def __init__(__self__, *,
                 enable_confidential_compute: pulumi.Input[bool]):
        pulumi.set(__self__, "enableConfidentialCompute", enable_confidential_compute)

    @property
    @pulumi.getter(name="enableConfidentialCompute")
    def enable_confidential_compute(self) -> pulumi.Input[bool]:
        ...

    @enable_confidential_compute.setter
    def enable_confidential_compute(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class InstanceFromTemplateGuestAcceleratorArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[float],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[float]:
        ...

    @count.setter
    def count(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class InstanceFromTemplateNetworkInterfaceArgs:
    def __init__(__self__, *,
                 access_configs: Optional[pulumi.Input[List[pulumi.Input['InstanceFromTemplateNetworkInterfaceAccessConfigArgs']]]] = None,
                 alias_ip_ranges: Optional[pulumi.Input[List[pulumi.Input['InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_ip: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None,
                 subnetwork_project: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: A unique name for the resource, required by GCE.
               Changing this forces a new resource to be created.
        """
        pulumi.set(__self__, "accessConfigs", access_configs)
        pulumi.set(__self__, "aliasIpRanges", alias_ip_ranges)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "networkIp", network_ip)
        pulumi.set(__self__, "subnetwork", subnetwork)
        pulumi.set(__self__, "subnetworkProject", subnetwork_project)

    @property
    @pulumi.getter(name="accessConfigs")
    def access_configs(self) -> Optional[pulumi.Input[List[pulumi.Input['InstanceFromTemplateNetworkInterfaceAccessConfigArgs']]]]:
        ...

    @access_configs.setter
    def access_configs(self, value: Optional[pulumi.Input[List[pulumi.Input['InstanceFromTemplateNetworkInterfaceAccessConfigArgs']]]]):
        ...

    @property
    @pulumi.getter(name="aliasIpRanges")
    def alias_ip_ranges(self) -> Optional[pulumi.Input[List[pulumi.Input['InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs']]]]:
        ...

    @alias_ip_ranges.setter
    def alias_ip_ranges(self, value: Optional[pulumi.Input[List[pulumi.Input['InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs']]]]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the resource, required by GCE.
        Changing this forces a new resource to be created.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        ...

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="networkIp")
    def network_ip(self) -> Optional[pulumi.Input[str]]:
        ...

    @network_ip.setter
    def network_ip(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        ...

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="subnetworkProject")
    def subnetwork_project(self) -> Optional[pulumi.Input[str]]:
        ...

    @subnetwork_project.setter
    def subnetwork_project(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceFromTemplateNetworkInterfaceAccessConfigArgs:
    def __init__(__self__, *,
                 nat_ip: Optional[pulumi.Input[str]] = None,
                 network_tier: Optional[pulumi.Input[str]] = None,
                 public_ptr_domain_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "natIp", nat_ip)
        pulumi.set(__self__, "networkTier", network_tier)
        pulumi.set(__self__, "publicPtrDomainName", public_ptr_domain_name)

    @property
    @pulumi.getter(name="natIp")
    def nat_ip(self) -> Optional[pulumi.Input[str]]:
        ...

    @nat_ip.setter
    def nat_ip(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="networkTier")
    def network_tier(self) -> Optional[pulumi.Input[str]]:
        ...

    @network_tier.setter
    def network_tier(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="publicPtrDomainName")
    def public_ptr_domain_name(self) -> Optional[pulumi.Input[str]]:
        ...

    @public_ptr_domain_name.setter
    def public_ptr_domain_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs:
    def __init__(__self__, *,
                 ip_cidr_range: pulumi.Input[str],
                 subnetwork_range_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ipCidrRange", ip_cidr_range)
        pulumi.set(__self__, "subnetworkRangeName", subnetwork_range_name)

    @property
    @pulumi.getter(name="ipCidrRange")
    def ip_cidr_range(self) -> pulumi.Input[str]:
        ...

    @ip_cidr_range.setter
    def ip_cidr_range(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="subnetworkRangeName")
    def subnetwork_range_name(self) -> Optional[pulumi.Input[str]]:
        ...

    @subnetwork_range_name.setter
    def subnetwork_range_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceFromTemplateSchedulingArgs:
    def __init__(__self__, *,
                 automatic_restart: Optional[pulumi.Input[bool]] = None,
                 min_node_cpus: Optional[pulumi.Input[float]] = None,
                 node_affinities: Optional[pulumi.Input[List[pulumi.Input['InstanceFromTemplateSchedulingNodeAffinityArgs']]]] = None,
                 on_host_maintenance: Optional[pulumi.Input[str]] = None,
                 preemptible: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "automaticRestart", automatic_restart)
        pulumi.set(__self__, "minNodeCpus", min_node_cpus)
        pulumi.set(__self__, "nodeAffinities", node_affinities)
        pulumi.set(__self__, "onHostMaintenance", on_host_maintenance)
        pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter(name="automaticRestart")
    def automatic_restart(self) -> Optional[pulumi.Input[bool]]:
        ...

    @automatic_restart.setter
    def automatic_restart(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="minNodeCpus")
    def min_node_cpus(self) -> Optional[pulumi.Input[float]]:
        ...

    @min_node_cpus.setter
    def min_node_cpus(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="nodeAffinities")
    def node_affinities(self) -> Optional[pulumi.Input[List[pulumi.Input['InstanceFromTemplateSchedulingNodeAffinityArgs']]]]:
        ...

    @node_affinities.setter
    def node_affinities(self, value: Optional[pulumi.Input[List[pulumi.Input['InstanceFromTemplateSchedulingNodeAffinityArgs']]]]):
        ...

    @property
    @pulumi.getter(name="onHostMaintenance")
    def on_host_maintenance(self) -> Optional[pulumi.Input[str]]:
        ...

    @on_host_maintenance.setter
    def on_host_maintenance(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[pulumi.Input[bool]]:
        ...

    @preemptible.setter
    def preemptible(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class InstanceFromTemplateSchedulingNodeAffinityArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[List[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        ...

    @key.setter
    def key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        ...

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        ...

    @values.setter
    def values(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...


@pulumi.input_type
class InstanceFromTemplateScratchDiskArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str]):
        pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        ...

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class InstanceFromTemplateServiceAccountArgs:
    def __init__(__self__, *,
                 scopes: pulumi.Input[List[pulumi.Input[str]]],
                 email: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        ...

    @scopes.setter
    def scopes(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        ...

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceFromTemplateShieldedInstanceConfigArgs:
    def __init__(__self__, *,
                 enable_integrity_monitoring: Optional[pulumi.Input[bool]] = None,
                 enable_secure_boot: Optional[pulumi.Input[bool]] = None,
                 enable_vtpm: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "enableIntegrityMonitoring", enable_integrity_monitoring)
        pulumi.set(__self__, "enableSecureBoot", enable_secure_boot)
        pulumi.set(__self__, "enableVtpm", enable_vtpm)

    @property
    @pulumi.getter(name="enableIntegrityMonitoring")
    def enable_integrity_monitoring(self) -> Optional[pulumi.Input[bool]]:
        ...

    @enable_integrity_monitoring.setter
    def enable_integrity_monitoring(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[bool]]:
        ...

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableVtpm")
    def enable_vtpm(self) -> Optional[pulumi.Input[bool]]:
        ...

    @enable_vtpm.setter
    def enable_vtpm(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class InstanceGroupManagerAutoHealingPoliciesArgs:
    def __init__(__self__, *,
                 health_check: pulumi.Input[str],
                 initial_delay_sec: pulumi.Input[float]):
        """
        :param pulumi.Input[str] health_check: The health check resource that signals autohealing.
        :param pulumi.Input[float] initial_delay_sec: The number of seconds that the managed instance group waits before
               it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
        """
        pulumi.set(__self__, "healthCheck", health_check)
        pulumi.set(__self__, "initialDelaySec", initial_delay_sec)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Input[str]:
        """
        The health check resource that signals autohealing.
        """
        ...

    @health_check.setter
    def health_check(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="initialDelaySec")
    def initial_delay_sec(self) -> pulumi.Input[float]:
        """
        The number of seconds that the managed instance group waits before
        it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
        """
        ...

    @initial_delay_sec.setter
    def initial_delay_sec(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class InstanceGroupManagerNamedPortArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        :param pulumi.Input[str] name: - Version name.
        :param pulumi.Input[float] port: The port number.
               - - -
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - Version name.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        The port number.
        - - -
        """
        ...

    @port.setter
    def port(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class InstanceGroupManagerStatefulDiskArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 delete_rule: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] device_name: , The device name of the disk to be attached.
        :param pulumi.Input[str] delete_rule: , A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`. `NEVER` detatch the disk when the VM is deleted, but not delete the disk. `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently deleted from the instance group. The default is `NEVER`.
        """
        pulumi.set(__self__, "deviceName", device_name)
        pulumi.set(__self__, "deleteRule", delete_rule)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        """
        , The device name of the disk to be attached.
        """
        ...

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="deleteRule")
    def delete_rule(self) -> Optional[pulumi.Input[str]]:
        """
        , A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`. `NEVER` detatch the disk when the VM is deleted, but not delete the disk. `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently deleted from the instance group. The default is `NEVER`.
        """
        ...

    @delete_rule.setter
    def delete_rule(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceGroupManagerUpdatePolicyArgs:
    def __init__(__self__, *,
                 minimal_action: pulumi.Input[str],
                 type: pulumi.Input[str],
                 max_surge_fixed: Optional[pulumi.Input[float]] = None,
                 max_surge_percent: Optional[pulumi.Input[float]] = None,
                 max_unavailable_fixed: Optional[pulumi.Input[float]] = None,
                 max_unavailable_percent: Optional[pulumi.Input[float]] = None,
                 min_ready_sec: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] minimal_action: - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
        :param pulumi.Input[str] type: - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
        :param pulumi.Input[float] max_surge_fixed: , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `max_surge_percent`. If neither is set, defaults to 1
        :param pulumi.Input[float] max_surge_percent: , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `max_surge_fixed`.
        :param pulumi.Input[float] max_unavailable_fixed: , The maximum number of instances that can be unavailable during the update process. Conflicts with `max_unavailable_percent`. If neither is set, defaults to 1
        :param pulumi.Input[float] max_unavailable_percent: , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `max_unavailable_fixed`.
        :param pulumi.Input[float] min_ready_sec: , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
               - - -
        """
        pulumi.set(__self__, "minimalAction", minimal_action)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "maxSurgeFixed", max_surge_fixed)
        pulumi.set(__self__, "maxSurgePercent", max_surge_percent)
        pulumi.set(__self__, "maxUnavailableFixed", max_unavailable_fixed)
        pulumi.set(__self__, "maxUnavailablePercent", max_unavailable_percent)
        pulumi.set(__self__, "minReadySec", min_ready_sec)

    @property
    @pulumi.getter(name="minimalAction")
    def minimal_action(self) -> pulumi.Input[str]:
        """
        - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
        """
        ...

    @minimal_action.setter
    def minimal_action(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="maxSurgeFixed")
    def max_surge_fixed(self) -> Optional[pulumi.Input[float]]:
        """
        , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `max_surge_percent`. If neither is set, defaults to 1
        """
        ...

    @max_surge_fixed.setter
    def max_surge_fixed(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxSurgePercent")
    def max_surge_percent(self) -> Optional[pulumi.Input[float]]:
        """
        , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `max_surge_fixed`.
        """
        ...

    @max_surge_percent.setter
    def max_surge_percent(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxUnavailableFixed")
    def max_unavailable_fixed(self) -> Optional[pulumi.Input[float]]:
        """
        , The maximum number of instances that can be unavailable during the update process. Conflicts with `max_unavailable_percent`. If neither is set, defaults to 1
        """
        ...

    @max_unavailable_fixed.setter
    def max_unavailable_fixed(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxUnavailablePercent")
    def max_unavailable_percent(self) -> Optional[pulumi.Input[float]]:
        """
        , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `max_unavailable_fixed`.
        """
        ...

    @max_unavailable_percent.setter
    def max_unavailable_percent(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="minReadySec")
    def min_ready_sec(self) -> Optional[pulumi.Input[float]]:
        """
        , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
        - - -
        """
        ...

    @min_ready_sec.setter
    def min_ready_sec(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class InstanceGroupManagerVersionArgs:
    def __init__(__self__, *,
                 instance_template: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 target_size: Optional[pulumi.Input['InstanceGroupManagerVersionTargetSizeArgs']] = None):
        """
        :param pulumi.Input[str] instance_template: - The full URL to an instance template from which all new instances of this version will be created.
        :param pulumi.Input[str] name: - Version name.
        :param pulumi.Input['InstanceGroupManagerVersionTargetSizeArgs'] target_size: - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
        """
        pulumi.set(__self__, "instanceTemplate", instance_template)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "targetSize", target_size)

    @property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> pulumi.Input[str]:
        """
        - The full URL to an instance template from which all new instances of this version will be created.
        """
        ...

    @instance_template.setter
    def instance_template(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - Version name.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="targetSize")
    def target_size(self) -> Optional[pulumi.Input['InstanceGroupManagerVersionTargetSizeArgs']]:
        """
        - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
        """
        ...

    @target_size.setter
    def target_size(self, value: Optional[pulumi.Input['InstanceGroupManagerVersionTargetSizeArgs']]):
        ...


@pulumi.input_type
class InstanceGroupManagerVersionTargetSizeArgs:
    def __init__(__self__, *,
                 fixed: Optional[pulumi.Input[float]] = None,
                 percent: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] fixed: , The number of instances which are managed for this version. Conflicts with `percent`.
        :param pulumi.Input[float] percent: , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
               Note that when using `percent`, rounding will be in favor of explicitly set `target_size` values; a managed instance group with 2 instances and 2 `version`s,
               one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
        """
        pulumi.set(__self__, "fixed", fixed)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def fixed(self) -> Optional[pulumi.Input[float]]:
        """
        , The number of instances which are managed for this version. Conflicts with `percent`.
        """
        ...

    @fixed.setter
    def fixed(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[float]]:
        """
        , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
        Note that when using `percent`, rounding will be in favor of explicitly set `target_size` values; a managed instance group with 2 instances and 2 `version`s,
        one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
        """
        ...

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class InstanceGroupNamedPortArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        :param pulumi.Input[str] name: The name which the port will be mapped to.
        :param pulumi.Input[float] port: The port number to map the name to.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name which the port will be mapped to.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        The port number to map the name to.
        """
        ...

    @port.setter
    def port(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class InstanceGuestAcceleratorArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[float],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[float] count: The number of the guest accelerator cards exposed to this instance.
        :param pulumi.Input[str] type: The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[float]:
        """
        The number of the guest accelerator cards exposed to this instance.
        """
        ...

    @count.setter
    def count(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class InstanceIAMBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] title: A title for the expression, i.e. a short string describing its purpose.
        :param pulumi.Input[str] description: An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        ...

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        A title for the expression, i.e. a short string describing its purpose.
        """
        ...

    @title.setter
    def title(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceIAMMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] title: A title for the expression, i.e. a short string describing its purpose.
        :param pulumi.Input[str] description: An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        ...

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        A title for the expression, i.e. a short string describing its purpose.
        """
        ...

    @title.setter
    def title(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceNetworkInterfaceArgs:
    def __init__(__self__, *,
                 access_configs: Optional[pulumi.Input[List[pulumi.Input['InstanceNetworkInterfaceAccessConfigArgs']]]] = None,
                 alias_ip_ranges: Optional[pulumi.Input[List[pulumi.Input['InstanceNetworkInterfaceAliasIpRangeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_ip: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None,
                 subnetwork_project: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['InstanceNetworkInterfaceAccessConfigArgs']]] access_configs: Access configurations, i.e. IPs via which this
               instance can be accessed via the Internet. Omit to ensure that the instance
               is not accessible from the Internet. If omitted, ssh will not
               work unless this provider can send traffic to the instance's network (e.g. via
               tunnel or because it is running on another cloud instance on that network).
               This block can be repeated multiple times. Structure documented below.
        :param pulumi.Input[List[pulumi.Input['InstanceNetworkInterfaceAliasIpRangeArgs']]] alias_ip_ranges: An
               array of alias IP ranges for this network interface. Can only be specified for network
               interfaces on subnet-mode networks. Structure documented below.
        :param pulumi.Input[str] name: A unique name for the resource, required by GCE.
               Changing this forces a new resource to be created.
        :param pulumi.Input[str] network: The name or self_link of the network to attach this interface to.
               Either `network` or `subnetwork` must be provided.
        :param pulumi.Input[str] network_ip: The private IP address to assign to the instance. If
               empty, the address will be automatically assigned.
        :param pulumi.Input[str] subnetwork: The name or self_link of the subnetwork to attach this
               interface to. The subnetwork must exist in the same region this instance will be
               created in. Either `network` or `subnetwork` must be provided.
        :param pulumi.Input[str] subnetwork_project: The project in which the subnetwork belongs.
               If the `subnetwork` is a self_link, this field is ignored in favor of the project
               defined in the subnetwork self_link. If the `subnetwork` is a name and this
               field is not provided, the provider project is used.
        """
        pulumi.set(__self__, "accessConfigs", access_configs)
        pulumi.set(__self__, "aliasIpRanges", alias_ip_ranges)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "networkIp", network_ip)
        pulumi.set(__self__, "subnetwork", subnetwork)
        pulumi.set(__self__, "subnetworkProject", subnetwork_project)

    @property
    @pulumi.getter(name="accessConfigs")
    def access_configs(self) -> Optional[pulumi.Input[List[pulumi.Input['InstanceNetworkInterfaceAccessConfigArgs']]]]:
        """
        Access configurations, i.e. IPs via which this
        instance can be accessed via the Internet. Omit to ensure that the instance
        is not accessible from the Internet. If omitted, ssh will not
        work unless this provider can send traffic to the instance's network (e.g. via
        tunnel or because it is running on another cloud instance on that network).
        This block can be repeated multiple times. Structure documented below.
        """
        ...

    @access_configs.setter
    def access_configs(self, value: Optional[pulumi.Input[List[pulumi.Input['InstanceNetworkInterfaceAccessConfigArgs']]]]):
        ...

    @property
    @pulumi.getter(name="aliasIpRanges")
    def alias_ip_ranges(self) -> Optional[pulumi.Input[List[pulumi.Input['InstanceNetworkInterfaceAliasIpRangeArgs']]]]:
        """
        An
        array of alias IP ranges for this network interface. Can only be specified for network
        interfaces on subnet-mode networks. Structure documented below.
        """
        ...

    @alias_ip_ranges.setter
    def alias_ip_ranges(self, value: Optional[pulumi.Input[List[pulumi.Input['InstanceNetworkInterfaceAliasIpRangeArgs']]]]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name for the resource, required by GCE.
        Changing this forces a new resource to be created.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The name or self_link of the network to attach this interface to.
        Either `network` or `subnetwork` must be provided.
        """
        ...

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="networkIp")
    def network_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The private IP address to assign to the instance. If
        empty, the address will be automatically assigned.
        """
        ...

    @network_ip.setter
    def network_ip(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        The name or self_link of the subnetwork to attach this
        interface to. The subnetwork must exist in the same region this instance will be
        created in. Either `network` or `subnetwork` must be provided.
        """
        ...

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="subnetworkProject")
    def subnetwork_project(self) -> Optional[pulumi.Input[str]]:
        """
        The project in which the subnetwork belongs.
        If the `subnetwork` is a self_link, this field is ignored in favor of the project
        defined in the subnetwork self_link. If the `subnetwork` is a name and this
        field is not provided, the provider project is used.
        """
        ...

    @subnetwork_project.setter
    def subnetwork_project(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceNetworkInterfaceAccessConfigArgs:
    def __init__(__self__, *,
                 nat_ip: Optional[pulumi.Input[str]] = None,
                 network_tier: Optional[pulumi.Input[str]] = None,
                 public_ptr_domain_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] nat_ip: The IP address that will be 1:1 mapped to the instance's
               network ip. If not given, one will be generated.
        :param pulumi.Input[str] network_tier: The [networking tier][network-tier] used for configuring this instance.
               This field can take the following values: PREMIUM or STANDARD. If this field is
               not specified, it is assumed to be PREMIUM.
        :param pulumi.Input[str] public_ptr_domain_name: The DNS domain name for the public PTR record.
               To set this field on an instance, you must be verified as the owner of the domain.
               See [the docs](https://cloud.google.com/compute/docs/instances/create-ptr-record) for how
               to become verified as a domain owner.
        """
        pulumi.set(__self__, "natIp", nat_ip)
        pulumi.set(__self__, "networkTier", network_tier)
        pulumi.set(__self__, "publicPtrDomainName", public_ptr_domain_name)

    @property
    @pulumi.getter(name="natIp")
    def nat_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address that will be 1:1 mapped to the instance's
        network ip. If not given, one will be generated.
        """
        ...

    @nat_ip.setter
    def nat_ip(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="networkTier")
    def network_tier(self) -> Optional[pulumi.Input[str]]:
        """
        The [networking tier][network-tier] used for configuring this instance.
        This field can take the following values: PREMIUM or STANDARD. If this field is
        not specified, it is assumed to be PREMIUM.
        """
        ...

    @network_tier.setter
    def network_tier(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="publicPtrDomainName")
    def public_ptr_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS domain name for the public PTR record.
        To set this field on an instance, you must be verified as the owner of the domain.
        See [the docs](https://cloud.google.com/compute/docs/instances/create-ptr-record) for how
        to become verified as a domain owner.
        """
        ...

    @public_ptr_domain_name.setter
    def public_ptr_domain_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceNetworkInterfaceAliasIpRangeArgs:
    def __init__(__self__, *,
                 ip_cidr_range: pulumi.Input[str],
                 subnetwork_range_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip_cidr_range: The IP CIDR range represented by this alias IP range. This IP CIDR range
               must belong to the specified subnetwork and cannot contain IP addresses reserved by
               system or used by other network interfaces. This range may be a single IP address
               (e.g. 10.2.3.4), a netmask (e.g. /24) or a CIDR format string (e.g. 10.1.2.0/24).
        :param pulumi.Input[str] subnetwork_range_name: The subnetwork secondary range name specifying
               the secondary range from which to allocate the IP CIDR range for this alias IP
               range. If left unspecified, the primary range of the subnetwork will be used.
        """
        pulumi.set(__self__, "ipCidrRange", ip_cidr_range)
        pulumi.set(__self__, "subnetworkRangeName", subnetwork_range_name)

    @property
    @pulumi.getter(name="ipCidrRange")
    def ip_cidr_range(self) -> pulumi.Input[str]:
        """
        The IP CIDR range represented by this alias IP range. This IP CIDR range
        must belong to the specified subnetwork and cannot contain IP addresses reserved by
        system or used by other network interfaces. This range may be a single IP address
        (e.g. 10.2.3.4), a netmask (e.g. /24) or a CIDR format string (e.g. 10.1.2.0/24).
        """
        ...

    @ip_cidr_range.setter
    def ip_cidr_range(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="subnetworkRangeName")
    def subnetwork_range_name(self) -> Optional[pulumi.Input[str]]:
        """
        The subnetwork secondary range name specifying
        the secondary range from which to allocate the IP CIDR range for this alias IP
        range. If left unspecified, the primary range of the subnetwork will be used.
        """
        ...

    @subnetwork_range_name.setter
    def subnetwork_range_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceSchedulingArgs:
    def __init__(__self__, *,
                 automatic_restart: Optional[pulumi.Input[bool]] = None,
                 min_node_cpus: Optional[pulumi.Input[float]] = None,
                 node_affinities: Optional[pulumi.Input[List[pulumi.Input['InstanceSchedulingNodeAffinityArgs']]]] = None,
                 on_host_maintenance: Optional[pulumi.Input[str]] = None,
                 preemptible: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] automatic_restart: Specifies if the instance should be
               restarted if it was terminated by Compute Engine (not a user).
               Defaults to true.
        :param pulumi.Input[List[pulumi.Input['InstanceSchedulingNodeAffinityArgs']]] node_affinities: Specifies node affinities or anti-affinities
               to determine which sole-tenant nodes your instances and managed instance
               groups will use as host systems. Read more on sole-tenant node creation
               [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
               Structure documented below.
        :param pulumi.Input[str] on_host_maintenance: Describes maintenance behavior for the
               instance. Can be MIGRATE or TERMINATE, for more info, read
               [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options).
        :param pulumi.Input[bool] preemptible: Specifies if the instance is preemptible.
               If this field is set to true, then `automatic_restart` must be
               set to false.  Defaults to false.
        """
        pulumi.set(__self__, "automaticRestart", automatic_restart)
        pulumi.set(__self__, "minNodeCpus", min_node_cpus)
        pulumi.set(__self__, "nodeAffinities", node_affinities)
        pulumi.set(__self__, "onHostMaintenance", on_host_maintenance)
        pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter(name="automaticRestart")
    def automatic_restart(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if the instance should be
        restarted if it was terminated by Compute Engine (not a user).
        Defaults to true.
        """
        ...

    @automatic_restart.setter
    def automatic_restart(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="minNodeCpus")
    def min_node_cpus(self) -> Optional[pulumi.Input[float]]:
        ...

    @min_node_cpus.setter
    def min_node_cpus(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="nodeAffinities")
    def node_affinities(self) -> Optional[pulumi.Input[List[pulumi.Input['InstanceSchedulingNodeAffinityArgs']]]]:
        """
        Specifies node affinities or anti-affinities
        to determine which sole-tenant nodes your instances and managed instance
        groups will use as host systems. Read more on sole-tenant node creation
        [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
        Structure documented below.
        """
        ...

    @node_affinities.setter
    def node_affinities(self, value: Optional[pulumi.Input[List[pulumi.Input['InstanceSchedulingNodeAffinityArgs']]]]):
        ...

    @property
    @pulumi.getter(name="onHostMaintenance")
    def on_host_maintenance(self) -> Optional[pulumi.Input[str]]:
        """
        Describes maintenance behavior for the
        instance. Can be MIGRATE or TERMINATE, for more info, read
        [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options).
        """
        ...

    @on_host_maintenance.setter
    def on_host_maintenance(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if the instance is preemptible.
        If this field is set to true, then `automatic_restart` must be
        set to false.  Defaults to false.
        """
        ...

    @preemptible.setter
    def preemptible(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class InstanceSchedulingNodeAffinityArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[List[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] key: The key for the node affinity label.
        :param pulumi.Input[str] operator: The operator. Can be `IN` for node-affinities
               or `NOT_IN` for anti-affinities.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key for the node affinity label.
        """
        ...

    @key.setter
    def key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        The operator. Can be `IN` for node-affinities
        or `NOT_IN` for anti-affinities.
        """
        ...

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        ...

    @values.setter
    def values(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...


@pulumi.input_type
class InstanceScratchDiskArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str]):
        """
        :param pulumi.Input[str] interface: The disk interface to use for attaching this disk; either SCSI or NVME.
        """
        pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        The disk interface to use for attaching this disk; either SCSI or NVME.
        """
        ...

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class InstanceServiceAccountArgs:
    def __init__(__self__, *,
                 scopes: pulumi.Input[List[pulumi.Input[str]]],
                 email: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] scopes: A list of service scopes. Both OAuth2 URLs and gcloud
               short names are supported. To allow full access to all Cloud APIs, use the
               `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
               **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
        :param pulumi.Input[str] email: The service account e-mail address. If not given, the
               default Google Compute Engine service account is used.
               **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
        """
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        A list of service scopes. Both OAuth2 URLs and gcloud
        short names are supported. To allow full access to all Cloud APIs, use the
        `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
        **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
        """
        ...

    @scopes.setter
    def scopes(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The service account e-mail address. If not given, the
        default Google Compute Engine service account is used.
        **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
        """
        ...

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceShieldedInstanceConfigArgs:
    def __init__(__self__, *,
                 enable_integrity_monitoring: Optional[pulumi.Input[bool]] = None,
                 enable_secure_boot: Optional[pulumi.Input[bool]] = None,
                 enable_vtpm: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable_integrity_monitoring: -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
        :param pulumi.Input[bool] enable_secure_boot: -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
        :param pulumi.Input[bool] enable_vtpm: -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
        """
        pulumi.set(__self__, "enableIntegrityMonitoring", enable_integrity_monitoring)
        pulumi.set(__self__, "enableSecureBoot", enable_secure_boot)
        pulumi.set(__self__, "enableVtpm", enable_vtpm)

    @property
    @pulumi.getter(name="enableIntegrityMonitoring")
    def enable_integrity_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
        """
        ...

    @enable_integrity_monitoring.setter
    def enable_integrity_monitoring(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
        """
        ...

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableVtpm")
    def enable_vtpm(self) -> Optional[pulumi.Input[bool]]:
        """
        -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
        """
        ...

    @enable_vtpm.setter
    def enable_vtpm(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class InstanceTemplateConfidentialInstanceConfigArgs:
    def __init__(__self__, *,
                 enable_confidential_compute: pulumi.Input[bool]):
        pulumi.set(__self__, "enableConfidentialCompute", enable_confidential_compute)

    @property
    @pulumi.getter(name="enableConfidentialCompute")
    def enable_confidential_compute(self) -> pulumi.Input[bool]:
        ...

    @enable_confidential_compute.setter
    def enable_confidential_compute(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class InstanceTemplateDiskArgs:
    def __init__(__self__, *,
                 auto_delete: Optional[pulumi.Input[bool]] = None,
                 boot: Optional[pulumi.Input[bool]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 disk_encryption_key: Optional[pulumi.Input['InstanceTemplateDiskDiskEncryptionKeyArgs']] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 disk_size_gb: Optional[pulumi.Input[float]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_image: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_delete: Whether or not the disk should be auto-deleted.
               This defaults to true.
        :param pulumi.Input[bool] boot: Indicates that this is a boot disk.
        :param pulumi.Input[str] device_name: A unique device name that is reflected into the
               /dev/  tree of a Linux operating system running within the instance. If not
               specified, the server chooses a default device name to apply to this disk.
        :param pulumi.Input['InstanceTemplateDiskDiskEncryptionKeyArgs'] disk_encryption_key: Encrypts or decrypts a disk using a customer-supplied encryption key.
        :param pulumi.Input[str] disk_name: Name of the disk. When not provided, this defaults
               to the name of the instance.
        :param pulumi.Input[float] disk_size_gb: The size of the image in gigabytes. If not
               specified, it will inherit the size of its base image. For SCRATCH disks,
               the size must be exactly 375GB.
        :param pulumi.Input[str] disk_type: The GCE disk type. Can be either `"pd-ssd"`,
               `"local-ssd"`, or `"pd-standard"`.
        :param pulumi.Input[str] interface: Specifies the disk interface to use for attaching
               this disk.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to instances
               created from this template,
        :param pulumi.Input[str] mode: The mode in which to attach this disk, either READ_WRITE
               or READ_ONLY. If you are attaching or creating a boot disk, this must
               read-write mode.
        :param pulumi.Input[str] source: The name (**not self_link**)
               of the disk (such as those managed by `compute.Disk`) to attach.
               > **Note:** Either `source` or `source_image` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
        :param pulumi.Input[str] source_image: The image from which to
               initialize this disk. This can be one of: the image's `self_link`,
               `projects/{project}/global/images/{image}`,
               `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
               `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
               `{project}/{image}`, `{family}`, or `{image}`.
               > **Note:** Either `source` or `source_image` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
        :param pulumi.Input[str] type: The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        pulumi.set(__self__, "autoDelete", auto_delete)
        pulumi.set(__self__, "boot", boot)
        pulumi.set(__self__, "deviceName", device_name)
        pulumi.set(__self__, "diskEncryptionKey", disk_encryption_key)
        pulumi.set(__self__, "diskName", disk_name)
        pulumi.set(__self__, "diskSizeGb", disk_size_gb)
        pulumi.set(__self__, "diskType", disk_type)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sourceImage", source_image)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the disk should be auto-deleted.
        This defaults to true.
        """
        ...

    @auto_delete.setter
    def auto_delete(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def boot(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that this is a boot disk.
        """
        ...

    @boot.setter
    def boot(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique device name that is reflected into the
        /dev/  tree of a Linux operating system running within the instance. If not
        specified, the server chooses a default device name to apply to this disk.
        """
        ...

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskEncryptionKey")
    def disk_encryption_key(self) -> Optional[pulumi.Input['InstanceTemplateDiskDiskEncryptionKeyArgs']]:
        """
        Encrypts or decrypts a disk using a customer-supplied encryption key.
        """
        ...

    @disk_encryption_key.setter
    def disk_encryption_key(self, value: Optional[pulumi.Input['InstanceTemplateDiskDiskEncryptionKeyArgs']]):
        ...

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the disk. When not provided, this defaults
        to the name of the instance.
        """
        ...

    @disk_name.setter
    def disk_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[pulumi.Input[float]]:
        """
        The size of the image in gigabytes. If not
        specified, it will inherit the size of its base image. For SCRATCH disks,
        the size must be exactly 375GB.
        """
        ...

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        The GCE disk type. Can be either `"pd-ssd"`,
        `"local-ssd"`, or `"pd-standard"`.
        """
        ...

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the disk interface to use for attaching
        this disk.
        """
        ...

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value label pairs to assign to instances
        created from this template,
        """
        ...

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode in which to attach this disk, either READ_WRITE
        or READ_ONLY. If you are attaching or creating a boot disk, this must
        read-write mode.
        """
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The name (**not self_link**)
        of the disk (such as those managed by `compute.Disk`) to attach.
        > **Note:** Either `source` or `source_image` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
        """
        ...

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="sourceImage")
    def source_image(self) -> Optional[pulumi.Input[str]]:
        """
        The image from which to
        initialize this disk. This can be one of: the image's `self_link`,
        `projects/{project}/global/images/{image}`,
        `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
        `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
        `{project}/{image}`, `{family}`, or `{image}`.
        > **Note:** Either `source` or `source_image` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
        """
        ...

    @source_image.setter
    def source_image(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceTemplateDiskDiskEncryptionKeyArgs:
    def __init__(__self__, *,
                 kms_key_self_link: pulumi.Input[str]):
        """
        :param pulumi.Input[str] kms_key_self_link: The self link of the encryption key that is stored in Google Cloud KMS
        """
        pulumi.set(__self__, "kmsKeySelfLink", kms_key_self_link)

    @property
    @pulumi.getter(name="kmsKeySelfLink")
    def kms_key_self_link(self) -> pulumi.Input[str]:
        """
        The self link of the encryption key that is stored in Google Cloud KMS
        """
        ...

    @kms_key_self_link.setter
    def kms_key_self_link(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class InstanceTemplateGuestAcceleratorArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[float],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[float] count: The number of the guest accelerator cards exposed to this instance.
        :param pulumi.Input[str] type: The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[float]:
        """
        The number of the guest accelerator cards exposed to this instance.
        """
        ...

    @count.setter
    def count(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class InstanceTemplateNetworkInterfaceArgs:
    def __init__(__self__, *,
                 access_configs: Optional[pulumi.Input[List[pulumi.Input['InstanceTemplateNetworkInterfaceAccessConfigArgs']]]] = None,
                 alias_ip_ranges: Optional[pulumi.Input[List[pulumi.Input['InstanceTemplateNetworkInterfaceAliasIpRangeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_ip: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None,
                 subnetwork_project: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['InstanceTemplateNetworkInterfaceAccessConfigArgs']]] access_configs: Access configurations, i.e. IPs via which this
               instance can be accessed via the Internet. Omit to ensure that the instance
               is not accessible from the Internet (this means that ssh provisioners will
               not work unless you can send traffic to the instance's
               network (e.g. via tunnel or because it is running on another cloud instance
               on that network). This block can be repeated multiple times. Structure documented below.
        :param pulumi.Input[List[pulumi.Input['InstanceTemplateNetworkInterfaceAliasIpRangeArgs']]] alias_ip_ranges: An
               array of alias IP ranges for this network interface. Can only be specified for network
               interfaces on subnet-mode networks. Structure documented below.
        :param pulumi.Input[str] name: The name of the instance template. If you leave
               this blank, the provider will auto-generate a unique name.
        :param pulumi.Input[str] network: The name or self_link of the network to attach this interface to.
               Use `network` attribute for Legacy or Auto subnetted networks and
               `subnetwork` for custom subnetted networks.
        :param pulumi.Input[str] network_ip: The private IP address to assign to the instance. If
               empty, the address will be automatically assigned.
        :param pulumi.Input[str] subnetwork: the name of the subnetwork to attach this interface
               to. The subnetwork must exist in the same `region` this instance will be
               created in. Either `network` or `subnetwork` must be provided.
        :param pulumi.Input[str] subnetwork_project: The ID of the project in which the subnetwork belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "accessConfigs", access_configs)
        pulumi.set(__self__, "aliasIpRanges", alias_ip_ranges)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "networkIp", network_ip)
        pulumi.set(__self__, "subnetwork", subnetwork)
        pulumi.set(__self__, "subnetworkProject", subnetwork_project)

    @property
    @pulumi.getter(name="accessConfigs")
    def access_configs(self) -> Optional[pulumi.Input[List[pulumi.Input['InstanceTemplateNetworkInterfaceAccessConfigArgs']]]]:
        """
        Access configurations, i.e. IPs via which this
        instance can be accessed via the Internet. Omit to ensure that the instance
        is not accessible from the Internet (this means that ssh provisioners will
        not work unless you can send traffic to the instance's
        network (e.g. via tunnel or because it is running on another cloud instance
        on that network). This block can be repeated multiple times. Structure documented below.
        """
        ...

    @access_configs.setter
    def access_configs(self, value: Optional[pulumi.Input[List[pulumi.Input['InstanceTemplateNetworkInterfaceAccessConfigArgs']]]]):
        ...

    @property
    @pulumi.getter(name="aliasIpRanges")
    def alias_ip_ranges(self) -> Optional[pulumi.Input[List[pulumi.Input['InstanceTemplateNetworkInterfaceAliasIpRangeArgs']]]]:
        """
        An
        array of alias IP ranges for this network interface. Can only be specified for network
        interfaces on subnet-mode networks. Structure documented below.
        """
        ...

    @alias_ip_ranges.setter
    def alias_ip_ranges(self, value: Optional[pulumi.Input[List[pulumi.Input['InstanceTemplateNetworkInterfaceAliasIpRangeArgs']]]]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the instance template. If you leave
        this blank, the provider will auto-generate a unique name.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The name or self_link of the network to attach this interface to.
        Use `network` attribute for Legacy or Auto subnetted networks and
        `subnetwork` for custom subnetted networks.
        """
        ...

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="networkIp")
    def network_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The private IP address to assign to the instance. If
        empty, the address will be automatically assigned.
        """
        ...

    @network_ip.setter
    def network_ip(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        the name of the subnetwork to attach this interface
        to. The subnetwork must exist in the same `region` this instance will be
        created in. Either `network` or `subnetwork` must be provided.
        """
        ...

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="subnetworkProject")
    def subnetwork_project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the subnetwork belongs.
        If it is not provided, the provider project is used.
        """
        ...

    @subnetwork_project.setter
    def subnetwork_project(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceTemplateNetworkInterfaceAccessConfigArgs:
    def __init__(__self__, *,
                 nat_ip: Optional[pulumi.Input[str]] = None,
                 network_tier: Optional[pulumi.Input[str]] = None,
                 public_ptr_domain_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] nat_ip: The IP address that will be 1:1 mapped to the instance's
               network ip. If not given, one will be generated.
        :param pulumi.Input[str] network_tier: The [networking tier][network-tier] used for configuring
               this instance template. This field can take the following values: PREMIUM or
               STANDARD. If this field is not specified, it is assumed to be PREMIUM.
        """
        pulumi.set(__self__, "natIp", nat_ip)
        pulumi.set(__self__, "networkTier", network_tier)
        pulumi.set(__self__, "publicPtrDomainName", public_ptr_domain_name)

    @property
    @pulumi.getter(name="natIp")
    def nat_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address that will be 1:1 mapped to the instance's
        network ip. If not given, one will be generated.
        """
        ...

    @nat_ip.setter
    def nat_ip(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="networkTier")
    def network_tier(self) -> Optional[pulumi.Input[str]]:
        """
        The [networking tier][network-tier] used for configuring
        this instance template. This field can take the following values: PREMIUM or
        STANDARD. If this field is not specified, it is assumed to be PREMIUM.
        """
        ...

    @network_tier.setter
    def network_tier(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="publicPtrDomainName")
    def public_ptr_domain_name(self) -> Optional[pulumi.Input[str]]:
        ...

    @public_ptr_domain_name.setter
    def public_ptr_domain_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceTemplateNetworkInterfaceAliasIpRangeArgs:
    def __init__(__self__, *,
                 ip_cidr_range: pulumi.Input[str],
                 subnetwork_range_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip_cidr_range: The IP CIDR range represented by this alias IP range. This IP CIDR range
               must belong to the specified subnetwork and cannot contain IP addresses reserved by
               system or used by other network interfaces. At the time of writing only a
               netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API
               error.
        :param pulumi.Input[str] subnetwork_range_name: The subnetwork secondary range name specifying
               the secondary range from which to allocate the IP CIDR range for this alias IP
               range. If left unspecified, the primary range of the subnetwork will be used.
        """
        pulumi.set(__self__, "ipCidrRange", ip_cidr_range)
        pulumi.set(__self__, "subnetworkRangeName", subnetwork_range_name)

    @property
    @pulumi.getter(name="ipCidrRange")
    def ip_cidr_range(self) -> pulumi.Input[str]:
        """
        The IP CIDR range represented by this alias IP range. This IP CIDR range
        must belong to the specified subnetwork and cannot contain IP addresses reserved by
        system or used by other network interfaces. At the time of writing only a
        netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API
        error.
        """
        ...

    @ip_cidr_range.setter
    def ip_cidr_range(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="subnetworkRangeName")
    def subnetwork_range_name(self) -> Optional[pulumi.Input[str]]:
        """
        The subnetwork secondary range name specifying
        the secondary range from which to allocate the IP CIDR range for this alias IP
        range. If left unspecified, the primary range of the subnetwork will be used.
        """
        ...

    @subnetwork_range_name.setter
    def subnetwork_range_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceTemplateSchedulingArgs:
    def __init__(__self__, *,
                 automatic_restart: Optional[pulumi.Input[bool]] = None,
                 min_node_cpus: Optional[pulumi.Input[float]] = None,
                 node_affinities: Optional[pulumi.Input[List[pulumi.Input['InstanceTemplateSchedulingNodeAffinityArgs']]]] = None,
                 on_host_maintenance: Optional[pulumi.Input[str]] = None,
                 preemptible: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] automatic_restart: Specifies whether the instance should be
               automatically restarted if it is terminated by Compute Engine (not
               terminated by a user). This defaults to true.
        :param pulumi.Input[List[pulumi.Input['InstanceTemplateSchedulingNodeAffinityArgs']]] node_affinities: Specifies node affinities or anti-affinities
               to determine which sole-tenant nodes your instances and managed instance
               groups will use as host systems. Read more on sole-tenant node creation
               [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
               Structure documented below.
        :param pulumi.Input[str] on_host_maintenance: Defines the maintenance behavior for this
               instance.
        :param pulumi.Input[bool] preemptible: Allows instance to be preempted. This defaults to
               false. Read more on this
               [here](https://cloud.google.com/compute/docs/instances/preemptible).
        """
        pulumi.set(__self__, "automaticRestart", automatic_restart)
        pulumi.set(__self__, "minNodeCpus", min_node_cpus)
        pulumi.set(__self__, "nodeAffinities", node_affinities)
        pulumi.set(__self__, "onHostMaintenance", on_host_maintenance)
        pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter(name="automaticRestart")
    def automatic_restart(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the instance should be
        automatically restarted if it is terminated by Compute Engine (not
        terminated by a user). This defaults to true.
        """
        ...

    @automatic_restart.setter
    def automatic_restart(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="minNodeCpus")
    def min_node_cpus(self) -> Optional[pulumi.Input[float]]:
        ...

    @min_node_cpus.setter
    def min_node_cpus(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="nodeAffinities")
    def node_affinities(self) -> Optional[pulumi.Input[List[pulumi.Input['InstanceTemplateSchedulingNodeAffinityArgs']]]]:
        """
        Specifies node affinities or anti-affinities
        to determine which sole-tenant nodes your instances and managed instance
        groups will use as host systems. Read more on sole-tenant node creation
        [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
        Structure documented below.
        """
        ...

    @node_affinities.setter
    def node_affinities(self, value: Optional[pulumi.Input[List[pulumi.Input['InstanceTemplateSchedulingNodeAffinityArgs']]]]):
        ...

    @property
    @pulumi.getter(name="onHostMaintenance")
    def on_host_maintenance(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the maintenance behavior for this
        instance.
        """
        ...

    @on_host_maintenance.setter
    def on_host_maintenance(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows instance to be preempted. This defaults to
        false. Read more on this
        [here](https://cloud.google.com/compute/docs/instances/preemptible).
        """
        ...

    @preemptible.setter
    def preemptible(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class InstanceTemplateSchedulingNodeAffinityArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[List[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] key: The key for the node affinity label.
        :param pulumi.Input[str] operator: The operator. Can be `IN` for node-affinities
               or `NOT_IN` for anti-affinities.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key for the node affinity label.
        """
        ...

    @key.setter
    def key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        The operator. Can be `IN` for node-affinities
        or `NOT_IN` for anti-affinities.
        """
        ...

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        ...

    @values.setter
    def values(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...


@pulumi.input_type
class InstanceTemplateServiceAccountArgs:
    def __init__(__self__, *,
                 scopes: pulumi.Input[List[pulumi.Input[str]]],
                 email: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] scopes: A list of service scopes. Both OAuth2 URLs and gcloud
               short names are supported. To allow full access to all Cloud APIs, use the
               `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
        :param pulumi.Input[str] email: The service account e-mail address. If not given, the
               default Google Compute Engine service account is used.
        """
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        A list of service scopes. Both OAuth2 URLs and gcloud
        short names are supported. To allow full access to all Cloud APIs, use the
        `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
        """
        ...

    @scopes.setter
    def scopes(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The service account e-mail address. If not given, the
        default Google Compute Engine service account is used.
        """
        ...

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class InstanceTemplateShieldedInstanceConfigArgs:
    def __init__(__self__, *,
                 enable_integrity_monitoring: Optional[pulumi.Input[bool]] = None,
                 enable_secure_boot: Optional[pulumi.Input[bool]] = None,
                 enable_vtpm: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable_integrity_monitoring: -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
        :param pulumi.Input[bool] enable_secure_boot: -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
        :param pulumi.Input[bool] enable_vtpm: -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
        """
        pulumi.set(__self__, "enableIntegrityMonitoring", enable_integrity_monitoring)
        pulumi.set(__self__, "enableSecureBoot", enable_secure_boot)
        pulumi.set(__self__, "enableVtpm", enable_vtpm)

    @property
    @pulumi.getter(name="enableIntegrityMonitoring")
    def enable_integrity_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
        """
        ...

    @enable_integrity_monitoring.setter
    def enable_integrity_monitoring(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
        """
        ...

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableVtpm")
    def enable_vtpm(self) -> Optional[pulumi.Input[bool]]:
        """
        -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
        """
        ...

    @enable_vtpm.setter
    def enable_vtpm(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class InterconnectAttachmentPrivateInterconnectInfoArgs:
    def __init__(__self__, *,
                 tag8021q: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "tag8021q", tag8021q)

    @property
    @pulumi.getter
    def tag8021q(self) -> Optional[pulumi.Input[float]]:
        ...

    @tag8021q.setter
    def tag8021q(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class ManagedSslCertificateManagedArgs:
    def __init__(__self__, *,
                 domains: pulumi.Input[List[pulumi.Input[str]]]):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] domains: Domains for which a managed SSL certificate will be valid.  Currently,
               there can be up to 100 domains in this list.
        """
        pulumi.set(__self__, "domains", domains)

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        Domains for which a managed SSL certificate will be valid.  Currently,
        there can be up to 100 domains in this list.
        """
        ...

    @domains.setter
    def domains(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...


@pulumi.input_type
class MangedSslCertificateManagedArgs:
    def __init__(__self__, *,
                 domains: pulumi.Input[List[pulumi.Input[str]]]):
        pulumi.set(__self__, "domains", domains)

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        ...

    @domains.setter
    def domains(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...


@pulumi.input_type
class NodeGroupAutoscalingPolicyArgs:
    def __init__(__self__, *,
                 max_nodes: Optional[pulumi.Input[float]] = None,
                 min_nodes: Optional[pulumi.Input[float]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] max_nodes: Maximum size of the node group. Set to a value less than or equal
               to 100 and greater than or equal to min-nodes.
        :param pulumi.Input[float] min_nodes: Minimum size of the node group. Must be less
               than or equal to max-nodes. The default value is 0.
        :param pulumi.Input[str] mode: The autoscaling mode. Set to one of the following:
               - OFF: Disables the autoscaler.
               - ON: Enables scaling in and scaling out.
               - ONLY_SCALE_OUT: Enables only scaling out.
               You must use this mode if your node groups are configured to
               restart their hosted VMs on minimal servers.
               Possible values are `OFF`, `ON`, and `ONLY_SCALE_OUT`.
        """
        pulumi.set(__self__, "maxNodes", max_nodes)
        pulumi.set(__self__, "minNodes", min_nodes)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="maxNodes")
    def max_nodes(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum size of the node group. Set to a value less than or equal
        to 100 and greater than or equal to min-nodes.
        """
        ...

    @max_nodes.setter
    def max_nodes(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="minNodes")
    def min_nodes(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum size of the node group. Must be less
        than or equal to max-nodes. The default value is 0.
        """
        ...

    @min_nodes.setter
    def min_nodes(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The autoscaling mode. Set to one of the following:
        - OFF: Disables the autoscaler.
        - ON: Enables scaling in and scaling out.
        - ONLY_SCALE_OUT: Enables only scaling out.
        You must use this mode if your node groups are configured to
        restart their hosted VMs on minimal servers.
        Possible values are `OFF`, `ON`, and `ONLY_SCALE_OUT`.
        """
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class NodeTemplateNodeTypeFlexibilityArgs:
    def __init__(__self__, *,
                 cpus: Optional[pulumi.Input[str]] = None,
                 local_ssd: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpus: Number of virtual CPUs to use.
        :param pulumi.Input[str] local_ssd: -
               Use local SSD
        :param pulumi.Input[str] memory: Physical memory available to the node, defined in MB.
        """
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "localSsd", local_ssd)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpus(self) -> Optional[pulumi.Input[str]]:
        """
        Number of virtual CPUs to use.
        """
        ...

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="localSsd")
    def local_ssd(self) -> Optional[pulumi.Input[str]]:
        """
        -
        Use local SSD
        """
        ...

    @local_ssd.setter
    def local_ssd(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        Physical memory available to the node, defined in MB.
        """
        ...

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class NodeTemplateServerBindingArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] type: Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
               nodes using this template will restart on any physical server
               following a maintenance event.
               If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
               will restart on the same physical server following a maintenance
               event, instead of being live migrated to or restarted on a new
               physical server. This option may be useful if you are using
               software licenses tied to the underlying server characteristics
               such as physical sockets or cores, to avoid the need for
               additional licenses when maintenance occurs. However, VMs on such
               nodes will experience outages while maintenance is applied.
               Possible values are `RESTART_NODE_ON_ANY_SERVER` and `RESTART_NODE_ON_MINIMAL_SERVERS`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
        nodes using this template will restart on any physical server
        following a maintenance event.
        If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
        will restart on the same physical server following a maintenance
        event, instead of being live migrated to or restarted on a new
        physical server. This option may be useful if you are using
        software licenses tied to the underlying server characteristics
        such as physical sockets or cores, to avoid the need for
        additional licenses when maintenance occurs. However, VMs on such
        nodes will experience outages while maintenance is applied.
        Possible values are `RESTART_NODE_ON_ANY_SERVER` and `RESTART_NODE_ON_MINIMAL_SERVERS`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class OrganizationSecurityPolicyRuleMatchArgs:
    def __init__(__self__, *,
                 config: pulumi.Input['OrganizationSecurityPolicyRuleMatchConfigArgs'],
                 description: Optional[pulumi.Input[str]] = None,
                 versioned_expr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['OrganizationSecurityPolicyRuleMatchConfigArgs'] config: The configuration options for matching the rule.
               Structure is documented below.
        :param pulumi.Input[str] description: A description of the rule.
        :param pulumi.Input[str] versioned_expr: Preconfigured versioned expression. For organization security policy rules,
               the only supported type is "FIREWALL".
               Default value is `FIREWALL`.
               Possible values are `FIREWALL`.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "versionedExpr", versioned_expr)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input['OrganizationSecurityPolicyRuleMatchConfigArgs']:
        """
        The configuration options for matching the rule.
        Structure is documented below.
        """
        ...

    @config.setter
    def config(self, value: pulumi.Input['OrganizationSecurityPolicyRuleMatchConfigArgs']):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the rule.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="versionedExpr")
    def versioned_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Preconfigured versioned expression. For organization security policy rules,
        the only supported type is "FIREWALL".
        Default value is `FIREWALL`.
        Possible values are `FIREWALL`.
        """
        ...

    @versioned_expr.setter
    def versioned_expr(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class OrganizationSecurityPolicyRuleMatchConfigArgs:
    def __init__(__self__, *,
                 layer4_configs: pulumi.Input[List[pulumi.Input['OrganizationSecurityPolicyRuleMatchConfigLayer4ConfigArgs']]],
                 dest_ip_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 src_ip_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['OrganizationSecurityPolicyRuleMatchConfigLayer4ConfigArgs']]] layer4_configs: Pairs of IP protocols and ports that the rule should match.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] dest_ip_ranges: Destination IP address range in CIDR format. Required for
               EGRESS rules.
        :param pulumi.Input[List[pulumi.Input[str]]] src_ip_ranges: Source IP address range in CIDR format. Required for
               INGRESS rules.
        """
        pulumi.set(__self__, "layer4Configs", layer4_configs)
        pulumi.set(__self__, "destIpRanges", dest_ip_ranges)
        pulumi.set(__self__, "srcIpRanges", src_ip_ranges)

    @property
    @pulumi.getter(name="layer4Configs")
    def layer4_configs(self) -> pulumi.Input[List[pulumi.Input['OrganizationSecurityPolicyRuleMatchConfigLayer4ConfigArgs']]]:
        """
        Pairs of IP protocols and ports that the rule should match.
        Structure is documented below.
        """
        ...

    @layer4_configs.setter
    def layer4_configs(self, value: pulumi.Input[List[pulumi.Input['OrganizationSecurityPolicyRuleMatchConfigLayer4ConfigArgs']]]):
        ...

    @property
    @pulumi.getter(name="destIpRanges")
    def dest_ip_ranges(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Destination IP address range in CIDR format. Required for
        EGRESS rules.
        """
        ...

    @dest_ip_ranges.setter
    def dest_ip_ranges(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="srcIpRanges")
    def src_ip_ranges(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Source IP address range in CIDR format. Required for
        INGRESS rules.
        """
        ...

    @src_ip_ranges.setter
    def src_ip_ranges(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class OrganizationSecurityPolicyRuleMatchConfigLayer4ConfigArgs:
    def __init__(__self__, *,
                 ip_protocol: pulumi.Input[str],
                 ports: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] ip_protocol: The IP protocol to which this rule applies. The protocol
               type is required when creating a firewall rule.
               This value can either be one of the following well
               known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp),
               or the IP protocol number.
        :param pulumi.Input[List[pulumi.Input[str]]] ports: An optional list of ports to which this rule applies. This field
               is only applicable for UDP or TCP protocol. Each entry must be
               either an integer or a range. If not specified, this rule
               applies to connections through any port.
               Example inputs include: ["22"], ["80","443"], and
               ["12345-12349"].
        """
        pulumi.set(__self__, "ipProtocol", ip_protocol)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> pulumi.Input[str]:
        """
        The IP protocol to which this rule applies. The protocol
        type is required when creating a firewall rule.
        This value can either be one of the following well
        known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp),
        or the IP protocol number.
        """
        ...

    @ip_protocol.setter
    def ip_protocol(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        An optional list of ports to which this rule applies. This field
        is only applicable for UDP or TCP protocol. Each entry must be
        either an integer or a range. If not specified, this rule
        applies to connections through any port.
        Example inputs include: ["22"], ["80","443"], and
        ["12345-12349"].
        """
        ...

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class PacketMirroringCollectorIlbArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: The URL of the instances where this rule should be active.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the instances where this rule should be active.
        """
        ...

    @url.setter
    def url(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class PacketMirroringFilterArgs:
    def __init__(__self__, *,
                 cidr_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 ip_protocols: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] cidr_ranges: IP CIDR ranges that apply as a filter on the source (ingress) or
               destination (egress) IP in the IP header. Only IPv4 is supported.
        :param pulumi.Input[List[pulumi.Input[str]]] ip_protocols: Protocols that apply as a filter on mirrored traffic.
               Each value may be one of `tcp`, `udp`, and `icmp`.
        """
        pulumi.set(__self__, "cidrRanges", cidr_ranges)
        pulumi.set(__self__, "ipProtocols", ip_protocols)

    @property
    @pulumi.getter(name="cidrRanges")
    def cidr_ranges(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        IP CIDR ranges that apply as a filter on the source (ingress) or
        destination (egress) IP in the IP header. Only IPv4 is supported.
        """
        ...

    @cidr_ranges.setter
    def cidr_ranges(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="ipProtocols")
    def ip_protocols(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Protocols that apply as a filter on mirrored traffic.
        Each value may be one of `tcp`, `udp`, and `icmp`.
        """
        ...

    @ip_protocols.setter
    def ip_protocols(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class PacketMirroringMirroredResourcesArgs:
    def __init__(__self__, *,
                 instances: Optional[pulumi.Input[List[pulumi.Input['PacketMirroringMirroredResourcesInstanceArgs']]]] = None,
                 subnetworks: Optional[pulumi.Input[List[pulumi.Input['PacketMirroringMirroredResourcesSubnetworkArgs']]]] = None,
                 tags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['PacketMirroringMirroredResourcesInstanceArgs']]] instances: All the listed instances will be mirrored.  Specify at most 50.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['PacketMirroringMirroredResourcesSubnetworkArgs']]] subnetworks: All instances in one of these subnetworks will be mirrored.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] tags: All instances with these tags will be mirrored.
        """
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "subnetworks", subnetworks)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[List[pulumi.Input['PacketMirroringMirroredResourcesInstanceArgs']]]]:
        """
        All the listed instances will be mirrored.  Specify at most 50.
        Structure is documented below.
        """
        ...

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[List[pulumi.Input['PacketMirroringMirroredResourcesInstanceArgs']]]]):
        ...

    @property
    @pulumi.getter
    def subnetworks(self) -> Optional[pulumi.Input[List[pulumi.Input['PacketMirroringMirroredResourcesSubnetworkArgs']]]]:
        """
        All instances in one of these subnetworks will be mirrored.
        Structure is documented below.
        """
        ...

    @subnetworks.setter
    def subnetworks(self, value: Optional[pulumi.Input[List[pulumi.Input['PacketMirroringMirroredResourcesSubnetworkArgs']]]]):
        ...

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        All instances with these tags will be mirrored.
        """
        ...

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class PacketMirroringMirroredResourcesInstanceArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: The URL of the instances where this rule should be active.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the instances where this rule should be active.
        """
        ...

    @url.setter
    def url(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class PacketMirroringMirroredResourcesSubnetworkArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: The URL of the instances where this rule should be active.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the instances where this rule should be active.
        """
        ...

    @url.setter
    def url(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class PacketMirroringNetworkArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: The URL of the instances where this rule should be active.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the instances where this rule should be active.
        """
        ...

    @url.setter
    def url(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class PerInstanceConfigPreservedStateArgs:
    def __init__(__self__, *,
                 disks: Optional[pulumi.Input[List[pulumi.Input['PerInstanceConfigPreservedStateDiskArgs']]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['PerInstanceConfigPreservedStateDiskArgs']]] disks: Stateful disks for the instance.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Preserved metadata defined for this instance. This is a list of key->value pairs.
        """
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[List[pulumi.Input['PerInstanceConfigPreservedStateDiskArgs']]]]:
        """
        Stateful disks for the instance.
        Structure is documented below.
        """
        ...

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[List[pulumi.Input['PerInstanceConfigPreservedStateDiskArgs']]]]):
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Preserved metadata defined for this instance. This is a list of key->value pairs.
        """
        ...

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class PerInstanceConfigPreservedStateDiskArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 source: pulumi.Input[str],
                 delete_rule: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] device_name: A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.
        :param pulumi.Input[str] source: The URI of an existing persistent disk to attach under the specified device-name in the format
               `projects/project-id/zones/zone/disks/disk-name`.
        :param pulumi.Input[str] delete_rule: A value that prescribes what should happen to the stateful disk when the VM instance is deleted.
               The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
               `NEVER` detatch the disk when the VM is deleted, but not delete the disk.
               `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently
               deleted from the instance group.
               Default value is `NEVER`.
               Possible values are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
        :param pulumi.Input[str] mode: The mode of the disk.
               Default value is `READ_WRITE`.
               Possible values are `READ_ONLY` and `READ_WRITE`.
        """
        pulumi.set(__self__, "deviceName", device_name)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "deleteRule", delete_rule)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        """
        A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.
        """
        ...

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The URI of an existing persistent disk to attach under the specified device-name in the format
        `projects/project-id/zones/zone/disks/disk-name`.
        """
        ...

    @source.setter
    def source(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="deleteRule")
    def delete_rule(self) -> Optional[pulumi.Input[str]]:
        """
        A value that prescribes what should happen to the stateful disk when the VM instance is deleted.
        The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
        `NEVER` detatch the disk when the VM is deleted, but not delete the disk.
        `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently
        deleted from the instance group.
        Default value is `NEVER`.
        Possible values are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
        """
        ...

    @delete_rule.setter
    def delete_rule(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode of the disk.
        Default value is `READ_WRITE`.
        Possible values are `READ_ONLY` and `READ_WRITE`.
        """
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionAutoscalerAutoscalingPolicyArgs:
    def __init__(__self__, *,
                 max_replicas: pulumi.Input[float],
                 min_replicas: pulumi.Input[float],
                 cooldown_period: Optional[pulumi.Input[float]] = None,
                 cpu_utilization: Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs']] = None,
                 load_balancing_utilization: Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs']] = None,
                 metrics: Optional[pulumi.Input[List[pulumi.Input['RegionAutoscalerAutoscalingPolicyMetricArgs']]]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 scale_down_control: Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyScaleDownControlArgs']] = None):
        """
        :param pulumi.Input[float] max_replicas: The maximum number of instances that the autoscaler can scale up
               to. This is required when creating or updating an autoscaler. The
               maximum number of replicas should not be lower than minimal number
               of replicas.
        :param pulumi.Input[float] min_replicas: The minimum number of replicas that the autoscaler can scale down
               to. This cannot be less than 0. If not provided, autoscaler will
               choose a default value depending on maximum number of instances
               allowed.
        :param pulumi.Input[float] cooldown_period: The number of seconds that the autoscaler should wait before it
               starts collecting information from a new instance. This prevents
               the autoscaler from collecting information when the instance is
               initializing, during which the collected usage would not be
               reliable. The default time autoscaler waits is 60 seconds.
               Virtual machine initialization times might vary because of
               numerous factors. We recommend that you test how long an
               instance may take to initialize. To do this, create an instance
               and time the startup process.
        :param pulumi.Input['RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs'] cpu_utilization: Defines the CPU utilization policy that allows the autoscaler to
               scale based on the average CPU utilization of a managed instance
               group.
               Structure is documented below.
        :param pulumi.Input['RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs'] load_balancing_utilization: Configuration parameters of autoscaling based on a load balancer.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['RegionAutoscalerAutoscalingPolicyMetricArgs']]] metrics: Configuration parameters of autoscaling based on a custom metric.
               Structure is documented below.
        :param pulumi.Input[str] mode: Defines operating mode for this policy.
               Default value is `ON`.
               Possible values are `OFF`, `ONLY_UP`, and `ON`.
        """
        pulumi.set(__self__, "maxReplicas", max_replicas)
        pulumi.set(__self__, "minReplicas", min_replicas)
        pulumi.set(__self__, "cooldownPeriod", cooldown_period)
        pulumi.set(__self__, "cpuUtilization", cpu_utilization)
        pulumi.set(__self__, "loadBalancingUtilization", load_balancing_utilization)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "scaleDownControl", scale_down_control)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[float]:
        """
        The maximum number of instances that the autoscaler can scale up
        to. This is required when creating or updating an autoscaler. The
        maximum number of replicas should not be lower than minimal number
        of replicas.
        """
        ...

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[float]:
        """
        The minimum number of replicas that the autoscaler can scale down
        to. This cannot be less than 0. If not provided, autoscaler will
        choose a default value depending on maximum number of instances
        allowed.
        """
        ...

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> Optional[pulumi.Input[float]]:
        """
        The number of seconds that the autoscaler should wait before it
        starts collecting information from a new instance. This prevents
        the autoscaler from collecting information when the instance is
        initializing, during which the collected usage would not be
        reliable. The default time autoscaler waits is 60 seconds.
        Virtual machine initialization times might vary because of
        numerous factors. We recommend that you test how long an
        instance may take to initialize. To do this, create an instance
        and time the startup process.
        """
        ...

    @cooldown_period.setter
    def cooldown_period(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="cpuUtilization")
    def cpu_utilization(self) -> Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs']]:
        """
        Defines the CPU utilization policy that allows the autoscaler to
        scale based on the average CPU utilization of a managed instance
        group.
        Structure is documented below.
        """
        ...

    @cpu_utilization.setter
    def cpu_utilization(self, value: Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs']]):
        ...

    @property
    @pulumi.getter(name="loadBalancingUtilization")
    def load_balancing_utilization(self) -> Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs']]:
        """
        Configuration parameters of autoscaling based on a load balancer.
        Structure is documented below.
        """
        ...

    @load_balancing_utilization.setter
    def load_balancing_utilization(self, value: Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs']]):
        ...

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionAutoscalerAutoscalingPolicyMetricArgs']]]]:
        """
        Configuration parameters of autoscaling based on a custom metric.
        Structure is documented below.
        """
        ...

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionAutoscalerAutoscalingPolicyMetricArgs']]]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Defines operating mode for this policy.
        Default value is `ON`.
        Possible values are `OFF`, `ONLY_UP`, and `ON`.
        """
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="scaleDownControl")
    def scale_down_control(self) -> Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyScaleDownControlArgs']]:
        ...

    @scale_down_control.setter
    def scale_down_control(self, value: Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyScaleDownControlArgs']]):
        ...


@pulumi.input_type
class RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float]):
        """
        :param pulumi.Input[float] target: Fraction of backend capacity utilization (set in HTTP(s) load
               balancing configuration) that autoscaler should maintain. Must
               be a positive float value. If not defined, the default is 0.8.
        """
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        Fraction of backend capacity utilization (set in HTTP(s) load
        balancing configuration) that autoscaler should maintain. Must
        be a positive float value. If not defined, the default is 0.8.
        """
        ...

    @target.setter
    def target(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float]):
        """
        :param pulumi.Input[float] target: Fraction of backend capacity utilization (set in HTTP(s) load
               balancing configuration) that autoscaler should maintain. Must
               be a positive float value. If not defined, the default is 0.8.
        """
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        Fraction of backend capacity utilization (set in HTTP(s) load
        balancing configuration) that autoscaler should maintain. Must
        be a positive float value. If not defined, the default is 0.8.
        """
        ...

    @target.setter
    def target(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class RegionAutoscalerAutoscalingPolicyMetricArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 filter: Optional[pulumi.Input[str]] = None,
                 single_instance_assignment: Optional[pulumi.Input[float]] = None,
                 target: Optional[pulumi.Input[float]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The identifier (type) of the Stackdriver Monitoring metric.
               The metric cannot have negative values.
               The metric must have a value type of INT64 or DOUBLE.
        :param pulumi.Input[str] filter: A filter string to be used as the filter string for
               a Stackdriver Monitoring TimeSeries.list API call.
               This filter is used to select a specific TimeSeries for
               the purpose of autoscaling and to determine whether the metric
               is exporting per-instance or per-group data.
               You can only use the AND operator for joining selectors.
               You can only use direct equality comparison operator (=) without
               any functions for each selector.
               You can specify the metric in both the filter string and in the
               metric field. However, if specified in both places, the metric must
               be identical.
               The monitored resource type determines what kind of values are
               expected for the metric. If it is a gce_instance, the autoscaler
               expects the metric to include a separate TimeSeries for each
               instance in a group. In such a case, you cannot filter on resource
               labels.
               If the resource type is any other value, the autoscaler expects
               this metric to contain values that apply to the entire autoscaled
               instance group and resource label filtering can be performed to
               point autoscaler at the correct TimeSeries to scale upon.
               This is called a per-group metric for the purpose of autoscaling.
               If not specified, the type defaults to gce_instance.
               You should provide a filter that is selective enough to pick just
               one TimeSeries for the autoscaled group or for each of the instances
               (if you are using gce_instance resource type). If multiple
               TimeSeries are returned upon the query execution, the autoscaler
               will sum their respective values to obtain its scaling value.
        :param pulumi.Input[float] single_instance_assignment: If scaling is based on a per-group metric value that represents the
               total amount of work to be done or resource usage, set this value to
               an amount assigned for a single instance of the scaled group.
               The autoscaler will keep the number of instances proportional to the
               value of this metric, the metric itself should not change value due
               to group resizing.
               For example, a good metric to use with the target is
               `pubsub.googleapis.com/subscription/num_undelivered_messages`
               or a custom metric exporting the total number of requests coming to
               your instances.
               A bad example would be a metric exporting an average or median
               latency, since this value can't include a chunk assignable to a
               single instance, it could be better used with utilization_target
               instead.
        :param pulumi.Input[float] target: Fraction of backend capacity utilization (set in HTTP(s) load
               balancing configuration) that autoscaler should maintain. Must
               be a positive float value. If not defined, the default is 0.8.
        :param pulumi.Input[str] type: Defines how target utilization value is expressed for a
               Stackdriver Monitoring metric.
               Possible values are `GAUGE`, `DELTA_PER_SECOND`, and `DELTA_PER_MINUTE`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "singleInstanceAssignment", single_instance_assignment)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The identifier (type) of the Stackdriver Monitoring metric.
        The metric cannot have negative values.
        The metric must have a value type of INT64 or DOUBLE.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter string to be used as the filter string for
        a Stackdriver Monitoring TimeSeries.list API call.
        This filter is used to select a specific TimeSeries for
        the purpose of autoscaling and to determine whether the metric
        is exporting per-instance or per-group data.
        You can only use the AND operator for joining selectors.
        You can only use direct equality comparison operator (=) without
        any functions for each selector.
        You can specify the metric in both the filter string and in the
        metric field. However, if specified in both places, the metric must
        be identical.
        The monitored resource type determines what kind of values are
        expected for the metric. If it is a gce_instance, the autoscaler
        expects the metric to include a separate TimeSeries for each
        instance in a group. In such a case, you cannot filter on resource
        labels.
        If the resource type is any other value, the autoscaler expects
        this metric to contain values that apply to the entire autoscaled
        instance group and resource label filtering can be performed to
        point autoscaler at the correct TimeSeries to scale upon.
        This is called a per-group metric for the purpose of autoscaling.
        If not specified, the type defaults to gce_instance.
        You should provide a filter that is selective enough to pick just
        one TimeSeries for the autoscaled group or for each of the instances
        (if you are using gce_instance resource type). If multiple
        TimeSeries are returned upon the query execution, the autoscaler
        will sum their respective values to obtain its scaling value.
        """
        ...

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="singleInstanceAssignment")
    def single_instance_assignment(self) -> Optional[pulumi.Input[float]]:
        """
        If scaling is based on a per-group metric value that represents the
        total amount of work to be done or resource usage, set this value to
        an amount assigned for a single instance of the scaled group.
        The autoscaler will keep the number of instances proportional to the
        value of this metric, the metric itself should not change value due
        to group resizing.
        For example, a good metric to use with the target is
        `pubsub.googleapis.com/subscription/num_undelivered_messages`
        or a custom metric exporting the total number of requests coming to
        your instances.
        A bad example would be a metric exporting an average or median
        latency, since this value can't include a chunk assignable to a
        single instance, it could be better used with utilization_target
        instead.
        """
        ...

    @single_instance_assignment.setter
    def single_instance_assignment(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[float]]:
        """
        Fraction of backend capacity utilization (set in HTTP(s) load
        balancing configuration) that autoscaler should maintain. Must
        be a positive float value. If not defined, the default is 0.8.
        """
        ...

    @target.setter
    def target(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Defines how target utilization value is expressed for a
        Stackdriver Monitoring metric.
        Possible values are `GAUGE`, `DELTA_PER_SECOND`, and `DELTA_PER_MINUTE`.
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionAutoscalerAutoscalingPolicyScaleDownControlArgs:
    def __init__(__self__, *,
                 max_scaled_down_replicas: Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs']] = None,
                 time_window_sec: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['RegionAutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs'] max_scaled_down_replicas: A nested object resource
               Structure is documented below.
        :param pulumi.Input[float] time_window_sec: How long back autoscaling should look when computing recommendations
               to include directives regarding slower scale down, as described above.
        """
        pulumi.set(__self__, "maxScaledDownReplicas", max_scaled_down_replicas)
        pulumi.set(__self__, "timeWindowSec", time_window_sec)

    @property
    @pulumi.getter(name="maxScaledDownReplicas")
    def max_scaled_down_replicas(self) -> Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs']]:
        """
        A nested object resource
        Structure is documented below.
        """
        ...

    @max_scaled_down_replicas.setter
    def max_scaled_down_replicas(self, value: Optional[pulumi.Input['RegionAutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs']]):
        ...

    @property
    @pulumi.getter(name="timeWindowSec")
    def time_window_sec(self) -> Optional[pulumi.Input[float]]:
        """
        How long back autoscaling should look when computing recommendations
        to include directives regarding slower scale down, as described above.
        """
        ...

    @time_window_sec.setter
    def time_window_sec(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionAutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicasArgs:
    def __init__(__self__, *,
                 fixed: Optional[pulumi.Input[float]] = None,
                 percent: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] fixed: Specifies a fixed number of VM instances. This must be a positive
               integer.
        :param pulumi.Input[float] percent: Specifies a percentage of instances between 0 to 100%, inclusive.
               For example, specify 80 for 80%.
        """
        pulumi.set(__self__, "fixed", fixed)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def fixed(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies a fixed number of VM instances. This must be a positive
        integer.
        """
        ...

    @fixed.setter
    def fixed(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies a percentage of instances between 0 to 100%, inclusive.
        For example, specify 80 for 80%.
        """
        ...

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceBackendArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 balancing_mode: Optional[pulumi.Input[str]] = None,
                 capacity_scaler: Optional[pulumi.Input[float]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 failover: Optional[pulumi.Input[bool]] = None,
                 max_connections: Optional[pulumi.Input[float]] = None,
                 max_connections_per_endpoint: Optional[pulumi.Input[float]] = None,
                 max_connections_per_instance: Optional[pulumi.Input[float]] = None,
                 max_rate: Optional[pulumi.Input[float]] = None,
                 max_rate_per_endpoint: Optional[pulumi.Input[float]] = None,
                 max_rate_per_instance: Optional[pulumi.Input[float]] = None,
                 max_utilization: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] group: The fully-qualified URL of an Instance Group or Network Endpoint
               Group resource. In case of instance group this defines the list
               of instances that serve traffic. Member virtual machine
               instances from each instance group must live in the same zone as
               the instance group itself. No two backends in a backend service
               are allowed to use same Instance Group resource.
               For Network Endpoint Groups this defines list of endpoints. All
               endpoints of Network Endpoint Group must be hosted on instances
               located in the same zone as the Network Endpoint Group.
               Backend services cannot mix Instance Group and
               Network Endpoint Group backends.
               When the `load_balancing_scheme` is INTERNAL, only instance groups
               are supported.
               Note that you must specify an Instance Group or Network Endpoint
               Group resource using the fully-qualified URL, rather than a
               partial URL.
        :param pulumi.Input[str] balancing_mode: Specifies the balancing mode for this backend.
               Default value is `CONNECTION`.
               Possible values are `UTILIZATION`, `RATE`, and `CONNECTION`.
        :param pulumi.Input[float] capacity_scaler: A multiplier applied to the group's maximum servicing capacity
               (based on UTILIZATION, RATE or CONNECTION).
               ~>**NOTE**: This field cannot be set for
               INTERNAL region backend services (default loadBalancingScheme),
               but is required for non-INTERNAL backend service. The total
               capacity_scaler for all backends must be non-zero.
               A setting of 0 means the group is completely drained, offering
               0% of its available Capacity. Valid range is [0.0,1.0].
        :param pulumi.Input[str] description: An optional description of this resource.
               Provide this property when you create the resource.
        :param pulumi.Input[bool] failover: This field designates whether this is a failover backend. More
               than one failover backend can be configured for a given RegionBackendService.
        :param pulumi.Input[float] max_connections: The maximum number of connections to the backend cluster.
               Defaults to 1024.
        :param pulumi.Input[float] max_connections_per_endpoint: The max number of simultaneous connections that a single backend
               network endpoint can handle. Cannot be set
               for INTERNAL backend services.
               This is used to calculate the capacity of the group. Can be
               used in either CONNECTION or UTILIZATION balancing modes. For
               CONNECTION mode, either maxConnections or
               maxConnectionsPerEndpoint must be set.
        :param pulumi.Input[float] max_connections_per_instance: The max number of simultaneous connections that a single
               backend instance can handle. Cannot be set for INTERNAL backend
               services.
               This is used to calculate the capacity of the group.
               Can be used in either CONNECTION or UTILIZATION balancing modes.
               For CONNECTION mode, either maxConnections or
               maxConnectionsPerInstance must be set.
        :param pulumi.Input[float] max_rate: The max requests per second (RPS) of the group. Cannot be set
               for INTERNAL backend services.
               Can be used with either RATE or UTILIZATION balancing modes,
               but required if RATE mode. Either maxRate or one
               of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
               group type, must be set.
        :param pulumi.Input[float] max_rate_per_endpoint: The max requests per second (RPS) that a single backend network
               endpoint can handle. This is used to calculate the capacity of
               the group. Can be used in either balancing mode. For RATE mode,
               either maxRate or maxRatePerEndpoint must be set. Cannot be set
               for INTERNAL backend services.
        :param pulumi.Input[float] max_rate_per_instance: The max requests per second (RPS) that a single backend
               instance can handle. This is used to calculate the capacity of
               the group. Can be used in either balancing mode. For RATE mode,
               either maxRate or maxRatePerInstance must be set. Cannot be set
               for INTERNAL backend services.
        :param pulumi.Input[float] max_utilization: Used when balancingMode is UTILIZATION. This ratio defines the
               CPU utilization target for the group. Valid range is [0.0, 1.0].
               Cannot be set for INTERNAL backend services.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "balancingMode", balancing_mode)
        pulumi.set(__self__, "capacityScaler", capacity_scaler)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "failover", failover)
        pulumi.set(__self__, "maxConnections", max_connections)
        pulumi.set(__self__, "maxConnectionsPerEndpoint", max_connections_per_endpoint)
        pulumi.set(__self__, "maxConnectionsPerInstance", max_connections_per_instance)
        pulumi.set(__self__, "maxRate", max_rate)
        pulumi.set(__self__, "maxRatePerEndpoint", max_rate_per_endpoint)
        pulumi.set(__self__, "maxRatePerInstance", max_rate_per_instance)
        pulumi.set(__self__, "maxUtilization", max_utilization)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        The fully-qualified URL of an Instance Group or Network Endpoint
        Group resource. In case of instance group this defines the list
        of instances that serve traffic. Member virtual machine
        instances from each instance group must live in the same zone as
        the instance group itself. No two backends in a backend service
        are allowed to use same Instance Group resource.
        For Network Endpoint Groups this defines list of endpoints. All
        endpoints of Network Endpoint Group must be hosted on instances
        located in the same zone as the Network Endpoint Group.
        Backend services cannot mix Instance Group and
        Network Endpoint Group backends.
        When the `load_balancing_scheme` is INTERNAL, only instance groups
        are supported.
        Note that you must specify an Instance Group or Network Endpoint
        Group resource using the fully-qualified URL, rather than a
        partial URL.
        """
        ...

    @group.setter
    def group(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="balancingMode")
    def balancing_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the balancing mode for this backend.
        Default value is `CONNECTION`.
        Possible values are `UTILIZATION`, `RATE`, and `CONNECTION`.
        """
        ...

    @balancing_mode.setter
    def balancing_mode(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="capacityScaler")
    def capacity_scaler(self) -> Optional[pulumi.Input[float]]:
        """
        A multiplier applied to the group's maximum servicing capacity
        (based on UTILIZATION, RATE or CONNECTION).
        ~>**NOTE**: This field cannot be set for
        INTERNAL region backend services (default loadBalancingScheme),
        but is required for non-INTERNAL backend service. The total
        capacity_scaler for all backends must be non-zero.
        A setting of 0 means the group is completely drained, offering
        0% of its available Capacity. Valid range is [0.0,1.0].
        """
        ...

    @capacity_scaler.setter
    def capacity_scaler(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of this resource.
        Provide this property when you create the resource.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def failover(self) -> Optional[pulumi.Input[bool]]:
        """
        This field designates whether this is a failover backend. More
        than one failover backend can be configured for a given RegionBackendService.
        """
        ...

    @failover.setter
    def failover(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of connections to the backend cluster.
        Defaults to 1024.
        """
        ...

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxConnectionsPerEndpoint")
    def max_connections_per_endpoint(self) -> Optional[pulumi.Input[float]]:
        """
        The max number of simultaneous connections that a single backend
        network endpoint can handle. Cannot be set
        for INTERNAL backend services.
        This is used to calculate the capacity of the group. Can be
        used in either CONNECTION or UTILIZATION balancing modes. For
        CONNECTION mode, either maxConnections or
        maxConnectionsPerEndpoint must be set.
        """
        ...

    @max_connections_per_endpoint.setter
    def max_connections_per_endpoint(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxConnectionsPerInstance")
    def max_connections_per_instance(self) -> Optional[pulumi.Input[float]]:
        """
        The max number of simultaneous connections that a single
        backend instance can handle. Cannot be set for INTERNAL backend
        services.
        This is used to calculate the capacity of the group.
        Can be used in either CONNECTION or UTILIZATION balancing modes.
        For CONNECTION mode, either maxConnections or
        maxConnectionsPerInstance must be set.
        """
        ...

    @max_connections_per_instance.setter
    def max_connections_per_instance(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRate")
    def max_rate(self) -> Optional[pulumi.Input[float]]:
        """
        The max requests per second (RPS) of the group. Cannot be set
        for INTERNAL backend services.
        Can be used with either RATE or UTILIZATION balancing modes,
        but required if RATE mode. Either maxRate or one
        of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        group type, must be set.
        """
        ...

    @max_rate.setter
    def max_rate(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRatePerEndpoint")
    def max_rate_per_endpoint(self) -> Optional[pulumi.Input[float]]:
        """
        The max requests per second (RPS) that a single backend network
        endpoint can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerEndpoint must be set. Cannot be set
        for INTERNAL backend services.
        """
        ...

    @max_rate_per_endpoint.setter
    def max_rate_per_endpoint(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRatePerInstance")
    def max_rate_per_instance(self) -> Optional[pulumi.Input[float]]:
        """
        The max requests per second (RPS) that a single backend
        instance can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerInstance must be set. Cannot be set
        for INTERNAL backend services.
        """
        ...

    @max_rate_per_instance.setter
    def max_rate_per_instance(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxUtilization")
    def max_utilization(self) -> Optional[pulumi.Input[float]]:
        """
        Used when balancingMode is UTILIZATION. This ratio defines the
        CPU utilization target for the group. Valid range is [0.0, 1.0].
        Cannot be set for INTERNAL backend services.
        """
        ...

    @max_utilization.setter
    def max_utilization(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceCircuitBreakersArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input['RegionBackendServiceCircuitBreakersConnectTimeoutArgs']] = None,
                 max_connections: Optional[pulumi.Input[float]] = None,
                 max_pending_requests: Optional[pulumi.Input[float]] = None,
                 max_requests: Optional[pulumi.Input[float]] = None,
                 max_requests_per_connection: Optional[pulumi.Input[float]] = None,
                 max_retries: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['RegionBackendServiceCircuitBreakersConnectTimeoutArgs'] connect_timeout: The timeout for new network connections to hosts.  Structure is documented below.
        :param pulumi.Input[float] max_connections: The maximum number of connections to the backend cluster.
               Defaults to 1024.
        :param pulumi.Input[float] max_pending_requests: The maximum number of pending requests to the backend cluster.
               Defaults to 1024.
        :param pulumi.Input[float] max_requests: The maximum number of parallel requests to the backend cluster.
               Defaults to 1024.
        :param pulumi.Input[float] max_requests_per_connection: Maximum requests for a single backend connection. This parameter
               is respected by both the HTTP/1.1 and HTTP/2 implementations. If
               not specified, there is no limit. Setting this parameter to 1
               will effectively disable keep alive.
        :param pulumi.Input[float] max_retries: The maximum number of parallel retries to the backend cluster.
               Defaults to 3.
        """
        pulumi.set(__self__, "connectTimeout", connect_timeout)
        pulumi.set(__self__, "maxConnections", max_connections)
        pulumi.set(__self__, "maxPendingRequests", max_pending_requests)
        pulumi.set(__self__, "maxRequests", max_requests)
        pulumi.set(__self__, "maxRequestsPerConnection", max_requests_per_connection)
        pulumi.set(__self__, "maxRetries", max_retries)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input['RegionBackendServiceCircuitBreakersConnectTimeoutArgs']]:
        """
        The timeout for new network connections to hosts.  Structure is documented below.
        """
        ...

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input['RegionBackendServiceCircuitBreakersConnectTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of connections to the backend cluster.
        Defaults to 1024.
        """
        ...

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxPendingRequests")
    def max_pending_requests(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of pending requests to the backend cluster.
        Defaults to 1024.
        """
        ...

    @max_pending_requests.setter
    def max_pending_requests(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRequests")
    def max_requests(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of parallel requests to the backend cluster.
        Defaults to 1024.
        """
        ...

    @max_requests.setter
    def max_requests(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRequestsPerConnection")
    def max_requests_per_connection(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum requests for a single backend connection. This parameter
        is respected by both the HTTP/1.1 and HTTP/2 implementations. If
        not specified, there is no limit. Setting this parameter to 1
        will effectively disable keep alive.
        """
        ...

    @max_requests_per_connection.setter
    def max_requests_per_connection(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of parallel retries to the backend cluster.
        Defaults to 3.
        """
        ...

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceCircuitBreakersConnectTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[float],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[float]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceConsistentHashArgs:
    def __init__(__self__, *,
                 http_cookie: Optional[pulumi.Input['RegionBackendServiceConsistentHashHttpCookieArgs']] = None,
                 http_header_name: Optional[pulumi.Input[str]] = None,
                 minimum_ring_size: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['RegionBackendServiceConsistentHashHttpCookieArgs'] http_cookie: Hash is based on HTTP Cookie. This field describes a HTTP cookie
               that will be used as the hash key for the consistent hash load
               balancer. If the cookie is not present, it will be generated.
               This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
               Structure is documented below.
        :param pulumi.Input[str] http_header_name: The hash based on the value of the specified header field.
               This field is applicable if the sessionAffinity is set to HEADER_FIELD.
        :param pulumi.Input[float] minimum_ring_size: The minimum number of virtual nodes to use for the hash ring.
               Larger ring sizes result in more granular load
               distributions. If the number of hosts in the load balancing pool
               is larger than the ring size, each host will be assigned a single
               virtual node.
               Defaults to 1024.
        """
        pulumi.set(__self__, "httpCookie", http_cookie)
        pulumi.set(__self__, "httpHeaderName", http_header_name)
        pulumi.set(__self__, "minimumRingSize", minimum_ring_size)

    @property
    @pulumi.getter(name="httpCookie")
    def http_cookie(self) -> Optional[pulumi.Input['RegionBackendServiceConsistentHashHttpCookieArgs']]:
        """
        Hash is based on HTTP Cookie. This field describes a HTTP cookie
        that will be used as the hash key for the consistent hash load
        balancer. If the cookie is not present, it will be generated.
        This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
        Structure is documented below.
        """
        ...

    @http_cookie.setter
    def http_cookie(self, value: Optional[pulumi.Input['RegionBackendServiceConsistentHashHttpCookieArgs']]):
        ...

    @property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The hash based on the value of the specified header field.
        This field is applicable if the sessionAffinity is set to HEADER_FIELD.
        """
        ...

    @http_header_name.setter
    def http_header_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="minimumRingSize")
    def minimum_ring_size(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum number of virtual nodes to use for the hash ring.
        Larger ring sizes result in more granular load
        distributions. If the number of hosts in the load balancing pool
        is larger than the ring size, each host will be assigned a single
        virtual node.
        Defaults to 1024.
        """
        ...

    @minimum_ring_size.setter
    def minimum_ring_size(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceConsistentHashHttpCookieArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input['RegionBackendServiceConsistentHashHttpCookieTtlArgs']] = None):
        """
        :param pulumi.Input[str] name: Name of the cookie.
        :param pulumi.Input[str] path: Path to set for the cookie.
        :param pulumi.Input['RegionBackendServiceConsistentHashHttpCookieTtlArgs'] ttl: Lifetime of the cookie.
               Structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cookie.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to set for the cookie.
        """
        ...

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input['RegionBackendServiceConsistentHashHttpCookieTtlArgs']]:
        """
        Lifetime of the cookie.
        Structure is documented below.
        """
        ...

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input['RegionBackendServiceConsistentHashHttpCookieTtlArgs']]):
        ...


@pulumi.input_type
class RegionBackendServiceConsistentHashHttpCookieTtlArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[float],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[float]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceFailoverPolicyArgs:
    def __init__(__self__, *,
                 disable_connection_drain_on_failover: Optional[pulumi.Input[bool]] = None,
                 drop_traffic_if_unhealthy: Optional[pulumi.Input[bool]] = None,
                 failover_ratio: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] disable_connection_drain_on_failover: On failover or failback, this field indicates whether connection drain
               will be honored. Setting this to true has the following effect: connections
               to the old active pool are not drained. Connections to the new active pool
               use the timeout of 10 min (currently fixed). Setting to false has the
               following effect: both old and new connections will have a drain timeout
               of 10 min.
               This can be set to true only if the protocol is TCP.
               The default is false.
        :param pulumi.Input[bool] drop_traffic_if_unhealthy: This option is used only when no healthy VMs are detected in the primary
               and backup instance groups. When set to true, traffic is dropped. When
               set to false, new connections are sent across all VMs in the primary group.
               The default is false.
        :param pulumi.Input[float] failover_ratio: The value of the field must be in [0, 1]. If the ratio of the healthy
               VMs in the primary backend is at or below this number, traffic arriving
               at the load-balanced IP will be directed to the failover backend.
               In case where 'failoverRatio' is not set or all the VMs in the backup
               backend are unhealthy, the traffic will be directed back to the primary
               backend in the "force" mode, where traffic will be spread to the healthy
               VMs with the best effort, or to all VMs when no VM is healthy.
               This field is only used with l4 load balancing.
        """
        pulumi.set(__self__, "disableConnectionDrainOnFailover", disable_connection_drain_on_failover)
        pulumi.set(__self__, "dropTrafficIfUnhealthy", drop_traffic_if_unhealthy)
        pulumi.set(__self__, "failoverRatio", failover_ratio)

    @property
    @pulumi.getter(name="disableConnectionDrainOnFailover")
    def disable_connection_drain_on_failover(self) -> Optional[pulumi.Input[bool]]:
        """
        On failover or failback, this field indicates whether connection drain
        will be honored. Setting this to true has the following effect: connections
        to the old active pool are not drained. Connections to the new active pool
        use the timeout of 10 min (currently fixed). Setting to false has the
        following effect: both old and new connections will have a drain timeout
        of 10 min.
        This can be set to true only if the protocol is TCP.
        The default is false.
        """
        ...

    @disable_connection_drain_on_failover.setter
    def disable_connection_drain_on_failover(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="dropTrafficIfUnhealthy")
    def drop_traffic_if_unhealthy(self) -> Optional[pulumi.Input[bool]]:
        """
        This option is used only when no healthy VMs are detected in the primary
        and backup instance groups. When set to true, traffic is dropped. When
        set to false, new connections are sent across all VMs in the primary group.
        The default is false.
        """
        ...

    @drop_traffic_if_unhealthy.setter
    def drop_traffic_if_unhealthy(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="failoverRatio")
    def failover_ratio(self) -> Optional[pulumi.Input[float]]:
        """
        The value of the field must be in [0, 1]. If the ratio of the healthy
        VMs in the primary backend is at or below this number, traffic arriving
        at the load-balanced IP will be directed to the failover backend.
        In case where 'failoverRatio' is not set or all the VMs in the backup
        backend are unhealthy, the traffic will be directed back to the primary
        backend in the "force" mode, where traffic will be spread to the healthy
        VMs with the best effort, or to all VMs when no VM is healthy.
        This field is only used with l4 load balancing.
        """
        ...

    @failover_ratio.setter
    def failover_ratio(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceLogConfigArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 sample_rate: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] enable: Whether to enable logging for the load balancer traffic served by this backend service.
        :param pulumi.Input[float] sample_rate: This field can only be specified if logging is enabled for this backend service. The value of
               the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
               where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
               The default value is 1.0.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "sampleRate", sample_rate)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable logging for the load balancer traffic served by this backend service.
        """
        ...

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[float]]:
        """
        This field can only be specified if logging is enabled for this backend service. The value of
        the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
        where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
        The default value is 1.0.
        """
        ...

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceOutlierDetectionArgs:
    def __init__(__self__, *,
                 base_ejection_time: Optional[pulumi.Input['RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs']] = None,
                 consecutive_errors: Optional[pulumi.Input[float]] = None,
                 consecutive_gateway_failure: Optional[pulumi.Input[float]] = None,
                 enforcing_consecutive_errors: Optional[pulumi.Input[float]] = None,
                 enforcing_consecutive_gateway_failure: Optional[pulumi.Input[float]] = None,
                 enforcing_success_rate: Optional[pulumi.Input[float]] = None,
                 interval: Optional[pulumi.Input['RegionBackendServiceOutlierDetectionIntervalArgs']] = None,
                 max_ejection_percent: Optional[pulumi.Input[float]] = None,
                 success_rate_minimum_hosts: Optional[pulumi.Input[float]] = None,
                 success_rate_request_volume: Optional[pulumi.Input[float]] = None,
                 success_rate_stdev_factor: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs'] base_ejection_time: The base time that a host is ejected for. The real time is equal to the base
               time multiplied by the number of times the host has been ejected. Defaults to
               30000ms or 30s.
               Structure is documented below.
        :param pulumi.Input[float] consecutive_errors: Number of errors before a host is ejected from the connection pool. When the
               backend host is accessed over HTTP, a 5xx return code qualifies as an error.
               Defaults to 5.
        :param pulumi.Input[float] consecutive_gateway_failure: The number of consecutive gateway failures (502, 503, 504 status or connection
               errors that are mapped to one of those status codes) before a consecutive
               gateway failure ejection occurs. Defaults to 5.
        :param pulumi.Input[float] enforcing_consecutive_errors: The percentage chance that a host will be actually ejected when an outlier
               status is detected through consecutive 5xx. This setting can be used to disable
               ejection or to ramp it up slowly. Defaults to 100.
        :param pulumi.Input[float] enforcing_consecutive_gateway_failure: The percentage chance that a host will be actually ejected when an outlier
               status is detected through consecutive gateway failures. This setting can be
               used to disable ejection or to ramp it up slowly. Defaults to 0.
        :param pulumi.Input[float] enforcing_success_rate: The percentage chance that a host will be actually ejected when an outlier
               status is detected through success rate statistics. This setting can be used to
               disable ejection or to ramp it up slowly. Defaults to 100.
        :param pulumi.Input['RegionBackendServiceOutlierDetectionIntervalArgs'] interval: Time interval between ejection sweep analysis. This can result in both new
               ejections as well as hosts being returned to service. Defaults to 10 seconds.
               Structure is documented below.
        :param pulumi.Input[float] max_ejection_percent: Maximum percentage of hosts in the load balancing pool for the backend service
               that can be ejected. Defaults to 10%.
        :param pulumi.Input[float] success_rate_minimum_hosts: The number of hosts in a cluster that must have enough request volume to detect
               success rate outliers. If the number of hosts is less than this setting, outlier
               detection via success rate statistics is not performed for any host in the
               cluster. Defaults to 5.
        :param pulumi.Input[float] success_rate_request_volume: The minimum number of total requests that must be collected in one interval (as
               defined by the interval duration above) to include this host in success rate
               based outlier detection. If the volume is lower than this setting, outlier
               detection via success rate statistics is not performed for that host. Defaults
               to 100.
        :param pulumi.Input[float] success_rate_stdev_factor: This factor is used to determine the ejection threshold for success rate outlier
               ejection. The ejection threshold is the difference between the mean success
               rate, and the product of this factor and the standard deviation of the mean
               success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
               by a thousand to get a double. That is, if the desired factor is 1.9, the
               runtime value should be 1900. Defaults to 1900.
        """
        pulumi.set(__self__, "baseEjectionTime", base_ejection_time)
        pulumi.set(__self__, "consecutiveErrors", consecutive_errors)
        pulumi.set(__self__, "consecutiveGatewayFailure", consecutive_gateway_failure)
        pulumi.set(__self__, "enforcingConsecutiveErrors", enforcing_consecutive_errors)
        pulumi.set(__self__, "enforcingConsecutiveGatewayFailure", enforcing_consecutive_gateway_failure)
        pulumi.set(__self__, "enforcingSuccessRate", enforcing_success_rate)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maxEjectionPercent", max_ejection_percent)
        pulumi.set(__self__, "successRateMinimumHosts", success_rate_minimum_hosts)
        pulumi.set(__self__, "successRateRequestVolume", success_rate_request_volume)
        pulumi.set(__self__, "successRateStdevFactor", success_rate_stdev_factor)

    @property
    @pulumi.getter(name="baseEjectionTime")
    def base_ejection_time(self) -> Optional[pulumi.Input['RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs']]:
        """
        The base time that a host is ejected for. The real time is equal to the base
        time multiplied by the number of times the host has been ejected. Defaults to
        30000ms or 30s.
        Structure is documented below.
        """
        ...

    @base_ejection_time.setter
    def base_ejection_time(self, value: Optional[pulumi.Input['RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs']]):
        ...

    @property
    @pulumi.getter(name="consecutiveErrors")
    def consecutive_errors(self) -> Optional[pulumi.Input[float]]:
        """
        Number of errors before a host is ejected from the connection pool. When the
        backend host is accessed over HTTP, a 5xx return code qualifies as an error.
        Defaults to 5.
        """
        ...

    @consecutive_errors.setter
    def consecutive_errors(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="consecutiveGatewayFailure")
    def consecutive_gateway_failure(self) -> Optional[pulumi.Input[float]]:
        """
        The number of consecutive gateway failures (502, 503, 504 status or connection
        errors that are mapped to one of those status codes) before a consecutive
        gateway failure ejection occurs. Defaults to 5.
        """
        ...

    @consecutive_gateway_failure.setter
    def consecutive_gateway_failure(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="enforcingConsecutiveErrors")
    def enforcing_consecutive_errors(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive 5xx. This setting can be used to disable
        ejection or to ramp it up slowly. Defaults to 100.
        """
        ...

    @enforcing_consecutive_errors.setter
    def enforcing_consecutive_errors(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="enforcingConsecutiveGatewayFailure")
    def enforcing_consecutive_gateway_failure(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive gateway failures. This setting can be
        used to disable ejection or to ramp it up slowly. Defaults to 0.
        """
        ...

    @enforcing_consecutive_gateway_failure.setter
    def enforcing_consecutive_gateway_failure(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="enforcingSuccessRate")
    def enforcing_success_rate(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through success rate statistics. This setting can be used to
        disable ejection or to ramp it up slowly. Defaults to 100.
        """
        ...

    @enforcing_success_rate.setter
    def enforcing_success_rate(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input['RegionBackendServiceOutlierDetectionIntervalArgs']]:
        """
        Time interval between ejection sweep analysis. This can result in both new
        ejections as well as hosts being returned to service. Defaults to 10 seconds.
        Structure is documented below.
        """
        ...

    @interval.setter
    def interval(self, value: Optional[pulumi.Input['RegionBackendServiceOutlierDetectionIntervalArgs']]):
        ...

    @property
    @pulumi.getter(name="maxEjectionPercent")
    def max_ejection_percent(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum percentage of hosts in the load balancing pool for the backend service
        that can be ejected. Defaults to 10%.
        """
        ...

    @max_ejection_percent.setter
    def max_ejection_percent(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="successRateMinimumHosts")
    def success_rate_minimum_hosts(self) -> Optional[pulumi.Input[float]]:
        """
        The number of hosts in a cluster that must have enough request volume to detect
        success rate outliers. If the number of hosts is less than this setting, outlier
        detection via success rate statistics is not performed for any host in the
        cluster. Defaults to 5.
        """
        ...

    @success_rate_minimum_hosts.setter
    def success_rate_minimum_hosts(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="successRateRequestVolume")
    def success_rate_request_volume(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum number of total requests that must be collected in one interval (as
        defined by the interval duration above) to include this host in success rate
        based outlier detection. If the volume is lower than this setting, outlier
        detection via success rate statistics is not performed for that host. Defaults
        to 100.
        """
        ...

    @success_rate_request_volume.setter
    def success_rate_request_volume(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="successRateStdevFactor")
    def success_rate_stdev_factor(self) -> Optional[pulumi.Input[float]]:
        """
        This factor is used to determine the ejection threshold for success rate outlier
        ejection. The ejection threshold is the difference between the mean success
        rate, and the product of this factor and the standard deviation of the mean
        success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
        by a thousand to get a double. That is, if the desired factor is 1.9, the
        runtime value should be 1900. Defaults to 1900.
        """
        ...

    @success_rate_stdev_factor.setter
    def success_rate_stdev_factor(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[float],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[float]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionBackendServiceOutlierDetectionIntervalArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[float],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[float]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionDiskDiskEncryptionKeyArgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 raw_key: Optional[pulumi.Input[str]] = None,
                 sha256: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_name: The name of the encryption key that is stored in Google Cloud KMS.
        :param pulumi.Input[str] raw_key: Specifies a 256-bit customer-supplied encryption key, encoded in
               RFC 4648 base64 to either encrypt or decrypt this resource.
        :param pulumi.Input[str] sha256: -
               The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
               encryption key that protects this resource.
        """
        pulumi.set(__self__, "kmsKeyName", kms_key_name)
        pulumi.set(__self__, "rawKey", raw_key)
        pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the encryption key that is stored in Google Cloud KMS.
        """
        ...

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rawKey")
    def raw_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a 256-bit customer-supplied encryption key, encoded in
        RFC 4648 base64 to either encrypt or decrypt this resource.
        """
        ...

    @raw_key.setter
    def raw_key(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sha256(self) -> Optional[pulumi.Input[str]]:
        """
        -
        The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
        encryption key that protects this resource.
        """
        ...

    @sha256.setter
    def sha256(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionDiskSourceSnapshotEncryptionKeyArgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 raw_key: Optional[pulumi.Input[str]] = None,
                 sha256: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_name: The name of the encryption key that is stored in Google Cloud KMS.
        :param pulumi.Input[str] raw_key: Specifies a 256-bit customer-supplied encryption key, encoded in
               RFC 4648 base64 to either encrypt or decrypt this resource.
        :param pulumi.Input[str] sha256: -
               The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
               encryption key that protects this resource.
        """
        pulumi.set(__self__, "kmsKeyName", kms_key_name)
        pulumi.set(__self__, "rawKey", raw_key)
        pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the encryption key that is stored in Google Cloud KMS.
        """
        ...

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="rawKey")
    def raw_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a 256-bit customer-supplied encryption key, encoded in
        RFC 4648 base64 to either encrypt or decrypt this resource.
        """
        ...

    @raw_key.setter
    def raw_key(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def sha256(self) -> Optional[pulumi.Input[str]]:
        """
        -
        The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
        encryption key that protects this resource.
        """
        ...

    @sha256.setter
    def sha256(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionHealthCheckHttp2HealthCheckArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: The value of the host header in the HTTP2 health check request.
               If left empty (default value), the public IP on behalf of which this health
               check is performed will be used.
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request_path: The request path of the HTTP2 health check request.
               The default value is /.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "requestPath", request_path)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the host header in the HTTP2 health check request.
        If left empty (default value), the public IP on behalf of which this health
        check is performed will be used.
        """
        ...

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        """
        The request path of the HTTP2 health check request.
        The default value is /.
        """
        ...

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionHealthCheckHttpHealthCheckArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: The value of the host header in the HTTP2 health check request.
               If left empty (default value), the public IP on behalf of which this health
               check is performed will be used.
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request_path: The request path of the HTTP2 health check request.
               The default value is /.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "requestPath", request_path)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the host header in the HTTP2 health check request.
        If left empty (default value), the public IP on behalf of which this health
        check is performed will be used.
        """
        ...

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        """
        The request path of the HTTP2 health check request.
        The default value is /.
        """
        ...

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionHealthCheckHttpsHealthCheckArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: The value of the host header in the HTTP2 health check request.
               If left empty (default value), the public IP on behalf of which this health
               check is performed will be used.
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request_path: The request path of the HTTP2 health check request.
               The default value is /.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "requestPath", request_path)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the host header in the HTTP2 health check request.
        If left empty (default value), the public IP on behalf of which this health
        check is performed will be used.
        """
        ...

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        """
        The request path of the HTTP2 health check request.
        The default value is /.
        """
        ...

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionHealthCheckLogConfigArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable: Indicates whether or not to export logs. This is false by default,
               which means no health check logging will be done.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not to export logs. This is false by default,
        which means no health check logging will be done.
        """
        ...

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class RegionHealthCheckSslHealthCheckArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request: The application data to send once the SSL connection has been
               established (default value is empty). If both request and response are
               empty, the connection establishment alone will indicate health. The request
               data can only be ASCII.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        The application data to send once the SSL connection has been
        established (default value is empty). If both request and response are
        empty, the connection establishment alone will indicate health. The request
        data can only be ASCII.
        """
        ...

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionHealthCheckTcpHealthCheckArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[float]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_specification: Optional[pulumi.Input[str]] = None,
                 proxy_header: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 response: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] port: The TCP port number for the HTTP2 health check request.
               The default value is 443.
        :param pulumi.Input[str] port_name: Port name as defined in InstanceGroup#NamedPort#name. If both port and
               port_name are defined, port takes precedence.
        :param pulumi.Input[str] port_specification: Specifies how port is selected for health checking, can be one of the
               following values:
               * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
               * `USE_NAMED_PORT`: The `portName` is used for health checking.
               * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
               network endpoint is used for health checking. For other backends, the
               port or named port specified in the Backend Service is used for health
               checking.
               If not specified, HTTP2 health check follows behavior specified in `port` and
               `portName` fields.
               Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        :param pulumi.Input[str] proxy_header: Specifies the type of proxy header to append before sending data to the
               backend.
               Default value is `NONE`.
               Possible values are `NONE` and `PROXY_V1`.
        :param pulumi.Input[str] request: The application data to send once the SSL connection has been
               established (default value is empty). If both request and response are
               empty, the connection establishment alone will indicate health. The request
               data can only be ASCII.
        :param pulumi.Input[str] response: The bytes to match against the beginning of the response data. If left empty
               (the default value), any response will indicate health. The response data
               can only be ASCII.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "portName", port_name)
        pulumi.set(__self__, "portSpecification", port_specification)
        pulumi.set(__self__, "proxyHeader", proxy_header)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The TCP port number for the HTTP2 health check request.
        The default value is 443.
        """
        ...

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name as defined in InstanceGroup#NamedPort#name. If both port and
        port_name are defined, port takes precedence.
        """
        ...

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="portSpecification")
    def port_specification(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how port is selected for health checking, can be one of the
        following values:
        * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
        * `USE_NAMED_PORT`: The `portName` is used for health checking.
        * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
        network endpoint is used for health checking. For other backends, the
        port or named port specified in the Backend Service is used for health
        checking.
        If not specified, HTTP2 health check follows behavior specified in `port` and
        `portName` fields.
        Possible values are `USE_FIXED_PORT`, `USE_NAMED_PORT`, and `USE_SERVING_PORT`.
        """
        ...

    @port_specification.setter
    def port_specification(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="proxyHeader")
    def proxy_header(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of proxy header to append before sending data to the
        backend.
        Default value is `NONE`.
        Possible values are `NONE` and `PROXY_V1`.
        """
        ...

    @proxy_header.setter
    def proxy_header(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        The application data to send once the SSL connection has been
        established (default value is empty). If both request and response are
        empty, the connection establishment alone will indicate health. The request
        data can only be ASCII.
        """
        ...

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        The bytes to match against the beginning of the response data. If left empty
        (the default value), any response will indicate health. The response data
        can only be ASCII.
        """
        ...

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionInstanceGroupManagerAutoHealingPoliciesArgs:
    def __init__(__self__, *,
                 health_check: pulumi.Input[str],
                 initial_delay_sec: pulumi.Input[float]):
        """
        :param pulumi.Input[str] health_check: The health check resource that signals autohealing.
        :param pulumi.Input[float] initial_delay_sec: The number of seconds that the managed instance group waits before
               it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
        """
        pulumi.set(__self__, "healthCheck", health_check)
        pulumi.set(__self__, "initialDelaySec", initial_delay_sec)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Input[str]:
        """
        The health check resource that signals autohealing.
        """
        ...

    @health_check.setter
    def health_check(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="initialDelaySec")
    def initial_delay_sec(self) -> pulumi.Input[float]:
        """
        The number of seconds that the managed instance group waits before
        it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
        """
        ...

    @initial_delay_sec.setter
    def initial_delay_sec(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class RegionInstanceGroupManagerNamedPortArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        :param pulumi.Input[str] name: - Version name.
        :param pulumi.Input[float] port: The port number.
               - - -
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        - Version name.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        The port number.
        - - -
        """
        ...

    @port.setter
    def port(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class RegionInstanceGroupManagerStatefulDiskArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 delete_rule: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] device_name: , The device name of the disk to be attached.
        :param pulumi.Input[str] delete_rule: , A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`. `NEVER` detatch the disk when the VM is deleted, but not delete the disk. `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently deleted from the instance group. The default is `NEVER`.
        """
        pulumi.set(__self__, "deviceName", device_name)
        pulumi.set(__self__, "deleteRule", delete_rule)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        """
        , The device name of the disk to be attached.
        """
        ...

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="deleteRule")
    def delete_rule(self) -> Optional[pulumi.Input[str]]:
        """
        , A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`. `NEVER` detatch the disk when the VM is deleted, but not delete the disk. `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently deleted from the instance group. The default is `NEVER`.
        """
        ...

    @delete_rule.setter
    def delete_rule(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionInstanceGroupManagerUpdatePolicyArgs:
    def __init__(__self__, *,
                 minimal_action: pulumi.Input[str],
                 type: pulumi.Input[str],
                 instance_redistribution_type: Optional[pulumi.Input[str]] = None,
                 max_surge_fixed: Optional[pulumi.Input[float]] = None,
                 max_surge_percent: Optional[pulumi.Input[float]] = None,
                 max_unavailable_fixed: Optional[pulumi.Input[float]] = None,
                 max_unavailable_percent: Optional[pulumi.Input[float]] = None,
                 min_ready_sec: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] minimal_action: - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
        :param pulumi.Input[str] type: - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
        :param pulumi.Input[str] instance_redistribution_type: - The instance redistribution policy for regional managed instance groups. Valid values are: `"PROACTIVE"`, `"NONE"`. If `PROACTIVE` (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If `NONE`, proactive redistribution is disabled.
        :param pulumi.Input[float] max_surge_fixed: , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `max_surge_percent`. It has to be either 0 or at least equal to the number of zones.  If fixed values are used, at least one of `max_unavailable_fixed` or `max_surge_fixed` must be greater than 0.
        :param pulumi.Input[float] max_surge_percent: , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `max_surge_fixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
        :param pulumi.Input[float] max_unavailable_fixed: , The maximum number of instances that can be unavailable during the update process. Conflicts with `max_unavailable_percent`. It has to be either 0 or at least equal to the number of zones. If fixed values are used, at least one of `max_unavailable_fixed` or `max_surge_fixed` must be greater than 0.
        :param pulumi.Input[float] max_unavailable_percent: , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `max_unavailable_fixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
        :param pulumi.Input[float] min_ready_sec: , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
               - - -
        """
        pulumi.set(__self__, "minimalAction", minimal_action)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "instanceRedistributionType", instance_redistribution_type)
        pulumi.set(__self__, "maxSurgeFixed", max_surge_fixed)
        pulumi.set(__self__, "maxSurgePercent", max_surge_percent)
        pulumi.set(__self__, "maxUnavailableFixed", max_unavailable_fixed)
        pulumi.set(__self__, "maxUnavailablePercent", max_unavailable_percent)
        pulumi.set(__self__, "minReadySec", min_ready_sec)

    @property
    @pulumi.getter(name="minimalAction")
    def minimal_action(self) -> pulumi.Input[str]:
        """
        - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
        """
        ...

    @minimal_action.setter
    def minimal_action(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="instanceRedistributionType")
    def instance_redistribution_type(self) -> Optional[pulumi.Input[str]]:
        """
        - The instance redistribution policy for regional managed instance groups. Valid values are: `"PROACTIVE"`, `"NONE"`. If `PROACTIVE` (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If `NONE`, proactive redistribution is disabled.
        """
        ...

    @instance_redistribution_type.setter
    def instance_redistribution_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="maxSurgeFixed")
    def max_surge_fixed(self) -> Optional[pulumi.Input[float]]:
        """
        , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `max_surge_percent`. It has to be either 0 or at least equal to the number of zones.  If fixed values are used, at least one of `max_unavailable_fixed` or `max_surge_fixed` must be greater than 0.
        """
        ...

    @max_surge_fixed.setter
    def max_surge_fixed(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxSurgePercent")
    def max_surge_percent(self) -> Optional[pulumi.Input[float]]:
        """
        , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `max_surge_fixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
        """
        ...

    @max_surge_percent.setter
    def max_surge_percent(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxUnavailableFixed")
    def max_unavailable_fixed(self) -> Optional[pulumi.Input[float]]:
        """
        , The maximum number of instances that can be unavailable during the update process. Conflicts with `max_unavailable_percent`. It has to be either 0 or at least equal to the number of zones. If fixed values are used, at least one of `max_unavailable_fixed` or `max_surge_fixed` must be greater than 0.
        """
        ...

    @max_unavailable_fixed.setter
    def max_unavailable_fixed(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="maxUnavailablePercent")
    def max_unavailable_percent(self) -> Optional[pulumi.Input[float]]:
        """
        , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `max_unavailable_fixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
        """
        ...

    @max_unavailable_percent.setter
    def max_unavailable_percent(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="minReadySec")
    def min_ready_sec(self) -> Optional[pulumi.Input[float]]:
        """
        , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
        - - -
        """
        ...

    @min_ready_sec.setter
    def min_ready_sec(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionInstanceGroupManagerVersionArgs:
    def __init__(__self__, *,
                 instance_template: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 target_size: Optional[pulumi.Input['RegionInstanceGroupManagerVersionTargetSizeArgs']] = None):
        """
        :param pulumi.Input[str] instance_template: - The full URL to an instance template from which all new instances of this version will be created.
        :param pulumi.Input[str] name: - Version name.
        :param pulumi.Input['RegionInstanceGroupManagerVersionTargetSizeArgs'] target_size: - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
        """
        pulumi.set(__self__, "instanceTemplate", instance_template)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "targetSize", target_size)

    @property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> pulumi.Input[str]:
        """
        - The full URL to an instance template from which all new instances of this version will be created.
        """
        ...

    @instance_template.setter
    def instance_template(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - Version name.
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="targetSize")
    def target_size(self) -> Optional[pulumi.Input['RegionInstanceGroupManagerVersionTargetSizeArgs']]:
        """
        - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
        """
        ...

    @target_size.setter
    def target_size(self, value: Optional[pulumi.Input['RegionInstanceGroupManagerVersionTargetSizeArgs']]):
        ...


@pulumi.input_type
class RegionInstanceGroupManagerVersionTargetSizeArgs:
    def __init__(__self__, *,
                 fixed: Optional[pulumi.Input[float]] = None,
                 percent: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] fixed: , The number of instances which are managed for this version. Conflicts with `percent`.
        :param pulumi.Input[float] percent: , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
               Note that when using `percent`, rounding will be in favor of explicitly set `target_size` values; a managed instance group with 2 instances and 2 `version`s,
               one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
        """
        pulumi.set(__self__, "fixed", fixed)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def fixed(self) -> Optional[pulumi.Input[float]]:
        """
        , The number of instances which are managed for this version. Conflicts with `percent`.
        """
        ...

    @fixed.setter
    def fixed(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[float]]:
        """
        , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
        Note that when using `percent`, rounding will be in favor of explicitly set `target_size` values; a managed instance group with 2 instances and 2 `version`s,
        one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
        """
        ...

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionNetworkEndpointGroupAppEngineArgs:
    def __init__(__self__, *,
                 service: Optional[pulumi.Input[str]] = None,
                 url_mask: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] service: Optional serving service.
               The service name must be 1-63 characters long, and comply with RFC1035.
               Example value: "default", "my-service".
        :param pulumi.Input[str] url_mask: A template to parse function field from a request URL. URL mask allows
               for routing to multiple Cloud Functions without having to create
               multiple Network Endpoint Groups and backend services.
               For example, request URLs "mydomain.com/function1" and "mydomain.com/function2"
               can be backed by the same Serverless NEG with URL mask "/". The URL mask
               will parse them to { function = "function1" } and { function = "function2" } respectively.
        :param pulumi.Input[str] version: Optional serving version.
               The version must be 1-63 characters long, and comply with RFC1035.
               Example value: "v1", "v2".
        """
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "urlMask", url_mask)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Optional serving service.
        The service name must be 1-63 characters long, and comply with RFC1035.
        Example value: "default", "my-service".
        """
        ...

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="urlMask")
    def url_mask(self) -> Optional[pulumi.Input[str]]:
        """
        A template to parse function field from a request URL. URL mask allows
        for routing to multiple Cloud Functions without having to create
        multiple Network Endpoint Groups and backend services.
        For example, request URLs "mydomain.com/function1" and "mydomain.com/function2"
        can be backed by the same Serverless NEG with URL mask "/". The URL mask
        will parse them to { function = "function1" } and { function = "function2" } respectively.
        """
        ...

    @url_mask.setter
    def url_mask(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Optional serving version.
        The version must be 1-63 characters long, and comply with RFC1035.
        Example value: "v1", "v2".
        """
        ...

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionNetworkEndpointGroupCloudFunctionArgs:
    def __init__(__self__, *,
                 function: Optional[pulumi.Input[str]] = None,
                 url_mask: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] function: A user-defined name of the Cloud Function.
               The function name is case-sensitive and must be 1-63 characters long.
               Example value: "func1".
        :param pulumi.Input[str] url_mask: A template to parse function field from a request URL. URL mask allows
               for routing to multiple Cloud Functions without having to create
               multiple Network Endpoint Groups and backend services.
               For example, request URLs "mydomain.com/function1" and "mydomain.com/function2"
               can be backed by the same Serverless NEG with URL mask "/". The URL mask
               will parse them to { function = "function1" } and { function = "function2" } respectively.
        """
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "urlMask", url_mask)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        """
        A user-defined name of the Cloud Function.
        The function name is case-sensitive and must be 1-63 characters long.
        Example value: "func1".
        """
        ...

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="urlMask")
    def url_mask(self) -> Optional[pulumi.Input[str]]:
        """
        A template to parse function field from a request URL. URL mask allows
        for routing to multiple Cloud Functions without having to create
        multiple Network Endpoint Groups and backend services.
        For example, request URLs "mydomain.com/function1" and "mydomain.com/function2"
        can be backed by the same Serverless NEG with URL mask "/". The URL mask
        will parse them to { function = "function1" } and { function = "function2" } respectively.
        """
        ...

    @url_mask.setter
    def url_mask(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionNetworkEndpointGroupCloudRunArgs:
    def __init__(__self__, *,
                 service: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 url_mask: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] service: Optional serving service.
               The service name must be 1-63 characters long, and comply with RFC1035.
               Example value: "default", "my-service".
        :param pulumi.Input[str] tag: Cloud Run tag represents the "named-revision" to provide
               additional fine-grained traffic routing information.
               The tag must be 1-63 characters long, and comply with RFC1035.
               Example value: "revision-0010".
        :param pulumi.Input[str] url_mask: A template to parse function field from a request URL. URL mask allows
               for routing to multiple Cloud Functions without having to create
               multiple Network Endpoint Groups and backend services.
               For example, request URLs "mydomain.com/function1" and "mydomain.com/function2"
               can be backed by the same Serverless NEG with URL mask "/". The URL mask
               will parse them to { function = "function1" } and { function = "function2" } respectively.
        """
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "urlMask", url_mask)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Optional serving service.
        The service name must be 1-63 characters long, and comply with RFC1035.
        Example value: "default", "my-service".
        """
        ...

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Run tag represents the "named-revision" to provide
        additional fine-grained traffic routing information.
        The tag must be 1-63 characters long, and comply with RFC1035.
        Example value: "revision-0010".
        """
        ...

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="urlMask")
    def url_mask(self) -> Optional[pulumi.Input[str]]:
        """
        A template to parse function field from a request URL. URL mask allows
        for routing to multiple Cloud Functions without having to create
        multiple Network Endpoint Groups and backend services.
        For example, request URLs "mydomain.com/function1" and "mydomain.com/function2"
        can be backed by the same Serverless NEG with URL mask "/". The URL mask
        will parse them to { function = "function1" } and { function = "function2" } respectively.
        """
        ...

    @url_mask.setter
    def url_mask(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionPerInstanceConfigPreservedStateArgs:
    def __init__(__self__, *,
                 disks: Optional[pulumi.Input[List[pulumi.Input['RegionPerInstanceConfigPreservedStateDiskArgs']]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['RegionPerInstanceConfigPreservedStateDiskArgs']]] disks: Stateful disks for the instance.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Preserved metadata defined for this instance. This is a list of key->value pairs.
        """
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionPerInstanceConfigPreservedStateDiskArgs']]]]:
        """
        Stateful disks for the instance.
        Structure is documented below.
        """
        ...

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionPerInstanceConfigPreservedStateDiskArgs']]]]):
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Preserved metadata defined for this instance. This is a list of key->value pairs.
        """
        ...

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class RegionPerInstanceConfigPreservedStateDiskArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 source: pulumi.Input[str],
                 delete_rule: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] device_name: A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.
        :param pulumi.Input[str] source: The URI of an existing persistent disk to attach under the specified device-name in the format
               `projects/project-id/zones/zone/disks/disk-name`.
        :param pulumi.Input[str] delete_rule: A value that prescribes what should happen to the stateful disk when the VM instance is deleted.
               The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
               `NEVER` detatch the disk when the VM is deleted, but not delete the disk.
               `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently
               deleted from the instance group.
               Default value is `NEVER`.
               Possible values are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
        :param pulumi.Input[str] mode: The mode of the disk.
               Default value is `READ_WRITE`.
               Possible values are `READ_ONLY` and `READ_WRITE`.
        """
        pulumi.set(__self__, "deviceName", device_name)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "deleteRule", delete_rule)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        """
        A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.
        """
        ...

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The URI of an existing persistent disk to attach under the specified device-name in the format
        `projects/project-id/zones/zone/disks/disk-name`.
        """
        ...

    @source.setter
    def source(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="deleteRule")
    def delete_rule(self) -> Optional[pulumi.Input[str]]:
        """
        A value that prescribes what should happen to the stateful disk when the VM instance is deleted.
        The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
        `NEVER` detatch the disk when the VM is deleted, but not delete the disk.
        `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently
        deleted from the instance group.
        Default value is `NEVER`.
        Possible values are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
        """
        ...

    @delete_rule.setter
    def delete_rule(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode of the disk.
        Default value is `READ_WRITE`.
        Possible values are `READ_ONLY` and `READ_WRITE`.
        """
        ...

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapDefaultUrlRedirectArgs:
    def __init__(__self__, *,
                 strip_query: pulumi.Input[bool],
                 host_redirect: Optional[pulumi.Input[str]] = None,
                 https_redirect: Optional[pulumi.Input[bool]] = None,
                 path_redirect: Optional[pulumi.Input[str]] = None,
                 prefix_redirect: Optional[pulumi.Input[str]] = None,
                 redirect_response_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] strip_query: If set to true, any accompanying query portion of the original URL is removed prior
               to redirecting the request. If set to false, the query portion of the original URL is
               retained.
               This field is required to ensure an empty block is not set. The normal default value is false.
        :param pulumi.Input[str] host_redirect: The host that will be used in the redirect response instead of the one that was
               supplied in the request. The value must be between 1 and 255 characters.
        :param pulumi.Input[bool] https_redirect: If set to true, the URL scheme in the redirected request is set to https. If set to
               false, the URL scheme of the redirected request will remain the same as that of the
               request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
               true for TargetHttpsProxy is not permitted. The default is set to false.
        :param pulumi.Input[str] path_redirect: The path that will be used in the redirect response instead of the one that was
               supplied in the request. pathRedirect cannot be supplied together with
               prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
               original request will be used for the redirect. The value must be between 1 and 1024
               characters.
        :param pulumi.Input[str] prefix_redirect: The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
               retaining the remaining portion of the URL before redirecting the request.
               prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
               neither. If neither is supplied, the path of the original request will be used for
               the redirect. The value must be between 1 and 1024 characters.
        :param pulumi.Input[str] redirect_response_code: The HTTP Status code to use for this RedirectAction. Supported values are:
               * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
               * FOUND, which corresponds to 302.
               * SEE_OTHER which corresponds to 303.
               * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
               will be retained.
               * PERMANENT_REDIRECT, which corresponds to 308. In this case,
               the request method will be retained.
        """
        pulumi.set(__self__, "stripQuery", strip_query)
        pulumi.set(__self__, "hostRedirect", host_redirect)
        pulumi.set(__self__, "httpsRedirect", https_redirect)
        pulumi.set(__self__, "pathRedirect", path_redirect)
        pulumi.set(__self__, "prefixRedirect", prefix_redirect)
        pulumi.set(__self__, "redirectResponseCode", redirect_response_code)

    @property
    @pulumi.getter(name="stripQuery")
    def strip_query(self) -> pulumi.Input[bool]:
        """
        If set to true, any accompanying query portion of the original URL is removed prior
        to redirecting the request. If set to false, the query portion of the original URL is
        retained.
        This field is required to ensure an empty block is not set. The normal default value is false.
        """
        ...

    @strip_query.setter
    def strip_query(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter(name="hostRedirect")
    def host_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The host that will be used in the redirect response instead of the one that was
        supplied in the request. The value must be between 1 and 255 characters.
        """
        ...

    @host_redirect.setter
    def host_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the URL scheme in the redirected request is set to https. If set to
        false, the URL scheme of the redirected request will remain the same as that of the
        request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
        true for TargetHttpsProxy is not permitted. The default is set to false.
        """
        ...

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="pathRedirect")
    def path_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The path that will be used in the redirect response instead of the one that was
        supplied in the request. pathRedirect cannot be supplied together with
        prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
        original request will be used for the redirect. The value must be between 1 and 1024
        characters.
        """
        ...

    @path_redirect.setter
    def path_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="prefixRedirect")
    def prefix_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        retaining the remaining portion of the URL before redirecting the request.
        prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
        neither. If neither is supplied, the path of the original request will be used for
        the redirect. The value must be between 1 and 1024 characters.
        """
        ...

    @prefix_redirect.setter
    def prefix_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Status code to use for this RedirectAction. Supported values are:
        * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
        * FOUND, which corresponds to 302.
        * SEE_OTHER which corresponds to 303.
        * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        will be retained.
        * PERMANENT_REDIRECT, which corresponds to 308. In this case,
        the request method will be retained.
        """
        ...

    @redirect_response_code.setter
    def redirect_response_code(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapHostRuleArgs:
    def __init__(__self__, *,
                 hosts: pulumi.Input[List[pulumi.Input[str]]],
                 path_matcher: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] hosts: The list of host patterns to match. They must be valid
               hostnames, except * will match any string of ([a-z0-9-.]*). In
               that case, * must be the first character and must be followed in
               the pattern by either - or ..
        :param pulumi.Input[str] path_matcher: The name of the PathMatcher to use to match the path portion of
               the URL if the hostRule matches the URL's host portion.
        :param pulumi.Input[str] description: Description of this test case.
        """
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "pathMatcher", path_matcher)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        The list of host patterns to match. They must be valid
        hostnames, except * will match any string of ([a-z0-9-.]*). In
        that case, * must be the first character and must be followed in
        the pattern by either - or ..
        """
        ...

    @hosts.setter
    def hosts(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="pathMatcher")
    def path_matcher(self) -> pulumi.Input[str]:
        """
        The name of the PathMatcher to use to match the path portion of
        the URL if the hostRule matches the URL's host portion.
        """
        ...

    @path_matcher.setter
    def path_matcher(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this test case.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherArgs:
    def __init__(__self__, *,
                 default_service: pulumi.Input[str],
                 name: pulumi.Input[str],
                 default_url_redirect: Optional[pulumi.Input['RegionUrlMapPathMatcherDefaultUrlRedirectArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 path_rules: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleArgs']]]] = None,
                 route_rules: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] default_service: A reference to a RegionBackendService resource. This will be used if
               none of the pathRules defined by this PathMatcher is matched by
               the URL's path portion.
        :param pulumi.Input[str] name: The name of the query parameter to match. The query parameter must exist in the
               request, in the absence of which the request match fails.
        :param pulumi.Input['RegionUrlMapPathMatcherDefaultUrlRedirectArgs'] default_url_redirect: When none of the specified hostRules match, the request is redirected to a URL specified
               by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
               defaultRouteAction must not be set.
               Structure is documented below.
        :param pulumi.Input[str] description: Description of this test case.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleArgs']]] path_rules: The list of path rules. Use this list instead of routeRules when routing based
               on simple path matching is all that's required. The order by which path rules
               are specified does not matter. Matches are always done on the longest-path-first
               basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
               irrespective of the order in which those paths appear in this list. Within a
               given pathMatcher, only one of pathRules or routeRules must be set.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleArgs']]] route_rules: The list of ordered HTTP route rules. Use this list instead of pathRules when
               advanced route matching and routing actions are desired. The order of specifying
               routeRules matters: the first rule that matches will cause its specified routing
               action to take effect. Within a given pathMatcher, only one of pathRules or
               routeRules must be set. routeRules are not supported in UrlMaps intended for
               External load balancers.
               Structure is documented below.
        """
        pulumi.set(__self__, "defaultService", default_service)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "defaultUrlRedirect", default_url_redirect)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "pathRules", path_rules)
        pulumi.set(__self__, "routeRules", route_rules)

    @property
    @pulumi.getter(name="defaultService")
    def default_service(self) -> pulumi.Input[str]:
        """
        A reference to a RegionBackendService resource. This will be used if
        none of the pathRules defined by this PathMatcher is matched by
        the URL's path portion.
        """
        ...

    @default_service.setter
    def default_service(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the query parameter to match. The query parameter must exist in the
        request, in the absence of which the request match fails.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="defaultUrlRedirect")
    def default_url_redirect(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherDefaultUrlRedirectArgs']]:
        """
        When none of the specified hostRules match, the request is redirected to a URL specified
        by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        defaultRouteAction must not be set.
        Structure is documented below.
        """
        ...

    @default_url_redirect.setter
    def default_url_redirect(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherDefaultUrlRedirectArgs']]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this test case.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="pathRules")
    def path_rules(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleArgs']]]]:
        """
        The list of path rules. Use this list instead of routeRules when routing based
        on simple path matching is all that's required. The order by which path rules
        are specified does not matter. Matches are always done on the longest-path-first
        basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
        irrespective of the order in which those paths appear in this list. Within a
        given pathMatcher, only one of pathRules or routeRules must be set.
        Structure is documented below.
        """
        ...

    @path_rules.setter
    def path_rules(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleArgs']]]]):
        ...

    @property
    @pulumi.getter(name="routeRules")
    def route_rules(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleArgs']]]]:
        """
        The list of ordered HTTP route rules. Use this list instead of pathRules when
        advanced route matching and routing actions are desired. The order of specifying
        routeRules matters: the first rule that matches will cause its specified routing
        action to take effect. Within a given pathMatcher, only one of pathRules or
        routeRules must be set. routeRules are not supported in UrlMaps intended for
        External load balancers.
        Structure is documented below.
        """
        ...

    @route_rules.setter
    def route_rules(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleArgs']]]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherDefaultUrlRedirectArgs:
    def __init__(__self__, *,
                 strip_query: pulumi.Input[bool],
                 host_redirect: Optional[pulumi.Input[str]] = None,
                 https_redirect: Optional[pulumi.Input[bool]] = None,
                 path_redirect: Optional[pulumi.Input[str]] = None,
                 prefix_redirect: Optional[pulumi.Input[str]] = None,
                 redirect_response_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] strip_query: If set to true, any accompanying query portion of the original URL is removed prior
               to redirecting the request. If set to false, the query portion of the original URL is
               retained.
               This field is required to ensure an empty block is not set. The normal default value is false.
        :param pulumi.Input[str] host_redirect: The host that will be used in the redirect response instead of the one that was
               supplied in the request. The value must be between 1 and 255 characters.
        :param pulumi.Input[bool] https_redirect: If set to true, the URL scheme in the redirected request is set to https. If set to
               false, the URL scheme of the redirected request will remain the same as that of the
               request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
               true for TargetHttpsProxy is not permitted. The default is set to false.
        :param pulumi.Input[str] path_redirect: The path that will be used in the redirect response instead of the one that was
               supplied in the request. pathRedirect cannot be supplied together with
               prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
               original request will be used for the redirect. The value must be between 1 and 1024
               characters.
        :param pulumi.Input[str] prefix_redirect: The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
               retaining the remaining portion of the URL before redirecting the request.
               prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
               neither. If neither is supplied, the path of the original request will be used for
               the redirect. The value must be between 1 and 1024 characters.
        :param pulumi.Input[str] redirect_response_code: The HTTP Status code to use for this RedirectAction. Supported values are:
               * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
               * FOUND, which corresponds to 302.
               * SEE_OTHER which corresponds to 303.
               * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
               will be retained.
               * PERMANENT_REDIRECT, which corresponds to 308. In this case,
               the request method will be retained.
        """
        pulumi.set(__self__, "stripQuery", strip_query)
        pulumi.set(__self__, "hostRedirect", host_redirect)
        pulumi.set(__self__, "httpsRedirect", https_redirect)
        pulumi.set(__self__, "pathRedirect", path_redirect)
        pulumi.set(__self__, "prefixRedirect", prefix_redirect)
        pulumi.set(__self__, "redirectResponseCode", redirect_response_code)

    @property
    @pulumi.getter(name="stripQuery")
    def strip_query(self) -> pulumi.Input[bool]:
        """
        If set to true, any accompanying query portion of the original URL is removed prior
        to redirecting the request. If set to false, the query portion of the original URL is
        retained.
        This field is required to ensure an empty block is not set. The normal default value is false.
        """
        ...

    @strip_query.setter
    def strip_query(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter(name="hostRedirect")
    def host_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The host that will be used in the redirect response instead of the one that was
        supplied in the request. The value must be between 1 and 255 characters.
        """
        ...

    @host_redirect.setter
    def host_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the URL scheme in the redirected request is set to https. If set to
        false, the URL scheme of the redirected request will remain the same as that of the
        request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
        true for TargetHttpsProxy is not permitted. The default is set to false.
        """
        ...

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="pathRedirect")
    def path_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The path that will be used in the redirect response instead of the one that was
        supplied in the request. pathRedirect cannot be supplied together with
        prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
        original request will be used for the redirect. The value must be between 1 and 1024
        characters.
        """
        ...

    @path_redirect.setter
    def path_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="prefixRedirect")
    def prefix_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        retaining the remaining portion of the URL before redirecting the request.
        prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
        neither. If neither is supplied, the path of the original request will be used for
        the redirect. The value must be between 1 and 1024 characters.
        """
        ...

    @prefix_redirect.setter
    def prefix_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Status code to use for this RedirectAction. Supported values are:
        * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
        * FOUND, which corresponds to 302.
        * SEE_OTHER which corresponds to 303.
        * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        will be retained.
        * PERMANENT_REDIRECT, which corresponds to 308. In this case,
        the request method will be retained.
        """
        ...

    @redirect_response_code.setter
    def redirect_response_code(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleArgs:
    def __init__(__self__, *,
                 paths: pulumi.Input[List[pulumi.Input[str]]],
                 route_action: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionArgs']] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 url_redirect: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleUrlRedirectArgs']] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] paths: The list of path patterns to match. Each must start with / and the only place a
               * is allowed is at the end following a /. The string fed to the path matcher
               does not include any text after the first ? or #, and those chars are not
               allowed here.
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionArgs'] route_action: In response to a matching path, the load balancer performs advanced routing
               actions like URL rewrites, header transformations, etc. prior to forwarding the
               request to the selected backend. If routeAction specifies any
               weightedBackendServices, service must not be set. Conversely if service is set,
               routeAction cannot contain any  weightedBackendServices. Only one of routeAction
               or urlRedirect must be set.
               Structure is documented below.
        :param pulumi.Input[str] service: A reference to expected RegionBackendService resource the given URL should be mapped to.
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleUrlRedirectArgs'] url_redirect: When a path pattern is matched, the request is redirected to a URL specified
               by urlRedirect. If urlRedirect is specified, service or routeAction must not
               be set.
               Structure is documented below.
        """
        pulumi.set(__self__, "paths", paths)
        pulumi.set(__self__, "routeAction", route_action)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "urlRedirect", url_redirect)

    @property
    @pulumi.getter
    def paths(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        The list of path patterns to match. Each must start with / and the only place a
        * is allowed is at the end following a /. The string fed to the path matcher
        does not include any text after the first ? or #, and those chars are not
        allowed here.
        """
        ...

    @paths.setter
    def paths(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="routeAction")
    def route_action(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionArgs']]:
        """
        In response to a matching path, the load balancer performs advanced routing
        actions like URL rewrites, header transformations, etc. prior to forwarding the
        request to the selected backend. If routeAction specifies any
        weightedBackendServices, service must not be set. Conversely if service is set,
        routeAction cannot contain any  weightedBackendServices. Only one of routeAction
        or urlRedirect must be set.
        Structure is documented below.
        """
        ...

    @route_action.setter
    def route_action(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionArgs']]):
        ...

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        A reference to expected RegionBackendService resource the given URL should be mapped to.
        """
        ...

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="urlRedirect")
    def url_redirect(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleUrlRedirectArgs']]:
        """
        When a path pattern is matched, the request is redirected to a URL specified
        by urlRedirect. If urlRedirect is specified, service or routeAction must not
        be set.
        Structure is documented below.
        """
        ...

    @url_redirect.setter
    def url_redirect(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleUrlRedirectArgs']]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionArgs:
    def __init__(__self__, *,
                 cors_policy: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs']] = None,
                 fault_injection_policy: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs']] = None,
                 request_mirror_policy: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs']] = None,
                 retry_policy: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs']] = None,
                 timeout: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs']] = None,
                 url_rewrite: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs']] = None,
                 weighted_backend_services: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs']]]] = None):
        """
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs'] cors_policy: The specification for allowing client side cross-origin requests. Please see W3C
               Recommendation for Cross Origin Resource Sharing
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs'] fault_injection_policy: The specification for fault injection introduced into traffic to test the
               resiliency of clients to backend service failure. As part of fault injection,
               when clients send requests to a backend service, delays can be introduced by
               Loadbalancer on a percentage of requests before sending those request to the
               backend service. Similarly requests from clients can be aborted by the
               Loadbalancer for a percentage of requests. timeout and retry_policy will be
               ignored by clients that are configured with a fault_injection_policy.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs'] request_mirror_policy: Specifies the policy on how requests intended for the route's backends are
               shadowed to a separate mirrored backend service. Loadbalancer does not wait for
               responses from the shadow service. Prior to sending traffic to the shadow
               service, the host / authority header is suffixed with -shadow.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs'] retry_policy: Specifies the retry policy associated with this route.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs'] timeout: Specifies the timeout for the selected route. Timeout is computed from the time
               the request is has been fully processed (i.e. end-of-stream) up until the
               response has been completely processed. Timeout includes all retries. If not
               specified, the default value is 15 seconds.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs'] url_rewrite: The spec to modify the URL of the request, prior to forwarding the request to
               the matched service
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs']]] weighted_backend_services: A list of weighted backend services to send traffic to when a route match
               occurs. The weights determine the fraction of traffic that flows to their
               corresponding backend service. If all traffic needs to go to a single backend
               service, there must be one  weightedBackendService with weight set to a non 0
               number. Once a backendService is identified and before forwarding the request to
               the backend service, advanced routing actions like Url rewrites and header
               transformations are applied depending on additional settings specified in this
               HttpRouteAction.
               Structure is documented below.
        """
        pulumi.set(__self__, "corsPolicy", cors_policy)
        pulumi.set(__self__, "faultInjectionPolicy", fault_injection_policy)
        pulumi.set(__self__, "requestMirrorPolicy", request_mirror_policy)
        pulumi.set(__self__, "retryPolicy", retry_policy)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "urlRewrite", url_rewrite)
        pulumi.set(__self__, "weightedBackendServices", weighted_backend_services)

    @property
    @pulumi.getter(name="corsPolicy")
    def cors_policy(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs']]:
        """
        The specification for allowing client side cross-origin requests. Please see W3C
        Recommendation for Cross Origin Resource Sharing
        Structure is documented below.
        """
        ...

    @cors_policy.setter
    def cors_policy(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="faultInjectionPolicy")
    def fault_injection_policy(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs']]:
        """
        The specification for fault injection introduced into traffic to test the
        resiliency of clients to backend service failure. As part of fault injection,
        when clients send requests to a backend service, delays can be introduced by
        Loadbalancer on a percentage of requests before sending those request to the
        backend service. Similarly requests from clients can be aborted by the
        Loadbalancer for a percentage of requests. timeout and retry_policy will be
        ignored by clients that are configured with a fault_injection_policy.
        Structure is documented below.
        """
        ...

    @fault_injection_policy.setter
    def fault_injection_policy(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="requestMirrorPolicy")
    def request_mirror_policy(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs']]:
        """
        Specifies the policy on how requests intended for the route's backends are
        shadowed to a separate mirrored backend service. Loadbalancer does not wait for
        responses from the shadow service. Prior to sending traffic to the shadow
        service, the host / authority header is suffixed with -shadow.
        Structure is documented below.
        """
        ...

    @request_mirror_policy.setter
    def request_mirror_policy(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs']]:
        """
        Specifies the retry policy associated with this route.
        Structure is documented below.
        """
        ...

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs']]):
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs']]:
        """
        Specifies the timeout for the selected route. Timeout is computed from the time
        the request is has been fully processed (i.e. end-of-stream) up until the
        response has been completely processed. Timeout includes all retries. If not
        specified, the default value is 15 seconds.
        Structure is documented below.
        """
        ...

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs']]:
        """
        The spec to modify the URL of the request, prior to forwarding the request to
        the matched service
        Structure is documented below.
        """
        ...

    @url_rewrite.setter
    def url_rewrite(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs']]):
        ...

    @property
    @pulumi.getter(name="weightedBackendServices")
    def weighted_backend_services(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs']]]]:
        """
        A list of weighted backend services to send traffic to when a route match
        occurs. The weights determine the fraction of traffic that flows to their
        corresponding backend service. If all traffic needs to go to a single backend
        service, there must be one  weightedBackendService with weight set to a non 0
        number. Once a backendService is identified and before forwarding the request to
        the backend service, advanced routing actions like Url rewrites and header
        transformations are applied depending on additional settings specified in this
        HttpRouteAction.
        Structure is documented below.
        """
        ...

    @weighted_backend_services.setter
    def weighted_backend_services(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs']]]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs:
    def __init__(__self__, *,
                 disabled: pulumi.Input[bool],
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allow_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origin_regexes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origins: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 expose_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] disabled: If true, specifies the CORS policy is disabled.
        :param pulumi.Input[bool] allow_credentials: In response to a preflight request, setting this to true indicates that the
               actual request can include user credentials. This translates to the Access-
               Control-Allow-Credentials header. Defaults to false.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_headers: Specifies the content for the Access-Control-Allow-Headers header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_methods: Specifies the content for the Access-Control-Allow-Methods header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origin_regexes: Specifies the regualar expression patterns that match allowed origins. For
               regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
               An origin is allowed if it matches either allow_origins or allow_origin_regex.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origins: Specifies the list of origins that will be allowed to do CORS requests. An
               origin is allowed if it matches either allow_origins or allow_origin_regex.
        :param pulumi.Input[List[pulumi.Input[str]]] expose_headers: Specifies the content for the Access-Control-Expose-Headers header.
        :param pulumi.Input[float] max_age: Specifies how long the results of a preflight request can be cached. This
               translates to the content for the Access-Control-Max-Age header.
        """
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "allowCredentials", allow_credentials)
        pulumi.set(__self__, "allowHeaders", allow_headers)
        pulumi.set(__self__, "allowMethods", allow_methods)
        pulumi.set(__self__, "allowOriginRegexes", allow_origin_regexes)
        pulumi.set(__self__, "allowOrigins", allow_origins)
        pulumi.set(__self__, "exposeHeaders", expose_headers)
        pulumi.set(__self__, "maxAge", max_age)

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Input[bool]:
        """
        If true, specifies the CORS policy is disabled.
        """
        ...

    @disabled.setter
    def disabled(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        In response to a preflight request, setting this to true indicates that the
        actual request can include user credentials. This translates to the Access-
        Control-Allow-Credentials header. Defaults to false.
        """
        ...

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Headers header.
        """
        ...

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Methods header.
        """
        ...

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOriginRegexes")
    def allow_origin_regexes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the regualar expression patterns that match allowed origins. For
        regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
        An origin is allowed if it matches either allow_origins or allow_origin_regex.
        """
        ...

    @allow_origin_regexes.setter
    def allow_origin_regexes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the list of origins that will be allowed to do CORS requests. An
        origin is allowed if it matches either allow_origins or allow_origin_regex.
        """
        ...

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Expose-Headers header.
        """
        ...

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long the results of a preflight request can be cached. This
        translates to the content for the Access-Control-Max-Age header.
        """
        ...

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs:
    def __init__(__self__, *,
                 abort: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs']] = None,
                 delay: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs']] = None):
        """
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs'] abort: The specification for how client requests are aborted as part of fault
               injection.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs'] delay: The specification for how client requests are delayed as part of fault
               injection, before being sent to a backend service.
               Structure is documented below.
        """
        pulumi.set(__self__, "abort", abort)
        pulumi.set(__self__, "delay", delay)

    @property
    @pulumi.getter
    def abort(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs']]:
        """
        The specification for how client requests are aborted as part of fault
        injection.
        Structure is documented below.
        """
        ...

    @abort.setter
    def abort(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs']]):
        ...

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs']]:
        """
        The specification for how client requests are delayed as part of fault
        injection, before being sent to a backend service.
        Structure is documented below.
        """
        ...

    @delay.setter
    def delay(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs']]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs:
    def __init__(__self__, *,
                 http_status: pulumi.Input[float],
                 percentage: pulumi.Input[float]):
        """
        :param pulumi.Input[float] http_status: The HTTP status code used to abort the request. The value must be between 200
               and 599 inclusive.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) on which delay will
               be introduced as part of fault injection. The value must be between 0.0 and
               100.0 inclusive.
        """
        pulumi.set(__self__, "httpStatus", http_status)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> pulumi.Input[float]:
        """
        The HTTP status code used to abort the request. The value must be between 200
        and 599 inclusive.
        """
        ...

    @http_status.setter
    def http_status(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[float]:
        """
        The percentage of traffic (connections/operations/requests) on which delay will
        be introduced as part of fault injection. The value must be between 0.0 and
        100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs:
    def __init__(__self__, *,
                 fixed_delay: pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs'],
                 percentage: pulumi.Input[float]):
        """
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs'] fixed_delay: Specifies the value of the fixed delay interval.
               Structure is documented below.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) on which delay will
               be introduced as part of fault injection. The value must be between 0.0 and
               100.0 inclusive.
        """
        pulumi.set(__self__, "fixedDelay", fixed_delay)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="fixedDelay")
    def fixed_delay(self) -> pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']:
        """
        Specifies the value of the fixed delay interval.
        Structure is documented below.
        """
        ...

    @fixed_delay.setter
    def fixed_delay(self, value: pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[float]:
        """
        The percentage of traffic (connections/operations/requests) on which delay will
        be introduced as part of fault injection. The value must be between 0.0 and
        100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str]):
        """
        :param pulumi.Input[str] backend_service: The default RegionBackendService resource. Before
               forwarding the request to backendService, the loadbalancer applies any relevant
               headerActions specified as part of this backendServiceWeight.
        """
        pulumi.set(__self__, "backendService", backend_service)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The default RegionBackendService resource. Before
        forwarding the request to backendService, the loadbalancer applies any relevant
        headerActions specified as part of this backendServiceWeight.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs:
    def __init__(__self__, *,
                 num_retries: Optional[pulumi.Input[float]] = None,
                 per_try_timeout: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs']] = None,
                 retry_conditions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[float] num_retries: Specifies the allowed number retries. This number must be > 0.
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs'] per_try_timeout: Specifies a non-zero timeout per retry attempt.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] retry_conditions: Specifies one or more conditions when this retry rule applies. Valid values are:
               - 5xx: Loadbalancer will attempt a retry if the backend service responds with
               any 5xx response code, or if the backend service does not respond at all,
               example: disconnects, reset, read timeout, connection failure, and refused
               streams.
               - gateway-error: Similar to 5xx, but only applies to response codes
               502, 503 or 504.
               - connect-failure: Loadbalancer will retry on failures
               connecting to backend services, for example due to connection timeouts.
               - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
               Currently the only retriable error supported is 409.
               - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
               REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
               - cancelled: Loadbalancer will retry if the gRPC status code in the response
               header is set to cancelled
               - deadline-exceeded: Loadbalancer will retry if the
               gRPC status code in the response header is set to deadline-exceeded
               - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
               header is set to resource-exhausted
               - unavailable: Loadbalancer will retry if
               the gRPC status code in the response header is set to unavailable
        """
        pulumi.set(__self__, "numRetries", num_retries)
        pulumi.set(__self__, "perTryTimeout", per_try_timeout)
        pulumi.set(__self__, "retryConditions", retry_conditions)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the allowed number retries. This number must be > 0.
        """
        ...

    @num_retries.setter
    def num_retries(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs']]:
        """
        Specifies a non-zero timeout per retry attempt.
        Structure is documented below.
        """
        ...

    @per_try_timeout.setter
    def per_try_timeout(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="retryConditions")
    def retry_conditions(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies one or more conditions when this retry rule applies. Valid values are:
        - 5xx: Loadbalancer will attempt a retry if the backend service responds with
        any 5xx response code, or if the backend service does not respond at all,
        example: disconnects, reset, read timeout, connection failure, and refused
        streams.
        - gateway-error: Similar to 5xx, but only applies to response codes
        502, 503 or 504.
        - connect-failure: Loadbalancer will retry on failures
        connecting to backend services, for example due to connection timeouts.
        - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
        Currently the only retriable error supported is 409.
        - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
        REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
        - cancelled: Loadbalancer will retry if the gRPC status code in the response
        header is set to cancelled
        - deadline-exceeded: Loadbalancer will retry if the
        gRPC status code in the response header is set to deadline-exceeded
        - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
        header is set to resource-exhausted
        - unavailable: Loadbalancer will retry if
        the gRPC status code in the response header is set to unavailable
        """
        ...

    @retry_conditions.setter
    def retry_conditions(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs:
    def __init__(__self__, *,
                 host_rewrite: Optional[pulumi.Input[str]] = None,
                 path_prefix_rewrite: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_rewrite: Prior to forwarding the request to the selected service, the request's host
               header is replaced with contents of hostRewrite. The value must be between 1 and
               255 characters.
        :param pulumi.Input[str] path_prefix_rewrite: Prior to forwarding the request to the selected backend service, the matching
               portion of the request's path is replaced by pathPrefixRewrite. The value must
               be between 1 and 1024 characters.
        """
        pulumi.set(__self__, "hostRewrite", host_rewrite)
        pulumi.set(__self__, "pathPrefixRewrite", path_prefix_rewrite)

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected service, the request's host
        header is replaced with contents of hostRewrite. The value must be between 1 and
        255 characters.
        """
        ...

    @host_rewrite.setter
    def host_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="pathPrefixRewrite")
    def path_prefix_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected backend service, the matching
        portion of the request's path is replaced by pathPrefixRewrite. The value must
        be between 1 and 1024 characters.
        """
        ...

    @path_prefix_rewrite.setter
    def path_prefix_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str],
                 weight: pulumi.Input[float],
                 header_action: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs']] = None):
        """
        :param pulumi.Input[str] backend_service: The default RegionBackendService resource. Before
               forwarding the request to backendService, the loadbalancer applies any relevant
               headerActions specified as part of this backendServiceWeight.
        :param pulumi.Input[float] weight: Specifies the fraction of traffic sent to backendService, computed as weight /
               (sum of all weightedBackendService weights in routeAction) . The selection of a
               backend service is determined only for new traffic. Once a user's request has
               been directed to a backendService, subsequent requests will be sent to the same
               backendService as determined by the BackendService's session affinity policy.
               The value must be between 0 and 1000
        :param pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs'] header_action: Specifies changes to request and response headers that need to take effect for
               the selected backendService. headerAction specified here take effect before
               headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
               Structure is documented below.
        """
        pulumi.set(__self__, "backendService", backend_service)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "headerAction", header_action)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The default RegionBackendService resource. Before
        forwarding the request to backendService, the loadbalancer applies any relevant
        headerActions specified as part of this backendServiceWeight.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[float]:
        """
        Specifies the fraction of traffic sent to backendService, computed as weight /
        (sum of all weightedBackendService weights in routeAction) . The selection of a
        backend service is determined only for new traffic. Once a user's request has
        been directed to a backendService, subsequent requests will be sent to the same
        backendService as determined by the BackendService's session affinity policy.
        The value must be between 0 and 1000
        """
        ...

    @weight.setter
    def weight(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="headerAction")
    def header_action(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs']]:
        """
        Specifies changes to request and response headers that need to take effect for
        the selected backendService. headerAction specified here take effect before
        headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
        Structure is documented below.
        """
        ...

    @header_action.setter
    def header_action(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs']]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the
               backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request
               prior to forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response
               prior to sending the response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the
        backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request
        prior to forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response
        prior to sending the response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the
               header. If true, headerValue is set for the header, discarding any values that
               were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the
        header. If true, headerValue is set for the header, discarding any values that
        were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the
               header. If true, headerValue is set for the header, discarding any values that
               were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the
        header. If true, headerValue is set for the header, discarding any values that
        were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherPathRuleUrlRedirectArgs:
    def __init__(__self__, *,
                 strip_query: pulumi.Input[bool],
                 host_redirect: Optional[pulumi.Input[str]] = None,
                 https_redirect: Optional[pulumi.Input[bool]] = None,
                 path_redirect: Optional[pulumi.Input[str]] = None,
                 prefix_redirect: Optional[pulumi.Input[str]] = None,
                 redirect_response_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] strip_query: If set to true, any accompanying query portion of the original URL is removed prior
               to redirecting the request. If set to false, the query portion of the original URL is
               retained.
               This field is required to ensure an empty block is not set. The normal default value is false.
        :param pulumi.Input[str] host_redirect: The host that will be used in the redirect response instead of the one that was
               supplied in the request. The value must be between 1 and 255 characters.
        :param pulumi.Input[bool] https_redirect: If set to true, the URL scheme in the redirected request is set to https. If set to
               false, the URL scheme of the redirected request will remain the same as that of the
               request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
               true for TargetHttpsProxy is not permitted. The default is set to false.
        :param pulumi.Input[str] path_redirect: The path that will be used in the redirect response instead of the one that was
               supplied in the request. pathRedirect cannot be supplied together with
               prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
               original request will be used for the redirect. The value must be between 1 and 1024
               characters.
        :param pulumi.Input[str] prefix_redirect: The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
               retaining the remaining portion of the URL before redirecting the request.
               prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
               neither. If neither is supplied, the path of the original request will be used for
               the redirect. The value must be between 1 and 1024 characters.
        :param pulumi.Input[str] redirect_response_code: The HTTP Status code to use for this RedirectAction. Supported values are:
               * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
               * FOUND, which corresponds to 302.
               * SEE_OTHER which corresponds to 303.
               * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
               will be retained.
               * PERMANENT_REDIRECT, which corresponds to 308. In this case,
               the request method will be retained.
        """
        pulumi.set(__self__, "stripQuery", strip_query)
        pulumi.set(__self__, "hostRedirect", host_redirect)
        pulumi.set(__self__, "httpsRedirect", https_redirect)
        pulumi.set(__self__, "pathRedirect", path_redirect)
        pulumi.set(__self__, "prefixRedirect", prefix_redirect)
        pulumi.set(__self__, "redirectResponseCode", redirect_response_code)

    @property
    @pulumi.getter(name="stripQuery")
    def strip_query(self) -> pulumi.Input[bool]:
        """
        If set to true, any accompanying query portion of the original URL is removed prior
        to redirecting the request. If set to false, the query portion of the original URL is
        retained.
        This field is required to ensure an empty block is not set. The normal default value is false.
        """
        ...

    @strip_query.setter
    def strip_query(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter(name="hostRedirect")
    def host_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The host that will be used in the redirect response instead of the one that was
        supplied in the request. The value must be between 1 and 255 characters.
        """
        ...

    @host_redirect.setter
    def host_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the URL scheme in the redirected request is set to https. If set to
        false, the URL scheme of the redirected request will remain the same as that of the
        request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
        true for TargetHttpsProxy is not permitted. The default is set to false.
        """
        ...

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="pathRedirect")
    def path_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The path that will be used in the redirect response instead of the one that was
        supplied in the request. pathRedirect cannot be supplied together with
        prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
        original request will be used for the redirect. The value must be between 1 and 1024
        characters.
        """
        ...

    @path_redirect.setter
    def path_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="prefixRedirect")
    def prefix_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        retaining the remaining portion of the URL before redirecting the request.
        prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
        neither. If neither is supplied, the path of the original request will be used for
        the redirect. The value must be between 1 and 1024 characters.
        """
        ...

    @prefix_redirect.setter
    def prefix_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Status code to use for this RedirectAction. Supported values are:
        * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
        * FOUND, which corresponds to 302.
        * SEE_OTHER which corresponds to 303.
        * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        will be retained.
        * PERMANENT_REDIRECT, which corresponds to 308. In this case,
        the request method will be retained.
        """
        ...

    @redirect_response_code.setter
    def redirect_response_code(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleArgs:
    def __init__(__self__, *,
                 priority: pulumi.Input[float],
                 header_action: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionArgs']] = None,
                 match_rules: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleArgs']]]] = None,
                 route_action: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionArgs']] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 url_redirect: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs']] = None):
        """
        :param pulumi.Input[float] priority: For routeRules within a given pathMatcher, priority determines the order
               in which load balancer will interpret routeRules. RouteRules are evaluated
               in order of priority, from the lowest to highest number. The priority of
               a rule decreases as its number increases (1, 2, 3, N+1). The first rule
               that matches the request is applied.
               You cannot configure two or more routeRules with the same priority.
               Priority for each rule must be set to a number between 0 and
               2147483647 inclusive.
               Priority numbers can have gaps, which enable you to add or remove rules
               in the future without affecting the rest of the rules. For example,
               1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
               you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
               future without any impact on existing rules.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionArgs'] header_action: Specifies changes to request and response headers that need to take effect for
               the selected backendService. headerAction specified here take effect before
               headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleArgs']]] match_rules: The rules for determining a match.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionArgs'] route_action: In response to a matching path, the load balancer performs advanced routing
               actions like URL rewrites, header transformations, etc. prior to forwarding the
               request to the selected backend. If routeAction specifies any
               weightedBackendServices, service must not be set. Conversely if service is set,
               routeAction cannot contain any  weightedBackendServices. Only one of routeAction
               or urlRedirect must be set.
               Structure is documented below.
        :param pulumi.Input[str] service: A reference to expected RegionBackendService resource the given URL should be mapped to.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs'] url_redirect: When a path pattern is matched, the request is redirected to a URL specified
               by urlRedirect. If urlRedirect is specified, service or routeAction must not
               be set.
               Structure is documented below.
        """
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "headerAction", header_action)
        pulumi.set(__self__, "matchRules", match_rules)
        pulumi.set(__self__, "routeAction", route_action)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "urlRedirect", url_redirect)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[float]:
        """
        For routeRules within a given pathMatcher, priority determines the order
        in which load balancer will interpret routeRules. RouteRules are evaluated
        in order of priority, from the lowest to highest number. The priority of
        a rule decreases as its number increases (1, 2, 3, N+1). The first rule
        that matches the request is applied.
        You cannot configure two or more routeRules with the same priority.
        Priority for each rule must be set to a number between 0 and
        2147483647 inclusive.
        Priority numbers can have gaps, which enable you to add or remove rules
        in the future without affecting the rest of the rules. For example,
        1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
        you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
        future without any impact on existing rules.
        """
        ...

    @priority.setter
    def priority(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="headerAction")
    def header_action(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionArgs']]:
        """
        Specifies changes to request and response headers that need to take effect for
        the selected backendService. headerAction specified here take effect before
        headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
        Structure is documented below.
        """
        ...

    @header_action.setter
    def header_action(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionArgs']]):
        ...

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleArgs']]]]:
        """
        The rules for determining a match.
        Structure is documented below.
        """
        ...

    @match_rules.setter
    def match_rules(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleArgs']]]]):
        ...

    @property
    @pulumi.getter(name="routeAction")
    def route_action(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionArgs']]:
        """
        In response to a matching path, the load balancer performs advanced routing
        actions like URL rewrites, header transformations, etc. prior to forwarding the
        request to the selected backend. If routeAction specifies any
        weightedBackendServices, service must not be set. Conversely if service is set,
        routeAction cannot contain any  weightedBackendServices. Only one of routeAction
        or urlRedirect must be set.
        Structure is documented below.
        """
        ...

    @route_action.setter
    def route_action(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionArgs']]):
        ...

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        A reference to expected RegionBackendService resource the given URL should be mapped to.
        """
        ...

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="urlRedirect")
    def url_redirect(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs']]:
        """
        When a path pattern is matched, the request is redirected to a URL specified
        by urlRedirect. If urlRedirect is specified, service or routeAction must not
        be set.
        Structure is documented below.
        """
        ...

    @url_redirect.setter
    def url_redirect(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs']]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the
               backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request
               prior to forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response
               prior to sending the response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the
        backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request
        prior to forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response
        prior to sending the response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the
               header. If true, headerValue is set for the header, discarding any values that
               were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the
        header. If true, headerValue is set for the header, discarding any values that
        were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the
               header. If true, headerValue is set for the header, discarding any values that
               were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the
        header. If true, headerValue is set for the header, discarding any values that
        were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleArgs:
    def __init__(__self__, *,
                 full_path_match: Optional[pulumi.Input[str]] = None,
                 header_matches: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs']]]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 metadata_filters: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs']]]] = None,
                 prefix_match: Optional[pulumi.Input[str]] = None,
                 query_parameter_matches: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs']]]] = None,
                 regex_match: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] full_path_match: For satifying the matchRule condition, the path of the request must exactly
               match the value specified in fullPathMatch after removing any query parameters
               and anchor that may be part of the original URL. FullPathMatch must be between 1
               and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
               be specified.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs']]] header_matches: Specifies a list of header match criteria, all of which must match corresponding
               headers in the request.
               Structure is documented below.
        :param pulumi.Input[bool] ignore_case: Specifies that prefixMatch and fullPathMatch matches are case sensitive.
               Defaults to false.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs']]] metadata_filters: Opaque filter criteria used by Loadbalancer to restrict routing configuration to
               a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
               clients present node metadata. If a match takes place, the relevant routing
               configuration is made available to those proxies. For each metadataFilter in
               this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
               filterLabels must match the corresponding label provided in the metadata. If its
               filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
               with corresponding labels in the provided metadata. metadataFilters specified
               here can be overrides those specified in ForwardingRule that refers to this
               UrlMap. metadataFilters only applies to Loadbalancers that have their
               loadBalancingScheme set to INTERNAL_SELF_MANAGED.
               Structure is documented below.
        :param pulumi.Input[str] prefix_match: The value of the header must start with the contents of prefixMatch. Only one of
               exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
               must be set.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs']]] query_parameter_matches: Specifies a list of query parameter match criteria, all of which must match
               corresponding query parameters in the request.
               Structure is documented below.
        :param pulumi.Input[str] regex_match: The queryParameterMatch matches if the value of the parameter matches the
               regular expression specified by regexMatch. For the regular expression grammar,
               please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
               exactMatch and regexMatch must be set.
        """
        pulumi.set(__self__, "fullPathMatch", full_path_match)
        pulumi.set(__self__, "headerMatches", header_matches)
        pulumi.set(__self__, "ignoreCase", ignore_case)
        pulumi.set(__self__, "metadataFilters", metadata_filters)
        pulumi.set(__self__, "prefixMatch", prefix_match)
        pulumi.set(__self__, "queryParameterMatches", query_parameter_matches)
        pulumi.set(__self__, "regexMatch", regex_match)

    @property
    @pulumi.getter(name="fullPathMatch")
    def full_path_match(self) -> Optional[pulumi.Input[str]]:
        """
        For satifying the matchRule condition, the path of the request must exactly
        match the value specified in fullPathMatch after removing any query parameters
        and anchor that may be part of the original URL. FullPathMatch must be between 1
        and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
        be specified.
        """
        ...

    @full_path_match.setter
    def full_path_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="headerMatches")
    def header_matches(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs']]]]:
        """
        Specifies a list of header match criteria, all of which must match corresponding
        headers in the request.
        Structure is documented below.
        """
        ...

    @header_matches.setter
    def header_matches(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs']]]]):
        ...

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies that prefixMatch and fullPathMatch matches are case sensitive.
        Defaults to false.
        """
        ...

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="metadataFilters")
    def metadata_filters(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs']]]]:
        """
        Opaque filter criteria used by Loadbalancer to restrict routing configuration to
        a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
        clients present node metadata. If a match takes place, the relevant routing
        configuration is made available to those proxies. For each metadataFilter in
        this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
        filterLabels must match the corresponding label provided in the metadata. If its
        filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
        with corresponding labels in the provided metadata. metadataFilters specified
        here can be overrides those specified in ForwardingRule that refers to this
        UrlMap. metadataFilters only applies to Loadbalancers that have their
        loadBalancingScheme set to INTERNAL_SELF_MANAGED.
        Structure is documented below.
        """
        ...

    @metadata_filters.setter
    def metadata_filters(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs']]]]):
        ...

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header must start with the contents of prefixMatch. Only one of
        exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        must be set.
        """
        ...

    @prefix_match.setter
    def prefix_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="queryParameterMatches")
    def query_parameter_matches(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs']]]]:
        """
        Specifies a list of query parameter match criteria, all of which must match
        corresponding query parameters in the request.
        Structure is documented below.
        """
        ...

    @query_parameter_matches.setter
    def query_parameter_matches(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs']]]]):
        ...

    @property
    @pulumi.getter(name="regexMatch")
    def regex_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter matches the
        regular expression specified by regexMatch. For the regular expression grammar,
        please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
        exactMatch and regexMatch must be set.
        """
        ...

    @regex_match.setter
    def regex_match(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 exact_match: Optional[pulumi.Input[str]] = None,
                 invert_match: Optional[pulumi.Input[bool]] = None,
                 prefix_match: Optional[pulumi.Input[str]] = None,
                 present_match: Optional[pulumi.Input[bool]] = None,
                 range_match: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs']] = None,
                 regex_match: Optional[pulumi.Input[str]] = None,
                 suffix_match: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] header_name: The name of the header.
        :param pulumi.Input[str] exact_match: The queryParameterMatch matches if the value of the parameter exactly matches
               the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
               must be set.
        :param pulumi.Input[bool] invert_match: If set to false, the headerMatch is considered a match if the match criteria
               above are met. If set to true, the headerMatch is considered a match if the
               match criteria above are NOT met. Defaults to false.
        :param pulumi.Input[str] prefix_match: The value of the header must start with the contents of prefixMatch. Only one of
               exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
               must be set.
        :param pulumi.Input[bool] present_match: Specifies that the queryParameterMatch matches if the request contains the query
               parameter, irrespective of whether the parameter has a value or not. Only one of
               presentMatch, exactMatch and regexMatch must be set.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs'] range_match: The header value must be an integer and its value must be in the range specified
               in rangeMatch. If the header does not contain an integer, number or is empty,
               the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
               not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
               exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
               must be set.
               Structure is documented below.
        :param pulumi.Input[str] regex_match: The queryParameterMatch matches if the value of the parameter matches the
               regular expression specified by regexMatch. For the regular expression grammar,
               please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
               exactMatch and regexMatch must be set.
        :param pulumi.Input[str] suffix_match: The value of the header must end with the contents of suffixMatch. Only one of
               exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
               must be set.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "exactMatch", exact_match)
        pulumi.set(__self__, "invertMatch", invert_match)
        pulumi.set(__self__, "prefixMatch", prefix_match)
        pulumi.set(__self__, "presentMatch", present_match)
        pulumi.set(__self__, "rangeMatch", range_match)
        pulumi.set(__self__, "regexMatch", regex_match)
        pulumi.set(__self__, "suffixMatch", suffix_match)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter exactly matches
        the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
        must be set.
        """
        ...

    @exact_match.setter
    def exact_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="invertMatch")
    def invert_match(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to false, the headerMatch is considered a match if the match criteria
        above are met. If set to true, the headerMatch is considered a match if the
        match criteria above are NOT met. Defaults to false.
        """
        ...

    @invert_match.setter
    def invert_match(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header must start with the contents of prefixMatch. Only one of
        exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        must be set.
        """
        ...

    @prefix_match.setter
    def prefix_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="presentMatch")
    def present_match(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies that the queryParameterMatch matches if the request contains the query
        parameter, irrespective of whether the parameter has a value or not. Only one of
        presentMatch, exactMatch and regexMatch must be set.
        """
        ...

    @present_match.setter
    def present_match(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="rangeMatch")
    def range_match(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs']]:
        """
        The header value must be an integer and its value must be in the range specified
        in rangeMatch. If the header does not contain an integer, number or is empty,
        the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
        not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
        exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        must be set.
        Structure is documented below.
        """
        ...

    @range_match.setter
    def range_match(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs']]):
        ...

    @property
    @pulumi.getter(name="regexMatch")
    def regex_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter matches the
        regular expression specified by regexMatch. For the regular expression grammar,
        please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
        exactMatch and regexMatch must be set.
        """
        ...

    @regex_match.setter
    def regex_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="suffixMatch")
    def suffix_match(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header must end with the contents of suffixMatch. Only one of
        exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        must be set.
        """
        ...

    @suffix_match.setter
    def suffix_match(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs:
    def __init__(__self__, *,
                 range_end: pulumi.Input[float],
                 range_start: pulumi.Input[float]):
        """
        :param pulumi.Input[float] range_end: The end of the range (exclusive).
        :param pulumi.Input[float] range_start: The start of the range (inclusive).
        """
        pulumi.set(__self__, "rangeEnd", range_end)
        pulumi.set(__self__, "rangeStart", range_start)

    @property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> pulumi.Input[float]:
        """
        The end of the range (exclusive).
        """
        ...

    @range_end.setter
    def range_end(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> pulumi.Input[float]:
        """
        The start of the range (inclusive).
        """
        ...

    @range_start.setter
    def range_start(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs:
    def __init__(__self__, *,
                 filter_labels: pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs']]],
                 filter_match_criteria: pulumi.Input[str]):
        """
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs']]] filter_labels: The list of label value pairs that must match labels in the provided metadata
               based on filterMatchCriteria  This list must not be empty and can have at the
               most 64 entries.
               Structure is documented below.
        :param pulumi.Input[str] filter_match_criteria: Specifies how individual filterLabel matches within the list of filterLabels
               contribute towards the overall metadataFilter match. Supported values are:
               - MATCH_ANY: At least one of the filterLabels must have a matching label in the
               provided metadata.
               - MATCH_ALL: All filterLabels must have matching labels in
               the provided metadata.
               Possible values are `MATCH_ALL` and `MATCH_ANY`.
        """
        pulumi.set(__self__, "filterLabels", filter_labels)
        pulumi.set(__self__, "filterMatchCriteria", filter_match_criteria)

    @property
    @pulumi.getter(name="filterLabels")
    def filter_labels(self) -> pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs']]]:
        """
        The list of label value pairs that must match labels in the provided metadata
        based on filterMatchCriteria  This list must not be empty and can have at the
        most 64 entries.
        Structure is documented below.
        """
        ...

    @filter_labels.setter
    def filter_labels(self, value: pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs']]]):
        ...

    @property
    @pulumi.getter(name="filterMatchCriteria")
    def filter_match_criteria(self) -> pulumi.Input[str]:
        """
        Specifies how individual filterLabel matches within the list of filterLabels
        contribute towards the overall metadataFilter match. Supported values are:
        - MATCH_ANY: At least one of the filterLabels must have a matching label in the
        provided metadata.
        - MATCH_ALL: All filterLabels must have matching labels in
        the provided metadata.
        Possible values are `MATCH_ALL` and `MATCH_ANY`.
        """
        ...

    @filter_match_criteria.setter
    def filter_match_criteria(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the query parameter to match. The query parameter must exist in the
               request, in the absence of which the request match fails.
        :param pulumi.Input[str] value: The value of the label must match the specified value. value can have a maximum
               length of 1024 characters.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the query parameter to match. The query parameter must exist in the
        request, in the absence of which the request match fails.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the label must match the specified value. value can have a maximum
        length of 1024 characters.
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 exact_match: Optional[pulumi.Input[str]] = None,
                 present_match: Optional[pulumi.Input[bool]] = None,
                 regex_match: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the query parameter to match. The query parameter must exist in the
               request, in the absence of which the request match fails.
        :param pulumi.Input[str] exact_match: The queryParameterMatch matches if the value of the parameter exactly matches
               the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
               must be set.
        :param pulumi.Input[bool] present_match: Specifies that the queryParameterMatch matches if the request contains the query
               parameter, irrespective of whether the parameter has a value or not. Only one of
               presentMatch, exactMatch and regexMatch must be set.
        :param pulumi.Input[str] regex_match: The queryParameterMatch matches if the value of the parameter matches the
               regular expression specified by regexMatch. For the regular expression grammar,
               please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
               exactMatch and regexMatch must be set.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "exactMatch", exact_match)
        pulumi.set(__self__, "presentMatch", present_match)
        pulumi.set(__self__, "regexMatch", regex_match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the query parameter to match. The query parameter must exist in the
        request, in the absence of which the request match fails.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter exactly matches
        the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
        must be set.
        """
        ...

    @exact_match.setter
    def exact_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="presentMatch")
    def present_match(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies that the queryParameterMatch matches if the request contains the query
        parameter, irrespective of whether the parameter has a value or not. Only one of
        presentMatch, exactMatch and regexMatch must be set.
        """
        ...

    @present_match.setter
    def present_match(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="regexMatch")
    def regex_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter matches the
        regular expression specified by regexMatch. For the regular expression grammar,
        please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
        exactMatch and regexMatch must be set.
        """
        ...

    @regex_match.setter
    def regex_match(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionArgs:
    def __init__(__self__, *,
                 cors_policy: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs']] = None,
                 fault_injection_policy: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs']] = None,
                 request_mirror_policy: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs']] = None,
                 retry_policy: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs']] = None,
                 timeout: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs']] = None,
                 url_rewrite: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs']] = None,
                 weighted_backend_services: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs']]]] = None):
        """
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs'] cors_policy: The specification for allowing client side cross-origin requests. Please see W3C
               Recommendation for Cross Origin Resource Sharing
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs'] fault_injection_policy: The specification for fault injection introduced into traffic to test the
               resiliency of clients to backend service failure. As part of fault injection,
               when clients send requests to a backend service, delays can be introduced by
               Loadbalancer on a percentage of requests before sending those request to the
               backend service. Similarly requests from clients can be aborted by the
               Loadbalancer for a percentage of requests. timeout and retry_policy will be
               ignored by clients that are configured with a fault_injection_policy.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs'] request_mirror_policy: Specifies the policy on how requests intended for the route's backends are
               shadowed to a separate mirrored backend service. Loadbalancer does not wait for
               responses from the shadow service. Prior to sending traffic to the shadow
               service, the host / authority header is suffixed with -shadow.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs'] retry_policy: Specifies the retry policy associated with this route.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs'] timeout: Specifies the timeout for the selected route. Timeout is computed from the time
               the request is has been fully processed (i.e. end-of-stream) up until the
               response has been completely processed. Timeout includes all retries. If not
               specified, the default value is 15 seconds.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs'] url_rewrite: The spec to modify the URL of the request, prior to forwarding the request to
               the matched service
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs']]] weighted_backend_services: A list of weighted backend services to send traffic to when a route match
               occurs. The weights determine the fraction of traffic that flows to their
               corresponding backend service. If all traffic needs to go to a single backend
               service, there must be one  weightedBackendService with weight set to a non 0
               number. Once a backendService is identified and before forwarding the request to
               the backend service, advanced routing actions like Url rewrites and header
               transformations are applied depending on additional settings specified in this
               HttpRouteAction.
               Structure is documented below.
        """
        pulumi.set(__self__, "corsPolicy", cors_policy)
        pulumi.set(__self__, "faultInjectionPolicy", fault_injection_policy)
        pulumi.set(__self__, "requestMirrorPolicy", request_mirror_policy)
        pulumi.set(__self__, "retryPolicy", retry_policy)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "urlRewrite", url_rewrite)
        pulumi.set(__self__, "weightedBackendServices", weighted_backend_services)

    @property
    @pulumi.getter(name="corsPolicy")
    def cors_policy(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs']]:
        """
        The specification for allowing client side cross-origin requests. Please see W3C
        Recommendation for Cross Origin Resource Sharing
        Structure is documented below.
        """
        ...

    @cors_policy.setter
    def cors_policy(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="faultInjectionPolicy")
    def fault_injection_policy(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs']]:
        """
        The specification for fault injection introduced into traffic to test the
        resiliency of clients to backend service failure. As part of fault injection,
        when clients send requests to a backend service, delays can be introduced by
        Loadbalancer on a percentage of requests before sending those request to the
        backend service. Similarly requests from clients can be aborted by the
        Loadbalancer for a percentage of requests. timeout and retry_policy will be
        ignored by clients that are configured with a fault_injection_policy.
        Structure is documented below.
        """
        ...

    @fault_injection_policy.setter
    def fault_injection_policy(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="requestMirrorPolicy")
    def request_mirror_policy(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs']]:
        """
        Specifies the policy on how requests intended for the route's backends are
        shadowed to a separate mirrored backend service. Loadbalancer does not wait for
        responses from the shadow service. Prior to sending traffic to the shadow
        service, the host / authority header is suffixed with -shadow.
        Structure is documented below.
        """
        ...

    @request_mirror_policy.setter
    def request_mirror_policy(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs']]:
        """
        Specifies the retry policy associated with this route.
        Structure is documented below.
        """
        ...

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs']]):
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs']]:
        """
        Specifies the timeout for the selected route. Timeout is computed from the time
        the request is has been fully processed (i.e. end-of-stream) up until the
        response has been completely processed. Timeout includes all retries. If not
        specified, the default value is 15 seconds.
        Structure is documented below.
        """
        ...

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs']]:
        """
        The spec to modify the URL of the request, prior to forwarding the request to
        the matched service
        Structure is documented below.
        """
        ...

    @url_rewrite.setter
    def url_rewrite(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs']]):
        ...

    @property
    @pulumi.getter(name="weightedBackendServices")
    def weighted_backend_services(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs']]]]:
        """
        A list of weighted backend services to send traffic to when a route match
        occurs. The weights determine the fraction of traffic that flows to their
        corresponding backend service. If all traffic needs to go to a single backend
        service, there must be one  weightedBackendService with weight set to a non 0
        number. Once a backendService is identified and before forwarding the request to
        the backend service, advanced routing actions like Url rewrites and header
        transformations are applied depending on additional settings specified in this
        HttpRouteAction.
        Structure is documented below.
        """
        ...

    @weighted_backend_services.setter
    def weighted_backend_services(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs']]]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allow_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origin_regexes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origins: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 expose_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] allow_credentials: In response to a preflight request, setting this to true indicates that the
               actual request can include user credentials. This translates to the Access-
               Control-Allow-Credentials header. Defaults to false.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_headers: Specifies the content for the Access-Control-Allow-Headers header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_methods: Specifies the content for the Access-Control-Allow-Methods header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origin_regexes: Specifies the regualar expression patterns that match allowed origins. For
               regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
               An origin is allowed if it matches either allow_origins or allow_origin_regex.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origins: Specifies the list of origins that will be allowed to do CORS requests. An
               origin is allowed if it matches either allow_origins or allow_origin_regex.
        :param pulumi.Input[bool] disabled: If true, specifies the CORS policy is disabled.
        :param pulumi.Input[List[pulumi.Input[str]]] expose_headers: Specifies the content for the Access-Control-Expose-Headers header.
        :param pulumi.Input[float] max_age: Specifies how long the results of a preflight request can be cached. This
               translates to the content for the Access-Control-Max-Age header.
        """
        pulumi.set(__self__, "allowCredentials", allow_credentials)
        pulumi.set(__self__, "allowHeaders", allow_headers)
        pulumi.set(__self__, "allowMethods", allow_methods)
        pulumi.set(__self__, "allowOriginRegexes", allow_origin_regexes)
        pulumi.set(__self__, "allowOrigins", allow_origins)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "exposeHeaders", expose_headers)
        pulumi.set(__self__, "maxAge", max_age)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        In response to a preflight request, setting this to true indicates that the
        actual request can include user credentials. This translates to the Access-
        Control-Allow-Credentials header. Defaults to false.
        """
        ...

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Headers header.
        """
        ...

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Methods header.
        """
        ...

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOriginRegexes")
    def allow_origin_regexes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the regualar expression patterns that match allowed origins. For
        regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
        An origin is allowed if it matches either allow_origins or allow_origin_regex.
        """
        ...

    @allow_origin_regexes.setter
    def allow_origin_regexes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the list of origins that will be allowed to do CORS requests. An
        origin is allowed if it matches either allow_origins or allow_origin_regex.
        """
        ...

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, specifies the CORS policy is disabled.
        """
        ...

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Expose-Headers header.
        """
        ...

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long the results of a preflight request can be cached. This
        translates to the content for the Access-Control-Max-Age header.
        """
        ...

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs:
    def __init__(__self__, *,
                 abort: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs']] = None,
                 delay: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs']] = None):
        """
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs'] abort: The specification for how client requests are aborted as part of fault
               injection.
               Structure is documented below.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs'] delay: The specification for how client requests are delayed as part of fault
               injection, before being sent to a backend service.
               Structure is documented below.
        """
        pulumi.set(__self__, "abort", abort)
        pulumi.set(__self__, "delay", delay)

    @property
    @pulumi.getter
    def abort(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs']]:
        """
        The specification for how client requests are aborted as part of fault
        injection.
        Structure is documented below.
        """
        ...

    @abort.setter
    def abort(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs']]):
        ...

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs']]:
        """
        The specification for how client requests are delayed as part of fault
        injection, before being sent to a backend service.
        Structure is documented below.
        """
        ...

    @delay.setter
    def delay(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs']]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs:
    def __init__(__self__, *,
                 http_status: Optional[pulumi.Input[float]] = None,
                 percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] http_status: The HTTP status code used to abort the request. The value must be between 200
               and 599 inclusive.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) on which delay will
               be introduced as part of fault injection. The value must be between 0.0 and
               100.0 inclusive.
        """
        pulumi.set(__self__, "httpStatus", http_status)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> Optional[pulumi.Input[float]]:
        """
        The HTTP status code used to abort the request. The value must be between 200
        and 599 inclusive.
        """
        ...

    @http_status.setter
    def http_status(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of traffic (connections/operations/requests) on which delay will
        be introduced as part of fault injection. The value must be between 0.0 and
        100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs:
    def __init__(__self__, *,
                 fixed_delay: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']] = None,
                 percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs'] fixed_delay: Specifies the value of the fixed delay interval.
               Structure is documented below.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) on which delay will
               be introduced as part of fault injection. The value must be between 0.0 and
               100.0 inclusive.
        """
        pulumi.set(__self__, "fixedDelay", fixed_delay)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="fixedDelay")
    def fixed_delay(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']]:
        """
        Specifies the value of the fixed delay interval.
        Structure is documented below.
        """
        ...

    @fixed_delay.setter
    def fixed_delay(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of traffic (connections/operations/requests) on which delay will
        be introduced as part of fault injection. The value must be between 0.0 and
        100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str]):
        """
        :param pulumi.Input[str] backend_service: The default RegionBackendService resource. Before
               forwarding the request to backendService, the loadbalancer applies any relevant
               headerActions specified as part of this backendServiceWeight.
        """
        pulumi.set(__self__, "backendService", backend_service)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The default RegionBackendService resource. Before
        forwarding the request to backendService, the loadbalancer applies any relevant
        headerActions specified as part of this backendServiceWeight.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs:
    def __init__(__self__, *,
                 num_retries: pulumi.Input[float],
                 per_try_timeout: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs']] = None,
                 retry_conditions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[float] num_retries: Specifies the allowed number retries. This number must be > 0.
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs'] per_try_timeout: Specifies a non-zero timeout per retry attempt.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] retry_conditions: Specifies one or more conditions when this retry rule applies. Valid values are:
               - 5xx: Loadbalancer will attempt a retry if the backend service responds with
               any 5xx response code, or if the backend service does not respond at all,
               example: disconnects, reset, read timeout, connection failure, and refused
               streams.
               - gateway-error: Similar to 5xx, but only applies to response codes
               502, 503 or 504.
               - connect-failure: Loadbalancer will retry on failures
               connecting to backend services, for example due to connection timeouts.
               - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
               Currently the only retriable error supported is 409.
               - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
               REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
               - cancelled: Loadbalancer will retry if the gRPC status code in the response
               header is set to cancelled
               - deadline-exceeded: Loadbalancer will retry if the
               gRPC status code in the response header is set to deadline-exceeded
               - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
               header is set to resource-exhausted
               - unavailable: Loadbalancer will retry if
               the gRPC status code in the response header is set to unavailable
        """
        pulumi.set(__self__, "numRetries", num_retries)
        pulumi.set(__self__, "perTryTimeout", per_try_timeout)
        pulumi.set(__self__, "retryConditions", retry_conditions)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> pulumi.Input[float]:
        """
        Specifies the allowed number retries. This number must be > 0.
        """
        ...

    @num_retries.setter
    def num_retries(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs']]:
        """
        Specifies a non-zero timeout per retry attempt.
        Structure is documented below.
        """
        ...

    @per_try_timeout.setter
    def per_try_timeout(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="retryConditions")
    def retry_conditions(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies one or more conditions when this retry rule applies. Valid values are:
        - 5xx: Loadbalancer will attempt a retry if the backend service responds with
        any 5xx response code, or if the backend service does not respond at all,
        example: disconnects, reset, read timeout, connection failure, and refused
        streams.
        - gateway-error: Similar to 5xx, but only applies to response codes
        502, 503 or 504.
        - connect-failure: Loadbalancer will retry on failures
        connecting to backend services, for example due to connection timeouts.
        - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
        Currently the only retriable error supported is 409.
        - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
        REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
        - cancelled: Loadbalancer will retry if the gRPC status code in the response
        header is set to cancelled
        - deadline-exceeded: Loadbalancer will retry if the
        gRPC status code in the response header is set to deadline-exceeded
        - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
        header is set to resource-exhausted
        - unavailable: Loadbalancer will retry if
        the gRPC status code in the response header is set to unavailable
        """
        ...

    @retry_conditions.setter
    def retry_conditions(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
               inclusive.
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations
               less than one second are represented with a 0 `seconds` field and a positive
               `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        inclusive.
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations
        less than one second are represented with a 0 `seconds` field and a positive
        `nanos` field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs:
    def __init__(__self__, *,
                 host_rewrite: Optional[pulumi.Input[str]] = None,
                 path_prefix_rewrite: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_rewrite: Prior to forwarding the request to the selected service, the request's host
               header is replaced with contents of hostRewrite. The value must be between 1 and
               255 characters.
        :param pulumi.Input[str] path_prefix_rewrite: Prior to forwarding the request to the selected backend service, the matching
               portion of the request's path is replaced by pathPrefixRewrite. The value must
               be between 1 and 1024 characters.
        """
        pulumi.set(__self__, "hostRewrite", host_rewrite)
        pulumi.set(__self__, "pathPrefixRewrite", path_prefix_rewrite)

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected service, the request's host
        header is replaced with contents of hostRewrite. The value must be between 1 and
        255 characters.
        """
        ...

    @host_rewrite.setter
    def host_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="pathPrefixRewrite")
    def path_prefix_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected backend service, the matching
        portion of the request's path is replaced by pathPrefixRewrite. The value must
        be between 1 and 1024 characters.
        """
        ...

    @path_prefix_rewrite.setter
    def path_prefix_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str],
                 weight: pulumi.Input[float],
                 header_action: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs']] = None):
        """
        :param pulumi.Input[str] backend_service: The default RegionBackendService resource. Before
               forwarding the request to backendService, the loadbalancer applies any relevant
               headerActions specified as part of this backendServiceWeight.
        :param pulumi.Input[float] weight: Specifies the fraction of traffic sent to backendService, computed as weight /
               (sum of all weightedBackendService weights in routeAction) . The selection of a
               backend service is determined only for new traffic. Once a user's request has
               been directed to a backendService, subsequent requests will be sent to the same
               backendService as determined by the BackendService's session affinity policy.
               The value must be between 0 and 1000
        :param pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs'] header_action: Specifies changes to request and response headers that need to take effect for
               the selected backendService. headerAction specified here take effect before
               headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
               Structure is documented below.
        """
        pulumi.set(__self__, "backendService", backend_service)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "headerAction", header_action)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The default RegionBackendService resource. Before
        forwarding the request to backendService, the loadbalancer applies any relevant
        headerActions specified as part of this backendServiceWeight.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[float]:
        """
        Specifies the fraction of traffic sent to backendService, computed as weight /
        (sum of all weightedBackendService weights in routeAction) . The selection of a
        backend service is determined only for new traffic. Once a user's request has
        been directed to a backendService, subsequent requests will be sent to the same
        backendService as determined by the BackendService's session affinity policy.
        The value must be between 0 and 1000
        """
        ...

    @weight.setter
    def weight(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="headerAction")
    def header_action(self) -> Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs']]:
        """
        Specifies changes to request and response headers that need to take effect for
        the selected backendService. headerAction specified here take effect before
        headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
        Structure is documented below.
        """
        ...

    @header_action.setter
    def header_action(self, value: Optional[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs']]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the
               backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request
               prior to forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response
               prior to sending the response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the
        backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request
        prior to forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response
        prior to sending the response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the
               header. If true, headerValue is set for the header, discarding any values that
               were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the
        header. If true, headerValue is set for the header, discarding any values that
        were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the
               header. If true, headerValue is set for the header, discarding any values that
               were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the
        header. If true, headerValue is set for the header, discarding any values that
        were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs:
    def __init__(__self__, *,
                 host_redirect: Optional[pulumi.Input[str]] = None,
                 https_redirect: Optional[pulumi.Input[bool]] = None,
                 path_redirect: Optional[pulumi.Input[str]] = None,
                 prefix_redirect: Optional[pulumi.Input[str]] = None,
                 redirect_response_code: Optional[pulumi.Input[str]] = None,
                 strip_query: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host_redirect: The host that will be used in the redirect response instead of the one that was
               supplied in the request. The value must be between 1 and 255 characters.
        :param pulumi.Input[bool] https_redirect: If set to true, the URL scheme in the redirected request is set to https. If set to
               false, the URL scheme of the redirected request will remain the same as that of the
               request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
               true for TargetHttpsProxy is not permitted. The default is set to false.
        :param pulumi.Input[str] path_redirect: The path that will be used in the redirect response instead of the one that was
               supplied in the request. pathRedirect cannot be supplied together with
               prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
               original request will be used for the redirect. The value must be between 1 and 1024
               characters.
        :param pulumi.Input[str] prefix_redirect: The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
               retaining the remaining portion of the URL before redirecting the request.
               prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
               neither. If neither is supplied, the path of the original request will be used for
               the redirect. The value must be between 1 and 1024 characters.
        :param pulumi.Input[str] redirect_response_code: The HTTP Status code to use for this RedirectAction. Supported values are:
               * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
               * FOUND, which corresponds to 302.
               * SEE_OTHER which corresponds to 303.
               * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
               will be retained.
               * PERMANENT_REDIRECT, which corresponds to 308. In this case,
               the request method will be retained.
        :param pulumi.Input[bool] strip_query: If set to true, any accompanying query portion of the original URL is removed prior
               to redirecting the request. If set to false, the query portion of the original URL is
               retained.
               This field is required to ensure an empty block is not set. The normal default value is false.
        """
        pulumi.set(__self__, "hostRedirect", host_redirect)
        pulumi.set(__self__, "httpsRedirect", https_redirect)
        pulumi.set(__self__, "pathRedirect", path_redirect)
        pulumi.set(__self__, "prefixRedirect", prefix_redirect)
        pulumi.set(__self__, "redirectResponseCode", redirect_response_code)
        pulumi.set(__self__, "stripQuery", strip_query)

    @property
    @pulumi.getter(name="hostRedirect")
    def host_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The host that will be used in the redirect response instead of the one that was
        supplied in the request. The value must be between 1 and 255 characters.
        """
        ...

    @host_redirect.setter
    def host_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the URL scheme in the redirected request is set to https. If set to
        false, the URL scheme of the redirected request will remain the same as that of the
        request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
        true for TargetHttpsProxy is not permitted. The default is set to false.
        """
        ...

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="pathRedirect")
    def path_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The path that will be used in the redirect response instead of the one that was
        supplied in the request. pathRedirect cannot be supplied together with
        prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
        original request will be used for the redirect. The value must be between 1 and 1024
        characters.
        """
        ...

    @path_redirect.setter
    def path_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="prefixRedirect")
    def prefix_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        retaining the remaining portion of the URL before redirecting the request.
        prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
        neither. If neither is supplied, the path of the original request will be used for
        the redirect. The value must be between 1 and 1024 characters.
        """
        ...

    @prefix_redirect.setter
    def prefix_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Status code to use for this RedirectAction. Supported values are:
        * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
        * FOUND, which corresponds to 302.
        * SEE_OTHER which corresponds to 303.
        * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        will be retained.
        * PERMANENT_REDIRECT, which corresponds to 308. In this case,
        the request method will be retained.
        """
        ...

    @redirect_response_code.setter
    def redirect_response_code(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="stripQuery")
    def strip_query(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, any accompanying query portion of the original URL is removed prior
        to redirecting the request. If set to false, the query portion of the original URL is
        retained.
        This field is required to ensure an empty block is not set. The normal default value is false.
        """
        ...

    @strip_query.setter
    def strip_query(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class RegionUrlMapTestArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 path: pulumi.Input[str],
                 service: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host portion of the URL.
        :param pulumi.Input[str] path: Path portion of the URL.
        :param pulumi.Input[str] service: A reference to expected RegionBackendService resource the given URL should be mapped to.
        :param pulumi.Input[str] description: Description of this test case.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Host portion of the URL.
        """
        ...

    @host.setter
    def host(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path portion of the URL.
        """
        ...

    @path.setter
    def path(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        A reference to expected RegionBackendService resource the given URL should be mapped to.
        """
        ...

    @service.setter
    def service(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this test case.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ReservationSpecificReservationArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[float],
                 instance_properties: pulumi.Input['ReservationSpecificReservationInstancePropertiesArgs'],
                 in_use_count: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] count: The number of resources that are allocated.
        :param pulumi.Input['ReservationSpecificReservationInstancePropertiesArgs'] instance_properties: The instance properties for the reservation.
               Structure is documented below.
        :param pulumi.Input[float] in_use_count: -
               How many instances are in use.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "instanceProperties", instance_properties)
        pulumi.set(__self__, "inUseCount", in_use_count)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[float]:
        """
        The number of resources that are allocated.
        """
        ...

    @count.setter
    def count(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="instanceProperties")
    def instance_properties(self) -> pulumi.Input['ReservationSpecificReservationInstancePropertiesArgs']:
        """
        The instance properties for the reservation.
        Structure is documented below.
        """
        ...

    @instance_properties.setter
    def instance_properties(self, value: pulumi.Input['ReservationSpecificReservationInstancePropertiesArgs']):
        ...

    @property
    @pulumi.getter(name="inUseCount")
    def in_use_count(self) -> Optional[pulumi.Input[float]]:
        """
        -
        How many instances are in use.
        """
        ...

    @in_use_count.setter
    def in_use_count(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class ReservationSpecificReservationInstancePropertiesArgs:
    def __init__(__self__, *,
                 machine_type: pulumi.Input[str],
                 guest_accelerators: Optional[pulumi.Input[List[pulumi.Input['ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs']]]] = None,
                 local_ssds: Optional[pulumi.Input[List[pulumi.Input['ReservationSpecificReservationInstancePropertiesLocalSsdArgs']]]] = None,
                 min_cpu_platform: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] machine_type: The name of the machine type to reserve.
        :param pulumi.Input[List[pulumi.Input['ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs']]] guest_accelerators: Guest accelerator type and count.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['ReservationSpecificReservationInstancePropertiesLocalSsdArgs']]] local_ssds: The amount of local ssd to reserve with each instance. This
               reserves disks of type `local-ssd`.
               Structure is documented below.
        :param pulumi.Input[str] min_cpu_platform: The minimum CPU platform for the reservation. For example,
               `"Intel Skylake"`. See
               the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
               for information on available CPU platforms.
        """
        pulumi.set(__self__, "machineType", machine_type)
        pulumi.set(__self__, "guestAccelerators", guest_accelerators)
        pulumi.set(__self__, "localSsds", local_ssds)
        pulumi.set(__self__, "minCpuPlatform", min_cpu_platform)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[str]:
        """
        The name of the machine type to reserve.
        """
        ...

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="guestAccelerators")
    def guest_accelerators(self) -> Optional[pulumi.Input[List[pulumi.Input['ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs']]]]:
        """
        Guest accelerator type and count.
        Structure is documented below.
        """
        ...

    @guest_accelerators.setter
    def guest_accelerators(self, value: Optional[pulumi.Input[List[pulumi.Input['ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs']]]]):
        ...

    @property
    @pulumi.getter(name="localSsds")
    def local_ssds(self) -> Optional[pulumi.Input[List[pulumi.Input['ReservationSpecificReservationInstancePropertiesLocalSsdArgs']]]]:
        """
        The amount of local ssd to reserve with each instance. This
        reserves disks of type `local-ssd`.
        Structure is documented below.
        """
        ...

    @local_ssds.setter
    def local_ssds(self, value: Optional[pulumi.Input[List[pulumi.Input['ReservationSpecificReservationInstancePropertiesLocalSsdArgs']]]]):
        ...

    @property
    @pulumi.getter(name="minCpuPlatform")
    def min_cpu_platform(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum CPU platform for the reservation. For example,
        `"Intel Skylake"`. See
        the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
        for information on available CPU platforms.
        """
        ...

    @min_cpu_platform.setter
    def min_cpu_platform(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs:
    def __init__(__self__, *,
                 accelerator_count: pulumi.Input[float],
                 accelerator_type: pulumi.Input[str]):
        """
        :param pulumi.Input[float] accelerator_count: The number of the guest accelerator cards exposed to
               this instance.
        :param pulumi.Input[str] accelerator_type: The full or partial URL of the accelerator type to
               attach to this instance. For example:
               `projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100`
               If you are creating an instance template, specify only the accelerator name.
        """
        pulumi.set(__self__, "acceleratorCount", accelerator_count)
        pulumi.set(__self__, "acceleratorType", accelerator_type)

    @property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> pulumi.Input[float]:
        """
        The number of the guest accelerator cards exposed to
        this instance.
        """
        ...

    @accelerator_count.setter
    def accelerator_count(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> pulumi.Input[str]:
        """
        The full or partial URL of the accelerator type to
        attach to this instance. For example:
        `projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100`
        If you are creating an instance template, specify only the accelerator name.
        """
        ...

    @accelerator_type.setter
    def accelerator_type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ReservationSpecificReservationInstancePropertiesLocalSsdArgs:
    def __init__(__self__, *,
                 disk_size_gb: pulumi.Input[float],
                 interface: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] disk_size_gb: The size of the disk in base-2 GB.
        :param pulumi.Input[str] interface: The disk interface to use for attaching this disk.
               Default value is `SCSI`.
               Possible values are `SCSI` and `NVME`.
        """
        pulumi.set(__self__, "diskSizeGb", disk_size_gb)
        pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> pulumi.Input[float]:
        """
        The size of the disk in base-2 GB.
        """
        ...

    @disk_size_gb.setter
    def disk_size_gb(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        The disk interface to use for attaching this disk.
        Default value is `SCSI`.
        Possible values are `SCSI` and `NVME`.
        """
        ...

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ResourcePolicyGroupPlacementPolicyArgs:
    def __init__(__self__, *,
                 availability_domain_count: Optional[pulumi.Input[float]] = None,
                 collocation: Optional[pulumi.Input[str]] = None,
                 vm_count: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] availability_domain_count: The number of availability domains instances will be spread across. If two instances are in different
               availability domain, they will not be put in the same low latency network
        :param pulumi.Input[str] collocation: Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.
               Specify `COLLOCATED` to enable collocation. Can only be specified with `vm_count`. If compute instances are created
               with a COLLOCATED policy, then exactly `vm_count` instances must be created at the same time with the resource policy
               attached.
               Possible values are `COLLOCATED`.
        :param pulumi.Input[float] vm_count: Number of vms in this placement group.
        """
        pulumi.set(__self__, "availabilityDomainCount", availability_domain_count)
        pulumi.set(__self__, "collocation", collocation)
        pulumi.set(__self__, "vmCount", vm_count)

    @property
    @pulumi.getter(name="availabilityDomainCount")
    def availability_domain_count(self) -> Optional[pulumi.Input[float]]:
        """
        The number of availability domains instances will be spread across. If two instances are in different
        availability domain, they will not be put in the same low latency network
        """
        ...

    @availability_domain_count.setter
    def availability_domain_count(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def collocation(self) -> Optional[pulumi.Input[str]]:
        """
        Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.
        Specify `COLLOCATED` to enable collocation. Can only be specified with `vm_count`. If compute instances are created
        with a COLLOCATED policy, then exactly `vm_count` instances must be created at the same time with the resource policy
        attached.
        Possible values are `COLLOCATED`.
        """
        ...

    @collocation.setter
    def collocation(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of vms in this placement group.
        """
        ...

    @vm_count.setter
    def vm_count(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class ResourcePolicySnapshotSchedulePolicyArgs:
    def __init__(__self__, *,
                 schedule: pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleArgs'],
                 retention_policy: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs']] = None,
                 snapshot_properties: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs']] = None):
        """
        :param pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleArgs'] schedule: Contains one of an `hourlySchedule`, `dailySchedule`, or `weeklySchedule`.
               Structure is documented below.
        :param pulumi.Input['ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs'] retention_policy: Retention policy applied to snapshots created by this resource policy.
               Structure is documented below.
        :param pulumi.Input['ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs'] snapshot_properties: Properties with which the snapshots are created, such as labels.
               Structure is documented below.
        """
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "retentionPolicy", retention_policy)
        pulumi.set(__self__, "snapshotProperties", snapshot_properties)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleArgs']:
        """
        Contains one of an `hourlySchedule`, `dailySchedule`, or `weeklySchedule`.
        Structure is documented below.
        """
        ...

    @schedule.setter
    def schedule(self, value: pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleArgs']):
        ...

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs']]:
        """
        Retention policy applied to snapshots created by this resource policy.
        Structure is documented below.
        """
        ...

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="snapshotProperties")
    def snapshot_properties(self) -> Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs']]:
        """
        Properties with which the snapshots are created, such as labels.
        Structure is documented below.
        """
        ...

    @snapshot_properties.setter
    def snapshot_properties(self, value: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs']]):
        ...


@pulumi.input_type
class ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs:
    def __init__(__self__, *,
                 max_retention_days: pulumi.Input[float],
                 on_source_disk_delete: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] max_retention_days: Maximum age of the snapshot that is allowed to be kept.
        :param pulumi.Input[str] on_source_disk_delete: Specifies the behavior to apply to scheduled snapshots when
               the source disk is deleted.
               Default value is `KEEP_AUTO_SNAPSHOTS`.
               Possible values are `KEEP_AUTO_SNAPSHOTS` and `APPLY_RETENTION_POLICY`.
        """
        pulumi.set(__self__, "maxRetentionDays", max_retention_days)
        pulumi.set(__self__, "onSourceDiskDelete", on_source_disk_delete)

    @property
    @pulumi.getter(name="maxRetentionDays")
    def max_retention_days(self) -> pulumi.Input[float]:
        """
        Maximum age of the snapshot that is allowed to be kept.
        """
        ...

    @max_retention_days.setter
    def max_retention_days(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="onSourceDiskDelete")
    def on_source_disk_delete(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the behavior to apply to scheduled snapshots when
        the source disk is deleted.
        Default value is `KEEP_AUTO_SNAPSHOTS`.
        Possible values are `KEEP_AUTO_SNAPSHOTS` and `APPLY_RETENTION_POLICY`.
        """
        ...

    @on_source_disk_delete.setter
    def on_source_disk_delete(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ResourcePolicySnapshotSchedulePolicyScheduleArgs:
    def __init__(__self__, *,
                 daily_schedule: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs']] = None,
                 hourly_schedule: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs']] = None,
                 weekly_schedule: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs']] = None):
        """
        :param pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs'] daily_schedule: The policy will execute every nth day at the specified time.
               Structure is documented below.
        :param pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs'] hourly_schedule: The policy will execute every nth hour starting at the specified time.
               Structure is documented below.
        :param pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs'] weekly_schedule: Allows specifying a snapshot time for each day of the week.
               Structure is documented below.
        """
        pulumi.set(__self__, "dailySchedule", daily_schedule)
        pulumi.set(__self__, "hourlySchedule", hourly_schedule)
        pulumi.set(__self__, "weeklySchedule", weekly_schedule)

    @property
    @pulumi.getter(name="dailySchedule")
    def daily_schedule(self) -> Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs']]:
        """
        The policy will execute every nth day at the specified time.
        Structure is documented below.
        """
        ...

    @daily_schedule.setter
    def daily_schedule(self, value: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs']]):
        ...

    @property
    @pulumi.getter(name="hourlySchedule")
    def hourly_schedule(self) -> Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs']]:
        """
        The policy will execute every nth hour starting at the specified time.
        Structure is documented below.
        """
        ...

    @hourly_schedule.setter
    def hourly_schedule(self, value: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs']]):
        ...

    @property
    @pulumi.getter(name="weeklySchedule")
    def weekly_schedule(self) -> Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs']]:
        """
        Allows specifying a snapshot time for each day of the week.
        Structure is documented below.
        """
        ...

    @weekly_schedule.setter
    def weekly_schedule(self, value: Optional[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs']]):
        ...


@pulumi.input_type
class ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs:
    def __init__(__self__, *,
                 days_in_cycle: pulumi.Input[float],
                 start_time: pulumi.Input[str]):
        """
        :param pulumi.Input[float] days_in_cycle: The number of days between snapshots.
        :param pulumi.Input[str] start_time: Time within the window to start the operations.
               It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
        """
        pulumi.set(__self__, "daysInCycle", days_in_cycle)
        pulumi.set(__self__, "startTime", start_time)

    @property
    @pulumi.getter(name="daysInCycle")
    def days_in_cycle(self) -> pulumi.Input[float]:
        """
        The number of days between snapshots.
        """
        ...

    @days_in_cycle.setter
    def days_in_cycle(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Time within the window to start the operations.
        It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
        """
        ...

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs:
    def __init__(__self__, *,
                 hours_in_cycle: pulumi.Input[float],
                 start_time: pulumi.Input[str]):
        """
        :param pulumi.Input[float] hours_in_cycle: The number of hours between snapshots.
        :param pulumi.Input[str] start_time: Time within the window to start the operations.
               It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
        """
        pulumi.set(__self__, "hoursInCycle", hours_in_cycle)
        pulumi.set(__self__, "startTime", start_time)

    @property
    @pulumi.getter(name="hoursInCycle")
    def hours_in_cycle(self) -> pulumi.Input[float]:
        """
        The number of hours between snapshots.
        """
        ...

    @hours_in_cycle.setter
    def hours_in_cycle(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Time within the window to start the operations.
        It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
        """
        ...

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs:
    def __init__(__self__, *,
                 day_of_weeks: pulumi.Input[List[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs']]]):
        """
        :param pulumi.Input[List[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs']]] day_of_weeks: May contain up to seven (one for each day of the week) snapshot times.
               Structure is documented below.
        """
        pulumi.set(__self__, "dayOfWeeks", day_of_weeks)

    @property
    @pulumi.getter(name="dayOfWeeks")
    def day_of_weeks(self) -> pulumi.Input[List[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs']]]:
        """
        May contain up to seven (one for each day of the week) snapshot times.
        Structure is documented below.
        """
        ...

    @day_of_weeks.setter
    def day_of_weeks(self, value: pulumi.Input[List[pulumi.Input['ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs']]]):
        ...


@pulumi.input_type
class ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs:
    def __init__(__self__, *,
                 day: pulumi.Input[str],
                 start_time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] day: The day of the week to create the snapshot. e.g. MONDAY
               Possible values are `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, and `SUNDAY`.
        :param pulumi.Input[str] start_time: Time within the window to start the operations.
               It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "startTime", start_time)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input[str]:
        """
        The day of the week to create the snapshot. e.g. MONDAY
        Possible values are `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, and `SUNDAY`.
        """
        ...

    @day.setter
    def day(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Time within the window to start the operations.
        It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
        """
        ...

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs:
    def __init__(__self__, *,
                 guest_flush: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 storage_locations: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] guest_flush: Whether to perform a 'guest aware' snapshot.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key-value pairs.
        :param pulumi.Input[str] storage_locations: Cloud Storage bucket location to store the auto snapshot
               (regional or multi-regional)
        """
        pulumi.set(__self__, "guestFlush", guest_flush)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "storageLocations", storage_locations)

    @property
    @pulumi.getter(name="guestFlush")
    def guest_flush(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to perform a 'guest aware' snapshot.
        """
        ...

    @guest_flush.setter
    def guest_flush(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key-value pairs.
        """
        ...

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="storageLocations")
    def storage_locations(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Storage bucket location to store the auto snapshot
        (regional or multi-regional)
        """
        ...

    @storage_locations.setter
    def storage_locations(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RouterBgpArgs:
    def __init__(__self__, *,
                 asn: pulumi.Input[float],
                 advertise_mode: Optional[pulumi.Input[str]] = None,
                 advertised_groups: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 advertised_ip_ranges: Optional[pulumi.Input[List[pulumi.Input['RouterBgpAdvertisedIpRangeArgs']]]] = None):
        """
        :param pulumi.Input[float] asn: Local BGP Autonomous System Number (ASN). Must be an RFC6996
               private ASN, either 16-bit or 32-bit. The value will be fixed for
               this router resource. All VPN tunnels that link to this router
               will have the same local ASN.
        :param pulumi.Input[str] advertise_mode: User-specified flag to indicate which mode to use for advertisement.
               Default value is `DEFAULT`.
               Possible values are `DEFAULT` and `CUSTOM`.
        :param pulumi.Input[List[pulumi.Input[str]]] advertised_groups: User-specified list of prefix groups to advertise in custom mode.
               This field can only be populated if advertiseMode is CUSTOM and
               is advertised to all peers of the router. These groups will be
               advertised in addition to any specified prefixes. Leave this field
               blank to advertise no custom groups.
               This enum field has the one valid value: ALL_SUBNETS
        :param pulumi.Input[List[pulumi.Input['RouterBgpAdvertisedIpRangeArgs']]] advertised_ip_ranges: User-specified list of individual IP ranges to advertise in
               custom mode. This field can only be populated if advertiseMode
               is CUSTOM and is advertised to all peers of the router. These IP
               ranges will be advertised in addition to any specified groups.
               Leave this field blank to advertise no custom IP ranges.
               Structure is documented below.
        """
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "advertiseMode", advertise_mode)
        pulumi.set(__self__, "advertisedGroups", advertised_groups)
        pulumi.set(__self__, "advertisedIpRanges", advertised_ip_ranges)

    @property
    @pulumi.getter
    def asn(self) -> pulumi.Input[float]:
        """
        Local BGP Autonomous System Number (ASN). Must be an RFC6996
        private ASN, either 16-bit or 32-bit. The value will be fixed for
        this router resource. All VPN tunnels that link to this router
        will have the same local ASN.
        """
        ...

    @asn.setter
    def asn(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="advertiseMode")
    def advertise_mode(self) -> Optional[pulumi.Input[str]]:
        """
        User-specified flag to indicate which mode to use for advertisement.
        Default value is `DEFAULT`.
        Possible values are `DEFAULT` and `CUSTOM`.
        """
        ...

    @advertise_mode.setter
    def advertise_mode(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="advertisedGroups")
    def advertised_groups(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        User-specified list of prefix groups to advertise in custom mode.
        This field can only be populated if advertiseMode is CUSTOM and
        is advertised to all peers of the router. These groups will be
        advertised in addition to any specified prefixes. Leave this field
        blank to advertise no custom groups.
        This enum field has the one valid value: ALL_SUBNETS
        """
        ...

    @advertised_groups.setter
    def advertised_groups(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="advertisedIpRanges")
    def advertised_ip_ranges(self) -> Optional[pulumi.Input[List[pulumi.Input['RouterBgpAdvertisedIpRangeArgs']]]]:
        """
        User-specified list of individual IP ranges to advertise in
        custom mode. This field can only be populated if advertiseMode
        is CUSTOM and is advertised to all peers of the router. These IP
        ranges will be advertised in addition to any specified groups.
        Leave this field blank to advertise no custom IP ranges.
        Structure is documented below.
        """
        ...

    @advertised_ip_ranges.setter
    def advertised_ip_ranges(self, value: Optional[pulumi.Input[List[pulumi.Input['RouterBgpAdvertisedIpRangeArgs']]]]):
        ...


@pulumi.input_type
class RouterBgpAdvertisedIpRangeArgs:
    def __init__(__self__, *,
                 range: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: The IP range to advertise. The value must be a
               CIDR-formatted string.
        :param pulumi.Input[str] description: User-specified description for the IP range.
        """
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def range(self) -> pulumi.Input[str]:
        """
        The IP range to advertise. The value must be a
        CIDR-formatted string.
        """
        ...

    @range.setter
    def range(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-specified description for the IP range.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class RouterNatLogConfigArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[bool],
                 filter: pulumi.Input[str]):
        """
        :param pulumi.Input[bool] enable: Indicates whether or not to export logs.
        :param pulumi.Input[str] filter: Specifies the desired filtering of logs on this NAT.
               Possible values are `ERRORS_ONLY`, `TRANSLATIONS_ONLY`, and `ALL`.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        Indicates whether or not to export logs.
        """
        ...

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input[str]:
        """
        Specifies the desired filtering of logs on this NAT.
        Possible values are `ERRORS_ONLY`, `TRANSLATIONS_ONLY`, and `ALL`.
        """
        ...

    @filter.setter
    def filter(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class RouterNatSubnetworkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 source_ip_ranges_to_nats: pulumi.Input[List[pulumi.Input[str]]],
                 secondary_ip_range_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Self-link of subnetwork to NAT
        :param pulumi.Input[List[pulumi.Input[str]]] source_ip_ranges_to_nats: List of options for which source IPs in the subnetwork
               should have NAT enabled. Supported values include:
               `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
               `PRIMARY_IP_RANGE`.
        :param pulumi.Input[List[pulumi.Input[str]]] secondary_ip_range_names: List of the secondary ranges of the subnetwork that are allowed
               to use NAT. This can be populated only if
               `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
               sourceIpRangesToNat
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sourceIpRangesToNats", source_ip_ranges_to_nats)
        pulumi.set(__self__, "secondaryIpRangeNames", secondary_ip_range_names)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Self-link of subnetwork to NAT
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="sourceIpRangesToNats")
    def source_ip_ranges_to_nats(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        List of options for which source IPs in the subnetwork
        should have NAT enabled. Supported values include:
        `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
        `PRIMARY_IP_RANGE`.
        """
        ...

    @source_ip_ranges_to_nats.setter
    def source_ip_ranges_to_nats(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="secondaryIpRangeNames")
    def secondary_ip_range_names(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        List of the secondary ranges of the subnetwork that are allowed
        to use NAT. This can be populated only if
        `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
        sourceIpRangesToNat
        """
        ...

    @secondary_ip_range_names.setter
    def secondary_ip_range_names(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class RouterPeerAdvertisedIpRangeArgs:
    def __init__(__self__, *,
                 range: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: The IP range to advertise. The value must be a
               CIDR-formatted string.
        :param pulumi.Input[str] description: User-specified description for the IP range.
        """
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def range(self) -> pulumi.Input[str]:
        """
        The IP range to advertise. The value must be a
        CIDR-formatted string.
        """
        ...

    @range.setter
    def range(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-specified description for the IP range.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SecurityPolicyRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 match: pulumi.Input['SecurityPolicyRuleMatchArgs'],
                 priority: pulumi.Input[float],
                 description: Optional[pulumi.Input[str]] = None,
                 preview: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] action: Action to take when `match` matches the request. Valid values:
               * "allow" : allow access to target
               * "deny(status)" : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
        :param pulumi.Input['SecurityPolicyRuleMatchArgs'] match: A match condition that incoming traffic is evaluated against.
               If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
        :param pulumi.Input[float] priority: An unique positive integer indicating the priority of evaluation for a rule.
               Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
        :param pulumi.Input[str] description: An optional description of this rule. Max size is 64.
        :param pulumi.Input[bool] preview: When set to true, the `action` specified above is not enforced.
               Stackdriver logs for requests that trigger a preview action are annotated as such.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "match", match)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "preview", preview)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action to take when `match` matches the request. Valid values:
        * "allow" : allow access to target
        * "deny(status)" : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
        """
        ...

    @action.setter
    def action(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input['SecurityPolicyRuleMatchArgs']:
        """
        A match condition that incoming traffic is evaluated against.
        If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
        """
        ...

    @match.setter
    def match(self, value: pulumi.Input['SecurityPolicyRuleMatchArgs']):
        ...

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[float]:
        """
        An unique positive integer indicating the priority of evaluation for a rule.
        Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
        """
        ...

    @priority.setter
    def priority(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of this rule. Max size is 64.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def preview(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, the `action` specified above is not enforced.
        Stackdriver logs for requests that trigger a preview action are annotated as such.
        """
        ...

    @preview.setter
    def preview(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class SecurityPolicyRuleMatchArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['SecurityPolicyRuleMatchConfigArgs']] = None,
                 expr: Optional[pulumi.Input['SecurityPolicyRuleMatchExprArgs']] = None,
                 versioned_expr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['SecurityPolicyRuleMatchConfigArgs'] config: The configuration options available when specifying `versioned_expr`.
               This field must be specified if `versioned_expr` is specified and cannot be specified if `versioned_expr` is not specified.
               Structure is documented below.
        :param pulumi.Input['SecurityPolicyRuleMatchExprArgs'] expr: User defined CEVAL expression. A CEVAL expression is used to specify match criteria
               such as origin.ip, source.region_code and contents in the request header.
               Structure is documented below.
        :param pulumi.Input[str] versioned_expr: Predefined rule expression. If this field is specified, `config` must also be specified.
               Available options:
               * SRC_IPS_V1: Must specify the corresponding `src_ip_ranges` field in `config`.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "expr", expr)
        pulumi.set(__self__, "versionedExpr", versioned_expr)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['SecurityPolicyRuleMatchConfigArgs']]:
        """
        The configuration options available when specifying `versioned_expr`.
        This field must be specified if `versioned_expr` is specified and cannot be specified if `versioned_expr` is not specified.
        Structure is documented below.
        """
        ...

    @config.setter
    def config(self, value: Optional[pulumi.Input['SecurityPolicyRuleMatchConfigArgs']]):
        ...

    @property
    @pulumi.getter
    def expr(self) -> Optional[pulumi.Input['SecurityPolicyRuleMatchExprArgs']]:
        """
        User defined CEVAL expression. A CEVAL expression is used to specify match criteria
        such as origin.ip, source.region_code and contents in the request header.
        Structure is documented below.
        """
        ...

    @expr.setter
    def expr(self, value: Optional[pulumi.Input['SecurityPolicyRuleMatchExprArgs']]):
        ...

    @property
    @pulumi.getter(name="versionedExpr")
    def versioned_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Predefined rule expression. If this field is specified, `config` must also be specified.
        Available options:
        * SRC_IPS_V1: Must specify the corresponding `src_ip_ranges` field in `config`.
        """
        ...

    @versioned_expr.setter
    def versioned_expr(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SecurityPolicyRuleMatchConfigArgs:
    def __init__(__self__, *,
                 src_ip_ranges: pulumi.Input[List[pulumi.Input[str]]]):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] src_ip_ranges: Set of IP addresses or ranges (IPV4 or IPV6) in CIDR notation
               to match against inbound traffic. There is a limit of 10 IP ranges per rule. A value of '\*' matches all IPs
               (can be used to override the default behavior).
        """
        pulumi.set(__self__, "srcIpRanges", src_ip_ranges)

    @property
    @pulumi.getter(name="srcIpRanges")
    def src_ip_ranges(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        Set of IP addresses or ranges (IPV4 or IPV6) in CIDR notation
        to match against inbound traffic. There is a limit of 10 IP ranges per rule. A value of '\*' matches all IPs
        (can be used to override the default behavior).
        """
        ...

    @src_ip_ranges.setter
    def src_ip_ranges(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...


@pulumi.input_type
class SecurityPolicyRuleMatchExprArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
               The application context of the containing message determines which well-known feature set of CEL is supported.
        """
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        The application context of the containing message determines which well-known feature set of CEL is supported.
        """
        ...

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class SecurityScanConfigAuthenticationArgs:
    def __init__(__self__, *,
                 custom_account: Optional[pulumi.Input['SecurityScanConfigAuthenticationCustomAccountArgs']] = None,
                 google_account: Optional[pulumi.Input['SecurityScanConfigAuthenticationGoogleAccountArgs']] = None):
        """
        :param pulumi.Input['SecurityScanConfigAuthenticationCustomAccountArgs'] custom_account: Describes authentication configuration that uses a custom account.
               Structure is documented below.
        :param pulumi.Input['SecurityScanConfigAuthenticationGoogleAccountArgs'] google_account: Describes authentication configuration that uses a Google account.
               Structure is documented below.
        """
        pulumi.set(__self__, "customAccount", custom_account)
        pulumi.set(__self__, "googleAccount", google_account)

    @property
    @pulumi.getter(name="customAccount")
    def custom_account(self) -> Optional[pulumi.Input['SecurityScanConfigAuthenticationCustomAccountArgs']]:
        """
        Describes authentication configuration that uses a custom account.
        Structure is documented below.
        """
        ...

    @custom_account.setter
    def custom_account(self, value: Optional[pulumi.Input['SecurityScanConfigAuthenticationCustomAccountArgs']]):
        ...

    @property
    @pulumi.getter(name="googleAccount")
    def google_account(self) -> Optional[pulumi.Input['SecurityScanConfigAuthenticationGoogleAccountArgs']]:
        """
        Describes authentication configuration that uses a Google account.
        Structure is documented below.
        """
        ...

    @google_account.setter
    def google_account(self, value: Optional[pulumi.Input['SecurityScanConfigAuthenticationGoogleAccountArgs']]):
        ...


@pulumi.input_type
class SecurityScanConfigAuthenticationCustomAccountArgs:
    def __init__(__self__, *,
                 login_url: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] login_url: The login form URL of the website.
        :param pulumi.Input[str] password: The password of the custom account. The credential is stored encrypted
               in GCP.
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] username: The user name of the custom account.
        """
        pulumi.set(__self__, "loginUrl", login_url)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> pulumi.Input[str]:
        """
        The login form URL of the website.
        """
        ...

    @login_url.setter
    def login_url(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password of the custom account. The credential is stored encrypted
        in GCP.
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @password.setter
    def password(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The user name of the custom account.
        """
        ...

    @username.setter
    def username(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class SecurityScanConfigAuthenticationGoogleAccountArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password of the custom account. The credential is stored encrypted
               in GCP.
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] username: The user name of the custom account.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password of the custom account. The credential is stored encrypted
        in GCP.
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @password.setter
    def password(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The user name of the custom account.
        """
        ...

    @username.setter
    def username(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class SecurityScanConfigScheduleArgs:
    def __init__(__self__, *,
                 interval_duration_days: pulumi.Input[float],
                 schedule_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] interval_duration_days: The duration of time between executions in days
        :param pulumi.Input[str] schedule_time: A timestamp indicates when the next run will be scheduled. The value is refreshed
               by the server after each run. If unspecified, it will default to current server time,
               which means the scan will be scheduled to start immediately.
        """
        pulumi.set(__self__, "intervalDurationDays", interval_duration_days)
        pulumi.set(__self__, "scheduleTime", schedule_time)

    @property
    @pulumi.getter(name="intervalDurationDays")
    def interval_duration_days(self) -> pulumi.Input[float]:
        """
        The duration of time between executions in days
        """
        ...

    @interval_duration_days.setter
    def interval_duration_days(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="scheduleTime")
    def schedule_time(self) -> Optional[pulumi.Input[str]]:
        """
        A timestamp indicates when the next run will be scheduled. The value is refreshed
        by the server after each run. If unspecified, it will default to current server time,
        which means the scan will be scheduled to start immediately.
        """
        ...

    @schedule_time.setter
    def schedule_time(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SnapshotSnapshotEncryptionKeyArgs:
    def __init__(__self__, *,
                 raw_key: pulumi.Input[str],
                 sha256: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] raw_key: Specifies a 256-bit customer-supplied encryption key, encoded in
               RFC 4648 base64 to either encrypt or decrypt this resource.
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] sha256: -
               The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
               encryption key that protects this resource.
        """
        pulumi.set(__self__, "rawKey", raw_key)
        pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter(name="rawKey")
    def raw_key(self) -> pulumi.Input[str]:
        """
        Specifies a 256-bit customer-supplied encryption key, encoded in
        RFC 4648 base64 to either encrypt or decrypt this resource.
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @raw_key.setter
    def raw_key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def sha256(self) -> Optional[pulumi.Input[str]]:
        """
        -
        The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
        encryption key that protects this resource.
        """
        ...

    @sha256.setter
    def sha256(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SnapshotSourceDiskEncryptionKeyArgs:
    def __init__(__self__, *,
                 raw_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] raw_key: Specifies a 256-bit customer-supplied encryption key, encoded in
               RFC 4648 base64 to either encrypt or decrypt this resource.
               **Note**: This property is sensitive and will not be displayed in the plan.
        """
        pulumi.set(__self__, "rawKey", raw_key)

    @property
    @pulumi.getter(name="rawKey")
    def raw_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a 256-bit customer-supplied encryption key, encoded in
        RFC 4648 base64 to either encrypt or decrypt this resource.
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        ...

    @raw_key.setter
    def raw_key(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SubnetworkIAMBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] title: A title for the expression, i.e. a short string describing its purpose.
        :param pulumi.Input[str] description: An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        ...

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        A title for the expression, i.e. a short string describing its purpose.
        """
        ...

    @title.setter
    def title(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SubnetworkIAMMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] title: A title for the expression, i.e. a short string describing its purpose.
        :param pulumi.Input[str] description: An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        ...

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        A title for the expression, i.e. a short string describing its purpose.
        """
        ...

    @title.setter
    def title(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SubnetworkLogConfigArgs:
    def __init__(__self__, *,
                 aggregation_interval: Optional[pulumi.Input[str]] = None,
                 flow_sampling: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation_interval: Can only be specified if VPC flow logging for this subnetwork is enabled.
               Toggles the aggregation interval for collecting flow logs. Increasing the
               interval time will reduce the amount of generated flow logs for long
               lasting connections. Default is an interval of 5 seconds per connection.
               Possible values are INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN,
               INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN
               Default value is `INTERVAL_5_SEC`.
               Possible values are `INTERVAL_5_SEC`, `INTERVAL_30_SEC`, `INTERVAL_1_MIN`, `INTERVAL_5_MIN`, `INTERVAL_10_MIN`, and `INTERVAL_15_MIN`.
        :param pulumi.Input[float] flow_sampling: Can only be specified if VPC flow logging for this subnetwork is enabled.
               The value of the field must be in [0, 1]. Set the sampling rate of VPC
               flow logs within the subnetwork where 1.0 means all collected logs are
               reported and 0.0 means no logs are reported. Default is 0.5 which means
               half of all collected logs are reported.
        :param pulumi.Input[str] metadata: Can only be specified if VPC flow logging for this subnetwork is enabled.
               Configures whether metadata fields should be added to the reported VPC
               flow logs.
               Default value is `INCLUDE_ALL_METADATA`.
               Possible values are `EXCLUDE_ALL_METADATA` and `INCLUDE_ALL_METADATA`.
        """
        pulumi.set(__self__, "aggregationInterval", aggregation_interval)
        pulumi.set(__self__, "flowSampling", flow_sampling)
        pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="aggregationInterval")
    def aggregation_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Can only be specified if VPC flow logging for this subnetwork is enabled.
        Toggles the aggregation interval for collecting flow logs. Increasing the
        interval time will reduce the amount of generated flow logs for long
        lasting connections. Default is an interval of 5 seconds per connection.
        Possible values are INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN,
        INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN
        Default value is `INTERVAL_5_SEC`.
        Possible values are `INTERVAL_5_SEC`, `INTERVAL_30_SEC`, `INTERVAL_1_MIN`, `INTERVAL_5_MIN`, `INTERVAL_10_MIN`, and `INTERVAL_15_MIN`.
        """
        ...

    @aggregation_interval.setter
    def aggregation_interval(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="flowSampling")
    def flow_sampling(self) -> Optional[pulumi.Input[float]]:
        """
        Can only be specified if VPC flow logging for this subnetwork is enabled.
        The value of the field must be in [0, 1]. Set the sampling rate of VPC
        flow logs within the subnetwork where 1.0 means all collected logs are
        reported and 0.0 means no logs are reported. Default is 0.5 which means
        half of all collected logs are reported.
        """
        ...

    @flow_sampling.setter
    def flow_sampling(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        Can only be specified if VPC flow logging for this subnetwork is enabled.
        Configures whether metadata fields should be added to the reported VPC
        flow logs.
        Default value is `INCLUDE_ALL_METADATA`.
        Possible values are `EXCLUDE_ALL_METADATA` and `INCLUDE_ALL_METADATA`.
        """
        ...

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class SubnetworkSecondaryIpRangeArgs:
    def __init__(__self__, *,
                 ip_cidr_range: pulumi.Input[str],
                 range_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] ip_cidr_range: The range of IP addresses belonging to this subnetwork secondary
               range. Provide this property when you create the subnetwork.
               Ranges must be unique and non-overlapping with all primary and
               secondary IP ranges within a network. Only IPv4 is supported.
        :param pulumi.Input[str] range_name: The name associated with this subnetwork secondary range, used
               when adding an alias IP range to a VM instance. The name must
               be 1-63 characters long, and comply with RFC1035. The name
               must be unique within the subnetwork.
        """
        pulumi.set(__self__, "ipCidrRange", ip_cidr_range)
        pulumi.set(__self__, "rangeName", range_name)

    @property
    @pulumi.getter(name="ipCidrRange")
    def ip_cidr_range(self) -> pulumi.Input[str]:
        """
        The range of IP addresses belonging to this subnetwork secondary
        range. Provide this property when you create the subnetwork.
        Ranges must be unique and non-overlapping with all primary and
        secondary IP ranges within a network. Only IPv4 is supported.
        """
        ...

    @ip_cidr_range.setter
    def ip_cidr_range(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> pulumi.Input[str]:
        """
        The name associated with this subnetwork secondary range, used
        when adding an alias IP range to a VM instance. The name must
        be 1-63 characters long, and comply with RFC1035. The name
        must be unique within the subnetwork.
        """
        ...

    @range_name.setter
    def range_name(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionArgs:
    def __init__(__self__, *,
                 cors_policy: Optional[pulumi.Input['URLMapDefaultRouteActionCorsPolicyArgs']] = None,
                 fault_injection_policy: Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyArgs']] = None,
                 request_mirror_policy: Optional[pulumi.Input['URLMapDefaultRouteActionRequestMirrorPolicyArgs']] = None,
                 retry_policy: Optional[pulumi.Input['URLMapDefaultRouteActionRetryPolicyArgs']] = None,
                 timeout: Optional[pulumi.Input['URLMapDefaultRouteActionTimeoutArgs']] = None,
                 url_rewrite: Optional[pulumi.Input['URLMapDefaultRouteActionUrlRewriteArgs']] = None,
                 weighted_backend_services: Optional[pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceArgs']]]] = None):
        """
        :param pulumi.Input['URLMapDefaultRouteActionCorsPolicyArgs'] cors_policy: The specification for allowing client side cross-origin requests. Please see
               [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)
               Structure is documented below.
        :param pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyArgs'] fault_injection_policy: The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
               As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
               percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
               by the Loadbalancer for a percentage of requests.
               timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
               Structure is documented below.
        :param pulumi.Input['URLMapDefaultRouteActionRequestMirrorPolicyArgs'] request_mirror_policy: Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
               Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
               the host / authority header is suffixed with -shadow.
               Structure is documented below.
        :param pulumi.Input['URLMapDefaultRouteActionRetryPolicyArgs'] retry_policy: Specifies the retry policy associated with this route.
               Structure is documented below.
        :param pulumi.Input['URLMapDefaultRouteActionTimeoutArgs'] timeout: Specifies the timeout for the selected route. Timeout is computed from the time the request has been
               fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
               If not specified, will use the largest timeout among all backend services associated with the route.
               Structure is documented below.
        :param pulumi.Input['URLMapDefaultRouteActionUrlRewriteArgs'] url_rewrite: The spec to modify the URL of the request, prior to forwarding the request to the matched service.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceArgs']]] weighted_backend_services: A list of weighted backend services to send traffic to when a route match occurs.
               The weights determine the fraction of traffic that flows to their corresponding backend service.
               If all traffic needs to go to a single backend service, there must be one weightedBackendService
               with weight set to a non 0 number.
               Once a backendService is identified and before forwarding the request to the backend service,
               advanced routing actions like Url rewrites and header transformations are applied depending on
               additional settings specified in this HttpRouteAction.
               Structure is documented below.
        """
        pulumi.set(__self__, "corsPolicy", cors_policy)
        pulumi.set(__self__, "faultInjectionPolicy", fault_injection_policy)
        pulumi.set(__self__, "requestMirrorPolicy", request_mirror_policy)
        pulumi.set(__self__, "retryPolicy", retry_policy)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "urlRewrite", url_rewrite)
        pulumi.set(__self__, "weightedBackendServices", weighted_backend_services)

    @property
    @pulumi.getter(name="corsPolicy")
    def cors_policy(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionCorsPolicyArgs']]:
        """
        The specification for allowing client side cross-origin requests. Please see
        [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)
        Structure is documented below.
        """
        ...

    @cors_policy.setter
    def cors_policy(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionCorsPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="faultInjectionPolicy")
    def fault_injection_policy(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyArgs']]:
        """
        The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
        As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
        percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
        by the Loadbalancer for a percentage of requests.
        timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
        Structure is documented below.
        """
        ...

    @fault_injection_policy.setter
    def fault_injection_policy(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="requestMirrorPolicy")
    def request_mirror_policy(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionRequestMirrorPolicyArgs']]:
        """
        Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
        Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
        the host / authority header is suffixed with -shadow.
        Structure is documented below.
        """
        ...

    @request_mirror_policy.setter
    def request_mirror_policy(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionRequestMirrorPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionRetryPolicyArgs']]:
        """
        Specifies the retry policy associated with this route.
        Structure is documented below.
        """
        ...

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionRetryPolicyArgs']]):
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionTimeoutArgs']]:
        """
        Specifies the timeout for the selected route. Timeout is computed from the time the request has been
        fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
        If not specified, will use the largest timeout among all backend services associated with the route.
        Structure is documented below.
        """
        ...

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionUrlRewriteArgs']]:
        """
        The spec to modify the URL of the request, prior to forwarding the request to the matched service.
        Structure is documented below.
        """
        ...

    @url_rewrite.setter
    def url_rewrite(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionUrlRewriteArgs']]):
        ...

    @property
    @pulumi.getter(name="weightedBackendServices")
    def weighted_backend_services(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceArgs']]]]:
        """
        A list of weighted backend services to send traffic to when a route match occurs.
        The weights determine the fraction of traffic that flows to their corresponding backend service.
        If all traffic needs to go to a single backend service, there must be one weightedBackendService
        with weight set to a non 0 number.
        Once a backendService is identified and before forwarding the request to the backend service,
        advanced routing actions like Url rewrites and header transformations are applied depending on
        additional settings specified in this HttpRouteAction.
        Structure is documented below.
        """
        ...

    @weighted_backend_services.setter
    def weighted_backend_services(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceArgs']]]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionCorsPolicyArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allow_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origin_regexes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origins: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 expose_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] allow_credentials: In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
               This translates to the Access-Control-Allow-Credentials header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_headers: Specifies the content for the Access-Control-Allow-Headers header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_methods: Specifies the content for the Access-Control-Allow-Methods header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origin_regexes: Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
               please see en.cppreference.com/w/cpp/regex/ecmascript
               An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origins: Specifies the list of origins that will be allowed to do CORS requests.
               An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        :param pulumi.Input[bool] disabled: If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
        :param pulumi.Input[List[pulumi.Input[str]]] expose_headers: Specifies the content for the Access-Control-Expose-Headers header.
        :param pulumi.Input[float] max_age: Specifies how long results of a preflight request can be cached in seconds.
               This translates to the Access-Control-Max-Age header.
        """
        pulumi.set(__self__, "allowCredentials", allow_credentials)
        pulumi.set(__self__, "allowHeaders", allow_headers)
        pulumi.set(__self__, "allowMethods", allow_methods)
        pulumi.set(__self__, "allowOriginRegexes", allow_origin_regexes)
        pulumi.set(__self__, "allowOrigins", allow_origins)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "exposeHeaders", expose_headers)
        pulumi.set(__self__, "maxAge", max_age)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
        This translates to the Access-Control-Allow-Credentials header.
        """
        ...

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Headers header.
        """
        ...

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Methods header.
        """
        ...

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOriginRegexes")
    def allow_origin_regexes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
        please see en.cppreference.com/w/cpp/regex/ecmascript
        An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        """
        ...

    @allow_origin_regexes.setter
    def allow_origin_regexes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the list of origins that will be allowed to do CORS requests.
        An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        """
        ...

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
        """
        ...

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Expose-Headers header.
        """
        ...

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long results of a preflight request can be cached in seconds.
        This translates to the Access-Control-Max-Age header.
        """
        ...

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionFaultInjectionPolicyArgs:
    def __init__(__self__, *,
                 abort: Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyAbortArgs']] = None,
                 delay: Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyDelayArgs']] = None):
        """
        :param pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyAbortArgs'] abort: The specification for how client requests are aborted as part of fault injection.
               Structure is documented below.
        :param pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyDelayArgs'] delay: The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
               Structure is documented below.
        """
        pulumi.set(__self__, "abort", abort)
        pulumi.set(__self__, "delay", delay)

    @property
    @pulumi.getter
    def abort(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyAbortArgs']]:
        """
        The specification for how client requests are aborted as part of fault injection.
        Structure is documented below.
        """
        ...

    @abort.setter
    def abort(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyAbortArgs']]):
        ...

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyDelayArgs']]:
        """
        The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
        Structure is documented below.
        """
        ...

    @delay.setter
    def delay(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyDelayArgs']]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionFaultInjectionPolicyAbortArgs:
    def __init__(__self__, *,
                 http_status: Optional[pulumi.Input[float]] = None,
                 percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] http_status: The HTTP status code used to abort the request.
               The value must be between 200 and 599 inclusive.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
               The value must be between 0.0 and 100.0 inclusive.
        """
        pulumi.set(__self__, "httpStatus", http_status)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> Optional[pulumi.Input[float]]:
        """
        The HTTP status code used to abort the request.
        The value must be between 200 and 599 inclusive.
        """
        ...

    @http_status.setter
    def http_status(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
        The value must be between 0.0 and 100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionFaultInjectionPolicyDelayArgs:
    def __init__(__self__, *,
                 fixed_delay: Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs']] = None,
                 percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs'] fixed_delay: Specifies the value of the fixed delay interval.
               Structure is documented below.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
               The value must be between 0.0 and 100.0 inclusive.
        """
        pulumi.set(__self__, "fixedDelay", fixed_delay)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="fixedDelay")
    def fixed_delay(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs']]:
        """
        Specifies the value of the fixed delay interval.
        Structure is documented below.
        """
        ...

    @fixed_delay.setter
    def fixed_delay(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs']]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
        The value must be between 0.0 and 100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[float]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionRequestMirrorPolicyArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str]):
        """
        :param pulumi.Input[str] backend_service: The full or partial URL to the BackendService resource being mirrored to.
        """
        pulumi.set(__self__, "backendService", backend_service)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The full or partial URL to the BackendService resource being mirrored to.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionRetryPolicyArgs:
    def __init__(__self__, *,
                 num_retries: Optional[pulumi.Input[float]] = None,
                 per_try_timeout: Optional[pulumi.Input['URLMapDefaultRouteActionRetryPolicyPerTryTimeoutArgs']] = None,
                 retry_conditions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[float] num_retries: Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
        :param pulumi.Input['URLMapDefaultRouteActionRetryPolicyPerTryTimeoutArgs'] per_try_timeout: Specifies a non-zero timeout per retry attempt.
               If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
               will use the largest timeout among all backend services associated with the route.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] retry_conditions: Specfies one or more conditions when this retry rule applies. Valid values are:
               5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
               or if the backend service does not respond at all, example: disconnects, reset, read timeout,
               connection failure, and refused streams.
               gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
               connect-failure: Loadbalancer will retry on failures connecting to backend services,
               for example due to connection timeouts.
               retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
               Currently the only retriable error supported is 409.
               refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
               This reset type indicates that it is safe to retry.
               cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
               deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
               resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
               unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
        """
        pulumi.set(__self__, "numRetries", num_retries)
        pulumi.set(__self__, "perTryTimeout", per_try_timeout)
        pulumi.set(__self__, "retryConditions", retry_conditions)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
        """
        ...

    @num_retries.setter
    def num_retries(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionRetryPolicyPerTryTimeoutArgs']]:
        """
        Specifies a non-zero timeout per retry attempt.
        If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
        will use the largest timeout among all backend services associated with the route.
        Structure is documented below.
        """
        ...

    @per_try_timeout.setter
    def per_try_timeout(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionRetryPolicyPerTryTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="retryConditions")
    def retry_conditions(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specfies one or more conditions when this retry rule applies. Valid values are:
        5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
        or if the backend service does not respond at all, example: disconnects, reset, read timeout,
        connection failure, and refused streams.
        gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
        connect-failure: Loadbalancer will retry on failures connecting to backend services,
        for example due to connection timeouts.
        retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
        Currently the only retriable error supported is 409.
        refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
        This reset type indicates that it is safe to retry.
        cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
        deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
        resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
        unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
        """
        ...

    @retry_conditions.setter
    def retry_conditions(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionRetryPolicyPerTryTimeoutArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[float]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionTimeoutArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[float]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionUrlRewriteArgs:
    def __init__(__self__, *,
                 host_rewrite: Optional[pulumi.Input[str]] = None,
                 path_prefix_rewrite: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_rewrite: Prior to forwarding the request to the selected service, the request's host header is replaced
               with contents of hostRewrite.
               The value must be between 1 and 255 characters.
        :param pulumi.Input[str] path_prefix_rewrite: Prior to forwarding the request to the selected backend service, the matching portion of the
               request's path is replaced by pathPrefixRewrite.
               The value must be between 1 and 1024 characters.
        """
        pulumi.set(__self__, "hostRewrite", host_rewrite)
        pulumi.set(__self__, "pathPrefixRewrite", path_prefix_rewrite)

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected service, the request's host header is replaced
        with contents of hostRewrite.
        The value must be between 1 and 255 characters.
        """
        ...

    @host_rewrite.setter
    def host_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="pathPrefixRewrite")
    def path_prefix_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected backend service, the matching portion of the
        request's path is replaced by pathPrefixRewrite.
        The value must be between 1 and 1024 characters.
        """
        ...

    @path_prefix_rewrite.setter
    def path_prefix_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionWeightedBackendServiceArgs:
    def __init__(__self__, *,
                 backend_service: Optional[pulumi.Input[str]] = None,
                 header_action: Optional[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs']] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] backend_service: The full or partial URL to the BackendService resource being mirrored to.
        :param pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs'] header_action: Specifies changes to request and response headers that need to take effect for
               the selected backendService.
               headerAction specified here take effect before headerAction in the enclosing
               HttpRouteRule, PathMatcher and UrlMap.
               Structure is documented below.
        :param pulumi.Input[float] weight: Specifies the fraction of traffic sent to backendService, computed as
               weight / (sum of all weightedBackendService weights in routeAction) .
               The selection of a backend service is determined only for new traffic. Once a user's request
               has been directed to a backendService, subsequent requests will be sent to the same backendService
               as determined by the BackendService's session affinity policy.
               The value must be between 0 and 1000
        """
        pulumi.set(__self__, "backendService", backend_service)
        pulumi.set(__self__, "headerAction", header_action)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> Optional[pulumi.Input[str]]:
        """
        The full or partial URL to the BackendService resource being mirrored to.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="headerAction")
    def header_action(self) -> Optional[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs']]:
        """
        Specifies changes to request and response headers that need to take effect for
        the selected backendService.
        headerAction specified here take effect before headerAction in the enclosing
        HttpRouteRule, PathMatcher and UrlMap.
        Structure is documented below.
        """
        ...

    @header_action.setter
    def header_action(self, value: Optional[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs']]):
        ...

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the fraction of traffic sent to backendService, computed as
        weight / (sum of all weightedBackendService weights in routeAction) .
        The selection of a backend service is determined only for new traffic. Once a user's request
        has been directed to a backendService, subsequent requests will be sent to the same backendService
        as determined by the BackendService's session affinity policy.
        The value must be between 0 and 1000
        """
        ...

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request prior to
               forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response prior to sending the
               response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request prior to
        forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response prior to sending the
        response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[bool]]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[bool]]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class URLMapDefaultUrlRedirectArgs:
    def __init__(__self__, *,
                 strip_query: pulumi.Input[bool],
                 host_redirect: Optional[pulumi.Input[str]] = None,
                 https_redirect: Optional[pulumi.Input[bool]] = None,
                 path_redirect: Optional[pulumi.Input[str]] = None,
                 prefix_redirect: Optional[pulumi.Input[str]] = None,
                 redirect_response_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] strip_query: If set to true, any accompanying query portion of the original URL is removed prior
               to redirecting the request. If set to false, the query portion of the original URL is
               retained. The default is set to false.
               This field is required to ensure an empty block is not set. The normal default value is false.
        :param pulumi.Input[str] host_redirect: The host that will be used in the redirect response instead of the one that was
               supplied in the request. The value must be between 1 and 255 characters.
        :param pulumi.Input[bool] https_redirect: If set to true, the URL scheme in the redirected request is set to https. If set to
               false, the URL scheme of the redirected request will remain the same as that of the
               request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
               true for TargetHttpsProxy is not permitted. The default is set to false.
        :param pulumi.Input[str] path_redirect: The path that will be used in the redirect response instead of the one that was
               supplied in the request. pathRedirect cannot be supplied together with
               prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
               original request will be used for the redirect. The value must be between 1 and 1024
               characters.
        :param pulumi.Input[str] prefix_redirect: The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
               retaining the remaining portion of the URL before redirecting the request.
               prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
               neither. If neither is supplied, the path of the original request will be used for
               the redirect. The value must be between 1 and 1024 characters.
        :param pulumi.Input[str] redirect_response_code: The HTTP Status code to use for this RedirectAction. Supported values are:
               * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
               * FOUND, which corresponds to 302.
               * SEE_OTHER which corresponds to 303.
               * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
               will be retained.
               * PERMANENT_REDIRECT, which corresponds to 308. In this case,
               the request method will be retained.
        """
        pulumi.set(__self__, "stripQuery", strip_query)
        pulumi.set(__self__, "hostRedirect", host_redirect)
        pulumi.set(__self__, "httpsRedirect", https_redirect)
        pulumi.set(__self__, "pathRedirect", path_redirect)
        pulumi.set(__self__, "prefixRedirect", prefix_redirect)
        pulumi.set(__self__, "redirectResponseCode", redirect_response_code)

    @property
    @pulumi.getter(name="stripQuery")
    def strip_query(self) -> pulumi.Input[bool]:
        """
        If set to true, any accompanying query portion of the original URL is removed prior
        to redirecting the request. If set to false, the query portion of the original URL is
        retained. The default is set to false.
        This field is required to ensure an empty block is not set. The normal default value is false.
        """
        ...

    @strip_query.setter
    def strip_query(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter(name="hostRedirect")
    def host_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The host that will be used in the redirect response instead of the one that was
        supplied in the request. The value must be between 1 and 255 characters.
        """
        ...

    @host_redirect.setter
    def host_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the URL scheme in the redirected request is set to https. If set to
        false, the URL scheme of the redirected request will remain the same as that of the
        request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
        true for TargetHttpsProxy is not permitted. The default is set to false.
        """
        ...

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="pathRedirect")
    def path_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The path that will be used in the redirect response instead of the one that was
        supplied in the request. pathRedirect cannot be supplied together with
        prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
        original request will be used for the redirect. The value must be between 1 and 1024
        characters.
        """
        ...

    @path_redirect.setter
    def path_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="prefixRedirect")
    def prefix_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        retaining the remaining portion of the URL before redirecting the request.
        prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
        neither. If neither is supplied, the path of the original request will be used for
        the redirect. The value must be between 1 and 1024 characters.
        """
        ...

    @prefix_redirect.setter
    def prefix_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Status code to use for this RedirectAction. Supported values are:
        * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
        * FOUND, which corresponds to 302.
        * SEE_OTHER which corresponds to 303.
        * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        will be retained.
        * PERMANENT_REDIRECT, which corresponds to 308. In this case,
        the request method will be retained.
        """
        ...

    @redirect_response_code.setter
    def redirect_response_code(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['URLMapHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request prior to
               forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['URLMapHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response prior to sending the
               response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request prior to
        forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response prior to sending the
        response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapHostRuleArgs:
    def __init__(__self__, *,
                 hosts: pulumi.Input[List[pulumi.Input[str]]],
                 path_matcher: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] hosts: The list of host patterns to match. They must be valid hostnames, except * will
               match any string of ([a-z0-9-.]*). In that case, * must be the first character
               and must be followed in the pattern by either - or ..
        :param pulumi.Input[str] path_matcher: The name of the PathMatcher to use to match the path portion of the URL if the
               hostRule matches the URL's host portion.
        :param pulumi.Input[str] description: Description of this test case.
        """
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "pathMatcher", path_matcher)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        The list of host patterns to match. They must be valid hostnames, except * will
        match any string of ([a-z0-9-.]*). In that case, * must be the first character
        and must be followed in the pattern by either - or ..
        """
        ...

    @hosts.setter
    def hosts(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="pathMatcher")
    def path_matcher(self) -> pulumi.Input[str]:
        """
        The name of the PathMatcher to use to match the path portion of the URL if the
        hostRule matches the URL's host portion.
        """
        ...

    @path_matcher.setter
    def path_matcher(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this test case.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default_route_action: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionArgs']] = None,
                 default_service: Optional[pulumi.Input[str]] = None,
                 default_url_redirect: Optional[pulumi.Input['URLMapPathMatcherDefaultUrlRedirectArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 header_action: Optional[pulumi.Input['URLMapPathMatcherHeaderActionArgs']] = None,
                 path_rules: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleArgs']]]] = None,
                 route_rules: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] name: The name of the query parameter to match. The query parameter must exist in the
               request, in the absence of which the request match fails.
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionArgs'] default_route_action: defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
               advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
               to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
               Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
               Only one of defaultRouteAction or defaultUrlRedirect must be set.
               Structure is documented below.
        :param pulumi.Input[str] default_service: The backend service or backend bucket to use when none of the given paths match.
        :param pulumi.Input['URLMapPathMatcherDefaultUrlRedirectArgs'] default_url_redirect: When none of the specified hostRules match, the request is redirected to a URL specified
               by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
               defaultRouteAction must not be set.
               Structure is documented below.
        :param pulumi.Input[str] description: Description of this test case.
        :param pulumi.Input['URLMapPathMatcherHeaderActionArgs'] header_action: Specifies changes to request and response headers that need to take effect for
               the selected backendService.
               headerAction specified here take effect before headerAction in the enclosing
               HttpRouteRule, PathMatcher and UrlMap.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleArgs']]] path_rules: The list of path rules. Use this list instead of routeRules when routing based
               on simple path matching is all that's required. The order by which path rules
               are specified does not matter. Matches are always done on the longest-path-first
               basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
               irrespective of the order in which those paths appear in this list. Within a
               given pathMatcher, only one of pathRules or routeRules must be set.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleArgs']]] route_rules: The list of ordered HTTP route rules. Use this list instead of pathRules when
               advanced route matching and routing actions are desired. The order of specifying
               routeRules matters: the first rule that matches will cause its specified routing
               action to take effect. Within a given pathMatcher, only one of pathRules or
               routeRules must be set. routeRules are not supported in UrlMaps intended for
               External load balancers.
               Structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "defaultRouteAction", default_route_action)
        pulumi.set(__self__, "defaultService", default_service)
        pulumi.set(__self__, "defaultUrlRedirect", default_url_redirect)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "headerAction", header_action)
        pulumi.set(__self__, "pathRules", path_rules)
        pulumi.set(__self__, "routeRules", route_rules)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the query parameter to match. The query parameter must exist in the
        request, in the absence of which the request match fails.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="defaultRouteAction")
    def default_route_action(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionArgs']]:
        """
        defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
        advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
        to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
        Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
        Only one of defaultRouteAction or defaultUrlRedirect must be set.
        Structure is documented below.
        """
        ...

    @default_route_action.setter
    def default_route_action(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionArgs']]):
        ...

    @property
    @pulumi.getter(name="defaultService")
    def default_service(self) -> Optional[pulumi.Input[str]]:
        """
        The backend service or backend bucket to use when none of the given paths match.
        """
        ...

    @default_service.setter
    def default_service(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="defaultUrlRedirect")
    def default_url_redirect(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultUrlRedirectArgs']]:
        """
        When none of the specified hostRules match, the request is redirected to a URL specified
        by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        defaultRouteAction must not be set.
        Structure is documented below.
        """
        ...

    @default_url_redirect.setter
    def default_url_redirect(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultUrlRedirectArgs']]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this test case.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="headerAction")
    def header_action(self) -> Optional[pulumi.Input['URLMapPathMatcherHeaderActionArgs']]:
        """
        Specifies changes to request and response headers that need to take effect for
        the selected backendService.
        headerAction specified here take effect before headerAction in the enclosing
        HttpRouteRule, PathMatcher and UrlMap.
        Structure is documented below.
        """
        ...

    @header_action.setter
    def header_action(self, value: Optional[pulumi.Input['URLMapPathMatcherHeaderActionArgs']]):
        ...

    @property
    @pulumi.getter(name="pathRules")
    def path_rules(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleArgs']]]]:
        """
        The list of path rules. Use this list instead of routeRules when routing based
        on simple path matching is all that's required. The order by which path rules
        are specified does not matter. Matches are always done on the longest-path-first
        basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
        irrespective of the order in which those paths appear in this list. Within a
        given pathMatcher, only one of pathRules or routeRules must be set.
        Structure is documented below.
        """
        ...

    @path_rules.setter
    def path_rules(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleArgs']]]]):
        ...

    @property
    @pulumi.getter(name="routeRules")
    def route_rules(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleArgs']]]]:
        """
        The list of ordered HTTP route rules. Use this list instead of pathRules when
        advanced route matching and routing actions are desired. The order of specifying
        routeRules matters: the first rule that matches will cause its specified routing
        action to take effect. Within a given pathMatcher, only one of pathRules or
        routeRules must be set. routeRules are not supported in UrlMaps intended for
        External load balancers.
        Structure is documented below.
        """
        ...

    @route_rules.setter
    def route_rules(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleArgs']]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionArgs:
    def __init__(__self__, *,
                 cors_policy: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionCorsPolicyArgs']] = None,
                 fault_injection_policy: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyArgs']] = None,
                 request_mirror_policy: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionRequestMirrorPolicyArgs']] = None,
                 retry_policy: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionRetryPolicyArgs']] = None,
                 timeout: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionTimeoutArgs']] = None,
                 url_rewrite: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionUrlRewriteArgs']] = None,
                 weighted_backend_services: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceArgs']]]] = None):
        """
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionCorsPolicyArgs'] cors_policy: The specification for allowing client side cross-origin requests. Please see
               [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyArgs'] fault_injection_policy: The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
               As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
               percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
               by the Loadbalancer for a percentage of requests.
               timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionRequestMirrorPolicyArgs'] request_mirror_policy: Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
               Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
               the host / authority header is suffixed with -shadow.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionRetryPolicyArgs'] retry_policy: Specifies the retry policy associated with this route.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionTimeoutArgs'] timeout: Specifies the timeout for the selected route. Timeout is computed from the time the request has been
               fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
               If not specified, will use the largest timeout among all backend services associated with the route.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionUrlRewriteArgs'] url_rewrite: The spec to modify the URL of the request, prior to forwarding the request to the matched service.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceArgs']]] weighted_backend_services: A list of weighted backend services to send traffic to when a route match occurs.
               The weights determine the fraction of traffic that flows to their corresponding backend service.
               If all traffic needs to go to a single backend service, there must be one weightedBackendService
               with weight set to a non 0 number.
               Once a backendService is identified and before forwarding the request to the backend service,
               advanced routing actions like Url rewrites and header transformations are applied depending on
               additional settings specified in this HttpRouteAction.
               Structure is documented below.
        """
        pulumi.set(__self__, "corsPolicy", cors_policy)
        pulumi.set(__self__, "faultInjectionPolicy", fault_injection_policy)
        pulumi.set(__self__, "requestMirrorPolicy", request_mirror_policy)
        pulumi.set(__self__, "retryPolicy", retry_policy)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "urlRewrite", url_rewrite)
        pulumi.set(__self__, "weightedBackendServices", weighted_backend_services)

    @property
    @pulumi.getter(name="corsPolicy")
    def cors_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionCorsPolicyArgs']]:
        """
        The specification for allowing client side cross-origin requests. Please see
        [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)
        Structure is documented below.
        """
        ...

    @cors_policy.setter
    def cors_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionCorsPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="faultInjectionPolicy")
    def fault_injection_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyArgs']]:
        """
        The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
        As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
        percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
        by the Loadbalancer for a percentage of requests.
        timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
        Structure is documented below.
        """
        ...

    @fault_injection_policy.setter
    def fault_injection_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="requestMirrorPolicy")
    def request_mirror_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionRequestMirrorPolicyArgs']]:
        """
        Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
        Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
        the host / authority header is suffixed with -shadow.
        Structure is documented below.
        """
        ...

    @request_mirror_policy.setter
    def request_mirror_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionRequestMirrorPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionRetryPolicyArgs']]:
        """
        Specifies the retry policy associated with this route.
        Structure is documented below.
        """
        ...

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionRetryPolicyArgs']]):
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionTimeoutArgs']]:
        """
        Specifies the timeout for the selected route. Timeout is computed from the time the request has been
        fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
        If not specified, will use the largest timeout among all backend services associated with the route.
        Structure is documented below.
        """
        ...

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionUrlRewriteArgs']]:
        """
        The spec to modify the URL of the request, prior to forwarding the request to the matched service.
        Structure is documented below.
        """
        ...

    @url_rewrite.setter
    def url_rewrite(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionUrlRewriteArgs']]):
        ...

    @property
    @pulumi.getter(name="weightedBackendServices")
    def weighted_backend_services(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceArgs']]]]:
        """
        A list of weighted backend services to send traffic to when a route match occurs.
        The weights determine the fraction of traffic that flows to their corresponding backend service.
        If all traffic needs to go to a single backend service, there must be one weightedBackendService
        with weight set to a non 0 number.
        Once a backendService is identified and before forwarding the request to the backend service,
        advanced routing actions like Url rewrites and header transformations are applied depending on
        additional settings specified in this HttpRouteAction.
        Structure is documented below.
        """
        ...

    @weighted_backend_services.setter
    def weighted_backend_services(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceArgs']]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionCorsPolicyArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allow_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origin_regexes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origins: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 expose_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] allow_credentials: In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
               This translates to the Access-Control-Allow-Credentials header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_headers: Specifies the content for the Access-Control-Allow-Headers header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_methods: Specifies the content for the Access-Control-Allow-Methods header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origin_regexes: Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
               please see en.cppreference.com/w/cpp/regex/ecmascript
               An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origins: Specifies the list of origins that will be allowed to do CORS requests.
               An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        :param pulumi.Input[bool] disabled: If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
        :param pulumi.Input[List[pulumi.Input[str]]] expose_headers: Specifies the content for the Access-Control-Expose-Headers header.
        :param pulumi.Input[float] max_age: Specifies how long results of a preflight request can be cached in seconds.
               This translates to the Access-Control-Max-Age header.
        """
        pulumi.set(__self__, "allowCredentials", allow_credentials)
        pulumi.set(__self__, "allowHeaders", allow_headers)
        pulumi.set(__self__, "allowMethods", allow_methods)
        pulumi.set(__self__, "allowOriginRegexes", allow_origin_regexes)
        pulumi.set(__self__, "allowOrigins", allow_origins)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "exposeHeaders", expose_headers)
        pulumi.set(__self__, "maxAge", max_age)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
        This translates to the Access-Control-Allow-Credentials header.
        """
        ...

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Headers header.
        """
        ...

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Methods header.
        """
        ...

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOriginRegexes")
    def allow_origin_regexes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
        please see en.cppreference.com/w/cpp/regex/ecmascript
        An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        """
        ...

    @allow_origin_regexes.setter
    def allow_origin_regexes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the list of origins that will be allowed to do CORS requests.
        An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        """
        ...

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
        """
        ...

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Expose-Headers header.
        """
        ...

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long results of a preflight request can be cached in seconds.
        This translates to the Access-Control-Max-Age header.
        """
        ...

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyArgs:
    def __init__(__self__, *,
                 abort: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs']] = None,
                 delay: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayArgs']] = None):
        """
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs'] abort: The specification for how client requests are aborted as part of fault injection.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayArgs'] delay: The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
               Structure is documented below.
        """
        pulumi.set(__self__, "abort", abort)
        pulumi.set(__self__, "delay", delay)

    @property
    @pulumi.getter
    def abort(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs']]:
        """
        The specification for how client requests are aborted as part of fault injection.
        Structure is documented below.
        """
        ...

    @abort.setter
    def abort(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs']]):
        ...

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayArgs']]:
        """
        The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
        Structure is documented below.
        """
        ...

    @delay.setter
    def delay(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayArgs']]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs:
    def __init__(__self__, *,
                 http_status: Optional[pulumi.Input[float]] = None,
                 percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] http_status: The HTTP status code used to abort the request.
               The value must be between 200 and 599 inclusive.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
               The value must be between 0.0 and 100.0 inclusive.
        """
        pulumi.set(__self__, "httpStatus", http_status)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> Optional[pulumi.Input[float]]:
        """
        The HTTP status code used to abort the request.
        The value must be between 200 and 599 inclusive.
        """
        ...

    @http_status.setter
    def http_status(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
        The value must be between 0.0 and 100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayArgs:
    def __init__(__self__, *,
                 fixed_delay: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs']] = None,
                 percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs'] fixed_delay: Specifies the value of the fixed delay interval.
               Structure is documented below.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
               The value must be between 0.0 and 100.0 inclusive.
        """
        pulumi.set(__self__, "fixedDelay", fixed_delay)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="fixedDelay")
    def fixed_delay(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs']]:
        """
        Specifies the value of the fixed delay interval.
        Structure is documented below.
        """
        ...

    @fixed_delay.setter
    def fixed_delay(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs']]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
        The value must be between 0.0 and 100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[float]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionRequestMirrorPolicyArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str]):
        """
        :param pulumi.Input[str] backend_service: The full or partial URL to the BackendService resource being mirrored to.
        """
        pulumi.set(__self__, "backendService", backend_service)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The full or partial URL to the BackendService resource being mirrored to.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionRetryPolicyArgs:
    def __init__(__self__, *,
                 num_retries: Optional[pulumi.Input[float]] = None,
                 per_try_timeout: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutArgs']] = None,
                 retry_conditions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[float] num_retries: Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutArgs'] per_try_timeout: Specifies a non-zero timeout per retry attempt.
               If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
               will use the largest timeout among all backend services associated with the route.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] retry_conditions: Specfies one or more conditions when this retry rule applies. Valid values are:
               5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
               or if the backend service does not respond at all, example: disconnects, reset, read timeout,
               connection failure, and refused streams.
               gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
               connect-failure: Loadbalancer will retry on failures connecting to backend services,
               for example due to connection timeouts.
               retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
               Currently the only retriable error supported is 409.
               refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
               This reset type indicates that it is safe to retry.
               cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
               deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
               resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
               unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
        """
        pulumi.set(__self__, "numRetries", num_retries)
        pulumi.set(__self__, "perTryTimeout", per_try_timeout)
        pulumi.set(__self__, "retryConditions", retry_conditions)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
        """
        ...

    @num_retries.setter
    def num_retries(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutArgs']]:
        """
        Specifies a non-zero timeout per retry attempt.
        If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
        will use the largest timeout among all backend services associated with the route.
        Structure is documented below.
        """
        ...

    @per_try_timeout.setter
    def per_try_timeout(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="retryConditions")
    def retry_conditions(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specfies one or more conditions when this retry rule applies. Valid values are:
        5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
        or if the backend service does not respond at all, example: disconnects, reset, read timeout,
        connection failure, and refused streams.
        gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
        connect-failure: Loadbalancer will retry on failures connecting to backend services,
        for example due to connection timeouts.
        retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
        Currently the only retriable error supported is 409.
        refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
        This reset type indicates that it is safe to retry.
        cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
        deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
        resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
        unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
        """
        ...

    @retry_conditions.setter
    def retry_conditions(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[float]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionTimeoutArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[float]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionUrlRewriteArgs:
    def __init__(__self__, *,
                 host_rewrite: Optional[pulumi.Input[str]] = None,
                 path_prefix_rewrite: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_rewrite: Prior to forwarding the request to the selected service, the request's host header is replaced
               with contents of hostRewrite.
               The value must be between 1 and 255 characters.
        :param pulumi.Input[str] path_prefix_rewrite: Prior to forwarding the request to the selected backend service, the matching portion of the
               request's path is replaced by pathPrefixRewrite.
               The value must be between 1 and 1024 characters.
        """
        pulumi.set(__self__, "hostRewrite", host_rewrite)
        pulumi.set(__self__, "pathPrefixRewrite", path_prefix_rewrite)

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected service, the request's host header is replaced
        with contents of hostRewrite.
        The value must be between 1 and 255 characters.
        """
        ...

    @host_rewrite.setter
    def host_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="pathPrefixRewrite")
    def path_prefix_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected backend service, the matching portion of the
        request's path is replaced by pathPrefixRewrite.
        The value must be between 1 and 1024 characters.
        """
        ...

    @path_prefix_rewrite.setter
    def path_prefix_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionWeightedBackendServiceArgs:
    def __init__(__self__, *,
                 backend_service: Optional[pulumi.Input[str]] = None,
                 header_action: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionArgs']] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] backend_service: The full or partial URL to the BackendService resource being mirrored to.
        :param pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionArgs'] header_action: Specifies changes to request and response headers that need to take effect for
               the selected backendService.
               headerAction specified here take effect before headerAction in the enclosing
               HttpRouteRule, PathMatcher and UrlMap.
               Structure is documented below.
        :param pulumi.Input[float] weight: Specifies the fraction of traffic sent to backendService, computed as
               weight / (sum of all weightedBackendService weights in routeAction) .
               The selection of a backend service is determined only for new traffic. Once a user's request
               has been directed to a backendService, subsequent requests will be sent to the same backendService
               as determined by the BackendService's session affinity policy.
               The value must be between 0 and 1000
        """
        pulumi.set(__self__, "backendService", backend_service)
        pulumi.set(__self__, "headerAction", header_action)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> Optional[pulumi.Input[str]]:
        """
        The full or partial URL to the BackendService resource being mirrored to.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="headerAction")
    def header_action(self) -> Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionArgs']]:
        """
        Specifies changes to request and response headers that need to take effect for
        the selected backendService.
        headerAction specified here take effect before headerAction in the enclosing
        HttpRouteRule, PathMatcher and UrlMap.
        Structure is documented below.
        """
        ...

    @header_action.setter
    def header_action(self, value: Optional[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionArgs']]):
        ...

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the fraction of traffic sent to backendService, computed as
        weight / (sum of all weightedBackendService weights in routeAction) .
        The selection of a backend service is determined only for new traffic. Once a user's request
        has been directed to a backendService, subsequent requests will be sent to the same backendService
        as determined by the BackendService's session affinity policy.
        The value must be between 0 and 1000
        """
        ...

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request prior to
               forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response prior to sending the
               response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request prior to
        forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response prior to sending the
        response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[bool]]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[bool]]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class URLMapPathMatcherDefaultUrlRedirectArgs:
    def __init__(__self__, *,
                 strip_query: pulumi.Input[bool],
                 host_redirect: Optional[pulumi.Input[str]] = None,
                 https_redirect: Optional[pulumi.Input[bool]] = None,
                 path_redirect: Optional[pulumi.Input[str]] = None,
                 prefix_redirect: Optional[pulumi.Input[str]] = None,
                 redirect_response_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] strip_query: If set to true, any accompanying query portion of the original URL is removed prior
               to redirecting the request. If set to false, the query portion of the original URL is
               retained. The default is set to false.
               This field is required to ensure an empty block is not set. The normal default value is false.
        :param pulumi.Input[str] host_redirect: The host that will be used in the redirect response instead of the one that was
               supplied in the request. The value must be between 1 and 255 characters.
        :param pulumi.Input[bool] https_redirect: If set to true, the URL scheme in the redirected request is set to https. If set to
               false, the URL scheme of the redirected request will remain the same as that of the
               request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
               true for TargetHttpsProxy is not permitted. The default is set to false.
        :param pulumi.Input[str] path_redirect: The path that will be used in the redirect response instead of the one that was
               supplied in the request. pathRedirect cannot be supplied together with
               prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
               original request will be used for the redirect. The value must be between 1 and 1024
               characters.
        :param pulumi.Input[str] prefix_redirect: The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
               retaining the remaining portion of the URL before redirecting the request.
               prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
               neither. If neither is supplied, the path of the original request will be used for
               the redirect. The value must be between 1 and 1024 characters.
        :param pulumi.Input[str] redirect_response_code: The HTTP Status code to use for this RedirectAction. Supported values are:
               * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
               * FOUND, which corresponds to 302.
               * SEE_OTHER which corresponds to 303.
               * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
               will be retained.
               * PERMANENT_REDIRECT, which corresponds to 308. In this case,
               the request method will be retained.
        """
        pulumi.set(__self__, "stripQuery", strip_query)
        pulumi.set(__self__, "hostRedirect", host_redirect)
        pulumi.set(__self__, "httpsRedirect", https_redirect)
        pulumi.set(__self__, "pathRedirect", path_redirect)
        pulumi.set(__self__, "prefixRedirect", prefix_redirect)
        pulumi.set(__self__, "redirectResponseCode", redirect_response_code)

    @property
    @pulumi.getter(name="stripQuery")
    def strip_query(self) -> pulumi.Input[bool]:
        """
        If set to true, any accompanying query portion of the original URL is removed prior
        to redirecting the request. If set to false, the query portion of the original URL is
        retained. The default is set to false.
        This field is required to ensure an empty block is not set. The normal default value is false.
        """
        ...

    @strip_query.setter
    def strip_query(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter(name="hostRedirect")
    def host_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The host that will be used in the redirect response instead of the one that was
        supplied in the request. The value must be between 1 and 255 characters.
        """
        ...

    @host_redirect.setter
    def host_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the URL scheme in the redirected request is set to https. If set to
        false, the URL scheme of the redirected request will remain the same as that of the
        request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
        true for TargetHttpsProxy is not permitted. The default is set to false.
        """
        ...

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="pathRedirect")
    def path_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The path that will be used in the redirect response instead of the one that was
        supplied in the request. pathRedirect cannot be supplied together with
        prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
        original request will be used for the redirect. The value must be between 1 and 1024
        characters.
        """
        ...

    @path_redirect.setter
    def path_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="prefixRedirect")
    def prefix_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        retaining the remaining portion of the URL before redirecting the request.
        prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
        neither. If neither is supplied, the path of the original request will be used for
        the redirect. The value must be between 1 and 1024 characters.
        """
        ...

    @prefix_redirect.setter
    def prefix_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Status code to use for this RedirectAction. Supported values are:
        * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
        * FOUND, which corresponds to 302.
        * SEE_OTHER which corresponds to 303.
        * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        will be retained.
        * PERMANENT_REDIRECT, which corresponds to 308. In this case,
        the request method will be retained.
        """
        ...

    @redirect_response_code.setter
    def redirect_response_code(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request prior to
               forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response prior to sending the
               response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request prior to
        forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response prior to sending the
        response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapPathMatcherHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleArgs:
    def __init__(__self__, *,
                 paths: pulumi.Input[List[pulumi.Input[str]]],
                 route_action: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionArgs']] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 url_redirect: Optional[pulumi.Input['URLMapPathMatcherPathRuleUrlRedirectArgs']] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] paths: The list of path patterns to match. Each must start with / and the only place a
               * is allowed is at the end following a /. The string fed to the path matcher
               does not include any text after the first ? or #, and those chars are not
               allowed here.
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionArgs'] route_action: In response to a matching matchRule, the load balancer performs advanced routing
               actions like URL rewrites, header transformations, etc. prior to forwarding the
               request to the selected backend. If  routeAction specifies any
               weightedBackendServices, service must not be set. Conversely if service is set,
               routeAction cannot contain any  weightedBackendServices. Only one of routeAction
               or urlRedirect must be set.
               Structure is documented below.
        :param pulumi.Input[str] service: The backend service or backend bucket link that should be matched by this test.
        :param pulumi.Input['URLMapPathMatcherPathRuleUrlRedirectArgs'] url_redirect: When this rule is matched, the request is redirected to a URL specified by
               urlRedirect. If urlRedirect is specified, service or routeAction must not be
               set.
               Structure is documented below.
        """
        pulumi.set(__self__, "paths", paths)
        pulumi.set(__self__, "routeAction", route_action)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "urlRedirect", url_redirect)

    @property
    @pulumi.getter
    def paths(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        The list of path patterns to match. Each must start with / and the only place a
        * is allowed is at the end following a /. The string fed to the path matcher
        does not include any text after the first ? or #, and those chars are not
        allowed here.
        """
        ...

    @paths.setter
    def paths(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="routeAction")
    def route_action(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionArgs']]:
        """
        In response to a matching matchRule, the load balancer performs advanced routing
        actions like URL rewrites, header transformations, etc. prior to forwarding the
        request to the selected backend. If  routeAction specifies any
        weightedBackendServices, service must not be set. Conversely if service is set,
        routeAction cannot contain any  weightedBackendServices. Only one of routeAction
        or urlRedirect must be set.
        Structure is documented below.
        """
        ...

    @route_action.setter
    def route_action(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionArgs']]):
        ...

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        The backend service or backend bucket link that should be matched by this test.
        """
        ...

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="urlRedirect")
    def url_redirect(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleUrlRedirectArgs']]:
        """
        When this rule is matched, the request is redirected to a URL specified by
        urlRedirect. If urlRedirect is specified, service or routeAction must not be
        set.
        Structure is documented below.
        """
        ...

    @url_redirect.setter
    def url_redirect(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleUrlRedirectArgs']]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionArgs:
    def __init__(__self__, *,
                 cors_policy: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs']] = None,
                 fault_injection_policy: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs']] = None,
                 request_mirror_policy: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs']] = None,
                 retry_policy: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs']] = None,
                 timeout: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionTimeoutArgs']] = None,
                 url_rewrite: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs']] = None,
                 weighted_backend_services: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs']]]] = None):
        """
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs'] cors_policy: The specification for allowing client side cross-origin requests. Please see
               [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs'] fault_injection_policy: The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
               As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
               percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
               by the Loadbalancer for a percentage of requests.
               timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs'] request_mirror_policy: Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
               Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
               the host / authority header is suffixed with -shadow.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs'] retry_policy: Specifies the retry policy associated with this route.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionTimeoutArgs'] timeout: Specifies the timeout for the selected route. Timeout is computed from the time the request has been
               fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
               If not specified, will use the largest timeout among all backend services associated with the route.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs'] url_rewrite: The spec to modify the URL of the request, prior to forwarding the request to the matched service.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs']]] weighted_backend_services: A list of weighted backend services to send traffic to when a route match occurs.
               The weights determine the fraction of traffic that flows to their corresponding backend service.
               If all traffic needs to go to a single backend service, there must be one weightedBackendService
               with weight set to a non 0 number.
               Once a backendService is identified and before forwarding the request to the backend service,
               advanced routing actions like Url rewrites and header transformations are applied depending on
               additional settings specified in this HttpRouteAction.
               Structure is documented below.
        """
        pulumi.set(__self__, "corsPolicy", cors_policy)
        pulumi.set(__self__, "faultInjectionPolicy", fault_injection_policy)
        pulumi.set(__self__, "requestMirrorPolicy", request_mirror_policy)
        pulumi.set(__self__, "retryPolicy", retry_policy)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "urlRewrite", url_rewrite)
        pulumi.set(__self__, "weightedBackendServices", weighted_backend_services)

    @property
    @pulumi.getter(name="corsPolicy")
    def cors_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs']]:
        """
        The specification for allowing client side cross-origin requests. Please see
        [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)
        Structure is documented below.
        """
        ...

    @cors_policy.setter
    def cors_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="faultInjectionPolicy")
    def fault_injection_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs']]:
        """
        The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
        As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
        percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
        by the Loadbalancer for a percentage of requests.
        timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
        Structure is documented below.
        """
        ...

    @fault_injection_policy.setter
    def fault_injection_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="requestMirrorPolicy")
    def request_mirror_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs']]:
        """
        Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
        Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
        the host / authority header is suffixed with -shadow.
        Structure is documented below.
        """
        ...

    @request_mirror_policy.setter
    def request_mirror_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs']]:
        """
        Specifies the retry policy associated with this route.
        Structure is documented below.
        """
        ...

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs']]):
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionTimeoutArgs']]:
        """
        Specifies the timeout for the selected route. Timeout is computed from the time the request has been
        fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
        If not specified, will use the largest timeout among all backend services associated with the route.
        Structure is documented below.
        """
        ...

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs']]:
        """
        The spec to modify the URL of the request, prior to forwarding the request to the matched service.
        Structure is documented below.
        """
        ...

    @url_rewrite.setter
    def url_rewrite(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs']]):
        ...

    @property
    @pulumi.getter(name="weightedBackendServices")
    def weighted_backend_services(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs']]]]:
        """
        A list of weighted backend services to send traffic to when a route match occurs.
        The weights determine the fraction of traffic that flows to their corresponding backend service.
        If all traffic needs to go to a single backend service, there must be one weightedBackendService
        with weight set to a non 0 number.
        Once a backendService is identified and before forwarding the request to the backend service,
        advanced routing actions like Url rewrites and header transformations are applied depending on
        additional settings specified in this HttpRouteAction.
        Structure is documented below.
        """
        ...

    @weighted_backend_services.setter
    def weighted_backend_services(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs']]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs:
    def __init__(__self__, *,
                 disabled: pulumi.Input[bool],
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allow_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origin_regexes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origins: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 expose_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] disabled: If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
        :param pulumi.Input[bool] allow_credentials: In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
               This translates to the Access-Control-Allow-Credentials header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_headers: Specifies the content for the Access-Control-Allow-Headers header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_methods: Specifies the content for the Access-Control-Allow-Methods header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origin_regexes: Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
               please see en.cppreference.com/w/cpp/regex/ecmascript
               An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origins: Specifies the list of origins that will be allowed to do CORS requests.
               An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        :param pulumi.Input[List[pulumi.Input[str]]] expose_headers: Specifies the content for the Access-Control-Expose-Headers header.
        :param pulumi.Input[float] max_age: Specifies how long results of a preflight request can be cached in seconds.
               This translates to the Access-Control-Max-Age header.
        """
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "allowCredentials", allow_credentials)
        pulumi.set(__self__, "allowHeaders", allow_headers)
        pulumi.set(__self__, "allowMethods", allow_methods)
        pulumi.set(__self__, "allowOriginRegexes", allow_origin_regexes)
        pulumi.set(__self__, "allowOrigins", allow_origins)
        pulumi.set(__self__, "exposeHeaders", expose_headers)
        pulumi.set(__self__, "maxAge", max_age)

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Input[bool]:
        """
        If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
        """
        ...

    @disabled.setter
    def disabled(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
        This translates to the Access-Control-Allow-Credentials header.
        """
        ...

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Headers header.
        """
        ...

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Methods header.
        """
        ...

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOriginRegexes")
    def allow_origin_regexes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
        please see en.cppreference.com/w/cpp/regex/ecmascript
        An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        """
        ...

    @allow_origin_regexes.setter
    def allow_origin_regexes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the list of origins that will be allowed to do CORS requests.
        An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        """
        ...

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Expose-Headers header.
        """
        ...

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long results of a preflight request can be cached in seconds.
        This translates to the Access-Control-Max-Age header.
        """
        ...

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs:
    def __init__(__self__, *,
                 abort: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs']] = None,
                 delay: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs']] = None):
        """
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs'] abort: The specification for how client requests are aborted as part of fault injection.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs'] delay: The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
               Structure is documented below.
        """
        pulumi.set(__self__, "abort", abort)
        pulumi.set(__self__, "delay", delay)

    @property
    @pulumi.getter
    def abort(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs']]:
        """
        The specification for how client requests are aborted as part of fault injection.
        Structure is documented below.
        """
        ...

    @abort.setter
    def abort(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs']]):
        ...

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs']]:
        """
        The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
        Structure is documented below.
        """
        ...

    @delay.setter
    def delay(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs']]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs:
    def __init__(__self__, *,
                 http_status: pulumi.Input[float],
                 percentage: pulumi.Input[float]):
        """
        :param pulumi.Input[float] http_status: The HTTP status code used to abort the request.
               The value must be between 200 and 599 inclusive.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
               The value must be between 0.0 and 100.0 inclusive.
        """
        pulumi.set(__self__, "httpStatus", http_status)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> pulumi.Input[float]:
        """
        The HTTP status code used to abort the request.
        The value must be between 200 and 599 inclusive.
        """
        ...

    @http_status.setter
    def http_status(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[float]:
        """
        The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
        The value must be between 0.0 and 100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs:
    def __init__(__self__, *,
                 fixed_delay: pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs'],
                 percentage: pulumi.Input[float]):
        """
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs'] fixed_delay: Specifies the value of the fixed delay interval.
               Structure is documented below.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
               The value must be between 0.0 and 100.0 inclusive.
        """
        pulumi.set(__self__, "fixedDelay", fixed_delay)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="fixedDelay")
    def fixed_delay(self) -> pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']:
        """
        Specifies the value of the fixed delay interval.
        Structure is documented below.
        """
        ...

    @fixed_delay.setter
    def fixed_delay(self, value: pulumi.Input['URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[float]:
        """
        The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
        The value must be between 0.0 and 100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str]):
        """
        :param pulumi.Input[str] backend_service: The full or partial URL to the BackendService resource being mirrored to.
        """
        pulumi.set(__self__, "backendService", backend_service)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The full or partial URL to the BackendService resource being mirrored to.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs:
    def __init__(__self__, *,
                 num_retries: Optional[pulumi.Input[float]] = None,
                 per_try_timeout: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs']] = None,
                 retry_conditions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[float] num_retries: Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs'] per_try_timeout: Specifies a non-zero timeout per retry attempt.
               If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
               will use the largest timeout among all backend services associated with the route.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] retry_conditions: Specfies one or more conditions when this retry rule applies. Valid values are:
               5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
               or if the backend service does not respond at all, example: disconnects, reset, read timeout,
               connection failure, and refused streams.
               gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
               connect-failure: Loadbalancer will retry on failures connecting to backend services,
               for example due to connection timeouts.
               retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
               Currently the only retriable error supported is 409.
               refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
               This reset type indicates that it is safe to retry.
               cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
               deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
               resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
               unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
        """
        pulumi.set(__self__, "numRetries", num_retries)
        pulumi.set(__self__, "perTryTimeout", per_try_timeout)
        pulumi.set(__self__, "retryConditions", retry_conditions)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
        """
        ...

    @num_retries.setter
    def num_retries(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs']]:
        """
        Specifies a non-zero timeout per retry attempt.
        If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
        will use the largest timeout among all backend services associated with the route.
        Structure is documented below.
        """
        ...

    @per_try_timeout.setter
    def per_try_timeout(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="retryConditions")
    def retry_conditions(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specfies one or more conditions when this retry rule applies. Valid values are:
        5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
        or if the backend service does not respond at all, example: disconnects, reset, read timeout,
        connection failure, and refused streams.
        gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
        connect-failure: Loadbalancer will retry on failures connecting to backend services,
        for example due to connection timeouts.
        retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
        Currently the only retriable error supported is 409.
        refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
        This reset type indicates that it is safe to retry.
        cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
        deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
        resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
        unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
        """
        ...

    @retry_conditions.setter
    def retry_conditions(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs:
    def __init__(__self__, *,
                 host_rewrite: Optional[pulumi.Input[str]] = None,
                 path_prefix_rewrite: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_rewrite: Prior to forwarding the request to the selected service, the request's host header is replaced
               with contents of hostRewrite.
               The value must be between 1 and 255 characters.
        :param pulumi.Input[str] path_prefix_rewrite: Prior to forwarding the request to the selected backend service, the matching portion of the
               request's path is replaced by pathPrefixRewrite.
               The value must be between 1 and 1024 characters.
        """
        pulumi.set(__self__, "hostRewrite", host_rewrite)
        pulumi.set(__self__, "pathPrefixRewrite", path_prefix_rewrite)

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected service, the request's host header is replaced
        with contents of hostRewrite.
        The value must be between 1 and 255 characters.
        """
        ...

    @host_rewrite.setter
    def host_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="pathPrefixRewrite")
    def path_prefix_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected backend service, the matching portion of the
        request's path is replaced by pathPrefixRewrite.
        The value must be between 1 and 1024 characters.
        """
        ...

    @path_prefix_rewrite.setter
    def path_prefix_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str],
                 weight: pulumi.Input[float],
                 header_action: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs']] = None):
        """
        :param pulumi.Input[str] backend_service: The full or partial URL to the BackendService resource being mirrored to.
        :param pulumi.Input[float] weight: Specifies the fraction of traffic sent to backendService, computed as
               weight / (sum of all weightedBackendService weights in routeAction) .
               The selection of a backend service is determined only for new traffic. Once a user's request
               has been directed to a backendService, subsequent requests will be sent to the same backendService
               as determined by the BackendService's session affinity policy.
               The value must be between 0 and 1000
        :param pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs'] header_action: Specifies changes to request and response headers that need to take effect for
               the selected backendService.
               headerAction specified here take effect before headerAction in the enclosing
               HttpRouteRule, PathMatcher and UrlMap.
               Structure is documented below.
        """
        pulumi.set(__self__, "backendService", backend_service)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "headerAction", header_action)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The full or partial URL to the BackendService resource being mirrored to.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[float]:
        """
        Specifies the fraction of traffic sent to backendService, computed as
        weight / (sum of all weightedBackendService weights in routeAction) .
        The selection of a backend service is determined only for new traffic. Once a user's request
        has been directed to a backendService, subsequent requests will be sent to the same backendService
        as determined by the BackendService's session affinity policy.
        The value must be between 0 and 1000
        """
        ...

    @weight.setter
    def weight(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="headerAction")
    def header_action(self) -> Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs']]:
        """
        Specifies changes to request and response headers that need to take effect for
        the selected backendService.
        headerAction specified here take effect before headerAction in the enclosing
        HttpRouteRule, PathMatcher and UrlMap.
        Structure is documented below.
        """
        ...

    @header_action.setter
    def header_action(self, value: Optional[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs']]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request prior to
               forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response prior to sending the
               response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request prior to
        forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response prior to sending the
        response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapPathMatcherPathRuleUrlRedirectArgs:
    def __init__(__self__, *,
                 strip_query: pulumi.Input[bool],
                 host_redirect: Optional[pulumi.Input[str]] = None,
                 https_redirect: Optional[pulumi.Input[bool]] = None,
                 path_redirect: Optional[pulumi.Input[str]] = None,
                 prefix_redirect: Optional[pulumi.Input[str]] = None,
                 redirect_response_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] strip_query: If set to true, any accompanying query portion of the original URL is removed prior
               to redirecting the request. If set to false, the query portion of the original URL is
               retained. The default is set to false.
               This field is required to ensure an empty block is not set. The normal default value is false.
        :param pulumi.Input[str] host_redirect: The host that will be used in the redirect response instead of the one that was
               supplied in the request. The value must be between 1 and 255 characters.
        :param pulumi.Input[bool] https_redirect: If set to true, the URL scheme in the redirected request is set to https. If set to
               false, the URL scheme of the redirected request will remain the same as that of the
               request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
               true for TargetHttpsProxy is not permitted. The default is set to false.
        :param pulumi.Input[str] path_redirect: The path that will be used in the redirect response instead of the one that was
               supplied in the request. pathRedirect cannot be supplied together with
               prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
               original request will be used for the redirect. The value must be between 1 and 1024
               characters.
        :param pulumi.Input[str] prefix_redirect: The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
               retaining the remaining portion of the URL before redirecting the request.
               prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
               neither. If neither is supplied, the path of the original request will be used for
               the redirect. The value must be between 1 and 1024 characters.
        :param pulumi.Input[str] redirect_response_code: The HTTP Status code to use for this RedirectAction. Supported values are:
               * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
               * FOUND, which corresponds to 302.
               * SEE_OTHER which corresponds to 303.
               * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
               will be retained.
               * PERMANENT_REDIRECT, which corresponds to 308. In this case,
               the request method will be retained.
        """
        pulumi.set(__self__, "stripQuery", strip_query)
        pulumi.set(__self__, "hostRedirect", host_redirect)
        pulumi.set(__self__, "httpsRedirect", https_redirect)
        pulumi.set(__self__, "pathRedirect", path_redirect)
        pulumi.set(__self__, "prefixRedirect", prefix_redirect)
        pulumi.set(__self__, "redirectResponseCode", redirect_response_code)

    @property
    @pulumi.getter(name="stripQuery")
    def strip_query(self) -> pulumi.Input[bool]:
        """
        If set to true, any accompanying query portion of the original URL is removed prior
        to redirecting the request. If set to false, the query portion of the original URL is
        retained. The default is set to false.
        This field is required to ensure an empty block is not set. The normal default value is false.
        """
        ...

    @strip_query.setter
    def strip_query(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter(name="hostRedirect")
    def host_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The host that will be used in the redirect response instead of the one that was
        supplied in the request. The value must be between 1 and 255 characters.
        """
        ...

    @host_redirect.setter
    def host_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the URL scheme in the redirected request is set to https. If set to
        false, the URL scheme of the redirected request will remain the same as that of the
        request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
        true for TargetHttpsProxy is not permitted. The default is set to false.
        """
        ...

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="pathRedirect")
    def path_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The path that will be used in the redirect response instead of the one that was
        supplied in the request. pathRedirect cannot be supplied together with
        prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
        original request will be used for the redirect. The value must be between 1 and 1024
        characters.
        """
        ...

    @path_redirect.setter
    def path_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="prefixRedirect")
    def prefix_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        retaining the remaining portion of the URL before redirecting the request.
        prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
        neither. If neither is supplied, the path of the original request will be used for
        the redirect. The value must be between 1 and 1024 characters.
        """
        ...

    @prefix_redirect.setter
    def prefix_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Status code to use for this RedirectAction. Supported values are:
        * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
        * FOUND, which corresponds to 302.
        * SEE_OTHER which corresponds to 303.
        * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        will be retained.
        * PERMANENT_REDIRECT, which corresponds to 308. In this case,
        the request method will be retained.
        """
        ...

    @redirect_response_code.setter
    def redirect_response_code(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleArgs:
    def __init__(__self__, *,
                 priority: pulumi.Input[float],
                 header_action: Optional[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionArgs']] = None,
                 match_rules: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleArgs']]]] = None,
                 route_action: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionArgs']] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 url_redirect: Optional[pulumi.Input['URLMapPathMatcherRouteRuleUrlRedirectArgs']] = None):
        """
        :param pulumi.Input[float] priority: For routeRules within a given pathMatcher, priority determines the order
               in which load balancer will interpret routeRules. RouteRules are evaluated
               in order of priority, from the lowest to highest number. The priority of
               a rule decreases as its number increases (1, 2, 3, N+1). The first rule
               that matches the request is applied.
               You cannot configure two or more routeRules with the same priority.
               Priority for each rule must be set to a number between 0 and
               2147483647 inclusive.
               Priority numbers can have gaps, which enable you to add or remove rules
               in the future without affecting the rest of the rules. For example,
               1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
               you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
               future without any impact on existing rules.
        :param pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionArgs'] header_action: Specifies changes to request and response headers that need to take effect for
               the selected backendService.
               headerAction specified here take effect before headerAction in the enclosing
               HttpRouteRule, PathMatcher and UrlMap.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleArgs']]] match_rules: The rules for determining a match.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionArgs'] route_action: In response to a matching matchRule, the load balancer performs advanced routing
               actions like URL rewrites, header transformations, etc. prior to forwarding the
               request to the selected backend. If  routeAction specifies any
               weightedBackendServices, service must not be set. Conversely if service is set,
               routeAction cannot contain any  weightedBackendServices. Only one of routeAction
               or urlRedirect must be set.
               Structure is documented below.
        :param pulumi.Input[str] service: The backend service or backend bucket link that should be matched by this test.
        :param pulumi.Input['URLMapPathMatcherRouteRuleUrlRedirectArgs'] url_redirect: When this rule is matched, the request is redirected to a URL specified by
               urlRedirect. If urlRedirect is specified, service or routeAction must not be
               set.
               Structure is documented below.
        """
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "headerAction", header_action)
        pulumi.set(__self__, "matchRules", match_rules)
        pulumi.set(__self__, "routeAction", route_action)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "urlRedirect", url_redirect)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[float]:
        """
        For routeRules within a given pathMatcher, priority determines the order
        in which load balancer will interpret routeRules. RouteRules are evaluated
        in order of priority, from the lowest to highest number. The priority of
        a rule decreases as its number increases (1, 2, 3, N+1). The first rule
        that matches the request is applied.
        You cannot configure two or more routeRules with the same priority.
        Priority for each rule must be set to a number between 0 and
        2147483647 inclusive.
        Priority numbers can have gaps, which enable you to add or remove rules
        in the future without affecting the rest of the rules. For example,
        1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
        you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
        future without any impact on existing rules.
        """
        ...

    @priority.setter
    def priority(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="headerAction")
    def header_action(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionArgs']]:
        """
        Specifies changes to request and response headers that need to take effect for
        the selected backendService.
        headerAction specified here take effect before headerAction in the enclosing
        HttpRouteRule, PathMatcher and UrlMap.
        Structure is documented below.
        """
        ...

    @header_action.setter
    def header_action(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionArgs']]):
        ...

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleArgs']]]]:
        """
        The rules for determining a match.
        Structure is documented below.
        """
        ...

    @match_rules.setter
    def match_rules(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleArgs']]]]):
        ...

    @property
    @pulumi.getter(name="routeAction")
    def route_action(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionArgs']]:
        """
        In response to a matching matchRule, the load balancer performs advanced routing
        actions like URL rewrites, header transformations, etc. prior to forwarding the
        request to the selected backend. If  routeAction specifies any
        weightedBackendServices, service must not be set. Conversely if service is set,
        routeAction cannot contain any  weightedBackendServices. Only one of routeAction
        or urlRedirect must be set.
        Structure is documented below.
        """
        ...

    @route_action.setter
    def route_action(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionArgs']]):
        ...

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        The backend service or backend bucket link that should be matched by this test.
        """
        ...

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="urlRedirect")
    def url_redirect(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleUrlRedirectArgs']]:
        """
        When this rule is matched, the request is redirected to a URL specified by
        urlRedirect. If urlRedirect is specified, service or routeAction must not be
        set.
        Structure is documented below.
        """
        ...

    @url_redirect.setter
    def url_redirect(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleUrlRedirectArgs']]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request prior to
               forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response prior to sending the
               response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request prior to
        forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response prior to sending the
        response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleMatchRuleArgs:
    def __init__(__self__, *,
                 full_path_match: Optional[pulumi.Input[str]] = None,
                 header_matches: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs']]]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 metadata_filters: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs']]]] = None,
                 prefix_match: Optional[pulumi.Input[str]] = None,
                 query_parameter_matches: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs']]]] = None,
                 regex_match: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] full_path_match: For satifying the matchRule condition, the path of the request must exactly
               match the value specified in fullPathMatch after removing any query parameters
               and anchor that may be part of the original URL. FullPathMatch must be between 1
               and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
               be specified.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs']]] header_matches: Specifies a list of header match criteria, all of which must match corresponding
               headers in the request.
               Structure is documented below.
        :param pulumi.Input[bool] ignore_case: Specifies that prefixMatch and fullPathMatch matches are case sensitive.
               Defaults to false.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs']]] metadata_filters: Opaque filter criteria used by Loadbalancer to restrict routing configuration to
               a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
               clients present node metadata. If a match takes place, the relevant routing
               configuration is made available to those proxies. For each metadataFilter in
               this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
               filterLabels must match the corresponding label provided in the metadata. If its
               filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
               with corresponding labels in the provided metadata. metadataFilters specified
               here can be overrides those specified in ForwardingRule that refers to this
               UrlMap. metadataFilters only applies to Loadbalancers that have their
               loadBalancingScheme set to INTERNAL_SELF_MANAGED.
               Structure is documented below.
        :param pulumi.Input[str] prefix_match: The value of the header must start with the contents of prefixMatch. Only one of
               exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
               must be set.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs']]] query_parameter_matches: Specifies a list of query parameter match criteria, all of which must match
               corresponding query parameters in the request.
               Structure is documented below.
        :param pulumi.Input[str] regex_match: The queryParameterMatch matches if the value of the parameter matches the
               regular expression specified by regexMatch. For the regular expression grammar,
               please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
               exactMatch and regexMatch must be set.
        """
        pulumi.set(__self__, "fullPathMatch", full_path_match)
        pulumi.set(__self__, "headerMatches", header_matches)
        pulumi.set(__self__, "ignoreCase", ignore_case)
        pulumi.set(__self__, "metadataFilters", metadata_filters)
        pulumi.set(__self__, "prefixMatch", prefix_match)
        pulumi.set(__self__, "queryParameterMatches", query_parameter_matches)
        pulumi.set(__self__, "regexMatch", regex_match)

    @property
    @pulumi.getter(name="fullPathMatch")
    def full_path_match(self) -> Optional[pulumi.Input[str]]:
        """
        For satifying the matchRule condition, the path of the request must exactly
        match the value specified in fullPathMatch after removing any query parameters
        and anchor that may be part of the original URL. FullPathMatch must be between 1
        and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
        be specified.
        """
        ...

    @full_path_match.setter
    def full_path_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="headerMatches")
    def header_matches(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs']]]]:
        """
        Specifies a list of header match criteria, all of which must match corresponding
        headers in the request.
        Structure is documented below.
        """
        ...

    @header_matches.setter
    def header_matches(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs']]]]):
        ...

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies that prefixMatch and fullPathMatch matches are case sensitive.
        Defaults to false.
        """
        ...

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="metadataFilters")
    def metadata_filters(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs']]]]:
        """
        Opaque filter criteria used by Loadbalancer to restrict routing configuration to
        a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
        clients present node metadata. If a match takes place, the relevant routing
        configuration is made available to those proxies. For each metadataFilter in
        this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
        filterLabels must match the corresponding label provided in the metadata. If its
        filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
        with corresponding labels in the provided metadata. metadataFilters specified
        here can be overrides those specified in ForwardingRule that refers to this
        UrlMap. metadataFilters only applies to Loadbalancers that have their
        loadBalancingScheme set to INTERNAL_SELF_MANAGED.
        Structure is documented below.
        """
        ...

    @metadata_filters.setter
    def metadata_filters(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs']]]]):
        ...

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header must start with the contents of prefixMatch. Only one of
        exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        must be set.
        """
        ...

    @prefix_match.setter
    def prefix_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="queryParameterMatches")
    def query_parameter_matches(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs']]]]:
        """
        Specifies a list of query parameter match criteria, all of which must match
        corresponding query parameters in the request.
        Structure is documented below.
        """
        ...

    @query_parameter_matches.setter
    def query_parameter_matches(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs']]]]):
        ...

    @property
    @pulumi.getter(name="regexMatch")
    def regex_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter matches the
        regular expression specified by regexMatch. For the regular expression grammar,
        please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
        exactMatch and regexMatch must be set.
        """
        ...

    @regex_match.setter
    def regex_match(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 exact_match: Optional[pulumi.Input[str]] = None,
                 invert_match: Optional[pulumi.Input[bool]] = None,
                 prefix_match: Optional[pulumi.Input[str]] = None,
                 present_match: Optional[pulumi.Input[bool]] = None,
                 range_match: Optional[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs']] = None,
                 regex_match: Optional[pulumi.Input[str]] = None,
                 suffix_match: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] exact_match: The queryParameterMatch matches if the value of the parameter exactly matches
               the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
               must be set.
        :param pulumi.Input[bool] invert_match: If set to false, the headerMatch is considered a match if the match criteria
               above are met. If set to true, the headerMatch is considered a match if the
               match criteria above are NOT met. Defaults to false.
        :param pulumi.Input[str] prefix_match: The value of the header must start with the contents of prefixMatch. Only one of
               exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
               must be set.
        :param pulumi.Input[bool] present_match: Specifies that the queryParameterMatch matches if the request contains the query
               parameter, irrespective of whether the parameter has a value or not. Only one of
               presentMatch, exactMatch and regexMatch must be set.
        :param pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs'] range_match: The header value must be an integer and its value must be in the range specified
               in rangeMatch. If the header does not contain an integer, number or is empty,
               the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
               not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
               exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
               must be set.
               Structure is documented below.
        :param pulumi.Input[str] regex_match: The queryParameterMatch matches if the value of the parameter matches the
               regular expression specified by regexMatch. For the regular expression grammar,
               please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
               exactMatch and regexMatch must be set.
        :param pulumi.Input[str] suffix_match: The value of the header must end with the contents of suffixMatch. Only one of
               exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
               must be set.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "exactMatch", exact_match)
        pulumi.set(__self__, "invertMatch", invert_match)
        pulumi.set(__self__, "prefixMatch", prefix_match)
        pulumi.set(__self__, "presentMatch", present_match)
        pulumi.set(__self__, "rangeMatch", range_match)
        pulumi.set(__self__, "regexMatch", regex_match)
        pulumi.set(__self__, "suffixMatch", suffix_match)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter exactly matches
        the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
        must be set.
        """
        ...

    @exact_match.setter
    def exact_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="invertMatch")
    def invert_match(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to false, the headerMatch is considered a match if the match criteria
        above are met. If set to true, the headerMatch is considered a match if the
        match criteria above are NOT met. Defaults to false.
        """
        ...

    @invert_match.setter
    def invert_match(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header must start with the contents of prefixMatch. Only one of
        exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        must be set.
        """
        ...

    @prefix_match.setter
    def prefix_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="presentMatch")
    def present_match(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies that the queryParameterMatch matches if the request contains the query
        parameter, irrespective of whether the parameter has a value or not. Only one of
        presentMatch, exactMatch and regexMatch must be set.
        """
        ...

    @present_match.setter
    def present_match(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="rangeMatch")
    def range_match(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs']]:
        """
        The header value must be an integer and its value must be in the range specified
        in rangeMatch. If the header does not contain an integer, number or is empty,
        the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
        not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
        exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        must be set.
        Structure is documented below.
        """
        ...

    @range_match.setter
    def range_match(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs']]):
        ...

    @property
    @pulumi.getter(name="regexMatch")
    def regex_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter matches the
        regular expression specified by regexMatch. For the regular expression grammar,
        please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
        exactMatch and regexMatch must be set.
        """
        ...

    @regex_match.setter
    def regex_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="suffixMatch")
    def suffix_match(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header must end with the contents of suffixMatch. Only one of
        exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        must be set.
        """
        ...

    @suffix_match.setter
    def suffix_match(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs:
    def __init__(__self__, *,
                 range_end: pulumi.Input[float],
                 range_start: pulumi.Input[float]):
        """
        :param pulumi.Input[float] range_end: The end of the range (exclusive).
        :param pulumi.Input[float] range_start: The start of the range (inclusive).
        """
        pulumi.set(__self__, "rangeEnd", range_end)
        pulumi.set(__self__, "rangeStart", range_start)

    @property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> pulumi.Input[float]:
        """
        The end of the range (exclusive).
        """
        ...

    @range_end.setter
    def range_end(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> pulumi.Input[float]:
        """
        The start of the range (inclusive).
        """
        ...

    @range_start.setter
    def range_start(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs:
    def __init__(__self__, *,
                 filter_labels: pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs']]],
                 filter_match_criteria: pulumi.Input[str]):
        """
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs']]] filter_labels: The list of label value pairs that must match labels in the provided metadata
               based on filterMatchCriteria  This list must not be empty and can have at the
               most 64 entries.
               Structure is documented below.
        :param pulumi.Input[str] filter_match_criteria: Specifies how individual filterLabel matches within the list of filterLabels
               contribute towards the overall metadataFilter match. Supported values are:
               - MATCH_ANY: At least one of the filterLabels must have a matching label in the
               provided metadata.
               - MATCH_ALL: All filterLabels must have matching labels in
               the provided metadata.
               Possible values are `MATCH_ALL` and `MATCH_ANY`.
        """
        pulumi.set(__self__, "filterLabels", filter_labels)
        pulumi.set(__self__, "filterMatchCriteria", filter_match_criteria)

    @property
    @pulumi.getter(name="filterLabels")
    def filter_labels(self) -> pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs']]]:
        """
        The list of label value pairs that must match labels in the provided metadata
        based on filterMatchCriteria  This list must not be empty and can have at the
        most 64 entries.
        Structure is documented below.
        """
        ...

    @filter_labels.setter
    def filter_labels(self, value: pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs']]]):
        ...

    @property
    @pulumi.getter(name="filterMatchCriteria")
    def filter_match_criteria(self) -> pulumi.Input[str]:
        """
        Specifies how individual filterLabel matches within the list of filterLabels
        contribute towards the overall metadataFilter match. Supported values are:
        - MATCH_ANY: At least one of the filterLabels must have a matching label in the
        provided metadata.
        - MATCH_ALL: All filterLabels must have matching labels in
        the provided metadata.
        Possible values are `MATCH_ALL` and `MATCH_ANY`.
        """
        ...

    @filter_match_criteria.setter
    def filter_match_criteria(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the query parameter to match. The query parameter must exist in the
               request, in the absence of which the request match fails.
        :param pulumi.Input[str] value: The value of the label must match the specified value. value can have a maximum
               length of 1024 characters.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the query parameter to match. The query parameter must exist in the
        request, in the absence of which the request match fails.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the label must match the specified value. value can have a maximum
        length of 1024 characters.
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 exact_match: Optional[pulumi.Input[str]] = None,
                 present_match: Optional[pulumi.Input[bool]] = None,
                 regex_match: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the query parameter to match. The query parameter must exist in the
               request, in the absence of which the request match fails.
        :param pulumi.Input[str] exact_match: The queryParameterMatch matches if the value of the parameter exactly matches
               the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
               must be set.
        :param pulumi.Input[bool] present_match: Specifies that the queryParameterMatch matches if the request contains the query
               parameter, irrespective of whether the parameter has a value or not. Only one of
               presentMatch, exactMatch and regexMatch must be set.
        :param pulumi.Input[str] regex_match: The queryParameterMatch matches if the value of the parameter matches the
               regular expression specified by regexMatch. For the regular expression grammar,
               please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
               exactMatch and regexMatch must be set.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "exactMatch", exact_match)
        pulumi.set(__self__, "presentMatch", present_match)
        pulumi.set(__self__, "regexMatch", regex_match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the query parameter to match. The query parameter must exist in the
        request, in the absence of which the request match fails.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter exactly matches
        the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
        must be set.
        """
        ...

    @exact_match.setter
    def exact_match(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="presentMatch")
    def present_match(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies that the queryParameterMatch matches if the request contains the query
        parameter, irrespective of whether the parameter has a value or not. Only one of
        presentMatch, exactMatch and regexMatch must be set.
        """
        ...

    @present_match.setter
    def present_match(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="regexMatch")
    def regex_match(self) -> Optional[pulumi.Input[str]]:
        """
        The queryParameterMatch matches if the value of the parameter matches the
        regular expression specified by regexMatch. For the regular expression grammar,
        please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
        exactMatch and regexMatch must be set.
        """
        ...

    @regex_match.setter
    def regex_match(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionArgs:
    def __init__(__self__, *,
                 cors_policy: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs']] = None,
                 fault_injection_policy: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs']] = None,
                 request_mirror_policy: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs']] = None,
                 retry_policy: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs']] = None,
                 timeout: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionTimeoutArgs']] = None,
                 url_rewrite: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs']] = None,
                 weighted_backend_services: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs']]]] = None):
        """
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs'] cors_policy: The specification for allowing client side cross-origin requests. Please see
               [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs'] fault_injection_policy: The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
               As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
               percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
               by the Loadbalancer for a percentage of requests.
               timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs'] request_mirror_policy: Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
               Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
               the host / authority header is suffixed with -shadow.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs'] retry_policy: Specifies the retry policy associated with this route.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionTimeoutArgs'] timeout: Specifies the timeout for the selected route. Timeout is computed from the time the request has been
               fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
               If not specified, will use the largest timeout among all backend services associated with the route.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs'] url_rewrite: The spec to modify the URL of the request, prior to forwarding the request to the matched service.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs']]] weighted_backend_services: A list of weighted backend services to send traffic to when a route match occurs.
               The weights determine the fraction of traffic that flows to their corresponding backend service.
               If all traffic needs to go to a single backend service, there must be one weightedBackendService
               with weight set to a non 0 number.
               Once a backendService is identified and before forwarding the request to the backend service,
               advanced routing actions like Url rewrites and header transformations are applied depending on
               additional settings specified in this HttpRouteAction.
               Structure is documented below.
        """
        pulumi.set(__self__, "corsPolicy", cors_policy)
        pulumi.set(__self__, "faultInjectionPolicy", fault_injection_policy)
        pulumi.set(__self__, "requestMirrorPolicy", request_mirror_policy)
        pulumi.set(__self__, "retryPolicy", retry_policy)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "urlRewrite", url_rewrite)
        pulumi.set(__self__, "weightedBackendServices", weighted_backend_services)

    @property
    @pulumi.getter(name="corsPolicy")
    def cors_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs']]:
        """
        The specification for allowing client side cross-origin requests. Please see
        [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)
        Structure is documented below.
        """
        ...

    @cors_policy.setter
    def cors_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="faultInjectionPolicy")
    def fault_injection_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs']]:
        """
        The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
        As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
        percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
        by the Loadbalancer for a percentage of requests.
        timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
        Structure is documented below.
        """
        ...

    @fault_injection_policy.setter
    def fault_injection_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="requestMirrorPolicy")
    def request_mirror_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs']]:
        """
        Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
        Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
        the host / authority header is suffixed with -shadow.
        Structure is documented below.
        """
        ...

    @request_mirror_policy.setter
    def request_mirror_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs']]):
        ...

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs']]:
        """
        Specifies the retry policy associated with this route.
        Structure is documented below.
        """
        ...

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs']]):
        ...

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionTimeoutArgs']]:
        """
        Specifies the timeout for the selected route. Timeout is computed from the time the request has been
        fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
        If not specified, will use the largest timeout among all backend services associated with the route.
        Structure is documented below.
        """
        ...

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs']]:
        """
        The spec to modify the URL of the request, prior to forwarding the request to the matched service.
        Structure is documented below.
        """
        ...

    @url_rewrite.setter
    def url_rewrite(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs']]):
        ...

    @property
    @pulumi.getter(name="weightedBackendServices")
    def weighted_backend_services(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs']]]]:
        """
        A list of weighted backend services to send traffic to when a route match occurs.
        The weights determine the fraction of traffic that flows to their corresponding backend service.
        If all traffic needs to go to a single backend service, there must be one weightedBackendService
        with weight set to a non 0 number.
        Once a backendService is identified and before forwarding the request to the backend service,
        advanced routing actions like Url rewrites and header transformations are applied depending on
        additional settings specified in this HttpRouteAction.
        Structure is documented below.
        """
        ...

    @weighted_backend_services.setter
    def weighted_backend_services(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs']]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allow_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origin_regexes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allow_origins: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 expose_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] allow_credentials: In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
               This translates to the Access-Control-Allow-Credentials header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_headers: Specifies the content for the Access-Control-Allow-Headers header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_methods: Specifies the content for the Access-Control-Allow-Methods header.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origin_regexes: Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
               please see en.cppreference.com/w/cpp/regex/ecmascript
               An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        :param pulumi.Input[List[pulumi.Input[str]]] allow_origins: Specifies the list of origins that will be allowed to do CORS requests.
               An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        :param pulumi.Input[bool] disabled: If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
        :param pulumi.Input[List[pulumi.Input[str]]] expose_headers: Specifies the content for the Access-Control-Expose-Headers header.
        :param pulumi.Input[float] max_age: Specifies how long results of a preflight request can be cached in seconds.
               This translates to the Access-Control-Max-Age header.
        """
        pulumi.set(__self__, "allowCredentials", allow_credentials)
        pulumi.set(__self__, "allowHeaders", allow_headers)
        pulumi.set(__self__, "allowMethods", allow_methods)
        pulumi.set(__self__, "allowOriginRegexes", allow_origin_regexes)
        pulumi.set(__self__, "allowOrigins", allow_origins)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "exposeHeaders", expose_headers)
        pulumi.set(__self__, "maxAge", max_age)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
        This translates to the Access-Control-Allow-Credentials header.
        """
        ...

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Headers header.
        """
        ...

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Allow-Methods header.
        """
        ...

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOriginRegexes")
    def allow_origin_regexes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
        please see en.cppreference.com/w/cpp/regex/ecmascript
        An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        """
        ...

    @allow_origin_regexes.setter
    def allow_origin_regexes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the list of origins that will be allowed to do CORS requests.
        An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
        """
        ...

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
        """
        ...

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies the content for the Access-Control-Expose-Headers header.
        """
        ...

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long results of a preflight request can be cached in seconds.
        This translates to the Access-Control-Max-Age header.
        """
        ...

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs:
    def __init__(__self__, *,
                 abort: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs']] = None,
                 delay: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs']] = None):
        """
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs'] abort: The specification for how client requests are aborted as part of fault injection.
               Structure is documented below.
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs'] delay: The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
               Structure is documented below.
        """
        pulumi.set(__self__, "abort", abort)
        pulumi.set(__self__, "delay", delay)

    @property
    @pulumi.getter
    def abort(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs']]:
        """
        The specification for how client requests are aborted as part of fault injection.
        Structure is documented below.
        """
        ...

    @abort.setter
    def abort(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs']]):
        ...

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs']]:
        """
        The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
        Structure is documented below.
        """
        ...

    @delay.setter
    def delay(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs']]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs:
    def __init__(__self__, *,
                 http_status: Optional[pulumi.Input[float]] = None,
                 percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] http_status: The HTTP status code used to abort the request.
               The value must be between 200 and 599 inclusive.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
               The value must be between 0.0 and 100.0 inclusive.
        """
        pulumi.set(__self__, "httpStatus", http_status)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> Optional[pulumi.Input[float]]:
        """
        The HTTP status code used to abort the request.
        The value must be between 200 and 599 inclusive.
        """
        ...

    @http_status.setter
    def http_status(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
        The value must be between 0.0 and 100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs:
    def __init__(__self__, *,
                 fixed_delay: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']] = None,
                 percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs'] fixed_delay: Specifies the value of the fixed delay interval.
               Structure is documented below.
        :param pulumi.Input[float] percentage: The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
               The value must be between 0.0 and 100.0 inclusive.
        """
        pulumi.set(__self__, "fixedDelay", fixed_delay)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="fixedDelay")
    def fixed_delay(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']]:
        """
        Specifies the value of the fixed delay interval.
        Structure is documented below.
        """
        ...

    @fixed_delay.setter
    def fixed_delay(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs']]):
        ...

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
        The value must be between 0.0 and 100.0 inclusive.
        """
        ...

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str]):
        """
        :param pulumi.Input[str] backend_service: The full or partial URL to the BackendService resource being mirrored to.
        """
        pulumi.set(__self__, "backendService", backend_service)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The full or partial URL to the BackendService resource being mirrored to.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs:
    def __init__(__self__, *,
                 num_retries: pulumi.Input[float],
                 per_try_timeout: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs']] = None,
                 retry_conditions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[float] num_retries: Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs'] per_try_timeout: Specifies a non-zero timeout per retry attempt.
               If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
               will use the largest timeout among all backend services associated with the route.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] retry_conditions: Specfies one or more conditions when this retry rule applies. Valid values are:
               5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
               or if the backend service does not respond at all, example: disconnects, reset, read timeout,
               connection failure, and refused streams.
               gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
               connect-failure: Loadbalancer will retry on failures connecting to backend services,
               for example due to connection timeouts.
               retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
               Currently the only retriable error supported is 409.
               refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
               This reset type indicates that it is safe to retry.
               cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
               deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
               resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
               unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
        """
        pulumi.set(__self__, "numRetries", num_retries)
        pulumi.set(__self__, "perTryTimeout", per_try_timeout)
        pulumi.set(__self__, "retryConditions", retry_conditions)

    @property
    @pulumi.getter(name="numRetries")
    def num_retries(self) -> pulumi.Input[float]:
        """
        Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
        """
        ...

    @num_retries.setter
    def num_retries(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs']]:
        """
        Specifies a non-zero timeout per retry attempt.
        If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
        will use the largest timeout among all backend services associated with the route.
        Structure is documented below.
        """
        ...

    @per_try_timeout.setter
    def per_try_timeout(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs']]):
        ...

    @property
    @pulumi.getter(name="retryConditions")
    def retry_conditions(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specfies one or more conditions when this retry rule applies. Valid values are:
        5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
        or if the backend service does not respond at all, example: disconnects, reset, read timeout,
        connection failure, and refused streams.
        gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
        connect-failure: Loadbalancer will retry on failures connecting to backend services,
        for example due to connection timeouts.
        retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
        Currently the only retriable error supported is 409.
        refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
        This reset type indicates that it is safe to retry.
        cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
        deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
        resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
        unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
        """
        ...

    @retry_conditions.setter
    def retry_conditions(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionTimeoutArgs:
    def __init__(__self__, *,
                 seconds: pulumi.Input[str],
                 nanos: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] seconds: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
               Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        :param pulumi.Input[float] nanos: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
               represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        pulumi.set(__self__, "seconds", seconds)
        pulumi.set(__self__, "nanos", nanos)

    @property
    @pulumi.getter
    def seconds(self) -> pulumi.Input[str]:
        """
        Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
        Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        """
        ...

    @seconds.setter
    def seconds(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[float]]:
        """
        Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
        represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
        """
        ...

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs:
    def __init__(__self__, *,
                 host_rewrite: Optional[pulumi.Input[str]] = None,
                 path_prefix_rewrite: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_rewrite: Prior to forwarding the request to the selected service, the request's host header is replaced
               with contents of hostRewrite.
               The value must be between 1 and 255 characters.
        :param pulumi.Input[str] path_prefix_rewrite: Prior to forwarding the request to the selected backend service, the matching portion of the
               request's path is replaced by pathPrefixRewrite.
               The value must be between 1 and 1024 characters.
        """
        pulumi.set(__self__, "hostRewrite", host_rewrite)
        pulumi.set(__self__, "pathPrefixRewrite", path_prefix_rewrite)

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected service, the request's host header is replaced
        with contents of hostRewrite.
        The value must be between 1 and 255 characters.
        """
        ...

    @host_rewrite.setter
    def host_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="pathPrefixRewrite")
    def path_prefix_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        Prior to forwarding the request to the selected backend service, the matching portion of the
        request's path is replaced by pathPrefixRewrite.
        The value must be between 1 and 1024 characters.
        """
        ...

    @path_prefix_rewrite.setter
    def path_prefix_rewrite(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs:
    def __init__(__self__, *,
                 backend_service: pulumi.Input[str],
                 weight: pulumi.Input[float],
                 header_action: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs']] = None):
        """
        :param pulumi.Input[str] backend_service: The full or partial URL to the BackendService resource being mirrored to.
        :param pulumi.Input[float] weight: Specifies the fraction of traffic sent to backendService, computed as
               weight / (sum of all weightedBackendService weights in routeAction) .
               The selection of a backend service is determined only for new traffic. Once a user's request
               has been directed to a backendService, subsequent requests will be sent to the same backendService
               as determined by the BackendService's session affinity policy.
               The value must be between 0 and 1000
        :param pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs'] header_action: Specifies changes to request and response headers that need to take effect for
               the selected backendService.
               headerAction specified here take effect before headerAction in the enclosing
               HttpRouteRule, PathMatcher and UrlMap.
               Structure is documented below.
        """
        pulumi.set(__self__, "backendService", backend_service)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "headerAction", header_action)

    @property
    @pulumi.getter(name="backendService")
    def backend_service(self) -> pulumi.Input[str]:
        """
        The full or partial URL to the BackendService resource being mirrored to.
        """
        ...

    @backend_service.setter
    def backend_service(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[float]:
        """
        Specifies the fraction of traffic sent to backendService, computed as
        weight / (sum of all weightedBackendService weights in routeAction) .
        The selection of a backend service is determined only for new traffic. Once a user's request
        has been directed to a backendService, subsequent requests will be sent to the same backendService
        as determined by the BackendService's session affinity policy.
        The value must be between 0 and 1000
        """
        ...

    @weight.setter
    def weight(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="headerAction")
    def header_action(self) -> Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs']]:
        """
        Specifies changes to request and response headers that need to take effect for
        the selected backendService.
        headerAction specified here take effect before headerAction in the enclosing
        HttpRouteRule, PathMatcher and UrlMap.
        Structure is documented below.
        """
        ...

    @header_action.setter
    def header_action(self, value: Optional[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs']]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs:
    def __init__(__self__, *,
                 request_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]] = None,
                 request_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 response_headers_to_adds: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]] = None,
                 response_headers_to_removes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]] request_headers_to_adds: Headers to add to a matching request prior to forwarding the request to the backendService.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] request_headers_to_removes: A list of header names for headers that need to be removed from the request prior to
               forwarding the request to the backendService.
        :param pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]] response_headers_to_adds: Headers to add the response prior to sending the response back to the client.
               Structure is documented below.
        :param pulumi.Input[List[pulumi.Input[str]]] response_headers_to_removes: A list of header names for headers that need to be removed from the response prior to sending the
               response back to the client.
        """
        pulumi.set(__self__, "requestHeadersToAdds", request_headers_to_adds)
        pulumi.set(__self__, "requestHeadersToRemoves", request_headers_to_removes)
        pulumi.set(__self__, "responseHeadersToAdds", response_headers_to_adds)
        pulumi.set(__self__, "responseHeadersToRemoves", response_headers_to_removes)

    @property
    @pulumi.getter(name="requestHeadersToAdds")
    def request_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]:
        """
        Headers to add to a matching request prior to forwarding the request to the backendService.
        Structure is documented below.
        """
        ...

    @request_headers_to_adds.setter
    def request_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="requestHeadersToRemoves")
    def request_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the request prior to
        forwarding the request to the backendService.
        """
        ...

    @request_headers_to_removes.setter
    def request_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToAdds")
    def response_headers_to_adds(self) -> Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]:
        """
        Headers to add the response prior to sending the response back to the client.
        Structure is documented below.
        """
        ...

    @response_headers_to_adds.setter
    def response_headers_to_adds(self, value: Optional[pulumi.Input[List[pulumi.Input['URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs']]]]):
        ...

    @property
    @pulumi.getter(name="responseHeadersToRemoves")
    def response_headers_to_removes(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of header names for headers that need to be removed from the response prior to sending the
        response back to the client.
        """
        ...

    @response_headers_to_removes.setter
    def response_headers_to_removes(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 replace: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] header_name: The name of the header to add.
        :param pulumi.Input[str] header_value: The value of the header to add.
        :param pulumi.Input[bool] replace: If false, headerValue is appended to any values that already exist for the header.
               If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        pulumi.set(__self__, "headerName", header_name)
        pulumi.set(__self__, "headerValue", header_value)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the header to add.
        """
        ...

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        The value of the header to add.
        """
        ...

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Input[bool]:
        """
        If false, headerValue is appended to any values that already exist for the header.
        If true, headerValue is set for the header, discarding any values that were set for that header.
        """
        ...

    @replace.setter
    def replace(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class URLMapPathMatcherRouteRuleUrlRedirectArgs:
    def __init__(__self__, *,
                 host_redirect: Optional[pulumi.Input[str]] = None,
                 https_redirect: Optional[pulumi.Input[bool]] = None,
                 path_redirect: Optional[pulumi.Input[str]] = None,
                 prefix_redirect: Optional[pulumi.Input[str]] = None,
                 redirect_response_code: Optional[pulumi.Input[str]] = None,
                 strip_query: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host_redirect: The host that will be used in the redirect response instead of the one that was
               supplied in the request. The value must be between 1 and 255 characters.
        :param pulumi.Input[bool] https_redirect: If set to true, the URL scheme in the redirected request is set to https. If set to
               false, the URL scheme of the redirected request will remain the same as that of the
               request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
               true for TargetHttpsProxy is not permitted. The default is set to false.
        :param pulumi.Input[str] path_redirect: The path that will be used in the redirect response instead of the one that was
               supplied in the request. pathRedirect cannot be supplied together with
               prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
               original request will be used for the redirect. The value must be between 1 and 1024
               characters.
        :param pulumi.Input[str] prefix_redirect: The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
               retaining the remaining portion of the URL before redirecting the request.
               prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
               neither. If neither is supplied, the path of the original request will be used for
               the redirect. The value must be between 1 and 1024 characters.
        :param pulumi.Input[str] redirect_response_code: The HTTP Status code to use for this RedirectAction. Supported values are:
               * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
               * FOUND, which corresponds to 302.
               * SEE_OTHER which corresponds to 303.
               * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
               will be retained.
               * PERMANENT_REDIRECT, which corresponds to 308. In this case,
               the request method will be retained.
        :param pulumi.Input[bool] strip_query: If set to true, any accompanying query portion of the original URL is removed prior
               to redirecting the request. If set to false, the query portion of the original URL is
               retained. The default is set to false.
               This field is required to ensure an empty block is not set. The normal default value is false.
        """
        pulumi.set(__self__, "hostRedirect", host_redirect)
        pulumi.set(__self__, "httpsRedirect", https_redirect)
        pulumi.set(__self__, "pathRedirect", path_redirect)
        pulumi.set(__self__, "prefixRedirect", prefix_redirect)
        pulumi.set(__self__, "redirectResponseCode", redirect_response_code)
        pulumi.set(__self__, "stripQuery", strip_query)

    @property
    @pulumi.getter(name="hostRedirect")
    def host_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The host that will be used in the redirect response instead of the one that was
        supplied in the request. The value must be between 1 and 255 characters.
        """
        ...

    @host_redirect.setter
    def host_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the URL scheme in the redirected request is set to https. If set to
        false, the URL scheme of the redirected request will remain the same as that of the
        request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
        true for TargetHttpsProxy is not permitted. The default is set to false.
        """
        ...

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="pathRedirect")
    def path_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The path that will be used in the redirect response instead of the one that was
        supplied in the request. pathRedirect cannot be supplied together with
        prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
        original request will be used for the redirect. The value must be between 1 and 1024
        characters.
        """
        ...

    @path_redirect.setter
    def path_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="prefixRedirect")
    def prefix_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        retaining the remaining portion of the URL before redirecting the request.
        prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
        neither. If neither is supplied, the path of the original request will be used for
        the redirect. The value must be between 1 and 1024 characters.
        """
        ...

    @prefix_redirect.setter
    def prefix_redirect(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Status code to use for this RedirectAction. Supported values are:
        * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
        * FOUND, which corresponds to 302.
        * SEE_OTHER which corresponds to 303.
        * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        will be retained.
        * PERMANENT_REDIRECT, which corresponds to 308. In this case,
        the request method will be retained.
        """
        ...

    @redirect_response_code.setter
    def redirect_response_code(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="stripQuery")
    def strip_query(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, any accompanying query portion of the original URL is removed prior
        to redirecting the request. If set to false, the query portion of the original URL is
        retained. The default is set to false.
        This field is required to ensure an empty block is not set. The normal default value is false.
        """
        ...

    @strip_query.setter
    def strip_query(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class URLMapTestArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 path: pulumi.Input[str],
                 service: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host portion of the URL.
        :param pulumi.Input[str] path: Path portion of the URL.
        :param pulumi.Input[str] service: The backend service or backend bucket link that should be matched by this test.
        :param pulumi.Input[str] description: Description of this test case.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Host portion of the URL.
        """
        ...

    @host.setter
    def host(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path portion of the URL.
        """
        ...

    @path.setter
    def path(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        The backend service or backend bucket link that should be matched by this test.
        """
        ...

    @service.setter
    def service(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this test case.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...


