# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.output_type
class AutoscalarAutoscalingPolicy(dict):
    cooldown_period: Optional[float] = pulumi.output_property("cooldownPeriod")
    """
    The number of seconds that the autoscaler should wait before it
    starts collecting information from a new instance. This prevents
    the autoscaler from collecting information when the instance is
    initializing, during which the collected usage would not be
    reliable. The default time autoscaler waits is 60 seconds.
    Virtual machine initialization times might vary because of
    numerous factors. We recommend that you test how long an
    instance may take to initialize. To do this, create an instance
    and time the startup process.
    """
    cpu_utilization: Optional['outputs.AutoscalarAutoscalingPolicyCpuUtilization'] = pulumi.output_property("cpuUtilization")
    """
    Defines the CPU utilization policy that allows the autoscaler to
    scale based on the average CPU utilization of a managed instance
    group.  Structure is documented below.
    """
    load_balancing_utilization: Optional['outputs.AutoscalarAutoscalingPolicyLoadBalancingUtilization'] = pulumi.output_property("loadBalancingUtilization")
    """
    Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
    """
    max_replicas: float = pulumi.output_property("maxReplicas")
    """
    The maximum number of instances that the autoscaler can scale up
    to. This is required when creating or updating an autoscaler. The
    maximum number of replicas should not be lower than minimal number
    of replicas.
    """
    metrics: Optional[List['outputs.AutoscalarAutoscalingPolicyMetric']] = pulumi.output_property("metrics")
    """
    Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
    """
    min_replicas: float = pulumi.output_property("minReplicas")
    """
    The minimum number of replicas that the autoscaler can scale down
    to. This cannot be less than 0. If not provided, autoscaler will
    choose a default value depending on maximum number of instances
    allowed.
    """
    mode: Optional[str] = pulumi.output_property("mode")
    """
    Defines operating mode for this policy.
    """
    scale_down_control: Optional['outputs.AutoscalarAutoscalingPolicyScaleDownControl'] = pulumi.output_property("scaleDownControl")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalarAutoscalingPolicyCpuUtilization(dict):
    target: float = pulumi.output_property("target")
    """
    Fraction of backend capacity utilization (set in HTTP(s) load
    balancing configuration) that autoscaler should maintain. Must
    be a positive float value. If not defined, the default is 0.8.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalarAutoscalingPolicyLoadBalancingUtilization(dict):
    target: float = pulumi.output_property("target")
    """
    Fraction of backend capacity utilization (set in HTTP(s) load
    balancing configuration) that autoscaler should maintain. Must
    be a positive float value. If not defined, the default is 0.8.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalarAutoscalingPolicyMetric(dict):
    filter: Optional[str] = pulumi.output_property("filter")
    """
    A filter string to be used as the filter string for
    a Stackdriver Monitoring TimeSeries.list API call.
    This filter is used to select a specific TimeSeries for
    the purpose of autoscaling and to determine whether the metric
    is exporting per-instance or per-group data.
    You can only use the AND operator for joining selectors.
    You can only use direct equality comparison operator (=) without
    any functions for each selector.
    You can specify the metric in both the filter string and in the
    metric field. However, if specified in both places, the metric must
    be identical.
    The monitored resource type determines what kind of values are
    expected for the metric. If it is a gce_instance, the autoscaler
    expects the metric to include a separate TimeSeries for each
    instance in a group. In such a case, you cannot filter on resource
    labels.
    If the resource type is any other value, the autoscaler expects
    this metric to contain values that apply to the entire autoscaled
    instance group and resource label filtering can be performed to
    point autoscaler at the correct TimeSeries to scale upon.
    This is called a per-group metric for the purpose of autoscaling.
    If not specified, the type defaults to gce_instance.
    You should provide a filter that is selective enough to pick just
    one TimeSeries for the autoscaled group or for each of the instances
    (if you are using gce_instance resource type). If multiple
    TimeSeries are returned upon the query execution, the autoscaler
    will sum their respective values to obtain its scaling value.
    """
    name: str = pulumi.output_property("name")
    """
    The identifier (type) of the Stackdriver Monitoring metric.
    The metric cannot have negative values.
    The metric must have a value type of INT64 or DOUBLE.
    """
    single_instance_assignment: Optional[float] = pulumi.output_property("singleInstanceAssignment")
    """
    If scaling is based on a per-group metric value that represents the
    total amount of work to be done or resource usage, set this value to
    an amount assigned for a single instance of the scaled group.
    The autoscaler will keep the number of instances proportional to the
    value of this metric, the metric itself should not change value due
    to group resizing.
    For example, a good metric to use with the target is
    `pubsub.googleapis.com/subscription/num_undelivered_messages`
    or a custom metric exporting the total number of requests coming to
    your instances.
    A bad example would be a metric exporting an average or median
    latency, since this value can't include a chunk assignable to a
    single instance, it could be better used with utilization_target
    instead.
    """
    target: Optional[float] = pulumi.output_property("target")
    """
    Fraction of backend capacity utilization (set in HTTP(s) load
    balancing configuration) that autoscaler should maintain. Must
    be a positive float value. If not defined, the default is 0.8.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Defines how target utilization value is expressed for a
    Stackdriver Monitoring metric.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalarAutoscalingPolicyScaleDownControl(dict):
    max_scaled_down_replicas: Optional['outputs.AutoscalarAutoscalingPolicyScaleDownControlMaxScaledDownReplicas'] = pulumi.output_property("maxScaledDownReplicas")
    """
    A nested object resource  Structure is documented below.
    """
    time_window_sec: Optional[float] = pulumi.output_property("timeWindowSec")
    """
    How long back autoscaling should look when computing recommendations
    to include directives regarding slower scale down, as described above.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalarAutoscalingPolicyScaleDownControlMaxScaledDownReplicas(dict):
    fixed: Optional[float] = pulumi.output_property("fixed")
    """
    Specifies a fixed number of VM instances. This must be a positive
    integer.
    """
    percent: Optional[float] = pulumi.output_property("percent")
    """
    Specifies a percentage of instances between 0 to 100%, inclusive.
    For example, specify 80 for 80%.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalerAutoscalingPolicy(dict):
    cooldown_period: Optional[float] = pulumi.output_property("cooldownPeriod")
    """
    The number of seconds that the autoscaler should wait before it
    starts collecting information from a new instance. This prevents
    the autoscaler from collecting information when the instance is
    initializing, during which the collected usage would not be
    reliable. The default time autoscaler waits is 60 seconds.
    Virtual machine initialization times might vary because of
    numerous factors. We recommend that you test how long an
    instance may take to initialize. To do this, create an instance
    and time the startup process.
    """
    cpu_utilization: Optional['outputs.AutoscalerAutoscalingPolicyCpuUtilization'] = pulumi.output_property("cpuUtilization")
    """
    Defines the CPU utilization policy that allows the autoscaler to
    scale based on the average CPU utilization of a managed instance
    group.  Structure is documented below.
    """
    load_balancing_utilization: Optional['outputs.AutoscalerAutoscalingPolicyLoadBalancingUtilization'] = pulumi.output_property("loadBalancingUtilization")
    """
    Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
    """
    max_replicas: float = pulumi.output_property("maxReplicas")
    """
    The maximum number of instances that the autoscaler can scale up
    to. This is required when creating or updating an autoscaler. The
    maximum number of replicas should not be lower than minimal number
    of replicas.
    """
    metrics: Optional[List['outputs.AutoscalerAutoscalingPolicyMetric']] = pulumi.output_property("metrics")
    """
    Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
    """
    min_replicas: float = pulumi.output_property("minReplicas")
    """
    The minimum number of replicas that the autoscaler can scale down
    to. This cannot be less than 0. If not provided, autoscaler will
    choose a default value depending on maximum number of instances
    allowed.
    """
    mode: Optional[str] = pulumi.output_property("mode")
    """
    Defines operating mode for this policy.
    """
    scale_down_control: Optional['outputs.AutoscalerAutoscalingPolicyScaleDownControl'] = pulumi.output_property("scaleDownControl")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalerAutoscalingPolicyCpuUtilization(dict):
    target: float = pulumi.output_property("target")
    """
    Fraction of backend capacity utilization (set in HTTP(s) load
    balancing configuration) that autoscaler should maintain. Must
    be a positive float value. If not defined, the default is 0.8.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalerAutoscalingPolicyLoadBalancingUtilization(dict):
    target: float = pulumi.output_property("target")
    """
    Fraction of backend capacity utilization (set in HTTP(s) load
    balancing configuration) that autoscaler should maintain. Must
    be a positive float value. If not defined, the default is 0.8.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalerAutoscalingPolicyMetric(dict):
    filter: Optional[str] = pulumi.output_property("filter")
    """
    A filter string to be used as the filter string for
    a Stackdriver Monitoring TimeSeries.list API call.
    This filter is used to select a specific TimeSeries for
    the purpose of autoscaling and to determine whether the metric
    is exporting per-instance or per-group data.
    You can only use the AND operator for joining selectors.
    You can only use direct equality comparison operator (=) without
    any functions for each selector.
    You can specify the metric in both the filter string and in the
    metric field. However, if specified in both places, the metric must
    be identical.
    The monitored resource type determines what kind of values are
    expected for the metric. If it is a gce_instance, the autoscaler
    expects the metric to include a separate TimeSeries for each
    instance in a group. In such a case, you cannot filter on resource
    labels.
    If the resource type is any other value, the autoscaler expects
    this metric to contain values that apply to the entire autoscaled
    instance group and resource label filtering can be performed to
    point autoscaler at the correct TimeSeries to scale upon.
    This is called a per-group metric for the purpose of autoscaling.
    If not specified, the type defaults to gce_instance.
    You should provide a filter that is selective enough to pick just
    one TimeSeries for the autoscaled group or for each of the instances
    (if you are using gce_instance resource type). If multiple
    TimeSeries are returned upon the query execution, the autoscaler
    will sum their respective values to obtain its scaling value.
    """
    name: str = pulumi.output_property("name")
    """
    The identifier (type) of the Stackdriver Monitoring metric.
    The metric cannot have negative values.
    The metric must have a value type of INT64 or DOUBLE.
    """
    single_instance_assignment: Optional[float] = pulumi.output_property("singleInstanceAssignment")
    """
    If scaling is based on a per-group metric value that represents the
    total amount of work to be done or resource usage, set this value to
    an amount assigned for a single instance of the scaled group.
    The autoscaler will keep the number of instances proportional to the
    value of this metric, the metric itself should not change value due
    to group resizing.
    For example, a good metric to use with the target is
    `pubsub.googleapis.com/subscription/num_undelivered_messages`
    or a custom metric exporting the total number of requests coming to
    your instances.
    A bad example would be a metric exporting an average or median
    latency, since this value can't include a chunk assignable to a
    single instance, it could be better used with utilization_target
    instead.
    """
    target: Optional[float] = pulumi.output_property("target")
    """
    Fraction of backend capacity utilization (set in HTTP(s) load
    balancing configuration) that autoscaler should maintain. Must
    be a positive float value. If not defined, the default is 0.8.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Defines how target utilization value is expressed for a
    Stackdriver Monitoring metric.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalerAutoscalingPolicyScaleDownControl(dict):
    max_scaled_down_replicas: Optional['outputs.AutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicas'] = pulumi.output_property("maxScaledDownReplicas")
    """
    A nested object resource  Structure is documented below.
    """
    time_window_sec: Optional[float] = pulumi.output_property("timeWindowSec")
    """
    How long back autoscaling should look when computing recommendations
    to include directives regarding slower scale down, as described above.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicas(dict):
    fixed: Optional[float] = pulumi.output_property("fixed")
    """
    Specifies a fixed number of VM instances. This must be a positive
    integer.
    """
    percent: Optional[float] = pulumi.output_property("percent")
    """
    Specifies a percentage of instances between 0 to 100%, inclusive.
    For example, specify 80 for 80%.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendBucketCdnPolicy(dict):
    signed_url_cache_max_age_sec: float = pulumi.output_property("signedUrlCacheMaxAgeSec")
    """
    Maximum number of seconds the response to a signed URL request will
    be considered fresh. After this time period,
    the response will be revalidated before being served.
    When serving responses to signed URL requests,
    Cloud CDN will internally behave as though
    all responses from this backend had a "Cache-Control: public,
    max-age=[TTL]" header, regardless of any existing Cache-Control
    header. The actual headers served in responses will not be altered.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceBackend(dict):
    balancing_mode: Optional[str] = pulumi.output_property("balancingMode")
    """
    Specifies the balancing mode for this backend.
    For global HTTP(S) or TCP/SSL load balancing, the default is
    UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
    and CONNECTION (for TCP/SSL).
    """
    capacity_scaler: Optional[float] = pulumi.output_property("capacityScaler")
    """
    A multiplier applied to the group's maximum servicing capacity
    (based on UTILIZATION, RATE or CONNECTION).
    Default value is 1, which means the group will serve up to 100%
    of its configured capacity (depending on balancingMode). A
    setting of 0 means the group is completely drained, offering
    0% of its available Capacity. Valid range is [0.0,1.0].
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    An optional description of this resource.
    Provide this property when you create the resource.
    """
    group: str = pulumi.output_property("group")
    """
    The fully-qualified URL of an Instance Group or Network Endpoint
    Group resource. In case of instance group this defines the list
    of instances that serve traffic. Member virtual machine
    instances from each instance group must live in the same zone as
    the instance group itself. No two backends in a backend service
    are allowed to use same Instance Group resource.
    For Network Endpoint Groups this defines list of endpoints. All
    endpoints of Network Endpoint Group must be hosted on instances
    located in the same zone as the Network Endpoint Group.
    Backend services cannot mix Instance Group and
    Network Endpoint Group backends.
    Note that you must specify an Instance Group or Network Endpoint
    Group resource using the fully-qualified URL, rather than a
    partial URL.
    """
    max_connections: Optional[float] = pulumi.output_property("maxConnections")
    """
    The maximum number of connections to the backend cluster.
    Defaults to 1024.
    """
    max_connections_per_endpoint: Optional[float] = pulumi.output_property("maxConnectionsPerEndpoint")
    """
    The max number of simultaneous connections that a single backend
    network endpoint can handle. This is used to calculate the
    capacity of the group. Can be used in either CONNECTION or
    UTILIZATION balancing modes.
    For CONNECTION mode, either
    maxConnections or maxConnectionsPerEndpoint must be set.
    """
    max_connections_per_instance: Optional[float] = pulumi.output_property("maxConnectionsPerInstance")
    """
    The max number of simultaneous connections that a single
    backend instance can handle. This is used to calculate the
    capacity of the group. Can be used in either CONNECTION or
    UTILIZATION balancing modes.
    For CONNECTION mode, either maxConnections or
    maxConnectionsPerInstance must be set.
    """
    max_rate: Optional[float] = pulumi.output_property("maxRate")
    """
    The max requests per second (RPS) of the group.
    Can be used with either RATE or UTILIZATION balancing modes,
    but required if RATE mode. For RATE mode, either maxRate or one
    of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    group type, must be set.
    """
    max_rate_per_endpoint: Optional[float] = pulumi.output_property("maxRatePerEndpoint")
    """
    The max requests per second (RPS) that a single backend network
    endpoint can handle. This is used to calculate the capacity of
    the group. Can be used in either balancing mode. For RATE mode,
    either maxRate or maxRatePerEndpoint must be set.
    """
    max_rate_per_instance: Optional[float] = pulumi.output_property("maxRatePerInstance")
    """
    The max requests per second (RPS) that a single backend
    instance can handle. This is used to calculate the capacity of
    the group. Can be used in either balancing mode. For RATE mode,
    either maxRate or maxRatePerInstance must be set.
    """
    max_utilization: Optional[float] = pulumi.output_property("maxUtilization")
    """
    Used when balancingMode is UTILIZATION. This ratio defines the
    CPU utilization target for the group. The default is 0.8. Valid
    range is [0.0, 1.0].
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceCdnPolicy(dict):
    cache_key_policy: Optional['outputs.BackendServiceCdnPolicyCacheKeyPolicy'] = pulumi.output_property("cacheKeyPolicy")
    """
    The CacheKeyPolicy for this CdnPolicy.  Structure is documented below.
    """
    signed_url_cache_max_age_sec: Optional[float] = pulumi.output_property("signedUrlCacheMaxAgeSec")
    """
    Maximum number of seconds the response to a signed URL request
    will be considered fresh, defaults to 1hr (3600s). After this
    time period, the response will be revalidated before
    being served.
    When serving responses to signed URL requests, Cloud CDN will
    internally behave as though all responses from this backend had a
    "Cache-Control: public, max-age=[TTL]" header, regardless of any
    existing Cache-Control header. The actual headers served in
    responses will not be altered.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceCdnPolicyCacheKeyPolicy(dict):
    include_host: Optional[bool] = pulumi.output_property("includeHost")
    """
    If true requests to different hosts will be cached separately.
    """
    include_protocol: Optional[bool] = pulumi.output_property("includeProtocol")
    """
    If true, http and https requests will be cached separately.
    """
    include_query_string: Optional[bool] = pulumi.output_property("includeQueryString")
    """
    If true, include query string parameters in the cache key
    according to query_string_whitelist and
    query_string_blacklist. If neither is set, the entire query
    string will be included.
    If false, the query string will be excluded from the cache
    key entirely.
    """
    query_string_blacklists: Optional[List[str]] = pulumi.output_property("queryStringBlacklists")
    """
    Names of query string parameters to exclude in cache keys.
    All other parameters will be included. Either specify
    query_string_whitelist or query_string_blacklist, not both.
    '&' and '=' will be percent encoded and not treated as
    delimiters.
    """
    query_string_whitelists: Optional[List[str]] = pulumi.output_property("queryStringWhitelists")
    """
    Names of query string parameters to include in cache keys.
    All other parameters will be excluded. Either specify
    query_string_whitelist or query_string_blacklist, not both.
    '&' and '=' will be percent encoded and not treated as
    delimiters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceCircuitBreakers(dict):
    connect_timeout: Optional['outputs.BackendServiceCircuitBreakersConnectTimeout'] = pulumi.output_property("connectTimeout")
    """
    The timeout for new network connections to hosts.  Structure is documented below.
    """
    max_connections: Optional[float] = pulumi.output_property("maxConnections")
    """
    The maximum number of connections to the backend cluster.
    Defaults to 1024.
    """
    max_pending_requests: Optional[float] = pulumi.output_property("maxPendingRequests")
    """
    The maximum number of pending requests to the backend cluster.
    Defaults to 1024.
    """
    max_requests: Optional[float] = pulumi.output_property("maxRequests")
    """
    The maximum number of parallel requests to the backend cluster.
    Defaults to 1024.
    """
    max_requests_per_connection: Optional[float] = pulumi.output_property("maxRequestsPerConnection")
    """
    Maximum requests for a single backend connection. This parameter
    is respected by both the HTTP/1.1 and HTTP/2 implementations. If
    not specified, there is no limit. Setting this parameter to 1
    will effectively disable keep alive.
    """
    max_retries: Optional[float] = pulumi.output_property("maxRetries")
    """
    The maximum number of parallel retries to the backend cluster.
    Defaults to 3.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceCircuitBreakersConnectTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: float = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceConsistentHash(dict):
    http_cookie: Optional['outputs.BackendServiceConsistentHashHttpCookie'] = pulumi.output_property("httpCookie")
    """
    Hash is based on HTTP Cookie. This field describes a HTTP cookie
    that will be used as the hash key for the consistent hash load
    balancer. If the cookie is not present, it will be generated.
    This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
    """
    http_header_name: Optional[str] = pulumi.output_property("httpHeaderName")
    """
    The hash based on the value of the specified header field.
    This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    """
    minimum_ring_size: Optional[float] = pulumi.output_property("minimumRingSize")
    """
    The minimum number of virtual nodes to use for the hash ring.
    Larger ring sizes result in more granular load
    distributions. If the number of hosts in the load balancing pool
    is larger than the ring size, each host will be assigned a single
    virtual node.
    Defaults to 1024.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceConsistentHashHttpCookie(dict):
    name: Optional[str] = pulumi.output_property("name")
    """
    Name of the cookie.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    Path to set for the cookie.
    """
    ttl: Optional['outputs.BackendServiceConsistentHashHttpCookieTtl'] = pulumi.output_property("ttl")
    """
    Lifetime of the cookie.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceConsistentHashHttpCookieTtl(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: float = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceIap(dict):
    oauth2_client_id: str = pulumi.output_property("oauth2ClientId")
    """
    OAuth2 Client ID for IAP
    """
    oauth2_client_secret: str = pulumi.output_property("oauth2ClientSecret")
    """
    OAuth2 Client Secret for IAP  **Note**: This property is sensitive and will not be displayed in the plan.
    """
    oauth2_client_secret_sha256: Optional[str] = pulumi.output_property("oauth2ClientSecretSha256")
    """
    -
    OAuth2 Client Secret SHA-256 for IAP  **Note**: This property is sensitive and will not be displayed in the plan.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceLogConfig(dict):
    enable: Optional[bool] = pulumi.output_property("enable")
    """
    Whether to enable logging for the load balancer traffic served by this backend service.
    """
    sample_rate: Optional[float] = pulumi.output_property("sampleRate")
    """
    This field can only be specified if logging is enabled for this backend service. The value of
    the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
    where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
    The default value is 1.0.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceOutlierDetection(dict):
    base_ejection_time: Optional['outputs.BackendServiceOutlierDetectionBaseEjectionTime'] = pulumi.output_property("baseEjectionTime")
    """
    The base time that a host is ejected for. The real time is equal to the base
    time multiplied by the number of times the host has been ejected. Defaults to
    30000ms or 30s.  Structure is documented below.
    """
    consecutive_errors: Optional[float] = pulumi.output_property("consecutiveErrors")
    """
    Number of errors before a host is ejected from the connection pool. When the
    backend host is accessed over HTTP, a 5xx return code qualifies as an error.
    Defaults to 5.
    """
    consecutive_gateway_failure: Optional[float] = pulumi.output_property("consecutiveGatewayFailure")
    """
    The number of consecutive gateway failures (502, 503, 504 status or connection
    errors that are mapped to one of those status codes) before a consecutive
    gateway failure ejection occurs. Defaults to 5.
    """
    enforcing_consecutive_errors: Optional[float] = pulumi.output_property("enforcingConsecutiveErrors")
    """
    The percentage chance that a host will be actually ejected when an outlier
    status is detected through consecutive 5xx. This setting can be used to disable
    ejection or to ramp it up slowly. Defaults to 100.
    """
    enforcing_consecutive_gateway_failure: Optional[float] = pulumi.output_property("enforcingConsecutiveGatewayFailure")
    """
    The percentage chance that a host will be actually ejected when an outlier
    status is detected through consecutive gateway failures. This setting can be
    used to disable ejection or to ramp it up slowly. Defaults to 0.
    """
    enforcing_success_rate: Optional[float] = pulumi.output_property("enforcingSuccessRate")
    """
    The percentage chance that a host will be actually ejected when an outlier
    status is detected through success rate statistics. This setting can be used to
    disable ejection or to ramp it up slowly. Defaults to 100.
    """
    interval: Optional['outputs.BackendServiceOutlierDetectionInterval'] = pulumi.output_property("interval")
    """
    Time interval between ejection sweep analysis. This can result in both new
    ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
    """
    max_ejection_percent: Optional[float] = pulumi.output_property("maxEjectionPercent")
    """
    Maximum percentage of hosts in the load balancing pool for the backend service
    that can be ejected. Defaults to 10%.
    """
    success_rate_minimum_hosts: Optional[float] = pulumi.output_property("successRateMinimumHosts")
    """
    The number of hosts in a cluster that must have enough request volume to detect
    success rate outliers. If the number of hosts is less than this setting, outlier
    detection via success rate statistics is not performed for any host in the
    cluster. Defaults to 5.
    """
    success_rate_request_volume: Optional[float] = pulumi.output_property("successRateRequestVolume")
    """
    The minimum number of total requests that must be collected in one interval (as
    defined by the interval duration above) to include this host in success rate
    based outlier detection. If the volume is lower than this setting, outlier
    detection via success rate statistics is not performed for that host. Defaults
    to 100.
    """
    success_rate_stdev_factor: Optional[float] = pulumi.output_property("successRateStdevFactor")
    """
    This factor is used to determine the ejection threshold for success rate outlier
    ejection. The ejection threshold is the difference between the mean success
    rate, and the product of this factor and the standard deviation of the mean
    success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
    by a thousand to get a double. That is, if the desired factor is 1.9, the
    runtime value should be 1900. Defaults to 1900.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceOutlierDetectionBaseEjectionTime(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: float = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceOutlierDetectionInterval(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: float = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiskDiskEncryptionKey(dict):
    kms_key_self_link: Optional[str] = pulumi.output_property("kmsKeySelfLink")
    """
    The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    in the cloud console. Your project's Compute Engine System service account
    (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
    `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
    See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    """
    raw_key: Optional[str] = pulumi.output_property("rawKey")
    """
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.
    """
    sha256: Optional[str] = pulumi.output_property("sha256")
    """
    -
    The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    encryption key that protects this resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiskSourceImageEncryptionKey(dict):
    kms_key_self_link: Optional[str] = pulumi.output_property("kmsKeySelfLink")
    """
    The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    in the cloud console. Your project's Compute Engine System service account
    (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
    `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
    See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    """
    raw_key: Optional[str] = pulumi.output_property("rawKey")
    """
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.
    """
    sha256: Optional[str] = pulumi.output_property("sha256")
    """
    -
    The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    encryption key that protects this resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiskSourceSnapshotEncryptionKey(dict):
    kms_key_self_link: Optional[str] = pulumi.output_property("kmsKeySelfLink")
    """
    The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    in the cloud console. Your project's Compute Engine System service account
    (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
    `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
    See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    """
    raw_key: Optional[str] = pulumi.output_property("rawKey")
    """
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.
    """
    sha256: Optional[str] = pulumi.output_property("sha256")
    """
    -
    The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    encryption key that protects this resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ExternalVpnGatewayInterface(dict):
    id: Optional[float] = pulumi.output_property("id")
    """
    The numberic ID for this interface. Allowed values are based on the redundancy type
    of this external VPN gateway
    * `0 - SINGLE_IP_INTERNALLY_REDUNDANT`
    * `0, 1 - TWO_IPS_REDUNDANCY`
    * `0, 1, 2, 3 - FOUR_IPS_REDUNDANCY`
    """
    ip_address: Optional[str] = pulumi.output_property("ipAddress")
    """
    IP address of the interface in the external VPN gateway.
    Only IPv4 is supported. This IP address can be either from
    your on-premise gateway or another Cloud provider’s VPN gateway,
    it cannot be an IP address from Google Compute Engine.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallAllow(dict):
    ports: Optional[List[str]] = pulumi.output_property("ports")
    """
    An optional list of ports to which this rule applies. This field
    is only applicable for UDP or TCP protocol. Each entry must be
    either an integer or a range. If not specified, this rule
    applies to connections through any port.
    Example inputs include: ["22"], ["80","443"], and
    ["12345-12349"].
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The IP protocol to which this rule applies. The protocol type is
    required when creating a firewall rule. This value can either be
    one of the following well known protocol strings (tcp, udp,
    icmp, esp, ah, sctp, ipip), or the IP protocol number.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallDeny(dict):
    ports: Optional[List[str]] = pulumi.output_property("ports")
    """
    An optional list of ports to which this rule applies. This field
    is only applicable for UDP or TCP protocol. Each entry must be
    either an integer or a range. If not specified, this rule
    applies to connections through any port.
    Example inputs include: ["22"], ["80","443"], and
    ["12345-12349"].
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The IP protocol to which this rule applies. The protocol type is
    required when creating a firewall rule. This value can either be
    one of the following well known protocol strings (tcp, udp,
    icmp, esp, ah, sctp, ipip), or the IP protocol number.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GlobalForwardingRuleMetadataFilter(dict):
    filter_labels: List['outputs.GlobalForwardingRuleMetadataFilterFilterLabel'] = pulumi.output_property("filterLabels")
    """
    The list of label value pairs that must match labels in the
    provided metadata based on filterMatchCriteria
    This list must not be empty and can have at the most 64 entries.  Structure is documented below.
    """
    filter_match_criteria: str = pulumi.output_property("filterMatchCriteria")
    """
    Specifies how individual filterLabel matches within the list of
    filterLabels contribute towards the overall metadataFilter match.
    MATCH_ANY - At least one of the filterLabels must have a matching
    label in the provided metadata.
    MATCH_ALL - All filterLabels must have matching labels in the
    provided metadata.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GlobalForwardingRuleMetadataFilterFilterLabel(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the metadata label. The length must be between
    1 and 1024 characters, inclusive.
    """
    value: str = pulumi.output_property("value")
    """
    The value that the label must match. The value has a maximum
    length of 1024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HaVpnGatewayVpnInterface(dict):
    id: Optional[float] = pulumi.output_property("id")
    """
    an identifier for the resource with format `projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}`
    """
    ip_address: Optional[str] = pulumi.output_property("ipAddress")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HealthCheckHttp2HealthCheck(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    The value of the host header in the HTTP2 health check request.
    If left empty (default value), the public IP on behalf of which this health
    check is performed will be used.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request_path: Optional[str] = pulumi.output_property("requestPath")
    """
    The request path of the HTTP2 health check request.
    The default value is /.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HealthCheckHttpHealthCheck(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    The value of the host header in the HTTP2 health check request.
    If left empty (default value), the public IP on behalf of which this health
    check is performed will be used.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request_path: Optional[str] = pulumi.output_property("requestPath")
    """
    The request path of the HTTP2 health check request.
    The default value is /.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HealthCheckHttpsHealthCheck(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    The value of the host header in the HTTP2 health check request.
    If left empty (default value), the public IP on behalf of which this health
    check is performed will be used.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request_path: Optional[str] = pulumi.output_property("requestPath")
    """
    The request path of the HTTP2 health check request.
    The default value is /.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HealthCheckLogConfig(dict):
    enable: Optional[bool] = pulumi.output_property("enable")
    """
    Indicates whether or not to export logs. This is false by default,
    which means no health check logging will be done.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HealthCheckSslHealthCheck(dict):
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request: Optional[str] = pulumi.output_property("request")
    """
    The application data to send once the SSL connection has been
    established (default value is empty). If both request and response are
    empty, the connection establishment alone will indicate health. The request
    data can only be ASCII.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HealthCheckTcpHealthCheck(dict):
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request: Optional[str] = pulumi.output_property("request")
    """
    The application data to send once the SSL connection has been
    established (default value is empty). If both request and response are
    empty, the connection establishment alone will indicate health. The request
    data can only be ASCII.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ImageGuestOsFeature(dict):
    type: str = pulumi.output_property("type")
    """
    The type of supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ImageRawDisk(dict):
    container_type: Optional[str] = pulumi.output_property("containerType")
    """
    The format used to encode and transmit the block device, which
    should be TAR. This is just a container and transmission format
    and not a runtime format. Provided by the client when the disk
    image is created.
    """
    sha1: Optional[str] = pulumi.output_property("sha1")
    """
    An optional SHA1 checksum of the disk image before unpackaging.
    This is provided by the client when the disk image is created.
    """
    source: str = pulumi.output_property("source")
    """
    The full Google Cloud Storage URL where disk storage is stored
    You must provide either this property or the sourceDisk property
    but not both.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceAttachedDisk(dict):
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    Name with which the attached disk will be accessible
    under `/dev/disk/by-id/google-*`
    """
    disk_encryption_key_raw: Optional[str] = pulumi.output_property("diskEncryptionKeyRaw")
    """
    A 256-bit [customer-supplied encryption key]
    (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
    encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
    to encrypt this disk. Only one of `kms_key_self_link` and `disk_encryption_key_raw` may be set.
    """
    disk_encryption_key_sha256: Optional[str] = pulumi.output_property("diskEncryptionKeySha256")
    kms_key_self_link: Optional[str] = pulumi.output_property("kmsKeySelfLink")
    """
    The self_link of the encryption key that is
    stored in Google Cloud KMS to encrypt this disk. Only one of `kms_key_self_link`
    and `disk_encryption_key_raw` may be set.
    """
    mode: Optional[str] = pulumi.output_property("mode")
    """
    Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
    If you have a persistent disk with data that you want to share
    between multiple instances, detach it from any read-write instances and
    attach it to one or more instances in read-only mode.
    """
    source: str = pulumi.output_property("source")
    """
    The name or self_link of the disk to attach to this instance.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceBootDisk(dict):
    auto_delete: Optional[bool] = pulumi.output_property("autoDelete")
    """
    Whether the disk will be auto-deleted when the instance
    is deleted. Defaults to true.
    """
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    Name with which the attached disk will be accessible
    under `/dev/disk/by-id/google-*`
    """
    disk_encryption_key_raw: Optional[str] = pulumi.output_property("diskEncryptionKeyRaw")
    """
    A 256-bit [customer-supplied encryption key]
    (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
    encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
    to encrypt this disk. Only one of `kms_key_self_link` and `disk_encryption_key_raw` may be set.
    """
    disk_encryption_key_sha256: Optional[str] = pulumi.output_property("diskEncryptionKeySha256")
    initialize_params: Optional['outputs.InstanceBootDiskInitializeParams'] = pulumi.output_property("initializeParams")
    """
    Parameters for a new disk that will be created
    alongside the new instance. Either `initialize_params` or `source` must be set.
    Structure is documented below.
    """
    kms_key_self_link: Optional[str] = pulumi.output_property("kmsKeySelfLink")
    """
    The self_link of the encryption key that is
    stored in Google Cloud KMS to encrypt this disk. Only one of `kms_key_self_link`
    and `disk_encryption_key_raw` may be set.
    """
    mode: Optional[str] = pulumi.output_property("mode")
    """
    Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
    If you have a persistent disk with data that you want to share
    between multiple instances, detach it from any read-write instances and
    attach it to one or more instances in read-only mode.
    """
    source: Optional[str] = pulumi.output_property("source")
    """
    The name or self_link of the disk to attach to this instance.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceBootDiskInitializeParams(dict):
    image: Optional[str] = pulumi.output_property("image")
    """
    The image from which to initialize this disk. This can be
    one of: the image's `self_link`, `projects/{project}/global/images/{image}`,
    `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
    `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
    `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
    images names must include the family name. If they don't, use the
    [compute.Image data source](https://www.terraform.io/docs/providers/google/d/compute_image.html).
    For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
    These images can be referred by family name here.
    """
    labels: Optional[Dict[str, Any]] = pulumi.output_property("labels")
    """
    A map of key/value label pairs to assign to the instance.
    """
    size: Optional[float] = pulumi.output_property("size")
    """
    The size of the image in gigabytes. If not specified, it
    will inherit the size of its base image.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateAttachedDisk(dict):
    device_name: Optional[str] = pulumi.output_property("deviceName")
    disk_encryption_key_raw: Optional[str] = pulumi.output_property("diskEncryptionKeyRaw")
    disk_encryption_key_sha256: Optional[str] = pulumi.output_property("diskEncryptionKeySha256")
    kms_key_self_link: Optional[str] = pulumi.output_property("kmsKeySelfLink")
    mode: Optional[str] = pulumi.output_property("mode")
    source: str = pulumi.output_property("source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateBootDisk(dict):
    auto_delete: Optional[bool] = pulumi.output_property("autoDelete")
    device_name: Optional[str] = pulumi.output_property("deviceName")
    disk_encryption_key_raw: Optional[str] = pulumi.output_property("diskEncryptionKeyRaw")
    disk_encryption_key_sha256: Optional[str] = pulumi.output_property("diskEncryptionKeySha256")
    initialize_params: Optional['outputs.InstanceFromTemplateBootDiskInitializeParams'] = pulumi.output_property("initializeParams")
    kms_key_self_link: Optional[str] = pulumi.output_property("kmsKeySelfLink")
    mode: Optional[str] = pulumi.output_property("mode")
    source: Optional[str] = pulumi.output_property("source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateBootDiskInitializeParams(dict):
    image: Optional[str] = pulumi.output_property("image")
    labels: Optional[Dict[str, Any]] = pulumi.output_property("labels")
    size: Optional[float] = pulumi.output_property("size")
    type: Optional[str] = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateGuestAccelerator(dict):
    count: float = pulumi.output_property("count")
    type: str = pulumi.output_property("type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateNetworkInterface(dict):
    access_configs: Optional[List['outputs.InstanceFromTemplateNetworkInterfaceAccessConfig']] = pulumi.output_property("accessConfigs")
    alias_ip_ranges: Optional[List['outputs.InstanceFromTemplateNetworkInterfaceAliasIpRange']] = pulumi.output_property("aliasIpRanges")
    name: Optional[str] = pulumi.output_property("name")
    """
    A unique name for the resource, required by GCE.
    Changing this forces a new resource to be created.
    """
    network: Optional[str] = pulumi.output_property("network")
    network_ip: Optional[str] = pulumi.output_property("networkIp")
    subnetwork: Optional[str] = pulumi.output_property("subnetwork")
    subnetwork_project: Optional[str] = pulumi.output_property("subnetworkProject")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateNetworkInterfaceAccessConfig(dict):
    nat_ip: Optional[str] = pulumi.output_property("natIp")
    network_tier: Optional[str] = pulumi.output_property("networkTier")
    public_ptr_domain_name: Optional[str] = pulumi.output_property("publicPtrDomainName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateNetworkInterfaceAliasIpRange(dict):
    ip_cidr_range: str = pulumi.output_property("ipCidrRange")
    subnetwork_range_name: Optional[str] = pulumi.output_property("subnetworkRangeName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateScheduling(dict):
    automatic_restart: Optional[bool] = pulumi.output_property("automaticRestart")
    min_node_cpus: Optional[float] = pulumi.output_property("minNodeCpus")
    node_affinities: Optional[List['outputs.InstanceFromTemplateSchedulingNodeAffinity']] = pulumi.output_property("nodeAffinities")
    on_host_maintenance: Optional[str] = pulumi.output_property("onHostMaintenance")
    preemptible: Optional[bool] = pulumi.output_property("preemptible")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateSchedulingNodeAffinity(dict):
    key: str = pulumi.output_property("key")
    operator: str = pulumi.output_property("operator")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateScratchDisk(dict):
    interface: str = pulumi.output_property("interface")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateServiceAccount(dict):
    email: Optional[str] = pulumi.output_property("email")
    scopes: List[str] = pulumi.output_property("scopes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceFromTemplateShieldedInstanceConfig(dict):
    enable_integrity_monitoring: Optional[bool] = pulumi.output_property("enableIntegrityMonitoring")
    enable_secure_boot: Optional[bool] = pulumi.output_property("enableSecureBoot")
    enable_vtpm: Optional[bool] = pulumi.output_property("enableVtpm")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceGroupManagerAutoHealingPolicies(dict):
    health_check: str = pulumi.output_property("healthCheck")
    """
    The health check resource that signals autohealing.
    """
    initial_delay_sec: float = pulumi.output_property("initialDelaySec")
    """
    The number of seconds that the managed instance group waits before
    it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceGroupManagerNamedPort(dict):
    name: str = pulumi.output_property("name")
    """
    - Version name.
    """
    port: float = pulumi.output_property("port")
    """
    The port number.
    - - -
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceGroupManagerStatefulDisk(dict):
    delete_rule: Optional[str] = pulumi.output_property("deleteRule")
    """
    , A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`. `NEVER` detatch the disk when the VM is deleted, but not delete the disk. `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently deleted from the instance group. The default is `NEVER`.
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    , The device name of the disk to be attached.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceGroupManagerUpdatePolicy(dict):
    max_surge_fixed: Optional[float] = pulumi.output_property("maxSurgeFixed")
    """
    , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `max_surge_percent`. If neither is set, defaults to 1
    """
    max_surge_percent: Optional[float] = pulumi.output_property("maxSurgePercent")
    """
    , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `max_surge_fixed`.
    """
    max_unavailable_fixed: Optional[float] = pulumi.output_property("maxUnavailableFixed")
    """
    , The maximum number of instances that can be unavailable during the update process. Conflicts with `max_unavailable_percent`. If neither is set, defaults to 1
    """
    max_unavailable_percent: Optional[float] = pulumi.output_property("maxUnavailablePercent")
    """
    , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `max_unavailable_fixed`.
    """
    min_ready_sec: Optional[float] = pulumi.output_property("minReadySec")
    """
    , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
    - - -
    """
    minimal_action: str = pulumi.output_property("minimalAction")
    """
    - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
    """
    type: str = pulumi.output_property("type")
    """
    - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceGroupManagerVersion(dict):
    instance_template: str = pulumi.output_property("instanceTemplate")
    """
    - The full URL to an instance template from which all new instances of this version will be created.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    - Version name.
    """
    target_size: Optional['outputs.InstanceGroupManagerVersionTargetSize'] = pulumi.output_property("targetSize")
    """
    - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceGroupManagerVersionTargetSize(dict):
    fixed: Optional[float] = pulumi.output_property("fixed")
    """
    , The number of instances which are managed for this version. Conflicts with `percent`.
    """
    percent: Optional[float] = pulumi.output_property("percent")
    """
    , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
    Note that when using `percent`, rounding will be in favor of explicitly set `target_size` values; a managed instance group with 2 instances and 2 `version`s,
    one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceGroupNamedPort(dict):
    name: str = pulumi.output_property("name")
    """
    The name which the port will be mapped to.
    """
    port: float = pulumi.output_property("port")
    """
    The port number to map the name to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceGuestAccelerator(dict):
    count: float = pulumi.output_property("count")
    """
    The number of the guest accelerator cards exposed to this instance.
    """
    type: str = pulumi.output_property("type")
    """
    The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceIAMBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    """
    expression: str = pulumi.output_property("expression")
    """
    Textual representation of an expression in Common Expression Language syntax.
    """
    title: str = pulumi.output_property("title")
    """
    A title for the expression, i.e. a short string describing its purpose.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceIAMMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    """
    expression: str = pulumi.output_property("expression")
    """
    Textual representation of an expression in Common Expression Language syntax.
    """
    title: str = pulumi.output_property("title")
    """
    A title for the expression, i.e. a short string describing its purpose.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceNetworkInterface(dict):
    access_configs: Optional[List['outputs.InstanceNetworkInterfaceAccessConfig']] = pulumi.output_property("accessConfigs")
    """
    Access configurations, i.e. IPs via which this
    instance can be accessed via the Internet. Omit to ensure that the instance
    is not accessible from the Internet. If omitted, ssh will not
    work unless this provider can send traffic to the instance's network (e.g. via
    tunnel or because it is running on another cloud instance on that network).
    This block can be repeated multiple times. Structure documented below.
    """
    alias_ip_ranges: Optional[List['outputs.InstanceNetworkInterfaceAliasIpRange']] = pulumi.output_property("aliasIpRanges")
    """
    An
    array of alias IP ranges for this network interface. Can only be specified for network
    interfaces on subnet-mode networks. Structure documented below.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    A unique name for the resource, required by GCE.
    Changing this forces a new resource to be created.
    """
    network: Optional[str] = pulumi.output_property("network")
    """
    The name or self_link of the network to attach this interface to.
    Either `network` or `subnetwork` must be provided.
    """
    network_ip: Optional[str] = pulumi.output_property("networkIp")
    """
    The private IP address to assign to the instance. If
    empty, the address will be automatically assigned.
    """
    subnetwork: Optional[str] = pulumi.output_property("subnetwork")
    """
    The name or self_link of the subnetwork to attach this
    interface to. The subnetwork must exist in the same region this instance will be
    created in. Either `network` or `subnetwork` must be provided.
    """
    subnetwork_project: Optional[str] = pulumi.output_property("subnetworkProject")
    """
    The project in which the subnetwork belongs.
    If the `subnetwork` is a self_link, this field is ignored in favor of the project
    defined in the subnetwork self_link. If the `subnetwork` is a name and this
    field is not provided, the provider project is used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceNetworkInterfaceAccessConfig(dict):
    nat_ip: Optional[str] = pulumi.output_property("natIp")
    """
    The IP address that will be 1:1 mapped to the instance's
    network ip. If not given, one will be generated.
    """
    network_tier: Optional[str] = pulumi.output_property("networkTier")
    """
    The [networking tier][network-tier] used for configuring this instance.
    This field can take the following values: PREMIUM or STANDARD. If this field is
    not specified, it is assumed to be PREMIUM.
    """
    public_ptr_domain_name: Optional[str] = pulumi.output_property("publicPtrDomainName")
    """
    The DNS domain name for the public PTR record.
    To set this field on an instance, you must be verified as the owner of the domain.
    See [the docs](https://cloud.google.com/compute/docs/instances/create-ptr-record) for how
    to become verified as a domain owner.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceNetworkInterfaceAliasIpRange(dict):
    ip_cidr_range: str = pulumi.output_property("ipCidrRange")
    """
    The IP CIDR range represented by this alias IP range. This IP CIDR range
    must belong to the specified subnetwork and cannot contain IP addresses reserved by
    system or used by other network interfaces. This range may be a single IP address
    (e.g. 10.2.3.4), a netmask (e.g. /24) or a CIDR format string (e.g. 10.1.2.0/24).
    """
    subnetwork_range_name: Optional[str] = pulumi.output_property("subnetworkRangeName")
    """
    The subnetwork secondary range name specifying
    the secondary range from which to allocate the IP CIDR range for this alias IP
    range. If left unspecified, the primary range of the subnetwork will be used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceScheduling(dict):
    automatic_restart: Optional[bool] = pulumi.output_property("automaticRestart")
    """
    Specifies if the instance should be
    restarted if it was terminated by Compute Engine (not a user).
    Defaults to true.
    """
    min_node_cpus: Optional[float] = pulumi.output_property("minNodeCpus")
    node_affinities: Optional[List['outputs.InstanceSchedulingNodeAffinity']] = pulumi.output_property("nodeAffinities")
    """
    Specifies node affinities or anti-affinities
    to determine which sole-tenant nodes your instances and managed instance
    groups will use as host systems. Read more on sole-tenant node creation
    [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
    Structure documented below.
    """
    on_host_maintenance: Optional[str] = pulumi.output_property("onHostMaintenance")
    """
    Describes maintenance behavior for the
    instance. Can be MIGRATE or TERMINATE, for more info, read
    [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options).
    """
    preemptible: Optional[bool] = pulumi.output_property("preemptible")
    """
    Specifies if the instance is preemptible.
    If this field is set to true, then `automatic_restart` must be
    set to false.  Defaults to false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceSchedulingNodeAffinity(dict):
    key: str = pulumi.output_property("key")
    """
    The key for the node affinity label.
    """
    operator: str = pulumi.output_property("operator")
    """
    The operator. Can be `IN` for node-affinities
    or `NOT_IN` for anti-affinities.
    """
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceScratchDisk(dict):
    interface: str = pulumi.output_property("interface")
    """
    The disk interface to use for attaching this disk; either SCSI or NVME.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceServiceAccount(dict):
    email: Optional[str] = pulumi.output_property("email")
    """
    The service account e-mail address. If not given, the
    default Google Compute Engine service account is used.
    **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
    """
    scopes: List[str] = pulumi.output_property("scopes")
    """
    A list of service scopes. Both OAuth2 URLs and gcloud
    short names are supported. To allow full access to all Cloud APIs, use the
    `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
    **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceShieldedInstanceConfig(dict):
    enable_integrity_monitoring: Optional[bool] = pulumi.output_property("enableIntegrityMonitoring")
    """
    -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
    """
    enable_secure_boot: Optional[bool] = pulumi.output_property("enableSecureBoot")
    """
    -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
    """
    enable_vtpm: Optional[bool] = pulumi.output_property("enableVtpm")
    """
    -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateDisk(dict):
    auto_delete: Optional[bool] = pulumi.output_property("autoDelete")
    """
    Whether or not the disk should be auto-deleted.
    This defaults to true.
    """
    boot: Optional[bool] = pulumi.output_property("boot")
    """
    Indicates that this is a boot disk.
    """
    device_name: Optional[str] = pulumi.output_property("deviceName")
    """
    A unique device name that is reflected into the
    /dev/  tree of a Linux operating system running within the instance. If not
    specified, the server chooses a default device name to apply to this disk.
    """
    disk_encryption_key: Optional['outputs.InstanceTemplateDiskDiskEncryptionKey'] = pulumi.output_property("diskEncryptionKey")
    """
    Encrypts or decrypts a disk using a customer-supplied encryption key.
    """
    disk_name: Optional[str] = pulumi.output_property("diskName")
    """
    Name of the disk. When not provided, this defaults
    to the name of the instance.
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    The size of the image in gigabytes. If not
    specified, it will inherit the size of its base image. For SCRATCH disks,
    the size must be exactly 375GB.
    """
    disk_type: Optional[str] = pulumi.output_property("diskType")
    """
    The GCE disk type. Can be either `"pd-ssd"`,
    `"local-ssd"`, or `"pd-standard"`.
    """
    interface: Optional[str] = pulumi.output_property("interface")
    """
    Specifies the disk interface to use for attaching
    this disk.
    """
    labels: Optional[Dict[str, str]] = pulumi.output_property("labels")
    """
    A set of key/value label pairs to assign to instances
    created from this template,
    """
    mode: Optional[str] = pulumi.output_property("mode")
    """
    The mode in which to attach this disk, either READ_WRITE
    or READ_ONLY. If you are attaching or creating a boot disk, this must
    read-write mode.
    """
    source: Optional[str] = pulumi.output_property("source")
    """
    The name (**not self_link**)
    of the disk (such as those managed by `compute.Disk`) to attach.
    > **Note:** Either `source` or `source_image` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
    """
    source_image: Optional[str] = pulumi.output_property("sourceImage")
    """
    The image from which to
    initialize this disk. This can be one of: the image's `self_link`,
    `projects/{project}/global/images/{image}`,
    `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
    `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
    `{project}/{image}`, `{family}`, or `{image}`.
    > **Note:** Either `source` or `source_image` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateDiskDiskEncryptionKey(dict):
    kms_key_self_link: str = pulumi.output_property("kmsKeySelfLink")
    """
    The self link of the encryption key that is stored in Google Cloud KMS
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateGuestAccelerator(dict):
    count: float = pulumi.output_property("count")
    """
    The number of the guest accelerator cards exposed to this instance.
    """
    type: str = pulumi.output_property("type")
    """
    The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateNetworkInterface(dict):
    access_configs: Optional[List['outputs.InstanceTemplateNetworkInterfaceAccessConfig']] = pulumi.output_property("accessConfigs")
    """
    Access configurations, i.e. IPs via which this
    instance can be accessed via the Internet. Omit to ensure that the instance
    is not accessible from the Internet (this means that ssh provisioners will
    not work unless you can send traffic to the instance's
    network (e.g. via tunnel or because it is running on another cloud instance
    on that network). This block can be repeated multiple times. Structure documented below.
    """
    alias_ip_ranges: Optional[List['outputs.InstanceTemplateNetworkInterfaceAliasIpRange']] = pulumi.output_property("aliasIpRanges")
    """
    An
    array of alias IP ranges for this network interface. Can only be specified for network
    interfaces on subnet-mode networks. Structure documented below.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name of the instance template. If you leave
    this blank, the provider will auto-generate a unique name.
    """
    network: Optional[str] = pulumi.output_property("network")
    """
    The name or self_link of the network to attach this interface to.
    Use `network` attribute for Legacy or Auto subnetted networks and
    `subnetwork` for custom subnetted networks.
    """
    network_ip: Optional[str] = pulumi.output_property("networkIp")
    """
    The private IP address to assign to the instance. If
    empty, the address will be automatically assigned.
    """
    subnetwork: Optional[str] = pulumi.output_property("subnetwork")
    """
    the name of the subnetwork to attach this interface
    to. The subnetwork must exist in the same `region` this instance will be
    created in. Either `network` or `subnetwork` must be provided.
    """
    subnetwork_project: Optional[str] = pulumi.output_property("subnetworkProject")
    """
    The ID of the project in which the subnetwork belongs.
    If it is not provided, the provider project is used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateNetworkInterfaceAccessConfig(dict):
    nat_ip: Optional[str] = pulumi.output_property("natIp")
    """
    The IP address that will be 1:1 mapped to the instance's
    network ip. If not given, one will be generated.
    """
    network_tier: Optional[str] = pulumi.output_property("networkTier")
    """
    The [networking tier][network-tier] used for configuring
    this instance template. This field can take the following values: PREMIUM or
    STANDARD. If this field is not specified, it is assumed to be PREMIUM.
    """
    public_ptr_domain_name: Optional[str] = pulumi.output_property("publicPtrDomainName")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateNetworkInterfaceAliasIpRange(dict):
    ip_cidr_range: str = pulumi.output_property("ipCidrRange")
    """
    The IP CIDR range represented by this alias IP range. This IP CIDR range
    must belong to the specified subnetwork and cannot contain IP addresses reserved by
    system or used by other network interfaces. At the time of writing only a
    netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API
    error.
    """
    subnetwork_range_name: Optional[str] = pulumi.output_property("subnetworkRangeName")
    """
    The subnetwork secondary range name specifying
    the secondary range from which to allocate the IP CIDR range for this alias IP
    range. If left unspecified, the primary range of the subnetwork will be used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateScheduling(dict):
    automatic_restart: Optional[bool] = pulumi.output_property("automaticRestart")
    """
    Specifies whether the instance should be
    automatically restarted if it is terminated by Compute Engine (not
    terminated by a user). This defaults to true.
    """
    min_node_cpus: Optional[float] = pulumi.output_property("minNodeCpus")
    node_affinities: Optional[List['outputs.InstanceTemplateSchedulingNodeAffinity']] = pulumi.output_property("nodeAffinities")
    """
    Specifies node affinities or anti-affinities
    to determine which sole-tenant nodes your instances and managed instance
    groups will use as host systems. Read more on sole-tenant node creation
    [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
    Structure documented below.
    """
    on_host_maintenance: Optional[str] = pulumi.output_property("onHostMaintenance")
    """
    Defines the maintenance behavior for this
    instance.
    """
    preemptible: Optional[bool] = pulumi.output_property("preemptible")
    """
    Allows instance to be preempted. This defaults to
    false. Read more on this
    [here](https://cloud.google.com/compute/docs/instances/preemptible).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateSchedulingNodeAffinity(dict):
    key: str = pulumi.output_property("key")
    """
    The key for the node affinity label.
    """
    operator: str = pulumi.output_property("operator")
    """
    The operator. Can be `IN` for node-affinities
    or `NOT_IN` for anti-affinities.
    """
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateServiceAccount(dict):
    email: Optional[str] = pulumi.output_property("email")
    """
    The service account e-mail address. If not given, the
    default Google Compute Engine service account is used.
    """
    scopes: List[str] = pulumi.output_property("scopes")
    """
    A list of service scopes. Both OAuth2 URLs and gcloud
    short names are supported. To allow full access to all Cloud APIs, use the
    `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InstanceTemplateShieldedInstanceConfig(dict):
    enable_integrity_monitoring: Optional[bool] = pulumi.output_property("enableIntegrityMonitoring")
    """
    -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
    """
    enable_secure_boot: Optional[bool] = pulumi.output_property("enableSecureBoot")
    """
    -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
    """
    enable_vtpm: Optional[bool] = pulumi.output_property("enableVtpm")
    """
    -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InterconnectAttachmentPrivateInterconnectInfo(dict):
    tag8021q: Optional[float] = pulumi.output_property("tag8021q")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManagedSslCertificateManaged(dict):
    domains: List[str] = pulumi.output_property("domains")
    """
    Domains for which a managed SSL certificate will be valid.  Currently,
    there can be up to 100 domains in this list.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MangedSslCertificateManaged(dict):
    domains: List[str] = pulumi.output_property("domains")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodeGroupAutoscalingPolicy(dict):
    max_nodes: Optional[float] = pulumi.output_property("maxNodes")
    """
    Maximum size of the node group. Set to a value less than or equal
    to 100 and greater than or equal to min-nodes.
    """
    min_nodes: Optional[float] = pulumi.output_property("minNodes")
    """
    Minimum size of the node group. Must be less
    than or equal to max-nodes. The default value is 0.
    """
    mode: Optional[str] = pulumi.output_property("mode")
    """
    The autoscaling mode. Set to one of the following:
    - OFF: Disables the autoscaler.
    - ON: Enables scaling in and scaling out.
    - ONLY_SCALE_OUT: Enables only scaling out.
    You must use this mode if your node groups are configured to
    restart their hosted VMs on minimal servers.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodeTemplateNodeTypeFlexibility(dict):
    cpus: Optional[str] = pulumi.output_property("cpus")
    """
    Number of virtual CPUs to use.
    """
    local_ssd: Optional[str] = pulumi.output_property("localSsd")
    """
    -
    Use local SSD
    """
    memory: Optional[str] = pulumi.output_property("memory")
    """
    Physical memory available to the node, defined in MB.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NodeTemplateServerBinding(dict):
    type: str = pulumi.output_property("type")
    """
    Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
    nodes using this template will restart on any physical server
    following a maintenance event.
    If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
    will restart on the same physical server following a maintenance
    event, instead of being live migrated to or restarted on a new
    physical server. This option may be useful if you are using
    software licenses tied to the underlying server characteristics
    such as physical sockets or cores, to avoid the need for
    additional licenses when maintenance occurs. However, VMs on such
    nodes will experience outages while maintenance is applied.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketMirroringCollectorIlb(dict):
    url: str = pulumi.output_property("url")
    """
    The URL of the instances where this rule should be active.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketMirroringFilter(dict):
    cidr_ranges: Optional[List[str]] = pulumi.output_property("cidrRanges")
    """
    IP CIDR ranges that apply as a filter on the source (ingress) or
    destination (egress) IP in the IP header. Only IPv4 is supported.
    """
    ip_protocols: Optional[List[str]] = pulumi.output_property("ipProtocols")
    """
    Protocols that apply as a filter on mirrored traffic.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketMirroringMirroredResources(dict):
    instances: Optional[List['outputs.PacketMirroringMirroredResourcesInstance']] = pulumi.output_property("instances")
    """
    All the listed instances will be mirrored.  Specify at most 50.  Structure is documented below.
    """
    subnetworks: Optional[List['outputs.PacketMirroringMirroredResourcesSubnetwork']] = pulumi.output_property("subnetworks")
    """
    All instances in one of these subnetworks will be mirrored.  Structure is documented below.
    """
    tags: Optional[List[str]] = pulumi.output_property("tags")
    """
    All instances with these tags will be mirrored.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketMirroringMirroredResourcesInstance(dict):
    url: str = pulumi.output_property("url")
    """
    The URL of the instances where this rule should be active.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketMirroringMirroredResourcesSubnetwork(dict):
    url: str = pulumi.output_property("url")
    """
    The URL of the instances where this rule should be active.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketMirroringNetwork(dict):
    url: str = pulumi.output_property("url")
    """
    The URL of the instances where this rule should be active.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PerInstanceConfigPreservedState(dict):
    disks: Optional[List['outputs.PerInstanceConfigPreservedStateDisk']] = pulumi.output_property("disks")
    """
    Stateful disks for the instance.  Structure is documented below.
    """
    metadata: Optional[Dict[str, str]] = pulumi.output_property("metadata")
    """
    Preserved metadata defined for this instance. This is a list of key->value pairs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PerInstanceConfigPreservedStateDisk(dict):
    delete_rule: Optional[str] = pulumi.output_property("deleteRule")
    """
    A value that prescribes what should happen to the stateful disk when the VM instance is deleted.
    The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
    `NEVER` detatch the disk when the VM is deleted, but not delete the disk.
    `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently
    deleted from the instance group.
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.
    """
    mode: Optional[str] = pulumi.output_property("mode")
    """
    The mode of the disk.
    """
    source: str = pulumi.output_property("source")
    """
    The URI of an existing persistent disk to attach under the specified device-name in the format
    `projects/project-id/zones/zone/disks/disk-name`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionAutoscalerAutoscalingPolicy(dict):
    cooldown_period: Optional[float] = pulumi.output_property("cooldownPeriod")
    """
    The number of seconds that the autoscaler should wait before it
    starts collecting information from a new instance. This prevents
    the autoscaler from collecting information when the instance is
    initializing, during which the collected usage would not be
    reliable. The default time autoscaler waits is 60 seconds.
    Virtual machine initialization times might vary because of
    numerous factors. We recommend that you test how long an
    instance may take to initialize. To do this, create an instance
    and time the startup process.
    """
    cpu_utilization: Optional['outputs.RegionAutoscalerAutoscalingPolicyCpuUtilization'] = pulumi.output_property("cpuUtilization")
    """
    Defines the CPU utilization policy that allows the autoscaler to
    scale based on the average CPU utilization of a managed instance
    group.  Structure is documented below.
    """
    load_balancing_utilization: Optional['outputs.RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization'] = pulumi.output_property("loadBalancingUtilization")
    """
    Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
    """
    max_replicas: float = pulumi.output_property("maxReplicas")
    """
    The maximum number of instances that the autoscaler can scale up
    to. This is required when creating or updating an autoscaler. The
    maximum number of replicas should not be lower than minimal number
    of replicas.
    """
    metrics: Optional[List['outputs.RegionAutoscalerAutoscalingPolicyMetric']] = pulumi.output_property("metrics")
    """
    Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
    """
    min_replicas: float = pulumi.output_property("minReplicas")
    """
    The minimum number of replicas that the autoscaler can scale down
    to. This cannot be less than 0. If not provided, autoscaler will
    choose a default value depending on maximum number of instances
    allowed.
    """
    mode: Optional[str] = pulumi.output_property("mode")
    """
    Defines operating mode for this policy.
    """
    scale_down_control: Optional['outputs.RegionAutoscalerAutoscalingPolicyScaleDownControl'] = pulumi.output_property("scaleDownControl")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionAutoscalerAutoscalingPolicyCpuUtilization(dict):
    target: float = pulumi.output_property("target")
    """
    Fraction of backend capacity utilization (set in HTTP(s) load
    balancing configuration) that autoscaler should maintain. Must
    be a positive float value. If not defined, the default is 0.8.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization(dict):
    target: float = pulumi.output_property("target")
    """
    Fraction of backend capacity utilization (set in HTTP(s) load
    balancing configuration) that autoscaler should maintain. Must
    be a positive float value. If not defined, the default is 0.8.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionAutoscalerAutoscalingPolicyMetric(dict):
    filter: Optional[str] = pulumi.output_property("filter")
    """
    A filter string to be used as the filter string for
    a Stackdriver Monitoring TimeSeries.list API call.
    This filter is used to select a specific TimeSeries for
    the purpose of autoscaling and to determine whether the metric
    is exporting per-instance or per-group data.
    You can only use the AND operator for joining selectors.
    You can only use direct equality comparison operator (=) without
    any functions for each selector.
    You can specify the metric in both the filter string and in the
    metric field. However, if specified in both places, the metric must
    be identical.
    The monitored resource type determines what kind of values are
    expected for the metric. If it is a gce_instance, the autoscaler
    expects the metric to include a separate TimeSeries for each
    instance in a group. In such a case, you cannot filter on resource
    labels.
    If the resource type is any other value, the autoscaler expects
    this metric to contain values that apply to the entire autoscaled
    instance group and resource label filtering can be performed to
    point autoscaler at the correct TimeSeries to scale upon.
    This is called a per-group metric for the purpose of autoscaling.
    If not specified, the type defaults to gce_instance.
    You should provide a filter that is selective enough to pick just
    one TimeSeries for the autoscaled group or for each of the instances
    (if you are using gce_instance resource type). If multiple
    TimeSeries are returned upon the query execution, the autoscaler
    will sum their respective values to obtain its scaling value.
    """
    name: str = pulumi.output_property("name")
    """
    The identifier (type) of the Stackdriver Monitoring metric.
    The metric cannot have negative values.
    The metric must have a value type of INT64 or DOUBLE.
    """
    single_instance_assignment: Optional[float] = pulumi.output_property("singleInstanceAssignment")
    """
    If scaling is based on a per-group metric value that represents the
    total amount of work to be done or resource usage, set this value to
    an amount assigned for a single instance of the scaled group.
    The autoscaler will keep the number of instances proportional to the
    value of this metric, the metric itself should not change value due
    to group resizing.
    For example, a good metric to use with the target is
    `pubsub.googleapis.com/subscription/num_undelivered_messages`
    or a custom metric exporting the total number of requests coming to
    your instances.
    A bad example would be a metric exporting an average or median
    latency, since this value can't include a chunk assignable to a
    single instance, it could be better used with utilization_target
    instead.
    """
    target: Optional[float] = pulumi.output_property("target")
    """
    Fraction of backend capacity utilization (set in HTTP(s) load
    balancing configuration) that autoscaler should maintain. Must
    be a positive float value. If not defined, the default is 0.8.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Defines how target utilization value is expressed for a
    Stackdriver Monitoring metric.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionAutoscalerAutoscalingPolicyScaleDownControl(dict):
    max_scaled_down_replicas: Optional['outputs.RegionAutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicas'] = pulumi.output_property("maxScaledDownReplicas")
    """
    A nested object resource  Structure is documented below.
    """
    time_window_sec: Optional[float] = pulumi.output_property("timeWindowSec")
    """
    How long back autoscaling should look when computing recommendations
    to include directives regarding slower scale down, as described above.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionAutoscalerAutoscalingPolicyScaleDownControlMaxScaledDownReplicas(dict):
    fixed: Optional[float] = pulumi.output_property("fixed")
    """
    Specifies a fixed number of VM instances. This must be a positive
    integer.
    """
    percent: Optional[float] = pulumi.output_property("percent")
    """
    Specifies a percentage of instances between 0 to 100%, inclusive.
    For example, specify 80 for 80%.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceBackend(dict):
    balancing_mode: Optional[str] = pulumi.output_property("balancingMode")
    """
    Specifies the balancing mode for this backend.
    """
    capacity_scaler: Optional[float] = pulumi.output_property("capacityScaler")
    """
    A multiplier applied to the group's maximum servicing capacity
    (based on UTILIZATION, RATE or CONNECTION).
    ~>**NOTE**: This field cannot be set for
    INTERNAL region backend services (default loadBalancingScheme),
    but is required for non-INTERNAL backend service. The total
    capacity_scaler for all backends must be non-zero.
    A setting of 0 means the group is completely drained, offering
    0% of its available Capacity. Valid range is [0.0,1.0].
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    An optional description of this resource.
    Provide this property when you create the resource.
    """
    failover: Optional[bool] = pulumi.output_property("failover")
    """
    This field designates whether this is a failover backend. More
    than one failover backend can be configured for a given RegionBackendService.
    """
    group: str = pulumi.output_property("group")
    """
    The fully-qualified URL of an Instance Group or Network Endpoint
    Group resource. In case of instance group this defines the list
    of instances that serve traffic. Member virtual machine
    instances from each instance group must live in the same zone as
    the instance group itself. No two backends in a backend service
    are allowed to use same Instance Group resource.
    For Network Endpoint Groups this defines list of endpoints. All
    endpoints of Network Endpoint Group must be hosted on instances
    located in the same zone as the Network Endpoint Group.
    Backend services cannot mix Instance Group and
    Network Endpoint Group backends.
    When the `load_balancing_scheme` is INTERNAL, only instance groups
    are supported.
    Note that you must specify an Instance Group or Network Endpoint
    Group resource using the fully-qualified URL, rather than a
    partial URL.
    """
    max_connections: Optional[float] = pulumi.output_property("maxConnections")
    """
    The maximum number of connections to the backend cluster.
    Defaults to 1024.
    """
    max_connections_per_endpoint: Optional[float] = pulumi.output_property("maxConnectionsPerEndpoint")
    """
    The max number of simultaneous connections that a single backend
    network endpoint can handle. Cannot be set
    for INTERNAL backend services.
    This is used to calculate the capacity of the group. Can be
    used in either CONNECTION or UTILIZATION balancing modes. For
    CONNECTION mode, either maxConnections or
    maxConnectionsPerEndpoint must be set.
    """
    max_connections_per_instance: Optional[float] = pulumi.output_property("maxConnectionsPerInstance")
    """
    The max number of simultaneous connections that a single
    backend instance can handle. Cannot be set for INTERNAL backend
    services.
    This is used to calculate the capacity of the group.
    Can be used in either CONNECTION or UTILIZATION balancing modes.
    For CONNECTION mode, either maxConnections or
    maxConnectionsPerInstance must be set.
    """
    max_rate: Optional[float] = pulumi.output_property("maxRate")
    """
    The max requests per second (RPS) of the group. Cannot be set
    for INTERNAL backend services.
    Can be used with either RATE or UTILIZATION balancing modes,
    but required if RATE mode. Either maxRate or one
    of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    group type, must be set.
    """
    max_rate_per_endpoint: Optional[float] = pulumi.output_property("maxRatePerEndpoint")
    """
    The max requests per second (RPS) that a single backend network
    endpoint can handle. This is used to calculate the capacity of
    the group. Can be used in either balancing mode. For RATE mode,
    either maxRate or maxRatePerEndpoint must be set. Cannot be set
    for INTERNAL backend services.
    """
    max_rate_per_instance: Optional[float] = pulumi.output_property("maxRatePerInstance")
    """
    The max requests per second (RPS) that a single backend
    instance can handle. This is used to calculate the capacity of
    the group. Can be used in either balancing mode. For RATE mode,
    either maxRate or maxRatePerInstance must be set. Cannot be set
    for INTERNAL backend services.
    """
    max_utilization: Optional[float] = pulumi.output_property("maxUtilization")
    """
    Used when balancingMode is UTILIZATION. This ratio defines the
    CPU utilization target for the group. Valid range is [0.0, 1.0].
    Cannot be set for INTERNAL backend services.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceCircuitBreakers(dict):
    connect_timeout: Optional['outputs.RegionBackendServiceCircuitBreakersConnectTimeout'] = pulumi.output_property("connectTimeout")
    """
    The timeout for new network connections to hosts.  Structure is documented below.
    """
    max_connections: Optional[float] = pulumi.output_property("maxConnections")
    """
    The maximum number of connections to the backend cluster.
    Defaults to 1024.
    """
    max_pending_requests: Optional[float] = pulumi.output_property("maxPendingRequests")
    """
    The maximum number of pending requests to the backend cluster.
    Defaults to 1024.
    """
    max_requests: Optional[float] = pulumi.output_property("maxRequests")
    """
    The maximum number of parallel requests to the backend cluster.
    Defaults to 1024.
    """
    max_requests_per_connection: Optional[float] = pulumi.output_property("maxRequestsPerConnection")
    """
    Maximum requests for a single backend connection. This parameter
    is respected by both the HTTP/1.1 and HTTP/2 implementations. If
    not specified, there is no limit. Setting this parameter to 1
    will effectively disable keep alive.
    """
    max_retries: Optional[float] = pulumi.output_property("maxRetries")
    """
    The maximum number of parallel retries to the backend cluster.
    Defaults to 3.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceCircuitBreakersConnectTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: float = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceConsistentHash(dict):
    http_cookie: Optional['outputs.RegionBackendServiceConsistentHashHttpCookie'] = pulumi.output_property("httpCookie")
    """
    Hash is based on HTTP Cookie. This field describes a HTTP cookie
    that will be used as the hash key for the consistent hash load
    balancer. If the cookie is not present, it will be generated.
    This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
    """
    http_header_name: Optional[str] = pulumi.output_property("httpHeaderName")
    """
    The hash based on the value of the specified header field.
    This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    """
    minimum_ring_size: Optional[float] = pulumi.output_property("minimumRingSize")
    """
    The minimum number of virtual nodes to use for the hash ring.
    Larger ring sizes result in more granular load
    distributions. If the number of hosts in the load balancing pool
    is larger than the ring size, each host will be assigned a single
    virtual node.
    Defaults to 1024.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceConsistentHashHttpCookie(dict):
    name: Optional[str] = pulumi.output_property("name")
    """
    Name of the cookie.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    Path to set for the cookie.
    """
    ttl: Optional['outputs.RegionBackendServiceConsistentHashHttpCookieTtl'] = pulumi.output_property("ttl")
    """
    Lifetime of the cookie.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceConsistentHashHttpCookieTtl(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: float = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceFailoverPolicy(dict):
    disable_connection_drain_on_failover: Optional[bool] = pulumi.output_property("disableConnectionDrainOnFailover")
    """
    On failover or failback, this field indicates whether connection drain
    will be honored. Setting this to true has the following effect: connections
    to the old active pool are not drained. Connections to the new active pool
    use the timeout of 10 min (currently fixed). Setting to false has the
    following effect: both old and new connections will have a drain timeout
    of 10 min.
    This can be set to true only if the protocol is TCP.
    The default is false.
    """
    drop_traffic_if_unhealthy: Optional[bool] = pulumi.output_property("dropTrafficIfUnhealthy")
    """
    This option is used only when no healthy VMs are detected in the primary
    and backup instance groups. When set to true, traffic is dropped. When
    set to false, new connections are sent across all VMs in the primary group.
    The default is false.
    """
    failover_ratio: Optional[float] = pulumi.output_property("failoverRatio")
    """
    The value of the field must be in [0, 1]. If the ratio of the healthy
    VMs in the primary backend is at or below this number, traffic arriving
    at the load-balanced IP will be directed to the failover backend.
    In case where 'failoverRatio' is not set or all the VMs in the backup
    backend are unhealthy, the traffic will be directed back to the primary
    backend in the "force" mode, where traffic will be spread to the healthy
    VMs with the best effort, or to all VMs when no VM is healthy.
    This field is only used with l4 load balancing.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceLogConfig(dict):
    enable: Optional[bool] = pulumi.output_property("enable")
    """
    Whether to enable logging for the load balancer traffic served by this backend service.
    """
    sample_rate: Optional[float] = pulumi.output_property("sampleRate")
    """
    This field can only be specified if logging is enabled for this backend service. The value of
    the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
    where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
    The default value is 1.0.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceOutlierDetection(dict):
    base_ejection_time: Optional['outputs.RegionBackendServiceOutlierDetectionBaseEjectionTime'] = pulumi.output_property("baseEjectionTime")
    """
    The base time that a host is ejected for. The real time is equal to the base
    time multiplied by the number of times the host has been ejected. Defaults to
    30000ms or 30s.  Structure is documented below.
    """
    consecutive_errors: Optional[float] = pulumi.output_property("consecutiveErrors")
    """
    Number of errors before a host is ejected from the connection pool. When the
    backend host is accessed over HTTP, a 5xx return code qualifies as an error.
    Defaults to 5.
    """
    consecutive_gateway_failure: Optional[float] = pulumi.output_property("consecutiveGatewayFailure")
    """
    The number of consecutive gateway failures (502, 503, 504 status or connection
    errors that are mapped to one of those status codes) before a consecutive
    gateway failure ejection occurs. Defaults to 5.
    """
    enforcing_consecutive_errors: Optional[float] = pulumi.output_property("enforcingConsecutiveErrors")
    """
    The percentage chance that a host will be actually ejected when an outlier
    status is detected through consecutive 5xx. This setting can be used to disable
    ejection or to ramp it up slowly. Defaults to 100.
    """
    enforcing_consecutive_gateway_failure: Optional[float] = pulumi.output_property("enforcingConsecutiveGatewayFailure")
    """
    The percentage chance that a host will be actually ejected when an outlier
    status is detected through consecutive gateway failures. This setting can be
    used to disable ejection or to ramp it up slowly. Defaults to 0.
    """
    enforcing_success_rate: Optional[float] = pulumi.output_property("enforcingSuccessRate")
    """
    The percentage chance that a host will be actually ejected when an outlier
    status is detected through success rate statistics. This setting can be used to
    disable ejection or to ramp it up slowly. Defaults to 100.
    """
    interval: Optional['outputs.RegionBackendServiceOutlierDetectionInterval'] = pulumi.output_property("interval")
    """
    Time interval between ejection sweep analysis. This can result in both new
    ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
    """
    max_ejection_percent: Optional[float] = pulumi.output_property("maxEjectionPercent")
    """
    Maximum percentage of hosts in the load balancing pool for the backend service
    that can be ejected. Defaults to 10%.
    """
    success_rate_minimum_hosts: Optional[float] = pulumi.output_property("successRateMinimumHosts")
    """
    The number of hosts in a cluster that must have enough request volume to detect
    success rate outliers. If the number of hosts is less than this setting, outlier
    detection via success rate statistics is not performed for any host in the
    cluster. Defaults to 5.
    """
    success_rate_request_volume: Optional[float] = pulumi.output_property("successRateRequestVolume")
    """
    The minimum number of total requests that must be collected in one interval (as
    defined by the interval duration above) to include this host in success rate
    based outlier detection. If the volume is lower than this setting, outlier
    detection via success rate statistics is not performed for that host. Defaults
    to 100.
    """
    success_rate_stdev_factor: Optional[float] = pulumi.output_property("successRateStdevFactor")
    """
    This factor is used to determine the ejection threshold for success rate outlier
    ejection. The ejection threshold is the difference between the mean success
    rate, and the product of this factor and the standard deviation of the mean
    success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
    by a thousand to get a double. That is, if the desired factor is 1.9, the
    runtime value should be 1900. Defaults to 1900.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceOutlierDetectionBaseEjectionTime(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: float = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionBackendServiceOutlierDetectionInterval(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: float = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionDiskDiskEncryptionKey(dict):
    kms_key_name: Optional[str] = pulumi.output_property("kmsKeyName")
    """
    The name of the encryption key that is stored in Google Cloud KMS.
    """
    raw_key: Optional[str] = pulumi.output_property("rawKey")
    """
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.
    """
    sha256: Optional[str] = pulumi.output_property("sha256")
    """
    -
    The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    encryption key that protects this resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionDiskSourceSnapshotEncryptionKey(dict):
    kms_key_name: Optional[str] = pulumi.output_property("kmsKeyName")
    """
    The name of the encryption key that is stored in Google Cloud KMS.
    """
    raw_key: Optional[str] = pulumi.output_property("rawKey")
    """
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.
    """
    sha256: Optional[str] = pulumi.output_property("sha256")
    """
    -
    The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    encryption key that protects this resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionHealthCheckHttp2HealthCheck(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    The value of the host header in the HTTP2 health check request.
    If left empty (default value), the public IP on behalf of which this health
    check is performed will be used.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request_path: Optional[str] = pulumi.output_property("requestPath")
    """
    The request path of the HTTP2 health check request.
    The default value is /.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionHealthCheckHttpHealthCheck(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    The value of the host header in the HTTP2 health check request.
    If left empty (default value), the public IP on behalf of which this health
    check is performed will be used.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request_path: Optional[str] = pulumi.output_property("requestPath")
    """
    The request path of the HTTP2 health check request.
    The default value is /.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionHealthCheckHttpsHealthCheck(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    The value of the host header in the HTTP2 health check request.
    If left empty (default value), the public IP on behalf of which this health
    check is performed will be used.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request_path: Optional[str] = pulumi.output_property("requestPath")
    """
    The request path of the HTTP2 health check request.
    The default value is /.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionHealthCheckLogConfig(dict):
    enable: Optional[bool] = pulumi.output_property("enable")
    """
    Indicates whether or not to export logs. This is false by default,
    which means no health check logging will be done.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionHealthCheckSslHealthCheck(dict):
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request: Optional[str] = pulumi.output_property("request")
    """
    The application data to send once the SSL connection has been
    established (default value is empty). If both request and response are
    empty, the connection establishment alone will indicate health. The request
    data can only be ASCII.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionHealthCheckTcpHealthCheck(dict):
    port: Optional[float] = pulumi.output_property("port")
    """
    The TCP port number for the HTTP2 health check request.
    The default value is 443.
    """
    port_name: Optional[str] = pulumi.output_property("portName")
    """
    Port name as defined in InstanceGroup#NamedPort#name. If both port and
    port_name are defined, port takes precedence.
    """
    port_specification: Optional[str] = pulumi.output_property("portSpecification")
    """
    Specifies how port is selected for health checking, can be one of the
    following values:
    * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
    * `USE_NAMED_PORT`: The `portName` is used for health checking.
    * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
    network endpoint is used for health checking. For other backends, the
    port or named port specified in the Backend Service is used for health
    checking.
    If not specified, HTTP2 health check follows behavior specified in `port` and
    `portName` fields.
    """
    proxy_header: Optional[str] = pulumi.output_property("proxyHeader")
    """
    Specifies the type of proxy header to append before sending data to the
    backend.
    """
    request: Optional[str] = pulumi.output_property("request")
    """
    The application data to send once the SSL connection has been
    established (default value is empty). If both request and response are
    empty, the connection establishment alone will indicate health. The request
    data can only be ASCII.
    """
    response: Optional[str] = pulumi.output_property("response")
    """
    The bytes to match against the beginning of the response data. If left empty
    (the default value), any response will indicate health. The response data
    can only be ASCII.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionInstanceGroupManagerAutoHealingPolicies(dict):
    health_check: str = pulumi.output_property("healthCheck")
    """
    The health check resource that signals autohealing.
    """
    initial_delay_sec: float = pulumi.output_property("initialDelaySec")
    """
    The number of seconds that the managed instance group waits before
    it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionInstanceGroupManagerNamedPort(dict):
    name: str = pulumi.output_property("name")
    """
    - Version name.
    """
    port: float = pulumi.output_property("port")
    """
    The port number.
    - - -
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionInstanceGroupManagerStatefulDisk(dict):
    delete_rule: Optional[str] = pulumi.output_property("deleteRule")
    """
    , A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`. `NEVER` detatch the disk when the VM is deleted, but not delete the disk. `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently deleted from the instance group. The default is `NEVER`.
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    , The device name of the disk to be attached.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionInstanceGroupManagerUpdatePolicy(dict):
    instance_redistribution_type: Optional[str] = pulumi.output_property("instanceRedistributionType")
    """
    - The instance redistribution policy for regional managed instance groups. Valid values are: `"PROACTIVE"`, `"NONE"`. If `PROACTIVE` (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If `NONE`, proactive redistribution is disabled.
    """
    max_surge_fixed: Optional[float] = pulumi.output_property("maxSurgeFixed")
    """
    , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `max_surge_percent`. It has to be either 0 or at least equal to the number of zones.  If fixed values are used, at least one of `max_unavailable_fixed` or `max_surge_fixed` must be greater than 0.
    """
    max_surge_percent: Optional[float] = pulumi.output_property("maxSurgePercent")
    """
    , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `max_surge_fixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
    """
    max_unavailable_fixed: Optional[float] = pulumi.output_property("maxUnavailableFixed")
    """
    , The maximum number of instances that can be unavailable during the update process. Conflicts with `max_unavailable_percent`. It has to be either 0 or at least equal to the number of zones. If fixed values are used, at least one of `max_unavailable_fixed` or `max_surge_fixed` must be greater than 0.
    """
    max_unavailable_percent: Optional[float] = pulumi.output_property("maxUnavailablePercent")
    """
    , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `max_unavailable_fixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
    """
    min_ready_sec: Optional[float] = pulumi.output_property("minReadySec")
    """
    , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
    - - -
    """
    minimal_action: str = pulumi.output_property("minimalAction")
    """
    - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
    """
    type: str = pulumi.output_property("type")
    """
    - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionInstanceGroupManagerVersion(dict):
    instance_template: str = pulumi.output_property("instanceTemplate")
    """
    - The full URL to an instance template from which all new instances of this version will be created.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    - Version name.
    """
    target_size: Optional['outputs.RegionInstanceGroupManagerVersionTargetSize'] = pulumi.output_property("targetSize")
    """
    - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionInstanceGroupManagerVersionTargetSize(dict):
    fixed: Optional[float] = pulumi.output_property("fixed")
    """
    , The number of instances which are managed for this version. Conflicts with `percent`.
    """
    percent: Optional[float] = pulumi.output_property("percent")
    """
    , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
    Note that when using `percent`, rounding will be in favor of explicitly set `target_size` values; a managed instance group with 2 instances and 2 `version`s,
    one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionPerInstanceConfigPreservedState(dict):
    disks: Optional[List['outputs.RegionPerInstanceConfigPreservedStateDisk']] = pulumi.output_property("disks")
    """
    Stateful disks for the instance.  Structure is documented below.
    """
    metadata: Optional[Dict[str, str]] = pulumi.output_property("metadata")
    """
    Preserved metadata defined for this instance. This is a list of key->value pairs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionPerInstanceConfigPreservedStateDisk(dict):
    delete_rule: Optional[str] = pulumi.output_property("deleteRule")
    """
    A value that prescribes what should happen to the stateful disk when the VM instance is deleted.
    The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
    `NEVER` detatch the disk when the VM is deleted, but not delete the disk.
    `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently
    deleted from the instance group.
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.
    """
    mode: Optional[str] = pulumi.output_property("mode")
    """
    The mode of the disk.
    """
    source: str = pulumi.output_property("source")
    """
    The URI of an existing persistent disk to attach under the specified device-name in the format
    `projects/project-id/zones/zone/disks/disk-name`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapDefaultUrlRedirect(dict):
    host_redirect: Optional[str] = pulumi.output_property("hostRedirect")
    """
    The host that will be used in the redirect response instead of the one that was
    supplied in the request. The value must be between 1 and 255 characters.
    """
    https_redirect: Optional[bool] = pulumi.output_property("httpsRedirect")
    """
    If set to true, the URL scheme in the redirected request is set to https. If set to
    false, the URL scheme of the redirected request will remain the same as that of the
    request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
    true for TargetHttpsProxy is not permitted. The default is set to false.
    """
    path_redirect: Optional[str] = pulumi.output_property("pathRedirect")
    """
    The path that will be used in the redirect response instead of the one that was
    supplied in the request. pathRedirect cannot be supplied together with
    prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
    original request will be used for the redirect. The value must be between 1 and 1024
    characters.
    """
    prefix_redirect: Optional[str] = pulumi.output_property("prefixRedirect")
    """
    The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
    retaining the remaining portion of the URL before redirecting the request.
    prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
    neither. If neither is supplied, the path of the original request will be used for
    the redirect. The value must be between 1 and 1024 characters.
    """
    redirect_response_code: Optional[str] = pulumi.output_property("redirectResponseCode")
    """
    The HTTP Status code to use for this RedirectAction. Supported values are:
    - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
    - FOUND, which corresponds to 302.
    - SEE_OTHER which corresponds to 303.
    - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
    will be retained.
    - PERMANENT_REDIRECT, which corresponds to 308. In this case,
    the request method will be retained.
    """
    strip_query: bool = pulumi.output_property("stripQuery")
    """
    If set to true, any accompanying query portion of the original URL is removed prior
    to redirecting the request. If set to false, the query portion of the original URL is
    retained.
    This field is required to ensure an empty block is not set. The normal default value is false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapHostRule(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of this test case.
    """
    hosts: List[str] = pulumi.output_property("hosts")
    """
    The list of host patterns to match. They must be valid
    hostnames, except * will match any string of ([a-z0-9-.]*). In
    that case, * must be the first character and must be followed in
    the pattern by either - or ..
    """
    path_matcher: str = pulumi.output_property("pathMatcher")
    """
    The name of the PathMatcher to use to match the path portion of
    the URL if the hostRule matches the URL's host portion.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcher(dict):
    default_service: str = pulumi.output_property("defaultService")
    """
    A reference to a RegionBackendService resource. This will be used if
    none of the pathRules defined by this PathMatcher is matched by
    the URL's path portion.
    """
    default_url_redirect: Optional['outputs.RegionUrlMapPathMatcherDefaultUrlRedirect'] = pulumi.output_property("defaultUrlRedirect")
    """
    When none of the specified hostRules match, the request is redirected to a URL specified
    by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
    defaultRouteAction must not be set.  Structure is documented below.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of this test case.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the query parameter to match. The query parameter must exist in the
    request, in the absence of which the request match fails.
    """
    path_rules: Optional[List['outputs.RegionUrlMapPathMatcherPathRule']] = pulumi.output_property("pathRules")
    """
    The list of path rules. Use this list instead of routeRules when routing based
    on simple path matching is all that's required. The order by which path rules
    are specified does not matter. Matches are always done on the longest-path-first
    basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
    irrespective of the order in which those paths appear in this list. Within a
    given pathMatcher, only one of pathRules or routeRules must be set.  Structure is documented below.
    """
    route_rules: Optional[List['outputs.RegionUrlMapPathMatcherRouteRule']] = pulumi.output_property("routeRules")
    """
    The list of ordered HTTP route rules. Use this list instead of pathRules when
    advanced route matching and routing actions are desired. The order of specifying
    routeRules matters: the first rule that matches will cause its specified routing
    action to take effect. Within a given pathMatcher, only one of pathRules or
    routeRules must be set. routeRules are not supported in UrlMaps intended for
    External load balancers.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherDefaultUrlRedirect(dict):
    host_redirect: Optional[str] = pulumi.output_property("hostRedirect")
    """
    The host that will be used in the redirect response instead of the one that was
    supplied in the request. The value must be between 1 and 255 characters.
    """
    https_redirect: Optional[bool] = pulumi.output_property("httpsRedirect")
    """
    If set to true, the URL scheme in the redirected request is set to https. If set to
    false, the URL scheme of the redirected request will remain the same as that of the
    request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
    true for TargetHttpsProxy is not permitted. The default is set to false.
    """
    path_redirect: Optional[str] = pulumi.output_property("pathRedirect")
    """
    The path that will be used in the redirect response instead of the one that was
    supplied in the request. pathRedirect cannot be supplied together with
    prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
    original request will be used for the redirect. The value must be between 1 and 1024
    characters.
    """
    prefix_redirect: Optional[str] = pulumi.output_property("prefixRedirect")
    """
    The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
    retaining the remaining portion of the URL before redirecting the request.
    prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
    neither. If neither is supplied, the path of the original request will be used for
    the redirect. The value must be between 1 and 1024 characters.
    """
    redirect_response_code: Optional[str] = pulumi.output_property("redirectResponseCode")
    """
    The HTTP Status code to use for this RedirectAction. Supported values are:
    - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
    - FOUND, which corresponds to 302.
    - SEE_OTHER which corresponds to 303.
    - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
    will be retained.
    - PERMANENT_REDIRECT, which corresponds to 308. In this case,
    the request method will be retained.
    """
    strip_query: bool = pulumi.output_property("stripQuery")
    """
    If set to true, any accompanying query portion of the original URL is removed prior
    to redirecting the request. If set to false, the query portion of the original URL is
    retained.
    This field is required to ensure an empty block is not set. The normal default value is false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRule(dict):
    paths: List[str] = pulumi.output_property("paths")
    """
    The list of path patterns to match. Each must start with / and the only place a
    * is allowed is at the end following a /. The string fed to the path matcher
    does not include any text after the first ? or #, and those chars are not
    allowed here.
    """
    route_action: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteAction'] = pulumi.output_property("routeAction")
    """
    In response to a matching path, the load balancer performs advanced routing
    actions like URL rewrites, header transformations, etc. prior to forwarding the
    request to the selected backend. If routeAction specifies any
    weightedBackendServices, service must not be set. Conversely if service is set,
    routeAction cannot contain any  weightedBackendServices. Only one of routeAction
    or urlRedirect must be set.  Structure is documented below.
    """
    service: Optional[str] = pulumi.output_property("service")
    """
    A reference to expected RegionBackendService resource the given URL should be mapped to.
    """
    url_redirect: Optional['outputs.RegionUrlMapPathMatcherPathRuleUrlRedirect'] = pulumi.output_property("urlRedirect")
    """
    When a path pattern is matched, the request is redirected to a URL specified
    by urlRedirect. If urlRedirect is specified, service or routeAction must not
    be set.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteAction(dict):
    cors_policy: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy'] = pulumi.output_property("corsPolicy")
    """
    The specification for allowing client side cross-origin requests. Please see W3C
    Recommendation for Cross Origin Resource Sharing  Structure is documented below.
    """
    fault_injection_policy: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy'] = pulumi.output_property("faultInjectionPolicy")
    """
    The specification for fault injection introduced into traffic to test the
    resiliency of clients to backend service failure. As part of fault injection,
    when clients send requests to a backend service, delays can be introduced by
    Loadbalancer on a percentage of requests before sending those request to the
    backend service. Similarly requests from clients can be aborted by the
    Loadbalancer for a percentage of requests. timeout and retry_policy will be
    ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
    """
    request_mirror_policy: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy'] = pulumi.output_property("requestMirrorPolicy")
    """
    Specifies the policy on how requests intended for the route's backends are
    shadowed to a separate mirrored backend service. Loadbalancer does not wait for
    responses from the shadow service. Prior to sending traffic to the shadow
    service, the host / authority header is suffixed with -shadow.  Structure is documented below.
    """
    retry_policy: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy'] = pulumi.output_property("retryPolicy")
    """
    Specifies the retry policy associated with this route.  Structure is documented below.
    """
    timeout: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionTimeout'] = pulumi.output_property("timeout")
    """
    Specifies the timeout for the selected route. Timeout is computed from the time
    the request is has been fully processed (i.e. end-of-stream) up until the
    response has been completely processed. Timeout includes all retries. If not
    specified, the default value is 15 seconds.  Structure is documented below.
    """
    url_rewrite: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite'] = pulumi.output_property("urlRewrite")
    """
    The spec to modify the URL of the request, prior to forwarding the request to
    the matched service  Structure is documented below.
    """
    weighted_backend_services: Optional[List['outputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService']] = pulumi.output_property("weightedBackendServices")
    """
    A list of weighted backend services to send traffic to when a route match
    occurs. The weights determine the fraction of traffic that flows to their
    corresponding backend service. If all traffic needs to go to a single backend
    service, there must be one  weightedBackendService with weight set to a non 0
    number. Once a backendService is identified and before forwarding the request to
    the backend service, advanced routing actions like Url rewrites and header
    transformations are applied depending on additional settings specified in this
    HttpRouteAction.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy(dict):
    allow_credentials: Optional[bool] = pulumi.output_property("allowCredentials")
    """
    In response to a preflight request, setting this to true indicates that the
    actual request can include user credentials. This translates to the Access-
    Control-Allow-Credentials header. Defaults to false.
    """
    allow_headers: Optional[List[str]] = pulumi.output_property("allowHeaders")
    """
    Specifies the content for the Access-Control-Allow-Headers header.
    """
    allow_methods: Optional[List[str]] = pulumi.output_property("allowMethods")
    """
    Specifies the content for the Access-Control-Allow-Methods header.
    """
    allow_origin_regexes: Optional[List[str]] = pulumi.output_property("allowOriginRegexes")
    """
    Specifies the regualar expression patterns that match allowed origins. For
    regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
    An origin is allowed if it matches either allow_origins or allow_origin_regex.
    """
    allow_origins: Optional[List[str]] = pulumi.output_property("allowOrigins")
    """
    Specifies the list of origins that will be allowed to do CORS requests. An
    origin is allowed if it matches either allow_origins or allow_origin_regex.
    """
    disabled: bool = pulumi.output_property("disabled")
    """
    If true, specifies the CORS policy is disabled.
    """
    expose_headers: Optional[List[str]] = pulumi.output_property("exposeHeaders")
    """
    Specifies the content for the Access-Control-Expose-Headers header.
    """
    max_age: Optional[float] = pulumi.output_property("maxAge")
    """
    Specifies how long the results of a preflight request can be cached. This
    translates to the content for the Access-Control-Max-Age header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy(dict):
    abort: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort'] = pulumi.output_property("abort")
    """
    The specification for how client requests are aborted as part of fault
    injection.  Structure is documented below.
    """
    delay: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay'] = pulumi.output_property("delay")
    """
    The specification for how client requests are delayed as part of fault
    injection, before being sent to a backend service.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort(dict):
    http_status: float = pulumi.output_property("httpStatus")
    """
    The HTTP status code used to abort the request. The value must be between 200
    and 599 inclusive.
    """
    percentage: float = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) on which delay will
    be introduced as part of fault injection. The value must be between 0.0 and
    100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay(dict):
    fixed_delay: 'outputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay' = pulumi.output_property("fixedDelay")
    """
    Specifies the value of the fixed delay interval.  Structure is documented below.
    """
    percentage: float = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) on which delay will
    be introduced as part of fault injection. The value must be between 0.0 and
    100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The default RegionBackendService resource. Before
    forwarding the request to backendService, the loadbalancer applies any relevant
    headerActions specified as part of this backendServiceWeight.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy(dict):
    num_retries: Optional[float] = pulumi.output_property("numRetries")
    """
    Specifies the allowed number retries. This number must be > 0.
    """
    per_try_timeout: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout'] = pulumi.output_property("perTryTimeout")
    """
    Specifies a non-zero timeout per retry attempt.  Structure is documented below.
    """
    retry_conditions: Optional[List[str]] = pulumi.output_property("retryConditions")
    """
    Specifies one or more conditions when this retry rule applies. Valid values are:
    - 5xx: Loadbalancer will attempt a retry if the backend service responds with
    any 5xx response code, or if the backend service does not respond at all,
    example: disconnects, reset, read timeout, connection failure, and refused
    streams.
    - gateway-error: Similar to 5xx, but only applies to response codes
    502, 503 or 504.
    - connect-failure: Loadbalancer will retry on failures
    connecting to backend services, for example due to connection timeouts.
    - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
    Currently the only retriable error supported is 409.
    - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
    REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
    - cancelled: Loadbalancer will retry if the gRPC status code in the response
    header is set to cancelled
    - deadline-exceeded: Loadbalancer will retry if the
    gRPC status code in the response header is set to deadline-exceeded
    - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
    header is set to resource-exhausted
    - unavailable: Loadbalancer will retry if
    the gRPC status code in the response header is set to unavailable
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite(dict):
    host_rewrite: Optional[str] = pulumi.output_property("hostRewrite")
    """
    Prior to forwarding the request to the selected service, the request's host
    header is replaced with contents of hostRewrite. The value must be between 1 and
    255 characters.
    """
    path_prefix_rewrite: Optional[str] = pulumi.output_property("pathPrefixRewrite")
    """
    Prior to forwarding the request to the selected backend service, the matching
    portion of the request's path is replaced by pathPrefixRewrite. The value must
    be between 1 and 1024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The default RegionBackendService resource. Before
    forwarding the request to backendService, the loadbalancer applies any relevant
    headerActions specified as part of this backendServiceWeight.
    """
    header_action: Optional['outputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction'] = pulumi.output_property("headerAction")
    """
    Specifies changes to request and response headers that need to take effect for
    the selected backendService. headerAction specified here take effect before
    headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
    """
    weight: float = pulumi.output_property("weight")
    """
    Specifies the fraction of traffic sent to backendService, computed as weight /
    (sum of all weightedBackendService weights in routeAction) . The selection of a
    backend service is determined only for new traffic. Once a user's request has
    been directed to a backendService, subsequent requests will be sent to the same
    backendService as determined by the BackendService's session affinity policy.
    The value must be between 0 and 1000
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the
    backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request
    prior to forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response
    prior to sending the response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the
    header. If true, headerValue is set for the header, discarding any values that
    were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the
    header. If true, headerValue is set for the header, discarding any values that
    were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherPathRuleUrlRedirect(dict):
    host_redirect: Optional[str] = pulumi.output_property("hostRedirect")
    """
    The host that will be used in the redirect response instead of the one that was
    supplied in the request. The value must be between 1 and 255 characters.
    """
    https_redirect: Optional[bool] = pulumi.output_property("httpsRedirect")
    """
    If set to true, the URL scheme in the redirected request is set to https. If set to
    false, the URL scheme of the redirected request will remain the same as that of the
    request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
    true for TargetHttpsProxy is not permitted. The default is set to false.
    """
    path_redirect: Optional[str] = pulumi.output_property("pathRedirect")
    """
    The path that will be used in the redirect response instead of the one that was
    supplied in the request. pathRedirect cannot be supplied together with
    prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
    original request will be used for the redirect. The value must be between 1 and 1024
    characters.
    """
    prefix_redirect: Optional[str] = pulumi.output_property("prefixRedirect")
    """
    The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
    retaining the remaining portion of the URL before redirecting the request.
    prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
    neither. If neither is supplied, the path of the original request will be used for
    the redirect. The value must be between 1 and 1024 characters.
    """
    redirect_response_code: Optional[str] = pulumi.output_property("redirectResponseCode")
    """
    The HTTP Status code to use for this RedirectAction. Supported values are:
    - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
    - FOUND, which corresponds to 302.
    - SEE_OTHER which corresponds to 303.
    - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
    will be retained.
    - PERMANENT_REDIRECT, which corresponds to 308. In this case,
    the request method will be retained.
    """
    strip_query: bool = pulumi.output_property("stripQuery")
    """
    If set to true, any accompanying query portion of the original URL is removed prior
    to redirecting the request. If set to false, the query portion of the original URL is
    retained.
    This field is required to ensure an empty block is not set. The normal default value is false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRule(dict):
    header_action: Optional['outputs.RegionUrlMapPathMatcherRouteRuleHeaderAction'] = pulumi.output_property("headerAction")
    """
    Specifies changes to request and response headers that need to take effect for
    the selected backendService. headerAction specified here take effect before
    headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
    """
    match_rules: Optional[List['outputs.RegionUrlMapPathMatcherRouteRuleMatchRule']] = pulumi.output_property("matchRules")
    """
    The rules for determining a match.  Structure is documented below.
    """
    priority: float = pulumi.output_property("priority")
    """
    For routeRules within a given pathMatcher, priority determines the order
    in which load balancer will interpret routeRules. RouteRules are evaluated
    in order of priority, from the lowest to highest number. The priority of
    a rule decreases as its number increases (1, 2, 3, N+1). The first rule
    that matches the request is applied.
    You cannot configure two or more routeRules with the same priority.
    Priority for each rule must be set to a number between 0 and
    2147483647 inclusive.
    Priority numbers can have gaps, which enable you to add or remove rules
    in the future without affecting the rest of the rules. For example,
    1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
    you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
    future without any impact on existing rules.
    """
    route_action: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteAction'] = pulumi.output_property("routeAction")
    """
    In response to a matching path, the load balancer performs advanced routing
    actions like URL rewrites, header transformations, etc. prior to forwarding the
    request to the selected backend. If routeAction specifies any
    weightedBackendServices, service must not be set. Conversely if service is set,
    routeAction cannot contain any  weightedBackendServices. Only one of routeAction
    or urlRedirect must be set.  Structure is documented below.
    """
    service: Optional[str] = pulumi.output_property("service")
    """
    A reference to expected RegionBackendService resource the given URL should be mapped to.
    """
    url_redirect: Optional['outputs.RegionUrlMapPathMatcherRouteRuleUrlRedirect'] = pulumi.output_property("urlRedirect")
    """
    When a path pattern is matched, the request is redirected to a URL specified
    by urlRedirect. If urlRedirect is specified, service or routeAction must not
    be set.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the
    backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request
    prior to forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response
    prior to sending the response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the
    header. If true, headerValue is set for the header, discarding any values that
    were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the
    header. If true, headerValue is set for the header, discarding any values that
    were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleMatchRule(dict):
    full_path_match: Optional[str] = pulumi.output_property("fullPathMatch")
    """
    For satifying the matchRule condition, the path of the request must exactly
    match the value specified in fullPathMatch after removing any query parameters
    and anchor that may be part of the original URL. FullPathMatch must be between 1
    and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
    be specified.
    """
    header_matches: Optional[List['outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch']] = pulumi.output_property("headerMatches")
    """
    Specifies a list of header match criteria, all of which must match corresponding
    headers in the request.  Structure is documented below.
    """
    ignore_case: Optional[bool] = pulumi.output_property("ignoreCase")
    """
    Specifies that prefixMatch and fullPathMatch matches are case sensitive.
    Defaults to false.
    """
    metadata_filters: Optional[List['outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter']] = pulumi.output_property("metadataFilters")
    """
    Opaque filter criteria used by Loadbalancer to restrict routing configuration to
    a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
    clients present node metadata. If a match takes place, the relevant routing
    configuration is made available to those proxies. For each metadataFilter in
    this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
    filterLabels must match the corresponding label provided in the metadata. If its
    filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
    with corresponding labels in the provided metadata. metadataFilters specified
    here can be overrides those specified in ForwardingRule that refers to this
    UrlMap. metadataFilters only applies to Loadbalancers that have their
    loadBalancingScheme set to INTERNAL_SELF_MANAGED.  Structure is documented below.
    """
    prefix_match: Optional[str] = pulumi.output_property("prefixMatch")
    """
    The value of the header must start with the contents of prefixMatch. Only one of
    exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
    must be set.
    """
    query_parameter_matches: Optional[List['outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch']] = pulumi.output_property("queryParameterMatches")
    """
    Specifies a list of query parameter match criteria, all of which must match
    corresponding query parameters in the request.  Structure is documented below.
    """
    regex_match: Optional[str] = pulumi.output_property("regexMatch")
    """
    The queryParameterMatch matches if the value of the parameter matches the
    regular expression specified by regexMatch. For the regular expression grammar,
    please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
    exactMatch and regexMatch must be set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch(dict):
    exact_match: Optional[str] = pulumi.output_property("exactMatch")
    """
    The queryParameterMatch matches if the value of the parameter exactly matches
    the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
    must be set.
    """
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header.
    """
    invert_match: Optional[bool] = pulumi.output_property("invertMatch")
    """
    If set to false, the headerMatch is considered a match if the match criteria
    above are met. If set to true, the headerMatch is considered a match if the
    match criteria above are NOT met. Defaults to false.
    """
    prefix_match: Optional[str] = pulumi.output_property("prefixMatch")
    """
    The value of the header must start with the contents of prefixMatch. Only one of
    exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
    must be set.
    """
    present_match: Optional[bool] = pulumi.output_property("presentMatch")
    """
    Specifies that the queryParameterMatch matches if the request contains the query
    parameter, irrespective of whether the parameter has a value or not. Only one of
    presentMatch, exactMatch and regexMatch must be set.
    """
    range_match: Optional['outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch'] = pulumi.output_property("rangeMatch")
    """
    The header value must be an integer and its value must be in the range specified
    in rangeMatch. If the header does not contain an integer, number or is empty,
    the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
    not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
    exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
    must be set.  Structure is documented below.
    """
    regex_match: Optional[str] = pulumi.output_property("regexMatch")
    """
    The queryParameterMatch matches if the value of the parameter matches the
    regular expression specified by regexMatch. For the regular expression grammar,
    please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
    exactMatch and regexMatch must be set.
    """
    suffix_match: Optional[str] = pulumi.output_property("suffixMatch")
    """
    The value of the header must end with the contents of suffixMatch. Only one of
    exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
    must be set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch(dict):
    range_end: float = pulumi.output_property("rangeEnd")
    """
    The end of the range (exclusive).
    """
    range_start: float = pulumi.output_property("rangeStart")
    """
    The start of the range (inclusive).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter(dict):
    filter_labels: List['outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel'] = pulumi.output_property("filterLabels")
    """
    The list of label value pairs that must match labels in the provided metadata
    based on filterMatchCriteria  This list must not be empty and can have at the
    most 64 entries.  Structure is documented below.
    """
    filter_match_criteria: str = pulumi.output_property("filterMatchCriteria")
    """
    Specifies how individual filterLabel matches within the list of filterLabels
    contribute towards the overall metadataFilter match. Supported values are:
    - MATCH_ANY: At least one of the filterLabels must have a matching label in the
    provided metadata.
    - MATCH_ALL: All filterLabels must have matching labels in
    the provided metadata.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the query parameter to match. The query parameter must exist in the
    request, in the absence of which the request match fails.
    """
    value: str = pulumi.output_property("value")
    """
    The value of the label must match the specified value. value can have a maximum
    length of 1024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch(dict):
    exact_match: Optional[str] = pulumi.output_property("exactMatch")
    """
    The queryParameterMatch matches if the value of the parameter exactly matches
    the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
    must be set.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the query parameter to match. The query parameter must exist in the
    request, in the absence of which the request match fails.
    """
    present_match: Optional[bool] = pulumi.output_property("presentMatch")
    """
    Specifies that the queryParameterMatch matches if the request contains the query
    parameter, irrespective of whether the parameter has a value or not. Only one of
    presentMatch, exactMatch and regexMatch must be set.
    """
    regex_match: Optional[str] = pulumi.output_property("regexMatch")
    """
    The queryParameterMatch matches if the value of the parameter matches the
    regular expression specified by regexMatch. For the regular expression grammar,
    please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
    exactMatch and regexMatch must be set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteAction(dict):
    cors_policy: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy'] = pulumi.output_property("corsPolicy")
    """
    The specification for allowing client side cross-origin requests. Please see W3C
    Recommendation for Cross Origin Resource Sharing  Structure is documented below.
    """
    fault_injection_policy: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy'] = pulumi.output_property("faultInjectionPolicy")
    """
    The specification for fault injection introduced into traffic to test the
    resiliency of clients to backend service failure. As part of fault injection,
    when clients send requests to a backend service, delays can be introduced by
    Loadbalancer on a percentage of requests before sending those request to the
    backend service. Similarly requests from clients can be aborted by the
    Loadbalancer for a percentage of requests. timeout and retry_policy will be
    ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
    """
    request_mirror_policy: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy'] = pulumi.output_property("requestMirrorPolicy")
    """
    Specifies the policy on how requests intended for the route's backends are
    shadowed to a separate mirrored backend service. Loadbalancer does not wait for
    responses from the shadow service. Prior to sending traffic to the shadow
    service, the host / authority header is suffixed with -shadow.  Structure is documented below.
    """
    retry_policy: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy'] = pulumi.output_property("retryPolicy")
    """
    Specifies the retry policy associated with this route.  Structure is documented below.
    """
    timeout: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionTimeout'] = pulumi.output_property("timeout")
    """
    Specifies the timeout for the selected route. Timeout is computed from the time
    the request is has been fully processed (i.e. end-of-stream) up until the
    response has been completely processed. Timeout includes all retries. If not
    specified, the default value is 15 seconds.  Structure is documented below.
    """
    url_rewrite: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite'] = pulumi.output_property("urlRewrite")
    """
    The spec to modify the URL of the request, prior to forwarding the request to
    the matched service  Structure is documented below.
    """
    weighted_backend_services: Optional[List['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService']] = pulumi.output_property("weightedBackendServices")
    """
    A list of weighted backend services to send traffic to when a route match
    occurs. The weights determine the fraction of traffic that flows to their
    corresponding backend service. If all traffic needs to go to a single backend
    service, there must be one  weightedBackendService with weight set to a non 0
    number. Once a backendService is identified and before forwarding the request to
    the backend service, advanced routing actions like Url rewrites and header
    transformations are applied depending on additional settings specified in this
    HttpRouteAction.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy(dict):
    allow_credentials: Optional[bool] = pulumi.output_property("allowCredentials")
    """
    In response to a preflight request, setting this to true indicates that the
    actual request can include user credentials. This translates to the Access-
    Control-Allow-Credentials header. Defaults to false.
    """
    allow_headers: Optional[List[str]] = pulumi.output_property("allowHeaders")
    """
    Specifies the content for the Access-Control-Allow-Headers header.
    """
    allow_methods: Optional[List[str]] = pulumi.output_property("allowMethods")
    """
    Specifies the content for the Access-Control-Allow-Methods header.
    """
    allow_origin_regexes: Optional[List[str]] = pulumi.output_property("allowOriginRegexes")
    """
    Specifies the regualar expression patterns that match allowed origins. For
    regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
    An origin is allowed if it matches either allow_origins or allow_origin_regex.
    """
    allow_origins: Optional[List[str]] = pulumi.output_property("allowOrigins")
    """
    Specifies the list of origins that will be allowed to do CORS requests. An
    origin is allowed if it matches either allow_origins or allow_origin_regex.
    """
    disabled: Optional[bool] = pulumi.output_property("disabled")
    """
    If true, specifies the CORS policy is disabled.
    """
    expose_headers: Optional[List[str]] = pulumi.output_property("exposeHeaders")
    """
    Specifies the content for the Access-Control-Expose-Headers header.
    """
    max_age: Optional[float] = pulumi.output_property("maxAge")
    """
    Specifies how long the results of a preflight request can be cached. This
    translates to the content for the Access-Control-Max-Age header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy(dict):
    abort: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort'] = pulumi.output_property("abort")
    """
    The specification for how client requests are aborted as part of fault
    injection.  Structure is documented below.
    """
    delay: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay'] = pulumi.output_property("delay")
    """
    The specification for how client requests are delayed as part of fault
    injection, before being sent to a backend service.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort(dict):
    http_status: Optional[float] = pulumi.output_property("httpStatus")
    """
    The HTTP status code used to abort the request. The value must be between 200
    and 599 inclusive.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) on which delay will
    be introduced as part of fault injection. The value must be between 0.0 and
    100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay(dict):
    fixed_delay: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay'] = pulumi.output_property("fixedDelay")
    """
    Specifies the value of the fixed delay interval.  Structure is documented below.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) on which delay will
    be introduced as part of fault injection. The value must be between 0.0 and
    100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The default RegionBackendService resource. Before
    forwarding the request to backendService, the loadbalancer applies any relevant
    headerActions specified as part of this backendServiceWeight.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy(dict):
    num_retries: float = pulumi.output_property("numRetries")
    """
    Specifies the allowed number retries. This number must be > 0.
    """
    per_try_timeout: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout'] = pulumi.output_property("perTryTimeout")
    """
    Specifies a non-zero timeout per retry attempt.  Structure is documented below.
    """
    retry_conditions: Optional[List[str]] = pulumi.output_property("retryConditions")
    """
    Specifies one or more conditions when this retry rule applies. Valid values are:
    - 5xx: Loadbalancer will attempt a retry if the backend service responds with
    any 5xx response code, or if the backend service does not respond at all,
    example: disconnects, reset, read timeout, connection failure, and refused
    streams.
    - gateway-error: Similar to 5xx, but only applies to response codes
    502, 503 or 504.
    - connect-failure: Loadbalancer will retry on failures
    connecting to backend services, for example due to connection timeouts.
    - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
    Currently the only retriable error supported is 409.
    - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
    REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
    - cancelled: Loadbalancer will retry if the gRPC status code in the response
    header is set to cancelled
    - deadline-exceeded: Loadbalancer will retry if the
    gRPC status code in the response header is set to deadline-exceeded
    - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
    header is set to resource-exhausted
    - unavailable: Loadbalancer will retry if
    the gRPC status code in the response header is set to unavailable
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations
    less than one second are represented with a 0 `seconds` field and a positive
    `nanos` field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
    inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite(dict):
    host_rewrite: Optional[str] = pulumi.output_property("hostRewrite")
    """
    Prior to forwarding the request to the selected service, the request's host
    header is replaced with contents of hostRewrite. The value must be between 1 and
    255 characters.
    """
    path_prefix_rewrite: Optional[str] = pulumi.output_property("pathPrefixRewrite")
    """
    Prior to forwarding the request to the selected backend service, the matching
    portion of the request's path is replaced by pathPrefixRewrite. The value must
    be between 1 and 1024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The default RegionBackendService resource. Before
    forwarding the request to backendService, the loadbalancer applies any relevant
    headerActions specified as part of this backendServiceWeight.
    """
    header_action: Optional['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction'] = pulumi.output_property("headerAction")
    """
    Specifies changes to request and response headers that need to take effect for
    the selected backendService. headerAction specified here take effect before
    headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
    """
    weight: float = pulumi.output_property("weight")
    """
    Specifies the fraction of traffic sent to backendService, computed as weight /
    (sum of all weightedBackendService weights in routeAction) . The selection of a
    backend service is determined only for new traffic. Once a user's request has
    been directed to a backendService, subsequent requests will be sent to the same
    backendService as determined by the BackendService's session affinity policy.
    The value must be between 0 and 1000
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the
    backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request
    prior to forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response
    prior to sending the response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the
    header. If true, headerValue is set for the header, discarding any values that
    were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the
    header. If true, headerValue is set for the header, discarding any values that
    were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapPathMatcherRouteRuleUrlRedirect(dict):
    host_redirect: Optional[str] = pulumi.output_property("hostRedirect")
    """
    The host that will be used in the redirect response instead of the one that was
    supplied in the request. The value must be between 1 and 255 characters.
    """
    https_redirect: Optional[bool] = pulumi.output_property("httpsRedirect")
    """
    If set to true, the URL scheme in the redirected request is set to https. If set to
    false, the URL scheme of the redirected request will remain the same as that of the
    request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
    true for TargetHttpsProxy is not permitted. The default is set to false.
    """
    path_redirect: Optional[str] = pulumi.output_property("pathRedirect")
    """
    The path that will be used in the redirect response instead of the one that was
    supplied in the request. pathRedirect cannot be supplied together with
    prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
    original request will be used for the redirect. The value must be between 1 and 1024
    characters.
    """
    prefix_redirect: Optional[str] = pulumi.output_property("prefixRedirect")
    """
    The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
    retaining the remaining portion of the URL before redirecting the request.
    prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
    neither. If neither is supplied, the path of the original request will be used for
    the redirect. The value must be between 1 and 1024 characters.
    """
    redirect_response_code: Optional[str] = pulumi.output_property("redirectResponseCode")
    """
    The HTTP Status code to use for this RedirectAction. Supported values are:
    - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
    - FOUND, which corresponds to 302.
    - SEE_OTHER which corresponds to 303.
    - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
    will be retained.
    - PERMANENT_REDIRECT, which corresponds to 308. In this case,
    the request method will be retained.
    """
    strip_query: Optional[bool] = pulumi.output_property("stripQuery")
    """
    If set to true, any accompanying query portion of the original URL is removed prior
    to redirecting the request. If set to false, the query portion of the original URL is
    retained.
    This field is required to ensure an empty block is not set. The normal default value is false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegionUrlMapTest(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of this test case.
    """
    host: str = pulumi.output_property("host")
    """
    Host portion of the URL.
    """
    path: str = pulumi.output_property("path")
    """
    Path portion of the URL.
    """
    service: str = pulumi.output_property("service")
    """
    A reference to expected RegionBackendService resource the given URL should be mapped to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ReservationSpecificReservation(dict):
    count: float = pulumi.output_property("count")
    """
    The number of resources that are allocated.
    """
    in_use_count: Optional[float] = pulumi.output_property("inUseCount")
    """
    -
    How many instances are in use.
    """
    instance_properties: 'outputs.ReservationSpecificReservationInstanceProperties' = pulumi.output_property("instanceProperties")
    """
    The instance properties for the reservation.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ReservationSpecificReservationInstanceProperties(dict):
    guest_accelerators: Optional[List['outputs.ReservationSpecificReservationInstancePropertiesGuestAccelerator']] = pulumi.output_property("guestAccelerators")
    """
    Guest accelerator type and count.  Structure is documented below.
    """
    local_ssds: Optional[List['outputs.ReservationSpecificReservationInstancePropertiesLocalSsd']] = pulumi.output_property("localSsds")
    """
    The amount of local ssd to reserve with each instance. This
    reserves disks of type `local-ssd`.  Structure is documented below.
    """
    machine_type: str = pulumi.output_property("machineType")
    """
    The name of the machine type to reserve.
    """
    min_cpu_platform: Optional[str] = pulumi.output_property("minCpuPlatform")
    """
    The minimum CPU platform for the reservation. For example,
    `"Intel Skylake"`. See
    the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
    for information on available CPU platforms.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ReservationSpecificReservationInstancePropertiesGuestAccelerator(dict):
    accelerator_count: float = pulumi.output_property("acceleratorCount")
    """
    The number of the guest accelerator cards exposed to
    this instance.
    """
    accelerator_type: str = pulumi.output_property("acceleratorType")
    """
    The full or partial URL of the accelerator type to
    attach to this instance. For example:
    `projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100`
    If you are creating an instance template, specify only the accelerator name.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ReservationSpecificReservationInstancePropertiesLocalSsd(dict):
    disk_size_gb: float = pulumi.output_property("diskSizeGb")
    """
    The size of the disk in base-2 GB.
    """
    interface: Optional[str] = pulumi.output_property("interface")
    """
    The disk interface to use for attaching this disk.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourcePolicyGroupPlacementPolicy(dict):
    availability_domain_count: Optional[float] = pulumi.output_property("availabilityDomainCount")
    """
    The number of availability domains instances will be spread across. If two instances are in different
    availability domain, they will not be put in the same low latency network
    """
    collocation: Optional[str] = pulumi.output_property("collocation")
    """
    Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.
    Specify `COLLOCATED` to enable collocation. Can only be specified with `vm_count`. If compute instances are created
    with a COLLOCATED policy, then exactly `vm_count` instances must be created at the same time with the resource policy
    attached.
    """
    vm_count: Optional[float] = pulumi.output_property("vmCount")
    """
    Number of vms in this placement group.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourcePolicySnapshotSchedulePolicy(dict):
    retention_policy: Optional['outputs.ResourcePolicySnapshotSchedulePolicyRetentionPolicy'] = pulumi.output_property("retentionPolicy")
    """
    Retention policy applied to snapshots created by this resource policy.  Structure is documented below.
    """
    schedule: 'outputs.ResourcePolicySnapshotSchedulePolicySchedule' = pulumi.output_property("schedule")
    """
    Contains one of an `hourlySchedule`, `dailySchedule`, or `weeklySchedule`.  Structure is documented below.
    """
    snapshot_properties: Optional['outputs.ResourcePolicySnapshotSchedulePolicySnapshotProperties'] = pulumi.output_property("snapshotProperties")
    """
    Properties with which the snapshots are created, such as labels.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourcePolicySnapshotSchedulePolicyRetentionPolicy(dict):
    max_retention_days: float = pulumi.output_property("maxRetentionDays")
    """
    Maximum age of the snapshot that is allowed to be kept.
    """
    on_source_disk_delete: Optional[str] = pulumi.output_property("onSourceDiskDelete")
    """
    Specifies the behavior to apply to scheduled snapshots when
    the source disk is deleted.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourcePolicySnapshotSchedulePolicySchedule(dict):
    daily_schedule: Optional['outputs.ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule'] = pulumi.output_property("dailySchedule")
    """
    The policy will execute every nth day at the specified time.  Structure is documented below.
    """
    hourly_schedule: Optional['outputs.ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule'] = pulumi.output_property("hourlySchedule")
    """
    The policy will execute every nth hour starting at the specified time.  Structure is documented below.
    """
    weekly_schedule: Optional['outputs.ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule'] = pulumi.output_property("weeklySchedule")
    """
    Allows specifying a snapshot time for each day of the week.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule(dict):
    days_in_cycle: float = pulumi.output_property("daysInCycle")
    """
    The number of days between snapshots.
    """
    start_time: str = pulumi.output_property("startTime")
    """
    Time within the window to start the operations.
    It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule(dict):
    hours_in_cycle: float = pulumi.output_property("hoursInCycle")
    """
    The number of hours between snapshots.
    """
    start_time: str = pulumi.output_property("startTime")
    """
    Time within the window to start the operations.
    It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule(dict):
    day_of_weeks: List['outputs.ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek'] = pulumi.output_property("dayOfWeeks")
    """
    May contain up to seven (one for each day of the week) snapshot times.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek(dict):
    day: str = pulumi.output_property("day")
    """
    The day of the week to create the snapshot. e.g. MONDAY
    """
    start_time: str = pulumi.output_property("startTime")
    """
    Time within the window to start the operations.
    It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourcePolicySnapshotSchedulePolicySnapshotProperties(dict):
    guest_flush: Optional[bool] = pulumi.output_property("guestFlush")
    """
    Whether to perform a 'guest aware' snapshot.
    """
    labels: Optional[Dict[str, str]] = pulumi.output_property("labels")
    """
    A set of key-value pairs.
    """
    storage_locations: Optional[str] = pulumi.output_property("storageLocations")
    """
    Cloud Storage bucket location to store the auto snapshot
    (regional or multi-regional)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouterBgp(dict):
    advertise_mode: Optional[str] = pulumi.output_property("advertiseMode")
    """
    User-specified flag to indicate which mode to use for advertisement.
    """
    advertised_groups: Optional[List[str]] = pulumi.output_property("advertisedGroups")
    """
    User-specified list of prefix groups to advertise in custom mode.
    This field can only be populated if advertiseMode is CUSTOM and
    is advertised to all peers of the router. These groups will be
    advertised in addition to any specified prefixes. Leave this field
    blank to advertise no custom groups.
    This enum field has the one valid value: ALL_SUBNETS
    """
    advertised_ip_ranges: Optional[List['outputs.RouterBgpAdvertisedIpRange']] = pulumi.output_property("advertisedIpRanges")
    """
    User-specified list of individual IP ranges to advertise in
    custom mode. This field can only be populated if advertiseMode
    is CUSTOM and is advertised to all peers of the router. These IP
    ranges will be advertised in addition to any specified groups.
    Leave this field blank to advertise no custom IP ranges.  Structure is documented below.
    """
    asn: float = pulumi.output_property("asn")
    """
    Local BGP Autonomous System Number (ASN). Must be an RFC6996
    private ASN, either 16-bit or 32-bit. The value will be fixed for
    this router resource. All VPN tunnels that link to this router
    will have the same local ASN.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouterBgpAdvertisedIpRange(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    User-specified description for the IP range.
    """
    range: str = pulumi.output_property("range")
    """
    The IP range to advertise. The value must be a
    CIDR-formatted string.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouterNatLogConfig(dict):
    enable: bool = pulumi.output_property("enable")
    """
    Indicates whether or not to export logs.
    """
    filter: str = pulumi.output_property("filter")
    """
    Specifies the desired filtering of logs on this NAT.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouterNatSubnetwork(dict):
    name: str = pulumi.output_property("name")
    """
    Self-link of subnetwork to NAT
    """
    secondary_ip_range_names: Optional[List[str]] = pulumi.output_property("secondaryIpRangeNames")
    """
    List of the secondary ranges of the subnetwork that are allowed
    to use NAT. This can be populated only if
    `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
    sourceIpRangesToNat
    """
    source_ip_ranges_to_nats: List[str] = pulumi.output_property("sourceIpRangesToNats")
    """
    List of options for which source IPs in the subnetwork
    should have NAT enabled. Supported values include:
    `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
    `PRIMARY_IP_RANGE`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouterPeerAdvertisedIpRange(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    User-specified description for the IP range.
    """
    range: str = pulumi.output_property("range")
    """
    The IP range to advertise. The value must be a
    CIDR-formatted string.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityPolicyRule(dict):
    action: str = pulumi.output_property("action")
    """
    Action to take when `match` matches the request. Valid values:
    * "allow" : allow access to target
    * "deny(status)" : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    An optional description of this rule. Max size is 64.
    """
    match: 'outputs.SecurityPolicyRuleMatch' = pulumi.output_property("match")
    """
    A match condition that incoming traffic is evaluated against.
    If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
    """
    preview: Optional[bool] = pulumi.output_property("preview")
    """
    When set to true, the `action` specified above is not enforced.
    Stackdriver logs for requests that trigger a preview action are annotated as such.
    """
    priority: float = pulumi.output_property("priority")
    """
    An unique positive integer indicating the priority of evaluation for a rule.
    Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityPolicyRuleMatch(dict):
    config: Optional['outputs.SecurityPolicyRuleMatchConfig'] = pulumi.output_property("config")
    """
    The configuration options available when specifying `versioned_expr`.
    This field must be specified if `versioned_expr` is specified and cannot be specified if `versioned_expr` is not specified.
    Structure is documented below.
    """
    expr: Optional['outputs.SecurityPolicyRuleMatchExpr'] = pulumi.output_property("expr")
    """
    User defined CEVAL expression. A CEVAL expression is used to specify match criteria
    such as origin.ip, source.region_code and contents in the request header.
    Structure is documented below.
    """
    versioned_expr: Optional[str] = pulumi.output_property("versionedExpr")
    """
    Predefined rule expression. If this field is specified, `config` must also be specified.
    Available options:
    * SRC_IPS_V1: Must specify the corresponding `src_ip_ranges` field in `config`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityPolicyRuleMatchConfig(dict):
    src_ip_ranges: List[str] = pulumi.output_property("srcIpRanges")
    """
    Set of IP addresses or ranges (IPV4 or IPV6) in CIDR notation
    to match against inbound traffic. There is a limit of 5 IP ranges per rule. A value of '\*' matches all IPs
    (can be used to override the default behavior).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityPolicyRuleMatchExpr(dict):
    expression: str = pulumi.output_property("expression")
    """
    Textual representation of an expression in Common Expression Language syntax.
    The application context of the containing message determines which well-known feature set of CEL is supported.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityScanConfigAuthentication(dict):
    custom_account: Optional['outputs.SecurityScanConfigAuthenticationCustomAccount'] = pulumi.output_property("customAccount")
    """
    Describes authentication configuration that uses a custom account.  Structure is documented below.
    """
    google_account: Optional['outputs.SecurityScanConfigAuthenticationGoogleAccount'] = pulumi.output_property("googleAccount")
    """
    Describes authentication configuration that uses a Google account.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityScanConfigAuthenticationCustomAccount(dict):
    login_url: str = pulumi.output_property("loginUrl")
    """
    The login form URL of the website.
    """
    password: str = pulumi.output_property("password")
    """
    The password of the custom account. The credential is stored encrypted
    in GCP.  **Note**: This property is sensitive and will not be displayed in the plan.
    """
    username: str = pulumi.output_property("username")
    """
    The user name of the custom account.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityScanConfigAuthenticationGoogleAccount(dict):
    password: str = pulumi.output_property("password")
    """
    The password of the custom account. The credential is stored encrypted
    in GCP.  **Note**: This property is sensitive and will not be displayed in the plan.
    """
    username: str = pulumi.output_property("username")
    """
    The user name of the custom account.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecurityScanConfigSchedule(dict):
    interval_duration_days: float = pulumi.output_property("intervalDurationDays")
    """
    The duration of time between executions in days
    """
    schedule_time: Optional[str] = pulumi.output_property("scheduleTime")
    """
    A timestamp indicates when the next run will be scheduled. The value is refreshed
    by the server after each run. If unspecified, it will default to current server time,
    which means the scan will be scheduled to start immediately.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SnapshotSnapshotEncryptionKey(dict):
    raw_key: str = pulumi.output_property("rawKey")
    """
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.  **Note**: This property is sensitive and will not be displayed in the plan.
    """
    sha256: Optional[str] = pulumi.output_property("sha256")
    """
    -
    The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    encryption key that protects this resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SnapshotSourceDiskEncryptionKey(dict):
    raw_key: Optional[str] = pulumi.output_property("rawKey")
    """
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.  **Note**: This property is sensitive and will not be displayed in the plan.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubnetworkIAMBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    """
    expression: str = pulumi.output_property("expression")
    """
    Textual representation of an expression in Common Expression Language syntax.
    """
    title: str = pulumi.output_property("title")
    """
    A title for the expression, i.e. a short string describing its purpose.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubnetworkIAMMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    """
    expression: str = pulumi.output_property("expression")
    """
    Textual representation of an expression in Common Expression Language syntax.
    """
    title: str = pulumi.output_property("title")
    """
    A title for the expression, i.e. a short string describing its purpose.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubnetworkLogConfig(dict):
    aggregation_interval: Optional[str] = pulumi.output_property("aggregationInterval")
    """
    Can only be specified if VPC flow logging for this subnetwork is enabled.
    Toggles the aggregation interval for collecting flow logs. Increasing the
    interval time will reduce the amount of generated flow logs for long
    lasting connections. Default is an interval of 5 seconds per connection.
    Possible values are INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN,
    INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN
    """
    flow_sampling: Optional[float] = pulumi.output_property("flowSampling")
    """
    Can only be specified if VPC flow logging for this subnetwork is enabled.
    The value of the field must be in [0, 1]. Set the sampling rate of VPC
    flow logs within the subnetwork where 1.0 means all collected logs are
    reported and 0.0 means no logs are reported. Default is 0.5 which means
    half of all collected logs are reported.
    """
    metadata: Optional[str] = pulumi.output_property("metadata")
    """
    Can only be specified if VPC flow logging for this subnetwork is enabled.
    Configures whether metadata fields should be added to the reported VPC
    flow logs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubnetworkSecondaryIpRange(dict):
    ip_cidr_range: str = pulumi.output_property("ipCidrRange")
    """
    The range of IP addresses belonging to this subnetwork secondary
    range. Provide this property when you create the subnetwork.
    Ranges must be unique and non-overlapping with all primary and
    secondary IP ranges within a network. Only IPv4 is supported.
    """
    range_name: str = pulumi.output_property("rangeName")
    """
    The name associated with this subnetwork secondary range, used
    when adding an alias IP range to a VM instance. The name must
    be 1-63 characters long, and comply with RFC1035. The name
    must be unique within the subnetwork.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteAction(dict):
    cors_policy: Optional['outputs.URLMapDefaultRouteActionCorsPolicy'] = pulumi.output_property("corsPolicy")
    """
    The specification for allowing client side cross-origin requests. Please see
    [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)  Structure is documented below.
    """
    fault_injection_policy: Optional['outputs.URLMapDefaultRouteActionFaultInjectionPolicy'] = pulumi.output_property("faultInjectionPolicy")
    """
    The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
    As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
    percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
    by the Loadbalancer for a percentage of requests.
    timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.  Structure is documented below.
    """
    request_mirror_policy: Optional['outputs.URLMapDefaultRouteActionRequestMirrorPolicy'] = pulumi.output_property("requestMirrorPolicy")
    """
    Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
    Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
    the host / authority header is suffixed with -shadow.  Structure is documented below.
    """
    retry_policy: Optional['outputs.URLMapDefaultRouteActionRetryPolicy'] = pulumi.output_property("retryPolicy")
    """
    Specifies the retry policy associated with this route.  Structure is documented below.
    """
    timeout: Optional['outputs.URLMapDefaultRouteActionTimeout'] = pulumi.output_property("timeout")
    """
    Specifies the timeout for the selected route. Timeout is computed from the time the request has been
    fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
    If not specified, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
    """
    url_rewrite: Optional['outputs.URLMapDefaultRouteActionUrlRewrite'] = pulumi.output_property("urlRewrite")
    """
    The spec to modify the URL of the request, prior to forwarding the request to the matched service.  Structure is documented below.
    """
    weighted_backend_services: Optional[List['outputs.URLMapDefaultRouteActionWeightedBackendService']] = pulumi.output_property("weightedBackendServices")
    """
    A list of weighted backend services to send traffic to when a route match occurs.
    The weights determine the fraction of traffic that flows to their corresponding backend service.
    If all traffic needs to go to a single backend service, there must be one weightedBackendService
    with weight set to a non 0 number.
    Once a backendService is identified and before forwarding the request to the backend service,
    advanced routing actions like Url rewrites and header transformations are applied depending on
    additional settings specified in this HttpRouteAction.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionCorsPolicy(dict):
    allow_credentials: Optional[bool] = pulumi.output_property("allowCredentials")
    """
    In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
    This translates to the Access-Control-Allow-Credentials header.
    """
    allow_headers: Optional[List[str]] = pulumi.output_property("allowHeaders")
    """
    Specifies the content for the Access-Control-Allow-Headers header.
    """
    allow_methods: Optional[List[str]] = pulumi.output_property("allowMethods")
    """
    Specifies the content for the Access-Control-Allow-Methods header.
    """
    allow_origin_regexes: Optional[List[str]] = pulumi.output_property("allowOriginRegexes")
    """
    Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
    please see en.cppreference.com/w/cpp/regex/ecmascript
    An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    """
    allow_origins: Optional[List[str]] = pulumi.output_property("allowOrigins")
    """
    Specifies the list of origins that will be allowed to do CORS requests.
    An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    """
    disabled: Optional[bool] = pulumi.output_property("disabled")
    """
    If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
    """
    expose_headers: Optional[List[str]] = pulumi.output_property("exposeHeaders")
    """
    Specifies the content for the Access-Control-Expose-Headers header.
    """
    max_age: Optional[float] = pulumi.output_property("maxAge")
    """
    Specifies how long results of a preflight request can be cached in seconds.
    This translates to the Access-Control-Max-Age header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionFaultInjectionPolicy(dict):
    abort: Optional['outputs.URLMapDefaultRouteActionFaultInjectionPolicyAbort'] = pulumi.output_property("abort")
    """
    The specification for how client requests are aborted as part of fault injection.  Structure is documented below.
    """
    delay: Optional['outputs.URLMapDefaultRouteActionFaultInjectionPolicyDelay'] = pulumi.output_property("delay")
    """
    The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionFaultInjectionPolicyAbort(dict):
    http_status: Optional[float] = pulumi.output_property("httpStatus")
    """
    The HTTP status code used to abort the request.
    The value must be between 200 and 599 inclusive.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
    The value must be between 0.0 and 100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionFaultInjectionPolicyDelay(dict):
    fixed_delay: Optional['outputs.URLMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelay'] = pulumi.output_property("fixedDelay")
    """
    Specifies the value of the fixed delay interval.  Structure is documented below.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
    The value must be between 0.0 and 100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelay(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: Optional[str] = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionRequestMirrorPolicy(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The full or partial URL to the BackendService resource being mirrored to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionRetryPolicy(dict):
    num_retries: Optional[float] = pulumi.output_property("numRetries")
    """
    Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
    """
    per_try_timeout: Optional['outputs.URLMapDefaultRouteActionRetryPolicyPerTryTimeout'] = pulumi.output_property("perTryTimeout")
    """
    Specifies a non-zero timeout per retry attempt.
    If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
    will use the largest timeout among all backend services associated with the route.  Structure is documented below.
    """
    retry_conditions: Optional[List[str]] = pulumi.output_property("retryConditions")
    """
    Specfies one or more conditions when this retry rule applies. Valid values are:
    5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
    or if the backend service does not respond at all, example: disconnects, reset, read timeout,
    connection failure, and refused streams.
    gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
    connect-failure: Loadbalancer will retry on failures connecting to backend services,
    for example due to connection timeouts.
    retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
    Currently the only retriable error supported is 409.
    refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
    This reset type indicates that it is safe to retry.
    cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
    deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
    resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
    unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionRetryPolicyPerTryTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: Optional[str] = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: Optional[str] = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionUrlRewrite(dict):
    host_rewrite: Optional[str] = pulumi.output_property("hostRewrite")
    """
    Prior to forwarding the request to the selected service, the request's host header is replaced
    with contents of hostRewrite.
    The value must be between 1 and 255 characters.
    """
    path_prefix_rewrite: Optional[str] = pulumi.output_property("pathPrefixRewrite")
    """
    Prior to forwarding the request to the selected backend service, the matching portion of the
    request's path is replaced by pathPrefixRewrite.
    The value must be between 1 and 1024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionWeightedBackendService(dict):
    backend_service: Optional[str] = pulumi.output_property("backendService")
    """
    The full or partial URL to the BackendService resource being mirrored to.
    """
    header_action: Optional['outputs.URLMapDefaultRouteActionWeightedBackendServiceHeaderAction'] = pulumi.output_property("headerAction")
    """
    Specifies changes to request and response headers that need to take effect for
    the selected backendService.
    headerAction specified here take effect before headerAction in the enclosing
    HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
    """
    weight: Optional[float] = pulumi.output_property("weight")
    """
    Specifies the fraction of traffic sent to backendService, computed as
    weight / (sum of all weightedBackendService weights in routeAction) .
    The selection of a backend service is determined only for new traffic. Once a user's request
    has been directed to a backendService, subsequent requests will be sent to the same backendService
    as determined by the BackendService's session affinity policy.
    The value must be between 0 and 1000
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionWeightedBackendServiceHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request prior to
    forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response prior to sending the
    response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd(dict):
    header_name: Optional[str] = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: Optional[str] = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: Optional[bool] = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd(dict):
    header_name: Optional[str] = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: Optional[str] = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: Optional[bool] = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapDefaultUrlRedirect(dict):
    host_redirect: Optional[str] = pulumi.output_property("hostRedirect")
    """
    The host that will be used in the redirect response instead of the one that was
    supplied in the request. The value must be between 1 and 255 characters.
    """
    https_redirect: Optional[bool] = pulumi.output_property("httpsRedirect")
    """
    If set to true, the URL scheme in the redirected request is set to https. If set to
    false, the URL scheme of the redirected request will remain the same as that of the
    request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
    true for TargetHttpsProxy is not permitted. The default is set to false.
    """
    path_redirect: Optional[str] = pulumi.output_property("pathRedirect")
    """
    The path that will be used in the redirect response instead of the one that was
    supplied in the request. pathRedirect cannot be supplied together with
    prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
    original request will be used for the redirect. The value must be between 1 and 1024
    characters.
    """
    prefix_redirect: Optional[str] = pulumi.output_property("prefixRedirect")
    """
    The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
    retaining the remaining portion of the URL before redirecting the request.
    prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
    neither. If neither is supplied, the path of the original request will be used for
    the redirect. The value must be between 1 and 1024 characters.
    """
    redirect_response_code: Optional[str] = pulumi.output_property("redirectResponseCode")
    """
    The HTTP Status code to use for this RedirectAction. Supported values are:
    - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
    - FOUND, which corresponds to 302.
    - SEE_OTHER which corresponds to 303.
    - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
    will be retained.
    - PERMANENT_REDIRECT, which corresponds to 308. In this case,
    the request method will be retained.
    """
    strip_query: bool = pulumi.output_property("stripQuery")
    """
    If set to true, any accompanying query portion of the original URL is removed prior
    to redirecting the request. If set to false, the query portion of the original URL is
    retained. The default is set to false.
    This field is required to ensure an empty block is not set. The normal default value is false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.URLMapHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request prior to
    forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.URLMapHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response prior to sending the
    response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapHeaderActionRequestHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapHeaderActionResponseHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapHostRule(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of this test case.
    """
    hosts: List[str] = pulumi.output_property("hosts")
    """
    The list of host patterns to match. They must be valid hostnames, except * will
    match any string of ([a-z0-9-.]*). In that case, * must be the first character
    and must be followed in the pattern by either - or ..
    """
    path_matcher: str = pulumi.output_property("pathMatcher")
    """
    The name of the PathMatcher to use to match the path portion of the URL if the
    hostRule matches the URL's host portion.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcher(dict):
    default_route_action: Optional['outputs.URLMapPathMatcherDefaultRouteAction'] = pulumi.output_property("defaultRouteAction")
    """
    defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
    advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
    to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
    Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
    Only one of defaultRouteAction or defaultUrlRedirect must be set.  Structure is documented below.
    """
    default_service: Optional[str] = pulumi.output_property("defaultService")
    """
    The backend service or backend bucket to use when none of the given paths match.
    """
    default_url_redirect: Optional['outputs.URLMapPathMatcherDefaultUrlRedirect'] = pulumi.output_property("defaultUrlRedirect")
    """
    When none of the specified hostRules match, the request is redirected to a URL specified
    by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
    defaultRouteAction must not be set.  Structure is documented below.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of this test case.
    """
    header_action: Optional['outputs.URLMapPathMatcherHeaderAction'] = pulumi.output_property("headerAction")
    """
    Specifies changes to request and response headers that need to take effect for
    the selected backendService.
    headerAction specified here take effect before headerAction in the enclosing
    HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the query parameter to match. The query parameter must exist in the
    request, in the absence of which the request match fails.
    """
    path_rules: Optional[List['outputs.URLMapPathMatcherPathRule']] = pulumi.output_property("pathRules")
    """
    The list of path rules. Use this list instead of routeRules when routing based
    on simple path matching is all that's required. The order by which path rules
    are specified does not matter. Matches are always done on the longest-path-first
    basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
    irrespective of the order in which those paths appear in this list. Within a
    given pathMatcher, only one of pathRules or routeRules must be set.  Structure is documented below.
    """
    route_rules: Optional[List['outputs.URLMapPathMatcherRouteRule']] = pulumi.output_property("routeRules")
    """
    The list of ordered HTTP route rules. Use this list instead of pathRules when
    advanced route matching and routing actions are desired. The order of specifying
    routeRules matters: the first rule that matches will cause its specified routing
    action to take effect. Within a given pathMatcher, only one of pathRules or
    routeRules must be set. routeRules are not supported in UrlMaps intended for
    External load balancers.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteAction(dict):
    cors_policy: Optional['outputs.URLMapPathMatcherDefaultRouteActionCorsPolicy'] = pulumi.output_property("corsPolicy")
    """
    The specification for allowing client side cross-origin requests. Please see
    [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)  Structure is documented below.
    """
    fault_injection_policy: Optional['outputs.URLMapPathMatcherDefaultRouteActionFaultInjectionPolicy'] = pulumi.output_property("faultInjectionPolicy")
    """
    The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
    As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
    percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
    by the Loadbalancer for a percentage of requests.
    timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.  Structure is documented below.
    """
    request_mirror_policy: Optional['outputs.URLMapPathMatcherDefaultRouteActionRequestMirrorPolicy'] = pulumi.output_property("requestMirrorPolicy")
    """
    Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
    Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
    the host / authority header is suffixed with -shadow.  Structure is documented below.
    """
    retry_policy: Optional['outputs.URLMapPathMatcherDefaultRouteActionRetryPolicy'] = pulumi.output_property("retryPolicy")
    """
    Specifies the retry policy associated with this route.  Structure is documented below.
    """
    timeout: Optional['outputs.URLMapPathMatcherDefaultRouteActionTimeout'] = pulumi.output_property("timeout")
    """
    Specifies the timeout for the selected route. Timeout is computed from the time the request has been
    fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
    If not specified, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
    """
    url_rewrite: Optional['outputs.URLMapPathMatcherDefaultRouteActionUrlRewrite'] = pulumi.output_property("urlRewrite")
    """
    The spec to modify the URL of the request, prior to forwarding the request to the matched service.  Structure is documented below.
    """
    weighted_backend_services: Optional[List['outputs.URLMapPathMatcherDefaultRouteActionWeightedBackendService']] = pulumi.output_property("weightedBackendServices")
    """
    A list of weighted backend services to send traffic to when a route match occurs.
    The weights determine the fraction of traffic that flows to their corresponding backend service.
    If all traffic needs to go to a single backend service, there must be one weightedBackendService
    with weight set to a non 0 number.
    Once a backendService is identified and before forwarding the request to the backend service,
    advanced routing actions like Url rewrites and header transformations are applied depending on
    additional settings specified in this HttpRouteAction.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionCorsPolicy(dict):
    allow_credentials: Optional[bool] = pulumi.output_property("allowCredentials")
    """
    In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
    This translates to the Access-Control-Allow-Credentials header.
    """
    allow_headers: Optional[List[str]] = pulumi.output_property("allowHeaders")
    """
    Specifies the content for the Access-Control-Allow-Headers header.
    """
    allow_methods: Optional[List[str]] = pulumi.output_property("allowMethods")
    """
    Specifies the content for the Access-Control-Allow-Methods header.
    """
    allow_origin_regexes: Optional[List[str]] = pulumi.output_property("allowOriginRegexes")
    """
    Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
    please see en.cppreference.com/w/cpp/regex/ecmascript
    An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    """
    allow_origins: Optional[List[str]] = pulumi.output_property("allowOrigins")
    """
    Specifies the list of origins that will be allowed to do CORS requests.
    An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    """
    disabled: Optional[bool] = pulumi.output_property("disabled")
    """
    If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
    """
    expose_headers: Optional[List[str]] = pulumi.output_property("exposeHeaders")
    """
    Specifies the content for the Access-Control-Expose-Headers header.
    """
    max_age: Optional[float] = pulumi.output_property("maxAge")
    """
    Specifies how long results of a preflight request can be cached in seconds.
    This translates to the Access-Control-Max-Age header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionFaultInjectionPolicy(dict):
    abort: Optional['outputs.URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbort'] = pulumi.output_property("abort")
    """
    The specification for how client requests are aborted as part of fault injection.  Structure is documented below.
    """
    delay: Optional['outputs.URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelay'] = pulumi.output_property("delay")
    """
    The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbort(dict):
    http_status: Optional[float] = pulumi.output_property("httpStatus")
    """
    The HTTP status code used to abort the request.
    The value must be between 200 and 599 inclusive.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
    The value must be between 0.0 and 100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelay(dict):
    fixed_delay: Optional['outputs.URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay'] = pulumi.output_property("fixedDelay")
    """
    Specifies the value of the fixed delay interval.  Structure is documented below.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
    The value must be between 0.0 and 100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: Optional[str] = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionRequestMirrorPolicy(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The full or partial URL to the BackendService resource being mirrored to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionRetryPolicy(dict):
    num_retries: Optional[float] = pulumi.output_property("numRetries")
    """
    Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
    """
    per_try_timeout: Optional['outputs.URLMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeout'] = pulumi.output_property("perTryTimeout")
    """
    Specifies a non-zero timeout per retry attempt.
    If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
    will use the largest timeout among all backend services associated with the route.  Structure is documented below.
    """
    retry_conditions: Optional[List[str]] = pulumi.output_property("retryConditions")
    """
    Specfies one or more conditions when this retry rule applies. Valid values are:
    5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
    or if the backend service does not respond at all, example: disconnects, reset, read timeout,
    connection failure, and refused streams.
    gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
    connect-failure: Loadbalancer will retry on failures connecting to backend services,
    for example due to connection timeouts.
    retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
    Currently the only retriable error supported is 409.
    refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
    This reset type indicates that it is safe to retry.
    cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
    deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
    resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
    unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: Optional[str] = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: Optional[str] = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionUrlRewrite(dict):
    host_rewrite: Optional[str] = pulumi.output_property("hostRewrite")
    """
    Prior to forwarding the request to the selected service, the request's host header is replaced
    with contents of hostRewrite.
    The value must be between 1 and 255 characters.
    """
    path_prefix_rewrite: Optional[str] = pulumi.output_property("pathPrefixRewrite")
    """
    Prior to forwarding the request to the selected backend service, the matching portion of the
    request's path is replaced by pathPrefixRewrite.
    The value must be between 1 and 1024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionWeightedBackendService(dict):
    backend_service: Optional[str] = pulumi.output_property("backendService")
    """
    The full or partial URL to the BackendService resource being mirrored to.
    """
    header_action: Optional['outputs.URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderAction'] = pulumi.output_property("headerAction")
    """
    Specifies changes to request and response headers that need to take effect for
    the selected backendService.
    headerAction specified here take effect before headerAction in the enclosing
    HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
    """
    weight: Optional[float] = pulumi.output_property("weight")
    """
    Specifies the fraction of traffic sent to backendService, computed as
    weight / (sum of all weightedBackendService weights in routeAction) .
    The selection of a backend service is determined only for new traffic. Once a user's request
    has been directed to a backendService, subsequent requests will be sent to the same backendService
    as determined by the BackendService's session affinity policy.
    The value must be between 0 and 1000
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request prior to
    forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response prior to sending the
    response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd(dict):
    header_name: Optional[str] = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: Optional[str] = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: Optional[bool] = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd(dict):
    header_name: Optional[str] = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: Optional[str] = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: Optional[bool] = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherDefaultUrlRedirect(dict):
    host_redirect: Optional[str] = pulumi.output_property("hostRedirect")
    """
    The host that will be used in the redirect response instead of the one that was
    supplied in the request. The value must be between 1 and 255 characters.
    """
    https_redirect: Optional[bool] = pulumi.output_property("httpsRedirect")
    """
    If set to true, the URL scheme in the redirected request is set to https. If set to
    false, the URL scheme of the redirected request will remain the same as that of the
    request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
    true for TargetHttpsProxy is not permitted. The default is set to false.
    """
    path_redirect: Optional[str] = pulumi.output_property("pathRedirect")
    """
    The path that will be used in the redirect response instead of the one that was
    supplied in the request. pathRedirect cannot be supplied together with
    prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
    original request will be used for the redirect. The value must be between 1 and 1024
    characters.
    """
    prefix_redirect: Optional[str] = pulumi.output_property("prefixRedirect")
    """
    The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
    retaining the remaining portion of the URL before redirecting the request.
    prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
    neither. If neither is supplied, the path of the original request will be used for
    the redirect. The value must be between 1 and 1024 characters.
    """
    redirect_response_code: Optional[str] = pulumi.output_property("redirectResponseCode")
    """
    The HTTP Status code to use for this RedirectAction. Supported values are:
    - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
    - FOUND, which corresponds to 302.
    - SEE_OTHER which corresponds to 303.
    - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
    will be retained.
    - PERMANENT_REDIRECT, which corresponds to 308. In this case,
    the request method will be retained.
    """
    strip_query: bool = pulumi.output_property("stripQuery")
    """
    If set to true, any accompanying query portion of the original URL is removed prior
    to redirecting the request. If set to false, the query portion of the original URL is
    retained. The default is set to false.
    This field is required to ensure an empty block is not set. The normal default value is false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.URLMapPathMatcherHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request prior to
    forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.URLMapPathMatcherHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response prior to sending the
    response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherHeaderActionRequestHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherHeaderActionResponseHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRule(dict):
    paths: List[str] = pulumi.output_property("paths")
    """
    The list of path patterns to match. Each must start with / and the only place a
    * is allowed is at the end following a /. The string fed to the path matcher
    does not include any text after the first ? or #, and those chars are not
    allowed here.
    """
    route_action: Optional['outputs.URLMapPathMatcherPathRuleRouteAction'] = pulumi.output_property("routeAction")
    """
    In response to a matching matchRule, the load balancer performs advanced routing
    actions like URL rewrites, header transformations, etc. prior to forwarding the
    request to the selected backend. If  routeAction specifies any
    weightedBackendServices, service must not be set. Conversely if service is set,
    routeAction cannot contain any  weightedBackendServices. Only one of routeAction
    or urlRedirect must be set.  Structure is documented below.
    """
    service: Optional[str] = pulumi.output_property("service")
    """
    The backend service or backend bucket link that should be matched by this test.
    """
    url_redirect: Optional['outputs.URLMapPathMatcherPathRuleUrlRedirect'] = pulumi.output_property("urlRedirect")
    """
    When this rule is matched, the request is redirected to a URL specified by
    urlRedirect. If urlRedirect is specified, service or routeAction must not be
    set.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteAction(dict):
    cors_policy: Optional['outputs.URLMapPathMatcherPathRuleRouteActionCorsPolicy'] = pulumi.output_property("corsPolicy")
    """
    The specification for allowing client side cross-origin requests. Please see
    [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)  Structure is documented below.
    """
    fault_injection_policy: Optional['outputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy'] = pulumi.output_property("faultInjectionPolicy")
    """
    The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
    As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
    percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
    by the Loadbalancer for a percentage of requests.
    timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.  Structure is documented below.
    """
    request_mirror_policy: Optional['outputs.URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy'] = pulumi.output_property("requestMirrorPolicy")
    """
    Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
    Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
    the host / authority header is suffixed with -shadow.  Structure is documented below.
    """
    retry_policy: Optional['outputs.URLMapPathMatcherPathRuleRouteActionRetryPolicy'] = pulumi.output_property("retryPolicy")
    """
    Specifies the retry policy associated with this route.  Structure is documented below.
    """
    timeout: Optional['outputs.URLMapPathMatcherPathRuleRouteActionTimeout'] = pulumi.output_property("timeout")
    """
    Specifies the timeout for the selected route. Timeout is computed from the time the request has been
    fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
    If not specified, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
    """
    url_rewrite: Optional['outputs.URLMapPathMatcherPathRuleRouteActionUrlRewrite'] = pulumi.output_property("urlRewrite")
    """
    The spec to modify the URL of the request, prior to forwarding the request to the matched service.  Structure is documented below.
    """
    weighted_backend_services: Optional[List['outputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendService']] = pulumi.output_property("weightedBackendServices")
    """
    A list of weighted backend services to send traffic to when a route match occurs.
    The weights determine the fraction of traffic that flows to their corresponding backend service.
    If all traffic needs to go to a single backend service, there must be one weightedBackendService
    with weight set to a non 0 number.
    Once a backendService is identified and before forwarding the request to the backend service,
    advanced routing actions like Url rewrites and header transformations are applied depending on
    additional settings specified in this HttpRouteAction.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionCorsPolicy(dict):
    allow_credentials: Optional[bool] = pulumi.output_property("allowCredentials")
    """
    In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
    This translates to the Access-Control-Allow-Credentials header.
    """
    allow_headers: Optional[List[str]] = pulumi.output_property("allowHeaders")
    """
    Specifies the content for the Access-Control-Allow-Headers header.
    """
    allow_methods: Optional[List[str]] = pulumi.output_property("allowMethods")
    """
    Specifies the content for the Access-Control-Allow-Methods header.
    """
    allow_origin_regexes: Optional[List[str]] = pulumi.output_property("allowOriginRegexes")
    """
    Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
    please see en.cppreference.com/w/cpp/regex/ecmascript
    An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    """
    allow_origins: Optional[List[str]] = pulumi.output_property("allowOrigins")
    """
    Specifies the list of origins that will be allowed to do CORS requests.
    An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    """
    disabled: bool = pulumi.output_property("disabled")
    """
    If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
    """
    expose_headers: Optional[List[str]] = pulumi.output_property("exposeHeaders")
    """
    Specifies the content for the Access-Control-Expose-Headers header.
    """
    max_age: Optional[float] = pulumi.output_property("maxAge")
    """
    Specifies how long results of a preflight request can be cached in seconds.
    This translates to the Access-Control-Max-Age header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy(dict):
    abort: Optional['outputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort'] = pulumi.output_property("abort")
    """
    The specification for how client requests are aborted as part of fault injection.  Structure is documented below.
    """
    delay: Optional['outputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay'] = pulumi.output_property("delay")
    """
    The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort(dict):
    http_status: float = pulumi.output_property("httpStatus")
    """
    The HTTP status code used to abort the request.
    The value must be between 200 and 599 inclusive.
    """
    percentage: float = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
    The value must be between 0.0 and 100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay(dict):
    fixed_delay: 'outputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay' = pulumi.output_property("fixedDelay")
    """
    Specifies the value of the fixed delay interval.  Structure is documented below.
    """
    percentage: float = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
    The value must be between 0.0 and 100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The full or partial URL to the BackendService resource being mirrored to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionRetryPolicy(dict):
    num_retries: Optional[float] = pulumi.output_property("numRetries")
    """
    Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
    """
    per_try_timeout: Optional['outputs.URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout'] = pulumi.output_property("perTryTimeout")
    """
    Specifies a non-zero timeout per retry attempt.
    If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
    will use the largest timeout among all backend services associated with the route.  Structure is documented below.
    """
    retry_conditions: Optional[List[str]] = pulumi.output_property("retryConditions")
    """
    Specfies one or more conditions when this retry rule applies. Valid values are:
    5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
    or if the backend service does not respond at all, example: disconnects, reset, read timeout,
    connection failure, and refused streams.
    gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
    connect-failure: Loadbalancer will retry on failures connecting to backend services,
    for example due to connection timeouts.
    retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
    Currently the only retriable error supported is 409.
    refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
    This reset type indicates that it is safe to retry.
    cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
    deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
    resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
    unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionUrlRewrite(dict):
    host_rewrite: Optional[str] = pulumi.output_property("hostRewrite")
    """
    Prior to forwarding the request to the selected service, the request's host header is replaced
    with contents of hostRewrite.
    The value must be between 1 and 255 characters.
    """
    path_prefix_rewrite: Optional[str] = pulumi.output_property("pathPrefixRewrite")
    """
    Prior to forwarding the request to the selected backend service, the matching portion of the
    request's path is replaced by pathPrefixRewrite.
    The value must be between 1 and 1024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionWeightedBackendService(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The full or partial URL to the BackendService resource being mirrored to.
    """
    header_action: Optional['outputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction'] = pulumi.output_property("headerAction")
    """
    Specifies changes to request and response headers that need to take effect for
    the selected backendService.
    headerAction specified here take effect before headerAction in the enclosing
    HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
    """
    weight: float = pulumi.output_property("weight")
    """
    Specifies the fraction of traffic sent to backendService, computed as
    weight / (sum of all weightedBackendService weights in routeAction) .
    The selection of a backend service is determined only for new traffic. Once a user's request
    has been directed to a backendService, subsequent requests will be sent to the same backendService
    as determined by the BackendService's session affinity policy.
    The value must be between 0 and 1000
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request prior to
    forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response prior to sending the
    response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherPathRuleUrlRedirect(dict):
    host_redirect: Optional[str] = pulumi.output_property("hostRedirect")
    """
    The host that will be used in the redirect response instead of the one that was
    supplied in the request. The value must be between 1 and 255 characters.
    """
    https_redirect: Optional[bool] = pulumi.output_property("httpsRedirect")
    """
    If set to true, the URL scheme in the redirected request is set to https. If set to
    false, the URL scheme of the redirected request will remain the same as that of the
    request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
    true for TargetHttpsProxy is not permitted. The default is set to false.
    """
    path_redirect: Optional[str] = pulumi.output_property("pathRedirect")
    """
    The path that will be used in the redirect response instead of the one that was
    supplied in the request. pathRedirect cannot be supplied together with
    prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
    original request will be used for the redirect. The value must be between 1 and 1024
    characters.
    """
    prefix_redirect: Optional[str] = pulumi.output_property("prefixRedirect")
    """
    The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
    retaining the remaining portion of the URL before redirecting the request.
    prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
    neither. If neither is supplied, the path of the original request will be used for
    the redirect. The value must be between 1 and 1024 characters.
    """
    redirect_response_code: Optional[str] = pulumi.output_property("redirectResponseCode")
    """
    The HTTP Status code to use for this RedirectAction. Supported values are:
    - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
    - FOUND, which corresponds to 302.
    - SEE_OTHER which corresponds to 303.
    - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
    will be retained.
    - PERMANENT_REDIRECT, which corresponds to 308. In this case,
    the request method will be retained.
    """
    strip_query: bool = pulumi.output_property("stripQuery")
    """
    If set to true, any accompanying query portion of the original URL is removed prior
    to redirecting the request. If set to false, the query portion of the original URL is
    retained. The default is set to false.
    This field is required to ensure an empty block is not set. The normal default value is false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRule(dict):
    header_action: Optional['outputs.URLMapPathMatcherRouteRuleHeaderAction'] = pulumi.output_property("headerAction")
    """
    Specifies changes to request and response headers that need to take effect for
    the selected backendService.
    headerAction specified here take effect before headerAction in the enclosing
    HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
    """
    match_rules: Optional[List['outputs.URLMapPathMatcherRouteRuleMatchRule']] = pulumi.output_property("matchRules")
    """
    The rules for determining a match.  Structure is documented below.
    """
    priority: float = pulumi.output_property("priority")
    """
    For routeRules within a given pathMatcher, priority determines the order
    in which load balancer will interpret routeRules. RouteRules are evaluated
    in order of priority, from the lowest to highest number. The priority of
    a rule decreases as its number increases (1, 2, 3, N+1). The first rule
    that matches the request is applied.
    You cannot configure two or more routeRules with the same priority.
    Priority for each rule must be set to a number between 0 and
    2147483647 inclusive.
    Priority numbers can have gaps, which enable you to add or remove rules
    in the future without affecting the rest of the rules. For example,
    1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
    you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
    future without any impact on existing rules.
    """
    route_action: Optional['outputs.URLMapPathMatcherRouteRuleRouteAction'] = pulumi.output_property("routeAction")
    """
    In response to a matching matchRule, the load balancer performs advanced routing
    actions like URL rewrites, header transformations, etc. prior to forwarding the
    request to the selected backend. If  routeAction specifies any
    weightedBackendServices, service must not be set. Conversely if service is set,
    routeAction cannot contain any  weightedBackendServices. Only one of routeAction
    or urlRedirect must be set.  Structure is documented below.
    """
    service: Optional[str] = pulumi.output_property("service")
    """
    The backend service or backend bucket link that should be matched by this test.
    """
    url_redirect: Optional['outputs.URLMapPathMatcherRouteRuleUrlRedirect'] = pulumi.output_property("urlRedirect")
    """
    When this rule is matched, the request is redirected to a URL specified by
    urlRedirect. If urlRedirect is specified, service or routeAction must not be
    set.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request prior to
    forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response prior to sending the
    response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleMatchRule(dict):
    full_path_match: Optional[str] = pulumi.output_property("fullPathMatch")
    """
    For satifying the matchRule condition, the path of the request must exactly
    match the value specified in fullPathMatch after removing any query parameters
    and anchor that may be part of the original URL. FullPathMatch must be between 1
    and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
    be specified.
    """
    header_matches: Optional[List['outputs.URLMapPathMatcherRouteRuleMatchRuleHeaderMatch']] = pulumi.output_property("headerMatches")
    """
    Specifies a list of header match criteria, all of which must match corresponding
    headers in the request.  Structure is documented below.
    """
    ignore_case: Optional[bool] = pulumi.output_property("ignoreCase")
    """
    Specifies that prefixMatch and fullPathMatch matches are case sensitive.
    Defaults to false.
    """
    metadata_filters: Optional[List['outputs.URLMapPathMatcherRouteRuleMatchRuleMetadataFilter']] = pulumi.output_property("metadataFilters")
    """
    Opaque filter criteria used by Loadbalancer to restrict routing configuration to
    a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
    clients present node metadata. If a match takes place, the relevant routing
    configuration is made available to those proxies. For each metadataFilter in
    this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
    filterLabels must match the corresponding label provided in the metadata. If its
    filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
    with corresponding labels in the provided metadata. metadataFilters specified
    here can be overrides those specified in ForwardingRule that refers to this
    UrlMap. metadataFilters only applies to Loadbalancers that have their
    loadBalancingScheme set to INTERNAL_SELF_MANAGED.  Structure is documented below.
    """
    prefix_match: Optional[str] = pulumi.output_property("prefixMatch")
    """
    The value of the header must start with the contents of prefixMatch. Only one of
    exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
    must be set.
    """
    query_parameter_matches: Optional[List['outputs.URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch']] = pulumi.output_property("queryParameterMatches")
    """
    Specifies a list of query parameter match criteria, all of which must match
    corresponding query parameters in the request.  Structure is documented below.
    """
    regex_match: Optional[str] = pulumi.output_property("regexMatch")
    """
    The queryParameterMatch matches if the value of the parameter matches the
    regular expression specified by regexMatch. For the regular expression grammar,
    please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
    exactMatch and regexMatch must be set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleMatchRuleHeaderMatch(dict):
    exact_match: Optional[str] = pulumi.output_property("exactMatch")
    """
    The queryParameterMatch matches if the value of the parameter exactly matches
    the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
    must be set.
    """
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    invert_match: Optional[bool] = pulumi.output_property("invertMatch")
    """
    If set to false, the headerMatch is considered a match if the match criteria
    above are met. If set to true, the headerMatch is considered a match if the
    match criteria above are NOT met. Defaults to false.
    """
    prefix_match: Optional[str] = pulumi.output_property("prefixMatch")
    """
    The value of the header must start with the contents of prefixMatch. Only one of
    exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
    must be set.
    """
    present_match: Optional[bool] = pulumi.output_property("presentMatch")
    """
    Specifies that the queryParameterMatch matches if the request contains the query
    parameter, irrespective of whether the parameter has a value or not. Only one of
    presentMatch, exactMatch and regexMatch must be set.
    """
    range_match: Optional['outputs.URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch'] = pulumi.output_property("rangeMatch")
    """
    The header value must be an integer and its value must be in the range specified
    in rangeMatch. If the header does not contain an integer, number or is empty,
    the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
    not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
    exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
    must be set.  Structure is documented below.
    """
    regex_match: Optional[str] = pulumi.output_property("regexMatch")
    """
    The queryParameterMatch matches if the value of the parameter matches the
    regular expression specified by regexMatch. For the regular expression grammar,
    please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
    exactMatch and regexMatch must be set.
    """
    suffix_match: Optional[str] = pulumi.output_property("suffixMatch")
    """
    The value of the header must end with the contents of suffixMatch. Only one of
    exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
    must be set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch(dict):
    range_end: float = pulumi.output_property("rangeEnd")
    """
    The end of the range (exclusive).
    """
    range_start: float = pulumi.output_property("rangeStart")
    """
    The start of the range (inclusive).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleMatchRuleMetadataFilter(dict):
    filter_labels: List['outputs.URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel'] = pulumi.output_property("filterLabels")
    """
    The list of label value pairs that must match labels in the provided metadata
    based on filterMatchCriteria  This list must not be empty and can have at the
    most 64 entries.  Structure is documented below.
    """
    filter_match_criteria: str = pulumi.output_property("filterMatchCriteria")
    """
    Specifies how individual filterLabel matches within the list of filterLabels
    contribute towards the overall metadataFilter match. Supported values are:
    - MATCH_ANY: At least one of the filterLabels must have a matching label in the
    provided metadata.
    - MATCH_ALL: All filterLabels must have matching labels in
    the provided metadata.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the query parameter to match. The query parameter must exist in the
    request, in the absence of which the request match fails.
    """
    value: str = pulumi.output_property("value")
    """
    The value of the label must match the specified value. value can have a maximum
    length of 1024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch(dict):
    exact_match: Optional[str] = pulumi.output_property("exactMatch")
    """
    The queryParameterMatch matches if the value of the parameter exactly matches
    the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
    must be set.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the query parameter to match. The query parameter must exist in the
    request, in the absence of which the request match fails.
    """
    present_match: Optional[bool] = pulumi.output_property("presentMatch")
    """
    Specifies that the queryParameterMatch matches if the request contains the query
    parameter, irrespective of whether the parameter has a value or not. Only one of
    presentMatch, exactMatch and regexMatch must be set.
    """
    regex_match: Optional[str] = pulumi.output_property("regexMatch")
    """
    The queryParameterMatch matches if the value of the parameter matches the
    regular expression specified by regexMatch. For the regular expression grammar,
    please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
    exactMatch and regexMatch must be set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteAction(dict):
    cors_policy: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionCorsPolicy'] = pulumi.output_property("corsPolicy")
    """
    The specification for allowing client side cross-origin requests. Please see
    [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)  Structure is documented below.
    """
    fault_injection_policy: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy'] = pulumi.output_property("faultInjectionPolicy")
    """
    The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
    As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
    percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
    by the Loadbalancer for a percentage of requests.
    timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.  Structure is documented below.
    """
    request_mirror_policy: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy'] = pulumi.output_property("requestMirrorPolicy")
    """
    Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
    Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
    the host / authority header is suffixed with -shadow.  Structure is documented below.
    """
    retry_policy: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionRetryPolicy'] = pulumi.output_property("retryPolicy")
    """
    Specifies the retry policy associated with this route.  Structure is documented below.
    """
    timeout: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionTimeout'] = pulumi.output_property("timeout")
    """
    Specifies the timeout for the selected route. Timeout is computed from the time the request has been
    fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
    If not specified, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
    """
    url_rewrite: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionUrlRewrite'] = pulumi.output_property("urlRewrite")
    """
    The spec to modify the URL of the request, prior to forwarding the request to the matched service.  Structure is documented below.
    """
    weighted_backend_services: Optional[List['outputs.URLMapPathMatcherRouteRuleRouteActionWeightedBackendService']] = pulumi.output_property("weightedBackendServices")
    """
    A list of weighted backend services to send traffic to when a route match occurs.
    The weights determine the fraction of traffic that flows to their corresponding backend service.
    If all traffic needs to go to a single backend service, there must be one weightedBackendService
    with weight set to a non 0 number.
    Once a backendService is identified and before forwarding the request to the backend service,
    advanced routing actions like Url rewrites and header transformations are applied depending on
    additional settings specified in this HttpRouteAction.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionCorsPolicy(dict):
    allow_credentials: Optional[bool] = pulumi.output_property("allowCredentials")
    """
    In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
    This translates to the Access-Control-Allow-Credentials header.
    """
    allow_headers: Optional[List[str]] = pulumi.output_property("allowHeaders")
    """
    Specifies the content for the Access-Control-Allow-Headers header.
    """
    allow_methods: Optional[List[str]] = pulumi.output_property("allowMethods")
    """
    Specifies the content for the Access-Control-Allow-Methods header.
    """
    allow_origin_regexes: Optional[List[str]] = pulumi.output_property("allowOriginRegexes")
    """
    Specifies the regualar expression patterns that match allowed origins. For regular expression grammar
    please see en.cppreference.com/w/cpp/regex/ecmascript
    An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    """
    allow_origins: Optional[List[str]] = pulumi.output_property("allowOrigins")
    """
    Specifies the list of origins that will be allowed to do CORS requests.
    An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    """
    disabled: Optional[bool] = pulumi.output_property("disabled")
    """
    If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
    """
    expose_headers: Optional[List[str]] = pulumi.output_property("exposeHeaders")
    """
    Specifies the content for the Access-Control-Expose-Headers header.
    """
    max_age: Optional[float] = pulumi.output_property("maxAge")
    """
    Specifies how long results of a preflight request can be cached in seconds.
    This translates to the Access-Control-Max-Age header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy(dict):
    abort: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort'] = pulumi.output_property("abort")
    """
    The specification for how client requests are aborted as part of fault injection.  Structure is documented below.
    """
    delay: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay'] = pulumi.output_property("delay")
    """
    The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort(dict):
    http_status: Optional[float] = pulumi.output_property("httpStatus")
    """
    The HTTP status code used to abort the request.
    The value must be between 200 and 599 inclusive.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
    The value must be between 0.0 and 100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay(dict):
    fixed_delay: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay'] = pulumi.output_property("fixedDelay")
    """
    Specifies the value of the fixed delay interval.  Structure is documented below.
    """
    percentage: Optional[float] = pulumi.output_property("percentage")
    """
    The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
    The value must be between 0.0 and 100.0 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The full or partial URL to the BackendService resource being mirrored to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionRetryPolicy(dict):
    num_retries: float = pulumi.output_property("numRetries")
    """
    Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
    """
    per_try_timeout: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout'] = pulumi.output_property("perTryTimeout")
    """
    Specifies a non-zero timeout per retry attempt.
    If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set,
    will use the largest timeout among all backend services associated with the route.  Structure is documented below.
    """
    retry_conditions: Optional[List[str]] = pulumi.output_property("retryConditions")
    """
    Specfies one or more conditions when this retry rule applies. Valid values are:
    5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,
    or if the backend service does not respond at all, example: disconnects, reset, read timeout,
    connection failure, and refused streams.
    gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
    connect-failure: Loadbalancer will retry on failures connecting to backend services,
    for example due to connection timeouts.
    retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
    Currently the only retriable error supported is 409.
    refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.
    This reset type indicates that it is safe to retry.
    cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled
    deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
    resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
    unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionTimeout(dict):
    nanos: Optional[float] = pulumi.output_property("nanos")
    """
    Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are
    represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.
    """
    seconds: str = pulumi.output_property("seconds")
    """
    Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.
    Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionUrlRewrite(dict):
    host_rewrite: Optional[str] = pulumi.output_property("hostRewrite")
    """
    Prior to forwarding the request to the selected service, the request's host header is replaced
    with contents of hostRewrite.
    The value must be between 1 and 255 characters.
    """
    path_prefix_rewrite: Optional[str] = pulumi.output_property("pathPrefixRewrite")
    """
    Prior to forwarding the request to the selected backend service, the matching portion of the
    request's path is replaced by pathPrefixRewrite.
    The value must be between 1 and 1024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionWeightedBackendService(dict):
    backend_service: str = pulumi.output_property("backendService")
    """
    The full or partial URL to the BackendService resource being mirrored to.
    """
    header_action: Optional['outputs.URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction'] = pulumi.output_property("headerAction")
    """
    Specifies changes to request and response headers that need to take effect for
    the selected backendService.
    headerAction specified here take effect before headerAction in the enclosing
    HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
    """
    weight: float = pulumi.output_property("weight")
    """
    Specifies the fraction of traffic sent to backendService, computed as
    weight / (sum of all weightedBackendService weights in routeAction) .
    The selection of a backend service is determined only for new traffic. Once a user's request
    has been directed to a backendService, subsequent requests will be sent to the same backendService
    as determined by the BackendService's session affinity policy.
    The value must be between 0 and 1000
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction(dict):
    request_headers_to_adds: Optional[List['outputs.URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd']] = pulumi.output_property("requestHeadersToAdds")
    """
    Headers to add to a matching request prior to forwarding the request to the backendService.  Structure is documented below.
    """
    request_headers_to_removes: Optional[List[str]] = pulumi.output_property("requestHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the request prior to
    forwarding the request to the backendService.
    """
    response_headers_to_adds: Optional[List['outputs.URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd']] = pulumi.output_property("responseHeadersToAdds")
    """
    Headers to add the response prior to sending the response back to the client.  Structure is documented below.
    """
    response_headers_to_removes: Optional[List[str]] = pulumi.output_property("responseHeadersToRemoves")
    """
    A list of header names for headers that need to be removed from the response prior to sending the
    response back to the client.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    The name of the header to add.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    The value of the header to add.
    """
    replace: bool = pulumi.output_property("replace")
    """
    If false, headerValue is appended to any values that already exist for the header.
    If true, headerValue is set for the header, discarding any values that were set for that header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapPathMatcherRouteRuleUrlRedirect(dict):
    host_redirect: Optional[str] = pulumi.output_property("hostRedirect")
    """
    The host that will be used in the redirect response instead of the one that was
    supplied in the request. The value must be between 1 and 255 characters.
    """
    https_redirect: Optional[bool] = pulumi.output_property("httpsRedirect")
    """
    If set to true, the URL scheme in the redirected request is set to https. If set to
    false, the URL scheme of the redirected request will remain the same as that of the
    request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
    true for TargetHttpsProxy is not permitted. The default is set to false.
    """
    path_redirect: Optional[str] = pulumi.output_property("pathRedirect")
    """
    The path that will be used in the redirect response instead of the one that was
    supplied in the request. pathRedirect cannot be supplied together with
    prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
    original request will be used for the redirect. The value must be between 1 and 1024
    characters.
    """
    prefix_redirect: Optional[str] = pulumi.output_property("prefixRedirect")
    """
    The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
    retaining the remaining portion of the URL before redirecting the request.
    prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
    neither. If neither is supplied, the path of the original request will be used for
    the redirect. The value must be between 1 and 1024 characters.
    """
    redirect_response_code: Optional[str] = pulumi.output_property("redirectResponseCode")
    """
    The HTTP Status code to use for this RedirectAction. Supported values are:
    - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
    - FOUND, which corresponds to 302.
    - SEE_OTHER which corresponds to 303.
    - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
    will be retained.
    - PERMANENT_REDIRECT, which corresponds to 308. In this case,
    the request method will be retained.
    """
    strip_query: Optional[bool] = pulumi.output_property("stripQuery")
    """
    If set to true, any accompanying query portion of the original URL is removed prior
    to redirecting the request. If set to false, the query portion of the original URL is
    retained. The default is set to false.
    This field is required to ensure an empty block is not set. The normal default value is false.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class URLMapTest(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    Description of this test case.
    """
    host: str = pulumi.output_property("host")
    """
    Host portion of the URL.
    """
    path: str = pulumi.output_property("path")
    """
    Path portion of the URL.
    """
    service: str = pulumi.output_property("service")
    """
    The backend service or backend bucket link that should be matched by this test.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendBucketCdnPolicy(dict):
    signed_url_cache_max_age_sec: float = pulumi.output_property("signedUrlCacheMaxAgeSec")
    """
    Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceBackend(dict):
    balancing_mode: str = pulumi.output_property("balancingMode")
    capacity_scaler: float = pulumi.output_property("capacityScaler")
    description: str = pulumi.output_property("description")
    """
    Textual description for the Backend Service.
    """
    group: str = pulumi.output_property("group")
    max_connections: float = pulumi.output_property("maxConnections")
    max_connections_per_endpoint: float = pulumi.output_property("maxConnectionsPerEndpoint")
    max_connections_per_instance: float = pulumi.output_property("maxConnectionsPerInstance")
    max_rate: float = pulumi.output_property("maxRate")
    max_rate_per_endpoint: float = pulumi.output_property("maxRatePerEndpoint")
    max_rate_per_instance: float = pulumi.output_property("maxRatePerInstance")
    max_utilization: float = pulumi.output_property("maxUtilization")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceCdnPolicy(dict):
    cache_key_policies: List['outputs.GetBackendServiceCdnPolicyCacheKeyPolicy'] = pulumi.output_property("cacheKeyPolicies")
    signed_url_cache_max_age_sec: float = pulumi.output_property("signedUrlCacheMaxAgeSec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceCdnPolicyCacheKeyPolicy(dict):
    include_host: bool = pulumi.output_property("includeHost")
    include_protocol: bool = pulumi.output_property("includeProtocol")
    include_query_string: bool = pulumi.output_property("includeQueryString")
    query_string_blacklists: List[str] = pulumi.output_property("queryStringBlacklists")
    query_string_whitelists: List[str] = pulumi.output_property("queryStringWhitelists")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceCircuitBreaker(dict):
    connect_timeouts: List['outputs.GetBackendServiceCircuitBreakerConnectTimeout'] = pulumi.output_property("connectTimeouts")
    max_connections: float = pulumi.output_property("maxConnections")
    max_pending_requests: float = pulumi.output_property("maxPendingRequests")
    max_requests: float = pulumi.output_property("maxRequests")
    max_requests_per_connection: float = pulumi.output_property("maxRequestsPerConnection")
    max_retries: float = pulumi.output_property("maxRetries")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceCircuitBreakerConnectTimeout(dict):
    nanos: float = pulumi.output_property("nanos")
    seconds: float = pulumi.output_property("seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceConsistentHash(dict):
    http_cookies: List['outputs.GetBackendServiceConsistentHashHttpCooky'] = pulumi.output_property("httpCookies")
    http_header_name: str = pulumi.output_property("httpHeaderName")
    minimum_ring_size: float = pulumi.output_property("minimumRingSize")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceConsistentHashHttpCooky(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Backend Service.
    """
    path: str = pulumi.output_property("path")
    ttls: List['outputs.GetBackendServiceConsistentHashHttpCookyTtl'] = pulumi.output_property("ttls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceConsistentHashHttpCookyTtl(dict):
    nanos: float = pulumi.output_property("nanos")
    seconds: float = pulumi.output_property("seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceIap(dict):
    oauth2_client_id: str = pulumi.output_property("oauth2ClientId")
    oauth2_client_secret: str = pulumi.output_property("oauth2ClientSecret")
    oauth2_client_secret_sha256: str = pulumi.output_property("oauth2ClientSecretSha256")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceLogConfig(dict):
    enable: bool = pulumi.output_property("enable")
    sample_rate: float = pulumi.output_property("sampleRate")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceOutlierDetection(dict):
    base_ejection_times: List['outputs.GetBackendServiceOutlierDetectionBaseEjectionTime'] = pulumi.output_property("baseEjectionTimes")
    consecutive_errors: float = pulumi.output_property("consecutiveErrors")
    consecutive_gateway_failure: float = pulumi.output_property("consecutiveGatewayFailure")
    enforcing_consecutive_errors: float = pulumi.output_property("enforcingConsecutiveErrors")
    enforcing_consecutive_gateway_failure: float = pulumi.output_property("enforcingConsecutiveGatewayFailure")
    enforcing_success_rate: float = pulumi.output_property("enforcingSuccessRate")
    intervals: List['outputs.GetBackendServiceOutlierDetectionInterval'] = pulumi.output_property("intervals")
    max_ejection_percent: float = pulumi.output_property("maxEjectionPercent")
    success_rate_minimum_hosts: float = pulumi.output_property("successRateMinimumHosts")
    success_rate_request_volume: float = pulumi.output_property("successRateRequestVolume")
    success_rate_stdev_factor: float = pulumi.output_property("successRateStdevFactor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceOutlierDetectionBaseEjectionTime(dict):
    nanos: float = pulumi.output_property("nanos")
    seconds: float = pulumi.output_property("seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetBackendServiceOutlierDetectionInterval(dict):
    nanos: float = pulumi.output_property("nanos")
    seconds: float = pulumi.output_property("seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceAttachedDisk(dict):
    device_name: str = pulumi.output_property("deviceName")
    """
    Name with which the attached disk is accessible
    under `/dev/disk/by-id/`
    """
    disk_encryption_key_raw: str = pulumi.output_property("diskEncryptionKeyRaw")
    disk_encryption_key_sha256: str = pulumi.output_property("diskEncryptionKeySha256")
    kms_key_self_link: str = pulumi.output_property("kmsKeySelfLink")
    mode: str = pulumi.output_property("mode")
    """
    Read/write mode for the disk. One of `"READ_ONLY"` or `"READ_WRITE"`.
    """
    source: str = pulumi.output_property("source")
    """
    The name or self_link of the disk attached to this instance.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceBootDisk(dict):
    auto_delete: bool = pulumi.output_property("autoDelete")
    """
    Whether the disk will be auto-deleted when the instance is deleted.
    """
    device_name: str = pulumi.output_property("deviceName")
    """
    Name with which the attached disk is accessible
    under `/dev/disk/by-id/`
    """
    disk_encryption_key_raw: str = pulumi.output_property("diskEncryptionKeyRaw")
    disk_encryption_key_sha256: str = pulumi.output_property("diskEncryptionKeySha256")
    initialize_params: List['outputs.GetInstanceBootDiskInitializeParam'] = pulumi.output_property("initializeParams")
    """
    Parameters with which a disk was created alongside the instance.
    Structure is documented below.
    """
    kms_key_self_link: str = pulumi.output_property("kmsKeySelfLink")
    mode: str = pulumi.output_property("mode")
    """
    Read/write mode for the disk. One of `"READ_ONLY"` or `"READ_WRITE"`.
    """
    source: str = pulumi.output_property("source")
    """
    The name or self_link of the disk attached to this instance.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceBootDiskInitializeParam(dict):
    image: str = pulumi.output_property("image")
    """
    The image from which this disk was initialised.
    """
    labels: Dict[str, Any] = pulumi.output_property("labels")
    """
    A set of key/value label pairs assigned to the instance.
    """
    size: float = pulumi.output_property("size")
    """
    The size of the image in gigabytes.
    """
    type: str = pulumi.output_property("type")
    """
    The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceGroupNamedPort(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the instance group. Either `name` or `self_link` must be provided.
    """
    port: float = pulumi.output_property("port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceGuestAccelerator(dict):
    count: float = pulumi.output_property("count")
    """
    The number of the guest accelerator cards exposed to this instance.
    """
    type: str = pulumi.output_property("type")
    """
    The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceNetworkInterface(dict):
    access_configs: List['outputs.GetInstanceNetworkInterfaceAccessConfig'] = pulumi.output_property("accessConfigs")
    """
    Access configurations, i.e. IPs via which this
    instance can be accessed via the Internet. Structure documented below.
    """
    alias_ip_ranges: List['outputs.GetInstanceNetworkInterfaceAliasIpRange'] = pulumi.output_property("aliasIpRanges")
    """
    An array of alias IP ranges for this network interface. Structure documented below.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the instance. One of `name` or `self_link` must be provided.
    """
    network: str = pulumi.output_property("network")
    """
    The name or self_link of the network attached to this interface.
    """
    network_ip: str = pulumi.output_property("networkIp")
    """
    The private IP address assigned to the instance.
    """
    subnetwork: str = pulumi.output_property("subnetwork")
    """
    The name or self_link of the subnetwork attached to this interface.
    """
    subnetwork_project: str = pulumi.output_property("subnetworkProject")
    """
    The project in which the subnetwork belongs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceNetworkInterfaceAccessConfig(dict):
    nat_ip: str = pulumi.output_property("natIp")
    """
    The IP address that is be 1:1 mapped to the instance's
    network ip.
    """
    network_tier: str = pulumi.output_property("networkTier")
    """
    The [networking tier][network-tier] used for configuring this instance. One of `PREMIUM` or `STANDARD`.
    """
    public_ptr_domain_name: str = pulumi.output_property("publicPtrDomainName")
    """
    The DNS domain name for the public PTR record.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceNetworkInterfaceAliasIpRange(dict):
    ip_cidr_range: str = pulumi.output_property("ipCidrRange")
    """
    The IP CIDR range represented by this alias IP range.
    """
    subnetwork_range_name: str = pulumi.output_property("subnetworkRangeName")
    """
    The subnetwork secondary range name specifying
    the secondary range from which to allocate the IP CIDR range for this alias IP
    range.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceScheduling(dict):
    automatic_restart: bool = pulumi.output_property("automaticRestart")
    """
    Specifies if the instance should be
    restarted if it was terminated by Compute Engine (not a user).
    """
    min_node_cpus: float = pulumi.output_property("minNodeCpus")
    node_affinities: List['outputs.GetInstanceSchedulingNodeAffinity'] = pulumi.output_property("nodeAffinities")
    on_host_maintenance: str = pulumi.output_property("onHostMaintenance")
    """
    Describes maintenance behavior for the
    instance. One of `MIGRATE` or `TERMINATE`, for more info, read
    [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options)
    """
    preemptible: bool = pulumi.output_property("preemptible")
    """
    Whether the instance is preemptible.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceSchedulingNodeAffinity(dict):
    key: str = pulumi.output_property("key")
    operator: str = pulumi.output_property("operator")
    values: List[str] = pulumi.output_property("values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceScratchDisk(dict):
    interface: str = pulumi.output_property("interface")
    """
    The disk interface used for attaching this disk. One of `SCSI` or `NVME`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceServiceAccount(dict):
    email: str = pulumi.output_property("email")
    """
    The service account e-mail address.
    """
    scopes: List[str] = pulumi.output_property("scopes")
    """
    A list of service scopes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetInstanceShieldedInstanceConfig(dict):
    enable_integrity_monitoring: bool = pulumi.output_property("enableIntegrityMonitoring")
    enable_secure_boot: bool = pulumi.output_property("enableSecureBoot")
    enable_vtpm: bool = pulumi.output_property("enableVtpm")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRegionInstanceGroupInstance(dict):
    instance: str = pulumi.output_property("instance")
    """
    URL to the instance.
    """
    named_ports: List['outputs.GetRegionInstanceGroupInstanceNamedPort'] = pulumi.output_property("namedPorts")
    """
    List of named ports in the group, as a list of resources, each containing:
    """
    status: str = pulumi.output_property("status")
    """
    String description of current state of the instance.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRegionInstanceGroupInstanceNamedPort(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the instance group.  One of `name` or `self_link` must be provided.
    """
    port: float = pulumi.output_property("port")
    """
    Integer port number
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouterBgp(dict):
    advertise_mode: str = pulumi.output_property("advertiseMode")
    advertised_groups: List[str] = pulumi.output_property("advertisedGroups")
    advertised_ip_ranges: List['outputs.GetRouterBgpAdvertisedIpRange'] = pulumi.output_property("advertisedIpRanges")
    asn: float = pulumi.output_property("asn")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouterBgpAdvertisedIpRange(dict):
    description: str = pulumi.output_property("description")
    range: str = pulumi.output_property("range")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSubnetworkSecondaryIpRange(dict):
    ip_cidr_range: str = pulumi.output_property("ipCidrRange")
    """
    The range of IP addresses belonging to this subnetwork
    secondary range.
    """
    range_name: str = pulumi.output_property("rangeName")
    """
    The name associated with this subnetwork secondary range, used
    when adding an alias IP range to a VM instance.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


