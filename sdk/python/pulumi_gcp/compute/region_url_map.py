# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs


class RegionUrlMap(pulumi.CustomResource):
    creation_timestamp: pulumi.Output[str] = pulumi.output_property("creationTimestamp")
    """
    Creation timestamp in RFC3339 text format.
    """
    default_service: pulumi.Output[Optional[str]] = pulumi.output_property("defaultService")
    """
    A reference to a RegionBackendService resource. This will be used if
    none of the pathRules defined by this PathMatcher is matched by
    the URL's path portion.
    """
    default_url_redirect: pulumi.Output[Optional['outputs.RegionUrlMapDefaultUrlRedirect']] = pulumi.output_property("defaultUrlRedirect")
    """
    When none of the specified hostRules match, the request is redirected to a URL specified
    by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
    defaultRouteAction must not be set.  Structure is documented below.
    """
    description: pulumi.Output[Optional[str]] = pulumi.output_property("description")
    """
    Description of this test case.
    """
    fingerprint: pulumi.Output[str] = pulumi.output_property("fingerprint")
    """
    Fingerprint of this resource. This field is used internally during updates of this resource.
    """
    host_rules: pulumi.Output[Optional[List['outputs.RegionUrlMapHostRule']]] = pulumi.output_property("hostRules")
    """
    The list of HostRules to use against the URL.  Structure is documented below.
    """
    map_id: pulumi.Output[float] = pulumi.output_property("mapId")
    """
    The unique identifier for the resource.
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    The name of the query parameter to match. The query parameter must exist in the
    request, in the absence of which the request match fails.
    """
    path_matchers: pulumi.Output[Optional[List['outputs.RegionUrlMapPathMatcher']]] = pulumi.output_property("pathMatchers")
    """
    The name of the PathMatcher to use to match the path portion of
    the URL if the hostRule matches the URL's host portion.
    """
    project: pulumi.Output[str] = pulumi.output_property("project")
    """
    The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.
    """
    region: pulumi.Output[str] = pulumi.output_property("region")
    """
    The Region in which the url map should reside.
    If it is not provided, the provider region is used.
    """
    self_link: pulumi.Output[str] = pulumi.output_property("selfLink")
    """
    The URI of the created resource.
    """
    tests: pulumi.Output[Optional[List['outputs.RegionUrlMapTest']]] = pulumi.output_property("tests")
    """
    The list of expected URL mappings. Requests to update this UrlMap will
    succeed only if all of the test cases pass.  Structure is documented below.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, default_service=None, default_url_redirect=None, description=None, host_rules=None, name=None, path_matchers=None, project=None, region=None, tests=None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        UrlMaps are used to route requests to a backend service based on rules
        that you define for the host and path of an incoming URL.

        ## Example Usage
        ### Region Url Map Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.compute.RegionHealthCheck("default",
            region="us-central1",
            check_interval_sec=1,
            timeout_sec=1,
            http_health_check={
                "port": 80,
                "request_path": "/",
            })
        login = gcp.compute.RegionBackendService("login",
            region="us-central1",
            protocol="HTTP",
            timeout_sec=10,
            health_checks=[default.id])
        home = gcp.compute.RegionBackendService("home",
            region="us-central1",
            protocol="HTTP",
            timeout_sec=10,
            health_checks=[default.id])
        regionurlmap = gcp.compute.RegionUrlMap("regionurlmap",
            region="us-central1",
            description="a description",
            default_service=home.id,
            host_rules=[{
                "hosts": ["mysite.com"],
                "pathMatcher": "allpaths",
            }],
            path_matchers=[{
                "name": "allpaths",
                "default_service": home.id,
                "pathRules": [
                    {
                        "paths": ["/home"],
                        "service": home.id,
                    },
                    {
                        "paths": ["/login"],
                        "service": login.id,
                    },
                ],
            }],
            tests=[{
                "service": home.id,
                "host": "hi.com",
                "path": "/home",
            }])
        ```
        ### Region Url Map L7 Ilb Path

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.compute.RegionHealthCheck("default", http_health_check={
            "port": 80,
        })
        home = gcp.compute.RegionBackendService("home",
            protocol="HTTP",
            timeout_sec=10,
            health_checks=[default.id],
            load_balancing_scheme="INTERNAL_MANAGED")
        regionurlmap = gcp.compute.RegionUrlMap("regionurlmap",
            description="a description",
            default_service=home.id,
            host_rules=[{
                "hosts": ["mysite.com"],
                "pathMatcher": "allpaths",
            }],
            path_matchers=[{
                "name": "allpaths",
                "default_service": home.id,
                "pathRules": [{
                    "paths": ["/home"],
                    "routeAction": {
                        "corsPolicy": {
                            "allowCredentials": True,
                            "allowHeaders": ["Allowed content"],
                            "allowMethods": ["GET"],
                            "allowOrigins": ["Allowed origin"],
                            "exposeHeaders": ["Exposed header"],
                            "maxAge": 30,
                            "disabled": False,
                        },
                        "faultInjectionPolicy": {
                            "abort": {
                                "httpStatus": 234,
                                "percentage": 5.6,
                            },
                            "delay": {
                                "fixedDelay": {
                                    "seconds": 0,
                                    "nanos": 50000,
                                },
                                "percentage": 7.8,
                            },
                        },
                        "requestMirrorPolicy": {
                            "backend_service": home.id,
                        },
                        "retryPolicy": {
                            "numRetries": 4,
                            "perTryTimeout": {
                                "seconds": 30,
                            },
                            "retryConditions": [
                                "5xx",
                                "deadline-exceeded",
                            ],
                        },
                        "timeout": {
                            "seconds": 20,
                            "nanos": 750000000,
                        },
                        "urlRewrite": {
                            "hostRewrite": "A replacement header",
                            "pathPrefixRewrite": "A replacement path",
                        },
                        "weightedBackendServices": [{
                            "backend_service": home.id,
                            "weight": 400,
                            "header_action": {
                                "requestHeadersToRemoves": ["RemoveMe"],
                                "requestHeadersToAdds": [{
                                    "headerName": "AddMe",
                                    "headerValue": "MyValue",
                                    "replace": True,
                                }],
                                "responseHeadersToRemoves": ["RemoveMe"],
                                "responseHeadersToAdds": [{
                                    "headerName": "AddMe",
                                    "headerValue": "MyValue",
                                    "replace": False,
                                }],
                            },
                        }],
                    },
                }],
            }],
            tests=[{
                "service": home.id,
                "host": "hi.com",
                "path": "/home",
            }])
        ```
        ### Region Url Map L7 Ilb Path Partial

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.compute.RegionHealthCheck("default", http_health_check={
            "port": 80,
        })
        home = gcp.compute.RegionBackendService("home",
            protocol="HTTP",
            timeout_sec=10,
            health_checks=[default.id],
            load_balancing_scheme="INTERNAL_MANAGED")
        regionurlmap = gcp.compute.RegionUrlMap("regionurlmap",
            description="a description",
            default_service=home.id,
            host_rules=[{
                "hosts": ["mysite.com"],
                "pathMatcher": "allpaths",
            }],
            path_matchers=[{
                "name": "allpaths",
                "default_service": home.id,
                "pathRules": [{
                    "paths": ["/home"],
                    "routeAction": {
                        "retryPolicy": {
                            "numRetries": 4,
                            "perTryTimeout": {
                                "seconds": 30,
                            },
                            "retryConditions": [
                                "5xx",
                                "deadline-exceeded",
                            ],
                        },
                        "timeout": {
                            "seconds": 20,
                            "nanos": 750000000,
                        },
                        "urlRewrite": {
                            "hostRewrite": "A replacement header",
                            "pathPrefixRewrite": "A replacement path",
                        },
                        "weightedBackendServices": [{
                            "backend_service": home.id,
                            "weight": 400,
                            "header_action": {
                                "responseHeadersToAdds": [{
                                    "headerName": "AddMe",
                                    "headerValue": "MyValue",
                                    "replace": False,
                                }],
                            },
                        }],
                    },
                }],
            }],
            tests=[{
                "service": home.id,
                "host": "hi.com",
                "path": "/home",
            }])
        ```
        ### Region Url Map L7 Ilb Route

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.compute.RegionHealthCheck("default", http_health_check={
            "port": 80,
        })
        home = gcp.compute.RegionBackendService("home",
            protocol="HTTP",
            timeout_sec=10,
            health_checks=[default.id],
            load_balancing_scheme="INTERNAL_MANAGED")
        regionurlmap = gcp.compute.RegionUrlMap("regionurlmap",
            description="a description",
            default_service=home.id,
            host_rules=[{
                "hosts": ["mysite.com"],
                "pathMatcher": "allpaths",
            }],
            path_matchers=[{
                "name": "allpaths",
                "default_service": home.id,
                "routeRules": [{
                    "priority": 1,
                    "header_action": {
                        "requestHeadersToRemoves": ["RemoveMe2"],
                        "requestHeadersToAdds": [{
                            "headerName": "AddSomethingElse",
                            "headerValue": "MyOtherValue",
                            "replace": True,
                        }],
                        "responseHeadersToRemoves": ["RemoveMe3"],
                        "responseHeadersToAdds": [{
                            "headerName": "AddMe",
                            "headerValue": "MyValue",
                            "replace": False,
                        }],
                    },
                    "matchRules": [{
                        "fullPathMatch": "a full path",
                        "headerMatches": [{
                            "headerName": "someheader",
                            "exactMatch": "match this exactly",
                            "invertMatch": True,
                        }],
                        "ignoreCase": True,
                        "metadata_filters": [{
                            "filterMatchCriteria": "MATCH_ANY",
                            "filterLabels": [{
                                "name": "PLANET",
                                "value": "MARS",
                            }],
                        }],
                        "queryParameterMatches": [{
                            "name": "a query parameter",
                            "presentMatch": True,
                        }],
                    }],
                    "urlRedirect": {
                        "hostRedirect": "A host",
                        "httpsRedirect": False,
                        "pathRedirect": "some/path",
                        "redirectResponseCode": "TEMPORARY_REDIRECT",
                        "stripQuery": True,
                    },
                }],
            }],
            tests=[{
                "service": home.id,
                "host": "hi.com",
                "path": "/home",
            }])
        ```
        ### Region Url Map L7 Ilb Route Partial

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.compute.RegionHealthCheck("default", http_health_check={
            "port": 80,
        })
        home = gcp.compute.RegionBackendService("home",
            protocol="HTTP",
            timeout_sec=10,
            health_checks=[default.id],
            load_balancing_scheme="INTERNAL_MANAGED")
        regionurlmap = gcp.compute.RegionUrlMap("regionurlmap",
            description="a description",
            default_service=home.id,
            host_rules=[{
                "hosts": ["mysite.com"],
                "pathMatcher": "allpaths",
            }],
            path_matchers=[{
                "name": "allpaths",
                "default_service": home.id,
                "routeRules": [{
                    "priority": 1,
                    "service": home.id,
                    "header_action": {
                        "requestHeadersToRemoves": ["RemoveMe2"],
                    },
                    "matchRules": [{
                        "fullPathMatch": "a full path",
                        "headerMatches": [{
                            "headerName": "someheader",
                            "exactMatch": "match this exactly",
                            "invertMatch": True,
                        }],
                        "queryParameterMatches": [{
                            "name": "a query parameter",
                            "presentMatch": True,
                        }],
                    }],
                }],
            }],
            tests=[{
                "service": home.id,
                "host": "hi.com",
                "path": "/home",
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] default_service: A reference to a RegionBackendService resource. This will be used if
               none of the pathRules defined by this PathMatcher is matched by
               the URL's path portion.
        :param pulumi.Input['RegionUrlMapDefaultUrlRedirectArgs'] default_url_redirect: When none of the specified hostRules match, the request is redirected to a URL specified
               by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
               defaultRouteAction must not be set.  Structure is documented below.
        :param pulumi.Input[str] description: Description of this test case.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapHostRuleArgs']]] host_rules: The list of HostRules to use against the URL.  Structure is documented below.
        :param pulumi.Input[str] name: The name of the query parameter to match. The query parameter must exist in the
               request, in the absence of which the request match fails.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherArgs']]] path_matchers: The name of the PathMatcher to use to match the path portion of
               the URL if the hostRule matches the URL's host portion.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] region: The Region in which the url map should reside.
               If it is not provided, the provider region is used.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapTestArgs']]] tests: The list of expected URL mappings. Requests to update this UrlMap will
               succeed only if all of the test cases pass.  Structure is documented below.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['default_service'] = default_service
            __props__['default_url_redirect'] = default_url_redirect
            __props__['description'] = description
            __props__['host_rules'] = host_rules
            __props__['name'] = name
            __props__['path_matchers'] = path_matchers
            __props__['project'] = project
            __props__['region'] = region
            __props__['tests'] = tests
            __props__['creation_timestamp'] = None
            __props__['fingerprint'] = None
            __props__['map_id'] = None
            __props__['self_link'] = None
        super(RegionUrlMap, __self__).__init__(
            'gcp:compute/regionUrlMap:RegionUrlMap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, creation_timestamp=None, default_service=None, default_url_redirect=None, description=None, fingerprint=None, host_rules=None, map_id=None, name=None, path_matchers=None, project=None, region=None, self_link=None, tests=None):
        """
        Get an existing RegionUrlMap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] creation_timestamp: Creation timestamp in RFC3339 text format.
        :param pulumi.Input[str] default_service: A reference to a RegionBackendService resource. This will be used if
               none of the pathRules defined by this PathMatcher is matched by
               the URL's path portion.
        :param pulumi.Input['RegionUrlMapDefaultUrlRedirectArgs'] default_url_redirect: When none of the specified hostRules match, the request is redirected to a URL specified
               by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
               defaultRouteAction must not be set.  Structure is documented below.
        :param pulumi.Input[str] description: Description of this test case.
        :param pulumi.Input[str] fingerprint: Fingerprint of this resource. This field is used internally during updates of this resource.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapHostRuleArgs']]] host_rules: The list of HostRules to use against the URL.  Structure is documented below.
        :param pulumi.Input[float] map_id: The unique identifier for the resource.
        :param pulumi.Input[str] name: The name of the query parameter to match. The query parameter must exist in the
               request, in the absence of which the request match fails.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapPathMatcherArgs']]] path_matchers: The name of the PathMatcher to use to match the path portion of
               the URL if the hostRule matches the URL's host portion.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] region: The Region in which the url map should reside.
               If it is not provided, the provider region is used.
        :param pulumi.Input[str] self_link: The URI of the created resource.
        :param pulumi.Input[List[pulumi.Input['RegionUrlMapTestArgs']]] tests: The list of expected URL mappings. Requests to update this UrlMap will
               succeed only if all of the test cases pass.  Structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["creation_timestamp"] = creation_timestamp
        __props__["default_service"] = default_service
        __props__["default_url_redirect"] = default_url_redirect
        __props__["description"] = description
        __props__["fingerprint"] = fingerprint
        __props__["host_rules"] = host_rules
        __props__["map_id"] = map_id
        __props__["name"] = name
        __props__["path_matchers"] = path_matchers
        __props__["project"] = project
        __props__["region"] = region
        __props__["self_link"] = self_link
        __props__["tests"] = tests
        return RegionUrlMap(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

