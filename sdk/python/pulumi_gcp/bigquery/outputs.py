# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.output_type
class AppProfileSingleClusterRouting(dict):
    allow_transactional_writes: Optional[bool] = pulumi.output_property("allowTransactionalWrites")
    """
    If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
    It is unsafe to send these requests to the same table/row/column in multiple clusters.
    """
    cluster_id: str = pulumi.output_property("clusterId")
    """
    The cluster to which read/write requests should be routed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectionCloudSql(dict):
    credential: 'outputs.ConnectionCloudSqlCredential' = pulumi.output_property("credential")
    """
    Cloud SQL properties.  Structure is documented below.
    """
    database: str = pulumi.output_property("database")
    """
    Database name.
    """
    instance_id: str = pulumi.output_property("instanceId")
    """
    Cloud SQL instance ID in the form project:location:instance.
    """
    type: str = pulumi.output_property("type")
    """
    Type of the Cloud SQL database.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConnectionCloudSqlCredential(dict):
    password: str = pulumi.output_property("password")
    """
    Password for database.  **Note**: This property is sensitive and will not be displayed in the plan.
    """
    username: str = pulumi.output_property("username")
    """
    Username for database.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetAccess(dict):
    domain: Optional[str] = pulumi.output_property("domain")
    """
    A domain to grant access to. Any users signed in with the
    domain specified will be granted the specified access
    """
    group_by_email: Optional[str] = pulumi.output_property("groupByEmail")
    """
    An email address of a Google Group to grant access to.
    """
    role: Optional[str] = pulumi.output_property("role")
    """
    Describes the rights granted to the user specified by the other
    member of the access object. Primitive, Predefined and custom
    roles are supported. Predefined roles that have equivalent
    primitive roles are swapped by the API to their Primitive
    counterparts. See
    [official docs](https://cloud.google.com/bigquery/docs/access-control).
    """
    special_group: Optional[str] = pulumi.output_property("specialGroup")
    """
    A special group to grant access to. Possible values include:
    """
    user_by_email: Optional[str] = pulumi.output_property("userByEmail")
    """
    An email address of a user to grant access to. For example:
    fred@example.com
    """
    view: Optional['outputs.DatasetAccessView'] = pulumi.output_property("view")
    """
    A view from a different dataset to grant access to. Queries
    executed against that view will have read access to tables in
    this dataset. The role field is not required when this field is
    set. If that view is updated by any user, access to the view
    needs to be granted again via an update operation.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetAccessView(dict):
    dataset_id: str = pulumi.output_property("datasetId")
    """
    The ID of the dataset containing this table.
    """
    project_id: str = pulumi.output_property("projectId")
    """
    The ID of the project containing this table.
    """
    table_id: str = pulumi.output_property("tableId")
    """
    The ID of the table. The ID must contain only letters (a-z,
    A-Z), numbers (0-9), or underscores (_). The maximum length
    is 1,024 characters.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetDefaultEncryptionConfiguration(dict):
    kms_key_name: str = pulumi.output_property("kmsKeyName")
    """
    Describes the Cloud KMS encryption key that will be used to protect destination
    BigQuery table. The BigQuery Service Account associated with your project requires
    access to this encryption key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetIamBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetIamMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobCopy(dict):
    create_disposition: Optional[str] = pulumi.output_property("createDisposition")
    """
    Specifies whether the job is allowed to create new tables. The following values are supported:
    CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
    CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
    Creation, truncation and append actions occur as one atomic update upon job completion
    """
    destination_encryption_configuration: Optional['outputs.JobCopyDestinationEncryptionConfiguration'] = pulumi.output_property("destinationEncryptionConfiguration")
    """
    Custom encryption configuration (e.g., Cloud KMS keys)  Structure is documented below.
    """
    destination_table: Optional['outputs.JobCopyDestinationTable'] = pulumi.output_property("destinationTable")
    """
    The destination table.  Structure is documented below.
    """
    source_tables: List['outputs.JobCopySourceTable'] = pulumi.output_property("sourceTables")
    """
    Source tables to copy.  Structure is documented below.
    """
    write_disposition: Optional[str] = pulumi.output_property("writeDisposition")
    """
    Specifies the action that occurs if the destination table already exists. The following values are supported:
    WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
    WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
    WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
    Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
    Creation, truncation and append actions occur as one atomic update upon job completion.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobCopyDestinationEncryptionConfiguration(dict):
    kms_key_name: str = pulumi.output_property("kmsKeyName")
    """
    Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
    The BigQuery Service Account associated with your project requires access to this encryption key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobCopyDestinationTable(dict):
    dataset_id: Optional[str] = pulumi.output_property("datasetId")
    """
    The ID of the dataset containing this model.
    """
    project_id: Optional[str] = pulumi.output_property("projectId")
    """
    The ID of the project containing this model.
    """
    table_id: str = pulumi.output_property("tableId")
    """
    The table. Can be specified `{{table_id}}` if `project_id` and `dataset_id` are also set,
    or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobCopySourceTable(dict):
    dataset_id: Optional[str] = pulumi.output_property("datasetId")
    """
    The ID of the dataset containing this model.
    """
    project_id: Optional[str] = pulumi.output_property("projectId")
    """
    The ID of the project containing this model.
    """
    table_id: str = pulumi.output_property("tableId")
    """
    The table. Can be specified `{{table_id}}` if `project_id` and `dataset_id` are also set,
    or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobExtract(dict):
    compression: Optional[str] = pulumi.output_property("compression")
    """
    The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE.
    The default value is NONE. DEFLATE and SNAPPY are only supported for Avro.
    """
    destination_format: Optional[str] = pulumi.output_property("destinationFormat")
    """
    The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON and AVRO for tables and SAVED_MODEL for models.
    The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV.
    The default value for models is SAVED_MODEL.
    """
    destination_uris: List[str] = pulumi.output_property("destinationUris")
    """
    A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    When extracting data in CSV format, this defines the delimiter to use between fields in the exported data.
    Default is ','
    """
    print_header: Optional[bool] = pulumi.output_property("printHeader")
    """
    Whether to print out a header row in the results. Default is true.
    """
    source_model: Optional['outputs.JobExtractSourceModel'] = pulumi.output_property("sourceModel")
    """
    A reference to the model being exported.  Structure is documented below.
    """
    source_table: Optional['outputs.JobExtractSourceTable'] = pulumi.output_property("sourceTable")
    """
    A reference to the table being exported.  Structure is documented below.
    """
    use_avro_logical_types: Optional[bool] = pulumi.output_property("useAvroLogicalTypes")
    """
    Whether to use logical types when extracting to AVRO format.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobExtractSourceModel(dict):
    dataset_id: str = pulumi.output_property("datasetId")
    """
    The ID of the dataset containing this model.
    """
    model_id: str = pulumi.output_property("modelId")
    """
    The ID of the model.
    """
    project_id: str = pulumi.output_property("projectId")
    """
    The ID of the project containing this model.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobExtractSourceTable(dict):
    dataset_id: Optional[str] = pulumi.output_property("datasetId")
    """
    The ID of the dataset containing this model.
    """
    project_id: Optional[str] = pulumi.output_property("projectId")
    """
    The ID of the project containing this model.
    """
    table_id: str = pulumi.output_property("tableId")
    """
    The table. Can be specified `{{table_id}}` if `project_id` and `dataset_id` are also set,
    or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobLoad(dict):
    allow_jagged_rows: Optional[bool] = pulumi.output_property("allowJaggedRows")
    """
    Accept rows that are missing trailing optional columns. The missing values are treated as nulls.
    If false, records with missing trailing columns are treated as bad records, and if there are too many bad records,
    an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
    """
    allow_quoted_newlines: Optional[bool] = pulumi.output_property("allowQuotedNewlines")
    """
    Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file.
    The default value is false.
    """
    autodetect: Optional[bool] = pulumi.output_property("autodetect")
    """
    Indicates if we should automatically infer the options and schema for CSV and JSON sources.
    """
    create_disposition: Optional[str] = pulumi.output_property("createDisposition")
    """
    Specifies whether the job is allowed to create new tables. The following values are supported:
    CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
    CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
    Creation, truncation and append actions occur as one atomic update upon job completion
    """
    destination_encryption_configuration: Optional['outputs.JobLoadDestinationEncryptionConfiguration'] = pulumi.output_property("destinationEncryptionConfiguration")
    """
    Custom encryption configuration (e.g., Cloud KMS keys)  Structure is documented below.
    """
    destination_table: 'outputs.JobLoadDestinationTable' = pulumi.output_property("destinationTable")
    """
    The destination table.  Structure is documented below.
    """
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
    The default value is UTF-8. BigQuery decodes the data after the raw, binary data
    has been split using the values of the quote and fieldDelimiter properties.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    When extracting data in CSV format, this defines the delimiter to use between fields in the exported data.
    Default is ','
    """
    ignore_unknown_values: Optional[bool] = pulumi.output_property("ignoreUnknownValues")
    """
    Indicates if BigQuery should allow extra values that are not represented in the table schema.
    If true, the extra values are ignored. If false, records with extra columns are treated as bad records,
    and if there are too many bad records, an invalid error is returned in the job result.
    The default value is false. The sourceFormat property determines what BigQuery treats as an extra value:
    CSV: Trailing columns
    JSON: Named values that don't match any column names
    """
    max_bad_records: Optional[float] = pulumi.output_property("maxBadRecords")
    """
    The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value,
    an invalid error is returned in the job result. The default value is 0, which requires that all records are valid.
    """
    null_marker: Optional[str] = pulumi.output_property("nullMarker")
    """
    Specifies a string that represents a null value in a CSV file. The default value is the empty string. If you set this
    property to a custom value, BigQuery throws an error if an
    empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as
    an empty value.
    """
    projection_fields: Optional[List[str]] = pulumi.output_property("projectionFields")
    """
    If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup.
    Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties.
    If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
    """
    quote: Optional[str] = pulumi.output_property("quote")
    """
    The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding,
    and then uses the first byte of the encoded string to split the data in its raw, binary state.
    The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string.
    If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
    """
    schema_update_options: Optional[List[str]] = pulumi.output_property("schemaUpdateOptions")
    """
    Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or
    supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
    when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators.
    For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified:
    ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
    ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
    """
    skip_leading_rows: Optional[float] = pulumi.output_property("skipLeadingRows")
    """
    The number of rows at the top of a CSV file that BigQuery will skip when loading the data.
    The default value is 0. This property is useful if you have header rows in the file that should be skipped.
    When autodetect is on, the behavior is the following:
    skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected,
    the row is read as data. Otherwise data is read starting from the second row.
    skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row.
    skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected,
    row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
    """
    source_format: Optional[str] = pulumi.output_property("sourceFormat")
    """
    The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP".
    For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET".
    For orc, specify "ORC". The default value is CSV.
    """
    source_uris: List[str] = pulumi.output_property("sourceUris")
    """
    The fully-qualified URIs that point to your data in Google Cloud.
    For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character
    and it must come after the 'bucket' name. Size limits related to load jobs apply
    to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be
    specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table.
    For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
    """
    time_partitioning: Optional['outputs.JobLoadTimePartitioning'] = pulumi.output_property("timePartitioning")
    """
    Time-based partitioning specification for the destination table.  Structure is documented below.
    """
    write_disposition: Optional[str] = pulumi.output_property("writeDisposition")
    """
    Specifies the action that occurs if the destination table already exists. The following values are supported:
    WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
    WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
    WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
    Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
    Creation, truncation and append actions occur as one atomic update upon job completion.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobLoadDestinationEncryptionConfiguration(dict):
    kms_key_name: str = pulumi.output_property("kmsKeyName")
    """
    Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
    The BigQuery Service Account associated with your project requires access to this encryption key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobLoadDestinationTable(dict):
    dataset_id: Optional[str] = pulumi.output_property("datasetId")
    """
    The ID of the dataset containing this model.
    """
    project_id: Optional[str] = pulumi.output_property("projectId")
    """
    The ID of the project containing this model.
    """
    table_id: str = pulumi.output_property("tableId")
    """
    The table. Can be specified `{{table_id}}` if `project_id` and `dataset_id` are also set,
    or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobLoadTimePartitioning(dict):
    expiration_ms: Optional[str] = pulumi.output_property("expirationMs")
    """
    Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
    """
    field: Optional[str] = pulumi.output_property("field")
    """
    If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field.
    The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
    A wrapper is used here because an empty string is an invalid value.
    """
    type: str = pulumi.output_property("type")
    """
    The only type supported is DAY, which will generate one partition per day. Providing an empty string used to cause an error,
    but in OnePlatform the field will be treated as unset.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobQuery(dict):
    allow_large_results: Optional[bool] = pulumi.output_property("allowLargeResults")
    """
    If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
    Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
    However, you must still set destinationTable when result size exceeds the allowed maximum response size.
    """
    create_disposition: Optional[str] = pulumi.output_property("createDisposition")
    """
    Specifies whether the job is allowed to create new tables. The following values are supported:
    CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
    CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
    Creation, truncation and append actions occur as one atomic update upon job completion
    """
    default_dataset: Optional['outputs.JobQueryDefaultDataset'] = pulumi.output_property("defaultDataset")
    """
    Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.  Structure is documented below.
    """
    destination_encryption_configuration: Optional['outputs.JobQueryDestinationEncryptionConfiguration'] = pulumi.output_property("destinationEncryptionConfiguration")
    """
    Custom encryption configuration (e.g., Cloud KMS keys)  Structure is documented below.
    """
    destination_table: Optional['outputs.JobQueryDestinationTable'] = pulumi.output_property("destinationTable")
    """
    The destination table.  Structure is documented below.
    """
    flatten_results: Optional[bool] = pulumi.output_property("flattenResults")
    """
    If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
    allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
    """
    maximum_billing_tier: Optional[float] = pulumi.output_property("maximumBillingTier")
    """
    Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
    If unspecified, this will be set to your project default.
    """
    maximum_bytes_billed: Optional[str] = pulumi.output_property("maximumBytesBilled")
    """
    Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
    If unspecified, this will be set to your project default.
    """
    parameter_mode: Optional[str] = pulumi.output_property("parameterMode")
    """
    Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
    """
    priority: Optional[str] = pulumi.output_property("priority")
    """
    Specifies a priority for the query.
    """
    query: str = pulumi.output_property("query")
    """
    Configures a query job.  Structure is documented below.
    """
    schema_update_options: Optional[List[str]] = pulumi.output_property("schemaUpdateOptions")
    """
    Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or
    supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
    when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators.
    For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified:
    ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
    ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
    """
    script_options: Optional['outputs.JobQueryScriptOptions'] = pulumi.output_property("scriptOptions")
    """
    Options controlling the execution of scripts.  Structure is documented below.
    """
    use_legacy_sql: Optional[bool] = pulumi.output_property("useLegacySql")
    """
    Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true.
    If set to false, the query will use BigQuery's standard SQL.
    """
    use_query_cache: Optional[bool] = pulumi.output_property("useQueryCache")
    """
    Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
    tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
    The default value is true.
    """
    user_defined_function_resources: Optional[List['outputs.JobQueryUserDefinedFunctionResource']] = pulumi.output_property("userDefinedFunctionResources")
    """
    Describes user-defined function resources used in the query.  Structure is documented below.
    """
    write_disposition: Optional[str] = pulumi.output_property("writeDisposition")
    """
    Specifies the action that occurs if the destination table already exists. The following values are supported:
    WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
    WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
    WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
    Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
    Creation, truncation and append actions occur as one atomic update upon job completion.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobQueryDefaultDataset(dict):
    dataset_id: str = pulumi.output_property("datasetId")
    """
    The ID of the dataset containing this model.
    """
    project_id: Optional[str] = pulumi.output_property("projectId")
    """
    The ID of the project containing this model.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobQueryDestinationEncryptionConfiguration(dict):
    kms_key_name: str = pulumi.output_property("kmsKeyName")
    """
    Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
    The BigQuery Service Account associated with your project requires access to this encryption key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobQueryDestinationTable(dict):
    dataset_id: Optional[str] = pulumi.output_property("datasetId")
    """
    The ID of the dataset containing this model.
    """
    project_id: Optional[str] = pulumi.output_property("projectId")
    """
    The ID of the project containing this model.
    """
    table_id: str = pulumi.output_property("tableId")
    """
    The table. Can be specified `{{table_id}}` if `project_id` and `dataset_id` are also set,
    or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobQueryScriptOptions(dict):
    key_result_statement: Optional[str] = pulumi.output_property("keyResultStatement")
    """
    Determines which statement in the script represents the "key result",
    used to populate the schema and query results of the script job.
    """
    statement_byte_budget: Optional[str] = pulumi.output_property("statementByteBudget")
    """
    Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
    """
    statement_timeout_ms: Optional[str] = pulumi.output_property("statementTimeoutMs")
    """
    Timeout period for each statement in a script.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class JobQueryUserDefinedFunctionResource(dict):
    inline_code: Optional[str] = pulumi.output_property("inlineCode")
    """
    An inline resource that contains code for a user-defined function (UDF).
    Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
    """
    resource_uri: Optional[str] = pulumi.output_property("resourceUri")
    """
    A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableEncryptionConfiguration(dict):
    kms_key_name: str = pulumi.output_property("kmsKeyName")
    """
    The self link or full name of a key which should be used to
    encrypt this table.  Note that the default bigquery service account will need to have
    encrypt/decrypt permissions on this key - you may want to see the
    `bigquery.getDefaultServiceAccount` datasource and the
    `kms.CryptoKeyIAMBinding` resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableExternalDataConfiguration(dict):
    autodetect: bool = pulumi.output_property("autodetect")
    """
    - Let BigQuery try to autodetect the schema
    and format of the table.
    """
    compression: Optional[str] = pulumi.output_property("compression")
    """
    The compression type of the data source.
    Valid values are "NONE" or "GZIP".
    """
    csv_options: Optional['outputs.TableExternalDataConfigurationCsvOptions'] = pulumi.output_property("csvOptions")
    """
    Additional properties to set if
    `source_format` is set to "CSV". Structure is documented below.
    """
    google_sheets_options: Optional['outputs.TableExternalDataConfigurationGoogleSheetsOptions'] = pulumi.output_property("googleSheetsOptions")
    """
    Additional options if
    `source_format` is set to "GOOGLE_SHEETS". Structure is
    documented below.
    """
    hive_partitioning_options: Optional['outputs.TableExternalDataConfigurationHivePartitioningOptions'] = pulumi.output_property("hivePartitioningOptions")
    """
    When set, configures hive partitioning
    support. Not all storage formats support hive partitioning -- requesting hive
    partitioning on an unsupported format will lead to an error, as will providing
    an invalid specification.
    """
    ignore_unknown_values: Optional[bool] = pulumi.output_property("ignoreUnknownValues")
    """
    Indicates if BigQuery should
    allow extra values that are not represented in the table schema.
    If true, the extra values are ignored. If false, records with
    extra columns are treated as bad records, and if there are too
    many bad records, an invalid error is returned in the job result.
    The default value is false.
    """
    max_bad_records: Optional[float] = pulumi.output_property("maxBadRecords")
    """
    The maximum number of bad records that
    BigQuery can ignore when reading data.
    """
    source_format: str = pulumi.output_property("sourceFormat")
    """
    The data format. Supported values are:
    "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
    and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
    the `scopes` must include
    "https://www.googleapis.com/auth/drive.readonly".
    """
    source_uris: List[str] = pulumi.output_property("sourceUris")
    """
    A list of the fully-qualified URIs that point to
    your data in Google Cloud.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableExternalDataConfigurationCsvOptions(dict):
    allow_jagged_rows: Optional[bool] = pulumi.output_property("allowJaggedRows")
    """
    Indicates if BigQuery should accept rows
    that are missing trailing optional columns.
    """
    allow_quoted_newlines: Optional[bool] = pulumi.output_property("allowQuotedNewlines")
    """
    Indicates if BigQuery should allow
    quoted data sections that contain newline characters in a CSV file.
    The default value is false.
    """
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The character encoding of the data. The supported
    values are UTF-8 or ISO-8859-1.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    The separator for fields in a CSV file.
    """
    quote: str = pulumi.output_property("quote")
    """
    The value that is used to quote data sections in a
    CSV file. If your data does not contain quoted sections, set the
    property value to an empty string. If your data contains quoted newline
    characters, you must also set the `allow_quoted_newlines` property to true.
    The API-side default is `"`, specified in the provider escaped as `\"`. Due to
    limitations with default values, this value is required to be
    explicitly set.
    """
    skip_leading_rows: Optional[float] = pulumi.output_property("skipLeadingRows")
    """
    The number of rows at the top of the sheet
    that BigQuery will skip when reading the data. At least one of `range` or
    `skip_leading_rows` must be set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableExternalDataConfigurationGoogleSheetsOptions(dict):
    range: Optional[str] = pulumi.output_property("range")
    """
    Information required to partition based on ranges.
    Structure is documented below.
    """
    skip_leading_rows: Optional[float] = pulumi.output_property("skipLeadingRows")
    """
    The number of rows at the top of the sheet
    that BigQuery will skip when reading the data. At least one of `range` or
    `skip_leading_rows` must be set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableExternalDataConfigurationHivePartitioningOptions(dict):
    mode: Optional[str] = pulumi.output_property("mode")
    """
    When set, what mode of hive partitioning to use when
    reading data. The following modes are supported.
    * AUTO: automatically infer partition key name(s) and type(s).
    * STRINGS: automatically infer partition key name(s). All types are
    Not all storage formats support hive partitioning. Requesting hive
    partitioning on an unsupported format will lead to an error.
    Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
    * CUSTOM: when set to `CUSTOM`, you must encode the partition key schema within the `source_uri_prefix` by setting `source_uri_prefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
    """
    source_uri_prefix: Optional[str] = pulumi.output_property("sourceUriPrefix")
    """
    When hive partition detection is requested,
    a common for all source uris must be required. The prefix must end immediately
    before the partition key encoding begins. For example, consider files following
    this data layout. `gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro`
    `gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro` When hive
    partitioning is requested with either AUTO or STRINGS detection, the common prefix
    can be either of `gs://bucket/path_to_table` or `gs://bucket/path_to_table/`.
    Note that when `mode` is set to `CUSTOM`, you must encode the partition key schema within the `source_uri_prefix` by setting `source_uri_prefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableRangePartitioning(dict):
    field: str = pulumi.output_property("field")
    """
    The field used to determine how to create a range-based
    partition.
    """
    range: 'outputs.TableRangePartitioningRange' = pulumi.output_property("range")
    """
    Information required to partition based on ranges.
    Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableRangePartitioningRange(dict):
    end: float = pulumi.output_property("end")
    """
    End of the range partitioning, exclusive.
    """
    interval: float = pulumi.output_property("interval")
    """
    The width of each range within the partition.
    """
    start: float = pulumi.output_property("start")
    """
    Start of the range partitioning, inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableTimePartitioning(dict):
    expiration_ms: Optional[float] = pulumi.output_property("expirationMs")
    """
    Number of milliseconds for which to keep the
    storage for a partition.
    """
    field: Optional[str] = pulumi.output_property("field")
    """
    The field used to determine how to create a range-based
    partition.
    """
    require_partition_filter: Optional[bool] = pulumi.output_property("requirePartitionFilter")
    """
    If set to true, queries over this table
    require a partition filter that can be used for partition elimination to be
    specified.
    """
    type: str = pulumi.output_property("type")
    """
    The only type supported is DAY, which will generate
    one partition per day based on data loading time.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableView(dict):
    query: str = pulumi.output_property("query")
    """
    A query that BigQuery executes when the view is referenced.
    """
    use_legacy_sql: Optional[bool] = pulumi.output_property("useLegacySql")
    """
    Specifies whether to use BigQuery's legacy SQL for this view.
    The default value is true. If set to false, the view will use BigQuery's standard SQL.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


