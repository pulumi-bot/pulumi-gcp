# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ManagedZoneDnssecConfigArgs',
    'ManagedZoneDnssecConfigDefaultKeySpecArgs',
    'ManagedZoneForwardingConfigArgs',
    'ManagedZoneForwardingConfigTargetNameServerArgs',
    'ManagedZonePeeringConfigArgs',
    'ManagedZonePeeringConfigTargetNetworkArgs',
    'ManagedZonePrivateVisibilityConfigArgs',
    'ManagedZonePrivateVisibilityConfigNetworkArgs',
    'ManagedZoneServiceDirectoryConfigArgs',
    'ManagedZoneServiceDirectoryConfigNamespaceArgs',
    'PolicyAlternativeNameServerConfigArgs',
    'PolicyAlternativeNameServerConfigTargetNameServerArgs',
    'PolicyNetworkArgs',
]

@pulumi.input_type
class ManagedZoneDnssecConfigArgs:
    default_key_specs: Optional[pulumi.Input[List[pulumi.Input['ManagedZoneDnssecConfigDefaultKeySpecArgs']]]] = pulumi.input_property("defaultKeySpecs")
    """
    Specifies parameters that will be used for generating initial DnsKeys
    for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
    you must also provide one for the other.
    default_key_specs can only be updated when the state is `off`.  Structure is documented below.
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Identifies what kind of resource this is
    """
    non_existence: Optional[pulumi.Input[str]] = pulumi.input_property("nonExistence")
    """
    Specifies the mechanism used to provide authenticated denial-of-existence responses.
    non_existence can only be updated when the state is `off`.
    """
    state: Optional[pulumi.Input[str]] = pulumi.input_property("state")
    """
    Specifies whether DNSSEC is enabled, and what mode it is in
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, default_key_specs: Optional[pulumi.Input[List[pulumi.Input['ManagedZoneDnssecConfigDefaultKeySpecArgs']]]] = None, kind: Optional[pulumi.Input[str]] = None, non_existence: Optional[pulumi.Input[str]] = None, state: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['ManagedZoneDnssecConfigDefaultKeySpecArgs']]] default_key_specs: Specifies parameters that will be used for generating initial DnsKeys
               for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
               you must also provide one for the other.
               default_key_specs can only be updated when the state is `off`.  Structure is documented below.
        :param pulumi.Input[str] kind: Identifies what kind of resource this is
        :param pulumi.Input[str] non_existence: Specifies the mechanism used to provide authenticated denial-of-existence responses.
               non_existence can only be updated when the state is `off`.
        :param pulumi.Input[str] state: Specifies whether DNSSEC is enabled, and what mode it is in
        """
        __self__.default_key_specs = default_key_specs
        __self__.kind = kind
        __self__.non_existence = non_existence
        __self__.state = state

@pulumi.input_type
class ManagedZoneDnssecConfigDefaultKeySpecArgs:
    algorithm: Optional[pulumi.Input[str]] = pulumi.input_property("algorithm")
    """
    String mnemonic specifying the DNSSEC algorithm of this key
    """
    key_length: Optional[pulumi.Input[float]] = pulumi.input_property("keyLength")
    """
    Length of the keys in bits
    """
    key_type: Optional[pulumi.Input[str]] = pulumi.input_property("keyType")
    """
    Specifies whether this is a key signing key (KSK) or a zone
    signing key (ZSK). Key signing keys have the Secure Entry
    Point flag set and, when active, will only be used to sign
    resource record sets of type DNSKEY. Zone signing keys do
    not have the Secure Entry Point flag set and will be used
    to sign all other types of resource record sets.
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Identifies what kind of resource this is
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, algorithm: Optional[pulumi.Input[str]] = None, key_length: Optional[pulumi.Input[float]] = None, key_type: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] algorithm: String mnemonic specifying the DNSSEC algorithm of this key
        :param pulumi.Input[float] key_length: Length of the keys in bits
        :param pulumi.Input[str] key_type: Specifies whether this is a key signing key (KSK) or a zone
               signing key (ZSK). Key signing keys have the Secure Entry
               Point flag set and, when active, will only be used to sign
               resource record sets of type DNSKEY. Zone signing keys do
               not have the Secure Entry Point flag set and will be used
               to sign all other types of resource record sets.
        :param pulumi.Input[str] kind: Identifies what kind of resource this is
        """
        __self__.algorithm = algorithm
        __self__.key_length = key_length
        __self__.key_type = key_type
        __self__.kind = kind

@pulumi.input_type
class ManagedZoneForwardingConfigArgs:
    target_name_servers: pulumi.Input[List[pulumi.Input['ManagedZoneForwardingConfigTargetNameServerArgs']]] = pulumi.input_property("targetNameServers")
    """
    List of target name servers to forward to. Cloud DNS will
    select the best available name server if more than
    one target is given.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_name_servers: pulumi.Input[List[pulumi.Input['ManagedZoneForwardingConfigTargetNameServerArgs']]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['ManagedZoneForwardingConfigTargetNameServerArgs']]] target_name_servers: List of target name servers to forward to. Cloud DNS will
               select the best available name server if more than
               one target is given.  Structure is documented below.
        """
        __self__.target_name_servers = target_name_servers

@pulumi.input_type
class ManagedZoneForwardingConfigTargetNameServerArgs:
    ipv4_address: pulumi.Input[str] = pulumi.input_property("ipv4Address")
    """
    IPv4 address of a target name server.
    """
    forwarding_path: Optional[pulumi.Input[str]] = pulumi.input_property("forwardingPath")
    """
    Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
    decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
    to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ipv4_address: pulumi.Input[str], forwarding_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] ipv4_address: IPv4 address of a target name server.
        :param pulumi.Input[str] forwarding_path: Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
               decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
               to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
        """
        __self__.ipv4_address = ipv4_address
        __self__.forwarding_path = forwarding_path

@pulumi.input_type
class ManagedZonePeeringConfigArgs:
    target_network: pulumi.Input['ManagedZonePeeringConfigTargetNetworkArgs'] = pulumi.input_property("targetNetwork")
    """
    The network with which to peer.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_network: pulumi.Input['ManagedZonePeeringConfigTargetNetworkArgs']) -> None:
        """
        :param pulumi.Input['ManagedZonePeeringConfigTargetNetworkArgs'] target_network: The network with which to peer.  Structure is documented below.
        """
        __self__.target_network = target_network

@pulumi.input_type
class ManagedZonePeeringConfigTargetNetworkArgs:
    network_url: pulumi.Input[str] = pulumi.input_property("networkUrl")
    """
    The id or fully qualified URL of the VPC network to forward queries to.
    This should be formatted like `projects/{project}/global/networks/{network}` or
    `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, network_url: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] network_url: The id or fully qualified URL of the VPC network to forward queries to.
               This should be formatted like `projects/{project}/global/networks/{network}` or
               `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
        """
        __self__.network_url = network_url

@pulumi.input_type
class ManagedZonePrivateVisibilityConfigArgs:
    networks: pulumi.Input[List[pulumi.Input['ManagedZonePrivateVisibilityConfigNetworkArgs']]] = pulumi.input_property("networks")
    """
    The list of VPC networks that can see this zone. Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, networks: pulumi.Input[List[pulumi.Input['ManagedZonePrivateVisibilityConfigNetworkArgs']]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['ManagedZonePrivateVisibilityConfigNetworkArgs']]] networks: The list of VPC networks that can see this zone. Structure is documented below.
        """
        __self__.networks = networks

@pulumi.input_type
class ManagedZonePrivateVisibilityConfigNetworkArgs:
    network_url: pulumi.Input[str] = pulumi.input_property("networkUrl")
    """
    The id or fully qualified URL of the VPC network to forward queries to.
    This should be formatted like `projects/{project}/global/networks/{network}` or
    `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, network_url: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] network_url: The id or fully qualified URL of the VPC network to forward queries to.
               This should be formatted like `projects/{project}/global/networks/{network}` or
               `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
        """
        __self__.network_url = network_url

@pulumi.input_type
class ManagedZoneServiceDirectoryConfigArgs:
    namespace: pulumi.Input['ManagedZoneServiceDirectoryConfigNamespaceArgs'] = pulumi.input_property("namespace")
    """
    The namespace associated with the zone.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, namespace: pulumi.Input['ManagedZoneServiceDirectoryConfigNamespaceArgs']) -> None:
        """
        :param pulumi.Input['ManagedZoneServiceDirectoryConfigNamespaceArgs'] namespace: The namespace associated with the zone.  Structure is documented below.
        """
        __self__.namespace = namespace

@pulumi.input_type
class ManagedZoneServiceDirectoryConfigNamespaceArgs:
    namespace_url: pulumi.Input[str] = pulumi.input_property("namespaceUrl")
    """
    The fully qualified or partial URL of the service directory namespace that should be
    associated with the zone. This should be formatted like
    `https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace_id}`
    or simply `projects/{project}/locations/{location}/namespaces/{namespace_id}`
    Ignored for `public` visibility zones.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, namespace_url: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] namespace_url: The fully qualified or partial URL of the service directory namespace that should be
               associated with the zone. This should be formatted like
               `https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace_id}`
               or simply `projects/{project}/locations/{location}/namespaces/{namespace_id}`
               Ignored for `public` visibility zones.
        """
        __self__.namespace_url = namespace_url

@pulumi.input_type
class PolicyAlternativeNameServerConfigArgs:
    target_name_servers: pulumi.Input[List[pulumi.Input['PolicyAlternativeNameServerConfigTargetNameServerArgs']]] = pulumi.input_property("targetNameServers")
    """
    Sets an alternative name server for the associated networks. When specified,
    all DNS queries are forwarded to a name server that you choose. Names such as .internal
    are not available when an alternative name server is specified.  Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_name_servers: pulumi.Input[List[pulumi.Input['PolicyAlternativeNameServerConfigTargetNameServerArgs']]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['PolicyAlternativeNameServerConfigTargetNameServerArgs']]] target_name_servers: Sets an alternative name server for the associated networks. When specified,
               all DNS queries are forwarded to a name server that you choose. Names such as .internal
               are not available when an alternative name server is specified.  Structure is documented below.
        """
        __self__.target_name_servers = target_name_servers

@pulumi.input_type
class PolicyAlternativeNameServerConfigTargetNameServerArgs:
    ipv4_address: pulumi.Input[str] = pulumi.input_property("ipv4Address")
    """
    IPv4 address to forward to.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ipv4_address: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] ipv4_address: IPv4 address to forward to.
        """
        __self__.ipv4_address = ipv4_address

@pulumi.input_type
class PolicyNetworkArgs:
    network_url: pulumi.Input[str] = pulumi.input_property("networkUrl")
    """
    The id or fully qualified URL of the VPC network to forward queries to.
    This should be formatted like `projects/{project}/global/networks/{network}` or
    `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, network_url: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] network_url: The id or fully qualified URL of the VPC network to forward queries to.
               This should be formatted like `projects/{project}/global/networks/{network}` or
               `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
        """
        __self__.network_url = network_url

