# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *


class ManagedZone(pulumi.CustomResource):
    description: pulumi.Output[str] = pulumi.output_property("description")
    """
    A textual description field. Defaults to 'Managed by Pulumi'.
    """
    dns_name: pulumi.Output[str] = pulumi.output_property("dnsName")
    """
    The DNS name of this managed zone, for instance "example.com.".
    """
    dnssec_config: pulumi.Output[Optional['outputs.ManagedZoneDnssecConfig']] = pulumi.output_property("dnssecConfig")
    """
    DNSSEC configuration  Structure is documented below.
    """
    forwarding_config: pulumi.Output[Optional['outputs.ManagedZoneForwardingConfig']] = pulumi.output_property("forwardingConfig")
    """
    The presence for this field indicates that outbound forwarding is enabled
    for this zone. The value of this field contains the set of destinations
    to forward to.  Structure is documented below.
    """
    labels: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("labels")
    """
    A set of key/value label pairs to assign to this ManagedZone.
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    User assigned name for this resource.
    Must be unique within the project.
    """
    name_servers: pulumi.Output[List[str]] = pulumi.output_property("nameServers")
    """
    Delegate your managed_zone to these virtual name servers; defined by the server
    """
    peering_config: pulumi.Output[Optional['outputs.ManagedZonePeeringConfig']] = pulumi.output_property("peeringConfig")
    """
    The presence of this field indicates that DNS Peering is enabled for this
    zone. The value of this field contains the network to peer with.  Structure is documented below.
    """
    private_visibility_config: pulumi.Output[Optional['outputs.ManagedZonePrivateVisibilityConfig']] = pulumi.output_property("privateVisibilityConfig")
    """
    For privately visible zones, the set of Virtual Private Cloud
    resources that the zone is visible from.  Structure is documented below.
    """
    project: pulumi.Output[str] = pulumi.output_property("project")
    """
    The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.
    """
    reverse_lookup: pulumi.Output[Optional[bool]] = pulumi.output_property("reverseLookup")
    """
    Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
    lookup queries using automatically configured records for VPC resources. This only applies
    to networks listed under `private_visibility_config`.
    """
    service_directory_config: pulumi.Output[Optional['outputs.ManagedZoneServiceDirectoryConfig']] = pulumi.output_property("serviceDirectoryConfig")
    """
    The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
    """
    visibility: pulumi.Output[Optional[str]] = pulumi.output_property("visibility")
    """
    The zone's visibility: public zones are exposed to the Internet,
    while private zones are visible only to Virtual Private Cloud resources.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, description=None, dns_name=None, dnssec_config=None, forwarding_config=None, labels=None, name=None, peering_config=None, private_visibility_config=None, project=None, reverse_lookup=None, service_directory_config=None, visibility=None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        A zone is a subtree of the DNS namespace under one administrative
        responsibility. A ManagedZone is a resource that represents a DNS zone
        hosted by the Cloud DNS service.

        To get more information about ManagedZone, see:

        * [API documentation](https://cloud.google.com/dns/api/v1/managedZones)
        * How-to Guides
            * [Managing Zones](https://cloud.google.com/dns/zones/)

        ## Example Usage
        ### Dns Managed Zone Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example_zone = gcp.dns.ManagedZone("example-zone",
            description="Example DNS zone",
            dns_name="my-domain.com.",
            labels={
                "foo": "bar",
            })
        ```
        ### Dns Managed Zone Private

        ```python
        import pulumi
        import pulumi_gcp as gcp

        network_1 = gcp.compute.Network("network-1", auto_create_subnetworks=False)
        network_2 = gcp.compute.Network("network-2", auto_create_subnetworks=False)
        private_zone = gcp.dns.ManagedZone("private-zone",
            dns_name="private.example.com.",
            description="Example private DNS zone",
            labels={
                "foo": "bar",
            },
            visibility="private",
            private_visibility_config={
                "networks": [
                    {
                        "networkUrl": network_1.id,
                    },
                    {
                        "networkUrl": network_2.id,
                    },
                ],
            })
        ```
        ### Dns Managed Zone Private Forwarding

        ```python
        import pulumi
        import pulumi_gcp as gcp

        network_1 = gcp.compute.Network("network-1", auto_create_subnetworks=False)
        network_2 = gcp.compute.Network("network-2", auto_create_subnetworks=False)
        private_zone = gcp.dns.ManagedZone("private-zone",
            dns_name="private.example.com.",
            description="Example private DNS zone",
            labels={
                "foo": "bar",
            },
            visibility="private",
            private_visibility_config={
                "networks": [
                    {
                        "networkUrl": network_1.id,
                    },
                    {
                        "networkUrl": network_2.id,
                    },
                ],
            },
            forwarding_config={
                "targetNameServers": [
                    {
                        "ipv4Address": "172.16.1.10",
                    },
                    {
                        "ipv4Address": "172.16.1.20",
                    },
                ],
            })
        ```
        ### Dns Managed Zone Private Peering

        ```python
        import pulumi
        import pulumi_gcp as gcp

        network_source = gcp.compute.Network("network-source", auto_create_subnetworks=False)
        network_target = gcp.compute.Network("network-target", auto_create_subnetworks=False)
        peering_zone = gcp.dns.ManagedZone("peering-zone",
            dns_name="peering.example.com.",
            description="Example private DNS peering zone",
            visibility="private",
            private_visibility_config={
                "networks": [{
                    "networkUrl": network_source.id,
                }],
            },
            peering_config={
                "targetNetwork": {
                    "networkUrl": network_target.id,
                },
            })
        ```
        ### Dns Managed Zone Service Directory

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example = gcp.servicedirectory.Namespace("example",
            namespace_id="example",
            location="us-central1",
            opts=ResourceOptions(provider=google_beta))
        sd_zone = gcp.dns.ManagedZone("sd-zone",
            dns_name="services.example.com.",
            description="Example private DNS Service Directory zone",
            visibility="private",
            service_directory_config={
                "namespace": {
                    "namespaceUrl": example.id,
                },
            },
            opts=ResourceOptions(provider=google_beta))
        network = gcp.compute.Network("network", auto_create_subnetworks=False,
        opts=ResourceOptions(provider=google_beta))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A textual description field. Defaults to 'Managed by Pulumi'.
        :param pulumi.Input[str] dns_name: The DNS name of this managed zone, for instance "example.com.".
        :param pulumi.Input['ManagedZoneDnssecConfigArgs'] dnssec_config: DNSSEC configuration  Structure is documented below.
        :param pulumi.Input['ManagedZoneForwardingConfigArgs'] forwarding_config: The presence for this field indicates that outbound forwarding is enabled
               for this zone. The value of this field contains the set of destinations
               to forward to.  Structure is documented below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to this ManagedZone.
        :param pulumi.Input[str] name: User assigned name for this resource.
               Must be unique within the project.
        :param pulumi.Input['ManagedZonePeeringConfigArgs'] peering_config: The presence of this field indicates that DNS Peering is enabled for this
               zone. The value of this field contains the network to peer with.  Structure is documented below.
        :param pulumi.Input['ManagedZonePrivateVisibilityConfigArgs'] private_visibility_config: For privately visible zones, the set of Virtual Private Cloud
               resources that the zone is visible from.  Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[bool] reverse_lookup: Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
               lookup queries using automatically configured records for VPC resources. This only applies
               to networks listed under `private_visibility_config`.
        :param pulumi.Input['ManagedZoneServiceDirectoryConfigArgs'] service_directory_config: The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
        :param pulumi.Input[str] visibility: The zone's visibility: public zones are exposed to the Internet,
               while private zones are visible only to Virtual Private Cloud resources.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if description is None:
                description = 'Managed by Pulumi'
            __props__['description'] = description
            if dns_name is None:
                raise TypeError("Missing required property 'dns_name'")
            __props__['dns_name'] = dns_name
            __props__['dnssec_config'] = dnssec_config
            __props__['forwarding_config'] = forwarding_config
            __props__['labels'] = labels
            __props__['name'] = name
            __props__['peering_config'] = peering_config
            __props__['private_visibility_config'] = private_visibility_config
            __props__['project'] = project
            __props__['reverse_lookup'] = reverse_lookup
            __props__['service_directory_config'] = service_directory_config
            __props__['visibility'] = visibility
            __props__['name_servers'] = None
        super(ManagedZone, __self__).__init__(
            'gcp:dns/managedZone:ManagedZone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, description=None, dns_name=None, dnssec_config=None, forwarding_config=None, labels=None, name=None, name_servers=None, peering_config=None, private_visibility_config=None, project=None, reverse_lookup=None, service_directory_config=None, visibility=None):
        """
        Get an existing ManagedZone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A textual description field. Defaults to 'Managed by Pulumi'.
        :param pulumi.Input[str] dns_name: The DNS name of this managed zone, for instance "example.com.".
        :param pulumi.Input['ManagedZoneDnssecConfigArgs'] dnssec_config: DNSSEC configuration  Structure is documented below.
        :param pulumi.Input['ManagedZoneForwardingConfigArgs'] forwarding_config: The presence for this field indicates that outbound forwarding is enabled
               for this zone. The value of this field contains the set of destinations
               to forward to.  Structure is documented below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to this ManagedZone.
        :param pulumi.Input[str] name: User assigned name for this resource.
               Must be unique within the project.
        :param pulumi.Input[List[pulumi.Input[str]]] name_servers: Delegate your managed_zone to these virtual name servers; defined by the server
        :param pulumi.Input['ManagedZonePeeringConfigArgs'] peering_config: The presence of this field indicates that DNS Peering is enabled for this
               zone. The value of this field contains the network to peer with.  Structure is documented below.
        :param pulumi.Input['ManagedZonePrivateVisibilityConfigArgs'] private_visibility_config: For privately visible zones, the set of Virtual Private Cloud
               resources that the zone is visible from.  Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[bool] reverse_lookup: Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
               lookup queries using automatically configured records for VPC resources. This only applies
               to networks listed under `private_visibility_config`.
        :param pulumi.Input['ManagedZoneServiceDirectoryConfigArgs'] service_directory_config: The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
        :param pulumi.Input[str] visibility: The zone's visibility: public zones are exposed to the Internet,
               while private zones are visible only to Virtual Private Cloud resources.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["dns_name"] = dns_name
        __props__["dnssec_config"] = dnssec_config
        __props__["forwarding_config"] = forwarding_config
        __props__["labels"] = labels
        __props__["name"] = name
        __props__["name_servers"] = name_servers
        __props__["peering_config"] = peering_config
        __props__["private_visibility_config"] = private_visibility_config
        __props__["project"] = project
        __props__["reverse_lookup"] = reverse_lookup
        __props__["service_directory_config"] = service_directory_config
        __props__["visibility"] = visibility
        return ManagedZone(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

