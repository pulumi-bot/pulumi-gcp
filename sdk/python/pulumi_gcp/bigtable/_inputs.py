# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class GCPolicyMaxAgeArgs:
    days: pulumi.Input[float] = pulumi.input_property("days")
    """
    Number of days before applying GC policy.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, days: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[float] days: Number of days before applying GC policy.
        """
        __self__.days = days

@pulumi.input_type
class GCPolicyMaxVersionArgs:
    number: pulumi.Input[float] = pulumi.input_property("number")
    """
    Number of version before applying the GC policy.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, number: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[float] number: Number of version before applying the GC policy.
        """
        __self__.number = number

@pulumi.input_type
class InstanceClusterArgs:
    cluster_id: pulumi.Input[str] = pulumi.input_property("clusterId")
    """
    The ID of the Cloud Bigtable cluster.
    """
    zone: pulumi.Input[str] = pulumi.input_property("zone")
    """
    The zone to create the Cloud Bigtable cluster in. Each
    cluster must have a different zone in the same region. Zones that support
    Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
    """
    num_nodes: Optional[pulumi.Input[float]] = pulumi.input_property("numNodes")
    """
    The number of nodes in your Cloud Bigtable cluster.
    Required, with a minimum of `1` for a `PRODUCTION` instance. Must be left unset
    for a `DEVELOPMENT` instance.
    """
    storage_type: Optional[pulumi.Input[str]] = pulumi.input_property("storageType")
    """
    The storage type to use. One of `"SSD"` or
    `"HDD"`. Defaults to `"SSD"`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cluster_id: pulumi.Input[str], zone: pulumi.Input[str], num_nodes: Optional[pulumi.Input[float]] = None, storage_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] cluster_id: The ID of the Cloud Bigtable cluster.
        :param pulumi.Input[str] zone: The zone to create the Cloud Bigtable cluster in. Each
               cluster must have a different zone in the same region. Zones that support
               Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
        :param pulumi.Input[float] num_nodes: The number of nodes in your Cloud Bigtable cluster.
               Required, with a minimum of `1` for a `PRODUCTION` instance. Must be left unset
               for a `DEVELOPMENT` instance.
        :param pulumi.Input[str] storage_type: The storage type to use. One of `"SSD"` or
               `"HDD"`. Defaults to `"SSD"`.
        """
        __self__.cluster_id = cluster_id
        __self__.zone = zone
        __self__.num_nodes = num_nodes
        __self__.storage_type = storage_type

@pulumi.input_type
class InstanceIamBindingConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class InstanceIamMemberConditionArgs:
    expression: pulumi.Input[str] = pulumi.input_property("expression")
    title: pulumi.Input[str] = pulumi.input_property("title")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, expression: pulumi.Input[str], title: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        __self__.expression = expression
        __self__.title = title
        __self__.description = description

@pulumi.input_type
class TableColumnFamilyArgs:
    family: pulumi.Input[str] = pulumi.input_property("family")
    """
    The name of the column family.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, family: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] family: The name of the column family.
        """
        __self__.family = family

