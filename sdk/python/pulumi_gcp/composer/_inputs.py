# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class EnvironmentConfigArgs:
    airflow_uri: Optional[pulumi.Input[str]] = pulumi.input_property("airflowUri")
    dag_gcs_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("dagGcsPrefix")
    gke_cluster: Optional[pulumi.Input[str]] = pulumi.input_property("gkeCluster")
    node_config: Optional[pulumi.Input['EnvironmentConfigNodeConfigArgs']] = pulumi.input_property("nodeConfig")
    """
    The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
    """
    node_count: Optional[pulumi.Input[float]] = pulumi.input_property("nodeCount")
    """
    The number of nodes in the Kubernetes Engine cluster that
    will be used to run this environment.
    """
    private_environment_config: Optional[pulumi.Input['EnvironmentConfigPrivateEnvironmentConfigArgs']] = pulumi.input_property("privateEnvironmentConfig")
    """
    The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
    """
    software_config: Optional[pulumi.Input['EnvironmentConfigSoftwareConfigArgs']] = pulumi.input_property("softwareConfig")
    """
    The configuration settings for software inside the environment.  Structure is documented below.
    """
    web_server_network_access_control: Optional[pulumi.Input['EnvironmentConfigWebServerNetworkAccessControlArgs']] = pulumi.input_property("webServerNetworkAccessControl")
    """
    The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, airflow_uri: Optional[pulumi.Input[str]] = None, dag_gcs_prefix: Optional[pulumi.Input[str]] = None, gke_cluster: Optional[pulumi.Input[str]] = None, node_config: Optional[pulumi.Input['EnvironmentConfigNodeConfigArgs']] = None, node_count: Optional[pulumi.Input[float]] = None, private_environment_config: Optional[pulumi.Input['EnvironmentConfigPrivateEnvironmentConfigArgs']] = None, software_config: Optional[pulumi.Input['EnvironmentConfigSoftwareConfigArgs']] = None, web_server_network_access_control: Optional[pulumi.Input['EnvironmentConfigWebServerNetworkAccessControlArgs']] = None) -> None:
        """
        :param pulumi.Input['EnvironmentConfigNodeConfigArgs'] node_config: The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
        :param pulumi.Input[float] node_count: The number of nodes in the Kubernetes Engine cluster that
               will be used to run this environment.
        :param pulumi.Input['EnvironmentConfigPrivateEnvironmentConfigArgs'] private_environment_config: The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
        :param pulumi.Input['EnvironmentConfigSoftwareConfigArgs'] software_config: The configuration settings for software inside the environment.  Structure is documented below.
        :param pulumi.Input['EnvironmentConfigWebServerNetworkAccessControlArgs'] web_server_network_access_control: The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
        """
        __self__.airflow_uri = airflow_uri
        __self__.dag_gcs_prefix = dag_gcs_prefix
        __self__.gke_cluster = gke_cluster
        __self__.node_config = node_config
        __self__.node_count = node_count
        __self__.private_environment_config = private_environment_config
        __self__.software_config = software_config
        __self__.web_server_network_access_control = web_server_network_access_control

@pulumi.input_type
class EnvironmentConfigNodeConfigArgs:
    zone: pulumi.Input[str] = pulumi.input_property("zone")
    """
    The Compute Engine zone in which to deploy the VMs running the
    Apache Airflow software, specified as the zone name or
    relative resource name (e.g. "projects/{project}/zones/{zone}"). Must belong to the enclosing environment's project
    and region.
    """
    disk_size_gb: Optional[pulumi.Input[float]] = pulumi.input_property("diskSizeGb")
    """
    The disk size in GB used for node VMs. Minimum size is 20GB.
    If unspecified, defaults to 100GB. Cannot be updated.
    """
    ip_allocation_policy: Optional[pulumi.Input['EnvironmentConfigNodeConfigIpAllocationPolicyArgs']] = pulumi.input_property("ipAllocationPolicy")
    """
    Configuration for controlling how IPs are allocated in the GKE cluster.
    Structure is documented below.
    Cannot be updated.
    """
    machine_type: Optional[pulumi.Input[str]] = pulumi.input_property("machineType")
    """
    The Compute Engine machine type used for cluster instances,
    specified as a name or relative resource name. For example:
    "projects/{project}/zones/{zone}/machineTypes/{machineType}". Must belong to the enclosing environment's project and
    region/zone.
    """
    network: Optional[pulumi.Input[str]] = pulumi.input_property("network")
    """
    The Compute Engine network to be used for machine
    communications, specified as a self-link, relative resource name
    (e.g. "projects/{project}/global/networks/{network}"), by name.
    """
    oauth_scopes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("oauthScopes")
    """
    The set of Google API scopes to be made available on all node
    VMs. Cannot be updated. If empty, defaults to
    `["https://www.googleapis.com/auth/cloud-platform"]`
    """
    service_account: Optional[pulumi.Input[str]] = pulumi.input_property("serviceAccount")
    """
    The Google Cloud Platform Service Account to be used by the
    node VMs. If a service account is not specified, the "default"
    Compute Engine service account is used. Cannot be updated. If given,
    note that the service account must have `roles/composer.worker`
    for any GCP resources created under the Cloud Composer Environment.
    """
    subnetwork: Optional[pulumi.Input[str]] = pulumi.input_property("subnetwork")
    """
    The Compute Engine subnetwork to be used for machine
    communications, , specified as a self-link, relative resource name (e.g.
    "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
    network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
    """
    tags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("tags")
    """
    The list of instance tags applied to all node VMs. Tags are
    used to identify valid sources or targets for network
    firewalls. Each tag within the list must comply with RFC1035.
    Cannot be updated.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, zone: pulumi.Input[str], disk_size_gb: Optional[pulumi.Input[float]] = None, ip_allocation_policy: Optional[pulumi.Input['EnvironmentConfigNodeConfigIpAllocationPolicyArgs']] = None, machine_type: Optional[pulumi.Input[str]] = None, network: Optional[pulumi.Input[str]] = None, oauth_scopes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, service_account: Optional[pulumi.Input[str]] = None, subnetwork: Optional[pulumi.Input[str]] = None, tags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] zone: The Compute Engine zone in which to deploy the VMs running the
               Apache Airflow software, specified as the zone name or
               relative resource name (e.g. "projects/{project}/zones/{zone}"). Must belong to the enclosing environment's project
               and region.
        :param pulumi.Input[float] disk_size_gb: The disk size in GB used for node VMs. Minimum size is 20GB.
               If unspecified, defaults to 100GB. Cannot be updated.
        :param pulumi.Input['EnvironmentConfigNodeConfigIpAllocationPolicyArgs'] ip_allocation_policy: Configuration for controlling how IPs are allocated in the GKE cluster.
               Structure is documented below.
               Cannot be updated.
        :param pulumi.Input[str] machine_type: The Compute Engine machine type used for cluster instances,
               specified as a name or relative resource name. For example:
               "projects/{project}/zones/{zone}/machineTypes/{machineType}". Must belong to the enclosing environment's project and
               region/zone.
        :param pulumi.Input[str] network: The Compute Engine network to be used for machine
               communications, specified as a self-link, relative resource name
               (e.g. "projects/{project}/global/networks/{network}"), by name.
        :param pulumi.Input[List[pulumi.Input[str]]] oauth_scopes: The set of Google API scopes to be made available on all node
               VMs. Cannot be updated. If empty, defaults to
               `["https://www.googleapis.com/auth/cloud-platform"]`
        :param pulumi.Input[str] service_account: The Google Cloud Platform Service Account to be used by the
               node VMs. If a service account is not specified, the "default"
               Compute Engine service account is used. Cannot be updated. If given,
               note that the service account must have `roles/composer.worker`
               for any GCP resources created under the Cloud Composer Environment.
        :param pulumi.Input[str] subnetwork: The Compute Engine subnetwork to be used for machine
               communications, , specified as a self-link, relative resource name (e.g.
               "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
               network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
        :param pulumi.Input[List[pulumi.Input[str]]] tags: The list of instance tags applied to all node VMs. Tags are
               used to identify valid sources or targets for network
               firewalls. Each tag within the list must comply with RFC1035.
               Cannot be updated.
        """
        __self__.zone = zone
        __self__.disk_size_gb = disk_size_gb
        __self__.ip_allocation_policy = ip_allocation_policy
        __self__.machine_type = machine_type
        __self__.network = network
        __self__.oauth_scopes = oauth_scopes
        __self__.service_account = service_account
        __self__.subnetwork = subnetwork
        __self__.tags = tags

@pulumi.input_type
class EnvironmentConfigNodeConfigIpAllocationPolicyArgs:
    use_ip_aliases: pulumi.Input[bool] = pulumi.input_property("useIpAliases")
    """
    Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
    Defaults to true if the `ip_allocation_block` is present in config.
    """
    cluster_ipv4_cidr_block: Optional[pulumi.Input[str]] = pulumi.input_property("clusterIpv4CidrBlock")
    """
    The IP address range used to allocate IP addresses to pods in the cluster.
    Set to blank to have GKE choose a range with the default size.
    Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
    Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
    (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
    Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
    """
    cluster_secondary_range_name: Optional[pulumi.Input[str]] = pulumi.input_property("clusterSecondaryRangeName")
    """
    The name of the cluster's secondary range used to allocate IP addresses to pods.
    Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
    This field is applicable only when `use_ip_aliases` is true.
    """
    services_ipv4_cidr_block: Optional[pulumi.Input[str]] = pulumi.input_property("servicesIpv4CidrBlock")
    """
    The IP address range used to allocate IP addresses in this cluster.
    Set to blank to have GKE choose a range with the default size.
    Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
    Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
    (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
    Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
    """
    services_secondary_range_name: Optional[pulumi.Input[str]] = pulumi.input_property("servicesSecondaryRangeName")
    """
    The name of the services' secondary range used to allocate IP addresses to the cluster.
    Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
    This field is applicable only when `use_ip_aliases` is true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, use_ip_aliases: pulumi.Input[bool], cluster_ipv4_cidr_block: Optional[pulumi.Input[str]] = None, cluster_secondary_range_name: Optional[pulumi.Input[str]] = None, services_ipv4_cidr_block: Optional[pulumi.Input[str]] = None, services_secondary_range_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] use_ip_aliases: Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
               Defaults to true if the `ip_allocation_block` is present in config.
        :param pulumi.Input[str] cluster_ipv4_cidr_block: The IP address range used to allocate IP addresses to pods in the cluster.
               Set to blank to have GKE choose a range with the default size.
               Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
               Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
               (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
               Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
        :param pulumi.Input[str] cluster_secondary_range_name: The name of the cluster's secondary range used to allocate IP addresses to pods.
               Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
               This field is applicable only when `use_ip_aliases` is true.
        :param pulumi.Input[str] services_ipv4_cidr_block: The IP address range used to allocate IP addresses in this cluster.
               Set to blank to have GKE choose a range with the default size.
               Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
               Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
               (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
               Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
        :param pulumi.Input[str] services_secondary_range_name: The name of the services' secondary range used to allocate IP addresses to the cluster.
               Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
               This field is applicable only when `use_ip_aliases` is true.
        """
        __self__.use_ip_aliases = use_ip_aliases
        __self__.cluster_ipv4_cidr_block = cluster_ipv4_cidr_block
        __self__.cluster_secondary_range_name = cluster_secondary_range_name
        __self__.services_ipv4_cidr_block = services_ipv4_cidr_block
        __self__.services_secondary_range_name = services_secondary_range_name

@pulumi.input_type
class EnvironmentConfigPrivateEnvironmentConfigArgs:
    cloud_sql_ipv4_cidr_block: Optional[pulumi.Input[str]] = pulumi.input_property("cloudSqlIpv4CidrBlock")
    """
    The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`
    """
    enable_private_endpoint: Optional[pulumi.Input[bool]] = pulumi.input_property("enablePrivateEndpoint")
    """
    -
    If true, access to the public endpoint of the GKE cluster is denied.
    """
    master_ipv4_cidr_block: Optional[pulumi.Input[str]] = pulumi.input_property("masterIpv4CidrBlock")
    """
    The IP range in CIDR notation to use for the hosted master network. This range is used
    for assigning internal IP addresses to the cluster master or set of masters and to the
    internal load balancer virtual IP. This range must not overlap with any other ranges
    in use within the cluster's network.
    If left blank, the default value of '172.16.0.0/28' is used.
    """
    web_server_ipv4_cidr_block: Optional[pulumi.Input[str]] = pulumi.input_property("webServerIpv4CidrBlock")
    """
    The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cloud_sql_ipv4_cidr_block: Optional[pulumi.Input[str]] = None, enable_private_endpoint: Optional[pulumi.Input[bool]] = None, master_ipv4_cidr_block: Optional[pulumi.Input[str]] = None, web_server_ipv4_cidr_block: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] cloud_sql_ipv4_cidr_block: The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`
        :param pulumi.Input[bool] enable_private_endpoint: -
               If true, access to the public endpoint of the GKE cluster is denied.
        :param pulumi.Input[str] master_ipv4_cidr_block: The IP range in CIDR notation to use for the hosted master network. This range is used
               for assigning internal IP addresses to the cluster master or set of masters and to the
               internal load balancer virtual IP. This range must not overlap with any other ranges
               in use within the cluster's network.
               If left blank, the default value of '172.16.0.0/28' is used.
        :param pulumi.Input[str] web_server_ipv4_cidr_block: The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`.
        """
        __self__.cloud_sql_ipv4_cidr_block = cloud_sql_ipv4_cidr_block
        __self__.enable_private_endpoint = enable_private_endpoint
        __self__.master_ipv4_cidr_block = master_ipv4_cidr_block
        __self__.web_server_ipv4_cidr_block = web_server_ipv4_cidr_block

@pulumi.input_type
class EnvironmentConfigSoftwareConfigArgs:
    airflow_config_overrides: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("airflowConfigOverrides")
    """
    -
    (Optional) Apache Airflow configuration properties to override. Property keys contain the section and property names,
    separated by a hyphen, for example "core-dags_are_paused_at_creation".
    """
    env_variables: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("envVariables")
    """
    Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
    Environment variable names must match the regular expression `[a-zA-Z_][a-zA-Z0-9_]*`.
    They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
    `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names:
    ```python
    import pulumi
    ```
    """
    image_version: Optional[pulumi.Input[str]] = pulumi.input_property("imageVersion")
    """
    -
    The version of the software running in the environment. This encapsulates both the version of Cloud Composer
    functionality and the version of Apache Airflow. It must match the regular expression
    `composer-[0-9]+\.[0-9]+(\.[0-9]+)?-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
    The Cloud Composer portion of the version is a semantic version.
    The portion of the image version following 'airflow-' is an official Apache Airflow repository release name.
    See [documentation](https://cloud.google.com/composer/docs/reference/rest/v1beta1/projects.locations.environments#softwareconfig)
    for allowed release names.
    """
    pypi_packages: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("pypiPackages")
    """
    Custom Python Package Index (PyPI) packages to be installed
    in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
    version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
    pinning it to a version specifier, use the empty string as the value.
    """
    python_version: Optional[pulumi.Input[str]] = pulumi.input_property("pythonVersion")
    """
    -
    The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
    Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, airflow_config_overrides: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, env_variables: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, image_version: Optional[pulumi.Input[str]] = None, pypi_packages: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, python_version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] airflow_config_overrides: -
               (Optional) Apache Airflow configuration properties to override. Property keys contain the section and property names,
               separated by a hyphen, for example "core-dags_are_paused_at_creation".
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] env_variables: Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
               Environment variable names must match the regular expression `[a-zA-Z_][a-zA-Z0-9_]*`.
               They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
               `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names:
               ```python
               import pulumi
               ```
        :param pulumi.Input[str] image_version: -
               The version of the software running in the environment. This encapsulates both the version of Cloud Composer
               functionality and the version of Apache Airflow. It must match the regular expression
               `composer-[0-9]+\.[0-9]+(\.[0-9]+)?-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
               The Cloud Composer portion of the version is a semantic version.
               The portion of the image version following 'airflow-' is an official Apache Airflow repository release name.
               See [documentation](https://cloud.google.com/composer/docs/reference/rest/v1beta1/projects.locations.environments#softwareconfig)
               for allowed release names.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] pypi_packages: Custom Python Package Index (PyPI) packages to be installed
               in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
               version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
               pinning it to a version specifier, use the empty string as the value.
        :param pulumi.Input[str] python_version: -
               The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
               Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
        """
        __self__.airflow_config_overrides = airflow_config_overrides
        __self__.env_variables = env_variables
        __self__.image_version = image_version
        __self__.pypi_packages = pypi_packages
        __self__.python_version = python_version

@pulumi.input_type
class EnvironmentConfigWebServerNetworkAccessControlArgs:
    allowed_ip_ranges: Optional[pulumi.Input[List[pulumi.Input['EnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeArgs']]]] = pulumi.input_property("allowedIpRanges")
    """
    -
    A collection of allowed IP ranges with descriptions. Structure is documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_ip_ranges: Optional[pulumi.Input[List[pulumi.Input['EnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeArgs']]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['EnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeArgs']]] allowed_ip_ranges: -
               A collection of allowed IP ranges with descriptions. Structure is documented below.
        """
        __self__.allowed_ip_ranges = allowed_ip_ranges

@pulumi.input_type
class EnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeArgs:
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    IP address or range, defined using CIDR notation, of requests that this rule applies to.
    Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`.
    IP range prefixes should be properly truncated. For example,
    `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description of this ip range.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, value: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] value: IP address or range, defined using CIDR notation, of requests that this rule applies to.
               Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`.
               IP range prefixes should be properly truncated. For example,
               `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
        :param pulumi.Input[str] description: A description of this ip range.
        """
        __self__.value = value
        __self__.description = description

