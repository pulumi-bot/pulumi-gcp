# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'GroupGroupKey',
    'GroupMembershipMemberKey',
    'GroupMembershipPreferredMemberKey',
    'GroupMembershipRole',
    'GetGroupMembershipsMembershipResult',
    'GetGroupMembershipsMembershipMemberKeyResult',
    'GetGroupMembershipsMembershipPreferredMemberKeyResult',
    'GetGroupMembershipsMembershipRoleResult',
    'GetGroupsGroupResult',
    'GetGroupsGroupGroupKeyResult',
]

@pulumi.output_type
class GroupGroupKey(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the entity.
        For Google-managed entities, the id must be the email address of an existing
        group or user.
        For external-identity-mapped entities, the id must be a string conforming
        to the Identity Source's requirements.
        Must be unique within a namespace.
        """
        ...

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace in which the entity exists.
        If not specified, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If specified, the EntityKey represents an external-identity-mapped group.
        The namespace must correspond to an identity source created in Admin Console
        and must be in the form of `identitysources/{identity_source_id}`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupMembershipMemberKey(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the entity.
        For Google-managed entities, the id must be the email address of an existing
        group or user.
        For external-identity-mapped entities, the id must be a string conforming
        to the Identity Source's requirements.
        Must be unique within a namespace.
        """
        ...

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace in which the entity exists.
        If not specified, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If specified, the EntityKey represents an external-identity-mapped group.
        The namespace must correspond to an identity source created in Admin Console
        and must be in the form of `identitysources/{identity_source_id}`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupMembershipPreferredMemberKey(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the entity.
        For Google-managed entities, the id must be the email address of an existing
        group or user.
        For external-identity-mapped entities, the id must be a string conforming
        to the Identity Source's requirements.
        Must be unique within a namespace.
        """
        ...

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace in which the entity exists.
        If not specified, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If specified, the EntityKey represents an external-identity-mapped group.
        The namespace must correspond to an identity source created in Admin Console
        and must be in the form of `identitysources/{identity_source_id}`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupMembershipRole(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
        Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetGroupMembershipsMembershipResult(dict):
    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        ...

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
        """
        ...

    @property
    @pulumi.getter(name="memberKeys")
    def member_keys(self) -> List['outputs.GetGroupMembershipsMembershipMemberKeyResult']:
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
        """
        ...

    @property
    @pulumi.getter(name="preferredMemberKeys")
    def preferred_member_keys(self) -> List['outputs.GetGroupMembershipsMembershipPreferredMemberKeyResult']:
        ...

    @property
    @pulumi.getter
    def roles(self) -> List['outputs.GetGroupMembershipsMembershipRoleResult']:
        """
        The MembershipRoles that apply to the Membership. Structure is documented below.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        ...

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        ...


@pulumi.output_type
class GetGroupMembershipsMembershipMemberKeyResult(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the entity. For Google-managed entities, the id is the email address of an existing
        group or user. For external-identity-mapped entities, the id is a string conforming
        to the Identity Source's requirements.
        """
        ...

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in which the entity exists.
        If not populated, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If populated, the EntityKey represents an external-identity-mapped group.
        """
        ...


@pulumi.output_type
class GetGroupMembershipsMembershipPreferredMemberKeyResult(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the entity. For Google-managed entities, the id is the email address of an existing
        group or user. For external-identity-mapped entities, the id is a string conforming
        to the Identity Source's requirements.
        """
        ...

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in which the entity exists.
        If not populated, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If populated, the EntityKey represents an external-identity-mapped group.
        """
        ...


@pulumi.output_type
class GetGroupMembershipsMembershipRoleResult(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
        """
        ...


@pulumi.output_type
class GetGroupsGroupResult(dict):
    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        ...

    @property
    @pulumi.getter
    def description(self) -> str:
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        ...

    @property
    @pulumi.getter(name="groupKeys")
    def group_keys(self) -> List['outputs.GetGroupsGroupGroupKeyResult']:
        ...

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        ...

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
        """
        ...

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        ...


@pulumi.output_type
class GetGroupsGroupGroupKeyResult(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        ...

    @property
    @pulumi.getter
    def namespace(self) -> str:
        ...


