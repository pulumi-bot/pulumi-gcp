# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'AttestorAttestationAuthorityNote',
    'AttestorAttestationAuthorityNotePublicKey',
    'AttestorAttestationAuthorityNotePublicKeyPkixPublicKey',
    'AttestorIamBindingCondition',
    'AttestorIamMemberCondition',
    'PolicyAdmissionWhitelistPattern',
    'PolicyClusterAdmissionRule',
    'PolicyDefaultAdmissionRule',
]

@pulumi.output_type
class AttestorAttestationAuthorityNote(dict):
    delegation_service_account_email: Optional[str] = pulumi.output_property("delegationServiceAccountEmail")
    """
    -
    This field will contain the service account email address that
    this Attestor will use as the principal when querying Container
    Analysis. Attestor administrators must grant this service account
    the IAM role needed to read attestations from the noteReference in
    Container Analysis (containeranalysis.notes.occurrences.viewer).
    This email address is fixed for the lifetime of the Attestor, but
    callers should not make any other assumptions about the service
    account email; future versions may use an email based on a
    different naming pattern.
    """
    note_reference: str = pulumi.output_property("noteReference")
    """
    The resource name of a ATTESTATION_AUTHORITY Note, created by the
    user. If the Note is in a different project from the Attestor, it
    should be specified in the format `projects/*/notes/*` (or the legacy
    `providers/*/notes/*`). This field may not be updated.
    An attestation by this attestor is stored as a Container Analysis
    ATTESTATION_AUTHORITY Occurrence that names a container image
    and that links to this Note.
    """
    public_keys: Optional[List['outputs.AttestorAttestationAuthorityNotePublicKey']] = pulumi.output_property("publicKeys")
    """
    Public keys that verify attestations signed by this attestor. This
    field may be updated.
    If this field is non-empty, one of the specified public keys must
    verify that an attestation was signed by this attestor for the
    image specified in the admission request.
    If this field is empty, this attestor always returns that no valid
    attestations exist.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AttestorAttestationAuthorityNotePublicKey(dict):
    ascii_armored_pgp_public_key: Optional[str] = pulumi.output_property("asciiArmoredPgpPublicKey")
    """
    ASCII-armored representation of a PGP public key, as the
    entire output by the command
    `gpg --export --armor foo@example.com` (either LF or CRLF
    line endings). When using this field, id should be left
    blank. The BinAuthz API handlers will calculate the ID
    and fill it in automatically. BinAuthz computes this ID
    as the OpenPGP RFC4880 V4 fingerprint, represented as
    upper-case hex. If id is provided by the caller, it will
    be overwritten by the API-calculated ID.
    """
    comment: Optional[str] = pulumi.output_property("comment")
    """
    A descriptive comment. This field may be updated.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of this public key. Signatures verified by BinAuthz
    must include the ID of the public key that can be used to
    verify them, and that ID must match the contents of this
    field exactly. Additional restrictions on this field can
    be imposed based on which public key type is encapsulated.
    See the documentation on publicKey cases below for details.
    """
    pkix_public_key: Optional['outputs.AttestorAttestationAuthorityNotePublicKeyPkixPublicKey'] = pulumi.output_property("pkixPublicKey")
    """
    A raw PKIX SubjectPublicKeyInfo format public key.
    NOTE: id may be explicitly provided by the caller when using this
    type of public key, but it MUST be a valid RFC3986 URI. If id is left
    blank, a default one will be computed based on the digest of the DER
    encoding of the public key.  Structure is documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AttestorAttestationAuthorityNotePublicKeyPkixPublicKey(dict):
    public_key_pem: Optional[str] = pulumi.output_property("publicKeyPem")
    """
    A PEM-encoded public key, as described in
    `https://tools.ietf.org/html/rfc7468#section-13`
    """
    signature_algorithm: Optional[str] = pulumi.output_property("signatureAlgorithm")
    """
    The signature algorithm used to verify a message against
    a signature using this key. These signature algorithm must
    match the structure and any object identifiers encoded in
    publicKeyPem (i.e. this algorithm must match that of the
    public key).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AttestorIamBindingCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AttestorIamMemberCondition(dict):
    description: Optional[str] = pulumi.output_property("description")
    expression: str = pulumi.output_property("expression")
    title: str = pulumi.output_property("title")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyAdmissionWhitelistPattern(dict):
    name_pattern: str = pulumi.output_property("namePattern")
    """
    An image name pattern to whitelist, in the form
    `registry/path/to/image`. This supports a trailing * as a
    wildcard, but this is allowed only in text after the registry/
    part.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyClusterAdmissionRule(dict):
    cluster: str = pulumi.output_property("cluster")
    """
    The identifier for this object. Format specified above.
    """
    enforcement_mode: str = pulumi.output_property("enforcementMode")
    """
    The action when a pod creation is denied by the admission rule.
    """
    evaluation_mode: str = pulumi.output_property("evaluationMode")
    """
    How this admission rule will be evaluated.
    """
    require_attestations_bies: Optional[List[str]] = pulumi.output_property("requireAttestationsBies")
    """
    The resource names of the attestors that must attest to a
    container image. If the attestor is in a different project from the
    policy, it should be specified in the format `projects/*/attestors/*`.
    Each attestor must exist before a policy can reference it. To add an
    attestor to a policy the principal issuing the policy change
    request must be able to read the attestor resource.
    Note: this field must be non-empty when the evaluation_mode field
    specifies REQUIRE_ATTESTATION, otherwise it must be empty.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyDefaultAdmissionRule(dict):
    enforcement_mode: str = pulumi.output_property("enforcementMode")
    """
    The action when a pod creation is denied by the admission rule.
    """
    evaluation_mode: str = pulumi.output_property("evaluationMode")
    """
    How this admission rule will be evaluated.
    """
    require_attestations_bies: Optional[List[str]] = pulumi.output_property("requireAttestationsBies")
    """
    The resource names of the attestors that must attest to a
    container image. If the attestor is in a different project from the
    policy, it should be specified in the format `projects/*/attestors/*`.
    Each attestor must exist before a policy can reference it. To add an
    attestor to a policy the principal issuing the policy change
    request must be able to read the attestor resource.
    Note: this field must be non-empty when the evaluation_mode field
    specifies REQUIRE_ATTESTATION, otherwise it must be empty.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


