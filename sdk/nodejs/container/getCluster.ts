// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../types/input";
import * as outputApi from "../types/output";
import * as utilities from "../utilities";

/**
 * Get info about a GKE cluster from its name and location.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const myCluster = pulumi.output(gcp.container.getCluster({
 *     location: "us-east1-a",
 *     name: "my-cluster",
 * }));
 * 
 * export const clusterPassword = myCluster.masterAuths[0].password;
 * export const clusterUsername = myCluster.masterAuths[0].username;
 * export const endpoint = myCluster.endpoint;
 * export const instanceGroupUrls = myCluster.instanceGroupUrls;
 * export const nodeConfig = myCluster.nodeConfigs;
 * export const nodePools = myCluster.nodePools;
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/d/container_cluster.html.markdown.
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> & GetClusterResult {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    const promise: Promise<GetClusterResult> = pulumi.runtime.invoke("gcp:container/getCluster:getCluster", {
        "location": args.location,
        "name": args.name,
        "project": args.project,
        "region": args.region,
        "zone": args.zone,
    }, opts);

    return pulumi.utils.liftProperties(promise, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * The location (zone or region) this cluster has been
     * created in. One of `location`, `region`, `zone`, or a provider-level `zone` must
     * be specified.
     */
    readonly location?: string;
    /**
     * The name of the cluster.
     */
    readonly name: string;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    readonly project?: string;
    /**
     * The region this cluster has been created in. Deprecated
     * in favour of `location`.
     */
    readonly region?: string;
    /**
     * The zone this cluster has been created in. Deprecated in
     * favour of `location`.
     */
    readonly zone?: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly additionalZones: string[];
    readonly addonsConfigs: outputApi.container.GetClusterAddonsConfig[];
    readonly authenticatorGroupsConfigs: outputApi.container.GetClusterAuthenticatorGroupsConfig[];
    readonly clusterAutoscalings: outputApi.container.GetClusterClusterAutoscaling[];
    readonly clusterIpv4Cidr: string;
    readonly databaseEncryptions: outputApi.container.GetClusterDatabaseEncryption[];
    readonly defaultMaxPodsPerNode: number;
    readonly description: string;
    readonly enableBinaryAuthorization: boolean;
    readonly enableIntranodeVisibility: boolean;
    readonly enableKubernetesAlpha: boolean;
    readonly enableLegacyAbac: boolean;
    readonly enableTpu: boolean;
    readonly endpoint: string;
    readonly initialNodeCount: number;
    readonly instanceGroupUrls: string[];
    readonly ipAllocationPolicies: outputApi.container.GetClusterIpAllocationPolicy[];
    readonly location?: string;
    readonly loggingService: string;
    readonly maintenancePolicies: outputApi.container.GetClusterMaintenancePolicy[];
    readonly masterAuths: outputApi.container.GetClusterMasterAuth[];
    readonly masterAuthorizedNetworksConfigs: outputApi.container.GetClusterMasterAuthorizedNetworksConfig[];
    readonly masterVersion: string;
    readonly minMasterVersion: string;
    readonly monitoringService: string;
    readonly name: string;
    readonly network: string;
    readonly networkPolicies: outputApi.container.GetClusterNetworkPolicy[];
    readonly nodeConfigs: outputApi.container.GetClusterNodeConfig[];
    readonly nodeLocations: string[];
    readonly nodePools: outputApi.container.GetClusterNodePool[];
    readonly nodeVersion: string;
    readonly podSecurityPolicyConfigs: outputApi.container.GetClusterPodSecurityPolicyConfig[];
    readonly privateClusterConfigs: outputApi.container.GetClusterPrivateClusterConfig[];
    readonly project?: string;
    readonly region?: string;
    readonly removeDefaultNodePool: boolean;
    readonly resourceLabels: {[key: string]: string};
    readonly resourceUsageExportConfigs: outputApi.container.GetClusterResourceUsageExportConfig[];
    readonly servicesIpv4Cidr: string;
    readonly subnetwork: string;
    readonly tpuIpv4CidrBlock: string;
    readonly verticalPodAutoscalings: outputApi.container.GetClusterVerticalPodAutoscaling[];
    readonly workloadIdentityConfigs: outputApi.container.GetClusterWorkloadIdentityConfig[];
    readonly zone?: string;
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
