// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../../types/input";
import * as outputApi from "../../../types/output";
import * as utilities from "../../../utilities";

export interface GetClusterAddonsConfig {
    cloudrunConfigs: outputApi.container.GetClusterAddonsConfigCloudrunConfig[];
    horizontalPodAutoscalings: outputApi.container.GetClusterAddonsConfigHorizontalPodAutoscaling[];
    httpLoadBalancings: outputApi.container.GetClusterAddonsConfigHttpLoadBalancing[];
    istioConfigs: outputApi.container.GetClusterAddonsConfigIstioConfig[];
    kubernetesDashboards: outputApi.container.GetClusterAddonsConfigKubernetesDashboard[];
    networkPolicyConfigs: outputApi.container.GetClusterAddonsConfigNetworkPolicyConfig[];
}

export interface GetClusterAddonsConfigCloudrunConfig {
    disabled: boolean;
}

export interface GetClusterAddonsConfigHorizontalPodAutoscaling {
    disabled: boolean;
}

export interface GetClusterAddonsConfigHttpLoadBalancing {
    disabled: boolean;
}

export interface GetClusterAddonsConfigIstioConfig {
    auth: string;
    disabled: boolean;
}

export interface GetClusterAddonsConfigKubernetesDashboard {
    disabled: boolean;
}

export interface GetClusterAddonsConfigNetworkPolicyConfig {
    disabled: boolean;
}

export interface GetClusterAuthenticatorGroupsConfig {
    securityGroup: string;
}

export interface GetClusterClusterAutoscaling {
    enabled: boolean;
    resourceLimits: outputApi.container.GetClusterClusterAutoscalingResourceLimit[];
}

export interface GetClusterClusterAutoscalingResourceLimit {
    maximum: number;
    minimum: number;
    resourceType: string;
}

export interface GetClusterDatabaseEncryption {
    keyName: string;
    state: string;
}

export interface GetClusterIpAllocationPolicy {
    clusterIpv4CidrBlock: string;
    clusterSecondaryRangeName: string;
    createSubnetwork: boolean;
    nodeIpv4CidrBlock: string;
    servicesIpv4CidrBlock: string;
    servicesSecondaryRangeName: string;
    subnetworkName: string;
    useIpAliases: boolean;
}

export interface GetClusterMaintenancePolicy {
    dailyMaintenanceWindows: outputApi.container.GetClusterMaintenancePolicyDailyMaintenanceWindow[];
}

export interface GetClusterMaintenancePolicyDailyMaintenanceWindow {
    duration: string;
    startTime: string;
}

export interface GetClusterMasterAuth {
    clientCertificate: string;
    clientCertificateConfigs: outputApi.container.GetClusterMasterAuthClientCertificateConfig[];
    clientKey: string;
    clusterCaCertificate: string;
    password: string;
    username: string;
}

export interface GetClusterMasterAuthClientCertificateConfig {
    issueClientCertificate: boolean;
}

export interface GetClusterMasterAuthorizedNetworksConfig {
    cidrBlocks: outputApi.container.GetClusterMasterAuthorizedNetworksConfigCidrBlock[];
}

export interface GetClusterMasterAuthorizedNetworksConfigCidrBlock {
    cidrBlock: string;
    displayName: string;
}

export interface GetClusterNetworkPolicy {
    enabled: boolean;
    provider: string;
}

export interface GetClusterNodeConfig {
    diskSizeGb: number;
    diskType: string;
    guestAccelerators: outputApi.container.GetClusterNodeConfigGuestAccelerator[];
    imageType: string;
    labels: {[key: string]: string};
    localSsdCount: number;
    machineType: string;
    metadata: {[key: string]: string};
    minCpuPlatform: string;
    oauthScopes: string[];
    preemptible: boolean;
    sandboxConfigs: outputApi.container.GetClusterNodeConfigSandboxConfig[];
    serviceAccount: string;
    tags: string[];
    taints: outputApi.container.GetClusterNodeConfigTaint[];
    workloadMetadataConfigs: outputApi.container.GetClusterNodeConfigWorkloadMetadataConfig[];
}

export interface GetClusterNodeConfigGuestAccelerator {
    count: number;
    type: string;
}

export interface GetClusterNodeConfigSandboxConfig {
    sandboxType: string;
}

export interface GetClusterNodeConfigTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetClusterNodeConfigWorkloadMetadataConfig {
    nodeMetadata: string;
}

export interface GetClusterNodePool {
    autoscalings: outputApi.container.GetClusterNodePoolAutoscaling[];
    initialNodeCount: number;
    instanceGroupUrls: string[];
    managements: outputApi.container.GetClusterNodePoolManagement[];
    maxPodsPerNode: number;
    name: string;
    namePrefix: string;
    nodeConfigs: outputApi.container.GetClusterNodePoolNodeConfig[];
    nodeCount: number;
    version: string;
}

export interface GetClusterNodePoolAutoscaling {
    maxNodeCount: number;
    minNodeCount: number;
}

export interface GetClusterNodePoolManagement {
    autoRepair: boolean;
    autoUpgrade: boolean;
}

export interface GetClusterNodePoolNodeConfig {
    diskSizeGb: number;
    diskType: string;
    guestAccelerators: outputApi.container.GetClusterNodePoolNodeConfigGuestAccelerator[];
    imageType: string;
    labels: {[key: string]: string};
    localSsdCount: number;
    machineType: string;
    metadata: {[key: string]: string};
    minCpuPlatform: string;
    oauthScopes: string[];
    preemptible: boolean;
    sandboxConfigs: outputApi.container.GetClusterNodePoolNodeConfigSandboxConfig[];
    serviceAccount: string;
    tags: string[];
    taints: outputApi.container.GetClusterNodePoolNodeConfigTaint[];
    workloadMetadataConfigs: outputApi.container.GetClusterNodePoolNodeConfigWorkloadMetadataConfig[];
}

export interface GetClusterNodePoolNodeConfigGuestAccelerator {
    count: number;
    type: string;
}

export interface GetClusterNodePoolNodeConfigSandboxConfig {
    sandboxType: string;
}

export interface GetClusterNodePoolNodeConfigTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetClusterNodePoolNodeConfigWorkloadMetadataConfig {
    nodeMetadata: string;
}

export interface GetClusterPodSecurityPolicyConfig {
    enabled: boolean;
}

export interface GetClusterPrivateClusterConfig {
    enablePrivateEndpoint: boolean;
    enablePrivateNodes: boolean;
    masterIpv4CidrBlock: string;
    privateEndpoint: string;
    publicEndpoint: string;
}

export interface GetClusterResourceUsageExportConfig {
    bigqueryDestinations: outputApi.container.GetClusterResourceUsageExportConfigBigqueryDestination[];
    enableNetworkEgressMetering: boolean;
}

export interface GetClusterResourceUsageExportConfigBigqueryDestination {
    datasetId: string;
}

export interface GetClusterVerticalPodAutoscaling {
    enabled: boolean;
}

export interface GetClusterWorkloadIdentityConfig {
    identityNamespace: string;
}
