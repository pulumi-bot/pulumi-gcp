// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../../types/input";
import * as outputApi from "../../../types/output";
import * as utilities from "../../../utilities";

export interface ClusterAddonsConfig {
    cloudrunConfig?: pulumi.Input<inputApi.container.ClusterAddonsConfigCloudrunConfig>;
    horizontalPodAutoscaling?: pulumi.Input<inputApi.container.ClusterAddonsConfigHorizontalPodAutoscaling>;
    httpLoadBalancing?: pulumi.Input<inputApi.container.ClusterAddonsConfigHttpLoadBalancing>;
    istioConfig?: pulumi.Input<inputApi.container.ClusterAddonsConfigIstioConfig>;
    kubernetesDashboard?: pulumi.Input<inputApi.container.ClusterAddonsConfigKubernetesDashboard>;
    networkPolicyConfig?: pulumi.Input<inputApi.container.ClusterAddonsConfigNetworkPolicyConfig>;
}

export interface ClusterAddonsConfigCloudrunConfig {
    disabled?: pulumi.Input<boolean>;
}

export interface ClusterAddonsConfigHorizontalPodAutoscaling {
    disabled?: pulumi.Input<boolean>;
}

export interface ClusterAddonsConfigHttpLoadBalancing {
    disabled?: pulumi.Input<boolean>;
}

export interface ClusterAddonsConfigIstioConfig {
    auth?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
}

export interface ClusterAddonsConfigKubernetesDashboard {
    disabled?: pulumi.Input<boolean>;
}

export interface ClusterAddonsConfigNetworkPolicyConfig {
    disabled?: pulumi.Input<boolean>;
}

export interface ClusterAuthenticatorGroupsConfig {
    securityGroup: pulumi.Input<string>;
}

export interface ClusterClusterAutoscaling {
    enabled: pulumi.Input<boolean>;
    resourceLimits?: pulumi.Input<pulumi.Input<inputApi.container.ClusterClusterAutoscalingResourceLimit>[]>;
}

export interface ClusterClusterAutoscalingResourceLimit {
    maximum?: pulumi.Input<number>;
    minimum?: pulumi.Input<number>;
    resourceType: pulumi.Input<string>;
}

export interface ClusterDatabaseEncryption {
    keyName: pulumi.Input<string>;
    state: pulumi.Input<string>;
}

export interface ClusterIpAllocationPolicy {
    clusterIpv4CidrBlock?: pulumi.Input<string>;
    clusterSecondaryRangeName?: pulumi.Input<string>;
    createSubnetwork?: pulumi.Input<boolean>;
    nodeIpv4CidrBlock?: pulumi.Input<string>;
    servicesIpv4CidrBlock?: pulumi.Input<string>;
    servicesSecondaryRangeName?: pulumi.Input<string>;
    subnetworkName?: pulumi.Input<string>;
    useIpAliases?: pulumi.Input<boolean>;
}

export interface ClusterMaintenancePolicy {
    dailyMaintenanceWindow: pulumi.Input<inputApi.container.ClusterMaintenancePolicyDailyMaintenanceWindow>;
}

export interface ClusterMaintenancePolicyDailyMaintenanceWindow {
    duration?: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}

export interface ClusterMasterAuth {
    clientCertificate?: pulumi.Input<string>;
    clientCertificateConfig?: pulumi.Input<inputApi.container.ClusterMasterAuthClientCertificateConfig>;
    clientKey?: pulumi.Input<string>;
    clusterCaCertificate?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface ClusterMasterAuthClientCertificateConfig {
    issueClientCertificate: pulumi.Input<boolean>;
}

export interface ClusterMasterAuthorizedNetworksConfig {
    cidrBlocks?: pulumi.Input<pulumi.Input<inputApi.container.ClusterMasterAuthorizedNetworksConfigCidrBlock>[]>;
}

export interface ClusterMasterAuthorizedNetworksConfigCidrBlock {
    cidrBlock: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
}

export interface ClusterNetworkPolicy {
    enabled?: pulumi.Input<boolean>;
    provider?: pulumi.Input<string>;
}

export interface ClusterNodeConfig {
    diskSizeGb?: pulumi.Input<number>;
    diskType?: pulumi.Input<string>;
    guestAccelerators?: pulumi.Input<pulumi.Input<inputApi.container.ClusterNodeConfigGuestAccelerator>[]>;
    imageType?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    localSsdCount?: pulumi.Input<number>;
    machineType?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    minCpuPlatform?: pulumi.Input<string>;
    oauthScopes?: pulumi.Input<pulumi.Input<string>[]>;
    preemptible?: pulumi.Input<boolean>;
    sandboxConfig?: pulumi.Input<inputApi.container.ClusterNodeConfigSandboxConfig>;
    serviceAccount?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputApi.container.ClusterNodeConfigTaint>[]>;
    workloadMetadataConfig?: pulumi.Input<inputApi.container.ClusterNodeConfigWorkloadMetadataConfig>;
}

export interface ClusterNodeConfigGuestAccelerator {
    count: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface ClusterNodeConfigSandboxConfig {
    sandboxType: pulumi.Input<string>;
}

export interface ClusterNodeConfigTaint {
    effect: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ClusterNodeConfigWorkloadMetadataConfig {
    nodeMetadata: pulumi.Input<string>;
}

export interface ClusterNodePool {
    autoscaling?: pulumi.Input<inputApi.container.ClusterNodePoolAutoscaling>;
    /**
     * The number of nodes to create in this
     * cluster's default node pool. Must be set if `nodePool` is not set. If
     * you're using `gcp.container.NodePool` objects with no default node pool,
     * you'll need to set this to a value of at least `1`, alongside setting
     * `removeDefaultNodePool` to `true`.
     */
    initialNodeCount?: pulumi.Input<number>;
    /**
     * List of instance group URLs which have been assigned
     * to the cluster.
     */
    instanceGroupUrls?: pulumi.Input<pulumi.Input<string>[]>;
    management?: pulumi.Input<inputApi.container.ClusterNodePoolManagement>;
    maxPodsPerNode?: pulumi.Input<number>;
    /**
     * The name of the cluster, unique within the project and
     * location.
     */
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    /**
     * Parameters used in creating the default node pool.
     * Generally, this field should not be used at the same time as a
     * `gcp.container.NodePool` or a `nodePool` block; this configuration
     * manages the default node pool, which isn't recommended to be used with
     * this provider. Structure is documented below.
     */
    nodeConfig?: pulumi.Input<inputApi.container.ClusterNodePoolNodeConfig>;
    nodeCount?: pulumi.Input<number>;
    version?: pulumi.Input<string>;
}

export interface ClusterNodePoolAutoscaling {
    maxNodeCount: pulumi.Input<number>;
    minNodeCount: pulumi.Input<number>;
}

export interface ClusterNodePoolManagement {
    autoRepair?: pulumi.Input<boolean>;
    autoUpgrade?: pulumi.Input<boolean>;
}

export interface ClusterNodePoolNodeConfig {
    diskSizeGb?: pulumi.Input<number>;
    diskType?: pulumi.Input<string>;
    guestAccelerators?: pulumi.Input<pulumi.Input<inputApi.container.ClusterNodePoolNodeConfigGuestAccelerator>[]>;
    imageType?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    localSsdCount?: pulumi.Input<number>;
    machineType?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    minCpuPlatform?: pulumi.Input<string>;
    oauthScopes?: pulumi.Input<pulumi.Input<string>[]>;
    preemptible?: pulumi.Input<boolean>;
    sandboxConfig?: pulumi.Input<inputApi.container.ClusterNodePoolNodeConfigSandboxConfig>;
    serviceAccount?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputApi.container.ClusterNodePoolNodeConfigTaint>[]>;
    workloadMetadataConfig?: pulumi.Input<inputApi.container.ClusterNodePoolNodeConfigWorkloadMetadataConfig>;
}

export interface ClusterNodePoolNodeConfigGuestAccelerator {
    count: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface ClusterNodePoolNodeConfigSandboxConfig {
    sandboxType: pulumi.Input<string>;
}

export interface ClusterNodePoolNodeConfigTaint {
    effect: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ClusterNodePoolNodeConfigWorkloadMetadataConfig {
    nodeMetadata: pulumi.Input<string>;
}

export interface ClusterPodSecurityPolicyConfig {
    enabled: pulumi.Input<boolean>;
}

export interface ClusterPrivateClusterConfig {
    enablePrivateEndpoint?: pulumi.Input<boolean>;
    enablePrivateNodes?: pulumi.Input<boolean>;
    masterIpv4CidrBlock?: pulumi.Input<string>;
    privateEndpoint?: pulumi.Input<string>;
    publicEndpoint?: pulumi.Input<string>;
}

export interface ClusterResourceUsageExportConfig {
    bigqueryDestination: pulumi.Input<inputApi.container.ClusterResourceUsageExportConfigBigqueryDestination>;
    enableNetworkEgressMetering?: pulumi.Input<boolean>;
}

export interface ClusterResourceUsageExportConfigBigqueryDestination {
    datasetId: pulumi.Input<string>;
}

export interface ClusterVerticalPodAutoscaling {
    enabled?: pulumi.Input<boolean>;
}

export interface ClusterWorkloadIdentityConfig {
    identityNamespace: pulumi.Input<string>;
}
