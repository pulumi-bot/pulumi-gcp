// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class FolderSink extends pulumi.CustomResource {
    /**
     * Get an existing FolderSink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FolderSinkState, opts?: pulumi.CustomResourceOptions): FolderSink {
        return new FolderSink(name, <any>state, { ...opts, id: id });
    }

    public readonly destination: pulumi.Output<string>;
    public readonly filter: pulumi.Output<string | undefined>;
    public readonly folder: pulumi.Output<string>;
    public readonly includeChildren: pulumi.Output<boolean | undefined>;
    public readonly name: pulumi.Output<string>;
    public /*out*/ readonly writerIdentity: pulumi.Output<string>;

    /**
     * Create a FolderSink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FolderSinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FolderSinkArgs | FolderSinkState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: FolderSinkState = argsOrState as FolderSinkState | undefined;
            inputs["destination"] = state ? state.destination : undefined;
            inputs["filter"] = state ? state.filter : undefined;
            inputs["folder"] = state ? state.folder : undefined;
            inputs["includeChildren"] = state ? state.includeChildren : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["writerIdentity"] = state ? state.writerIdentity : undefined;
        } else {
            const args = argsOrState as FolderSinkArgs | undefined;
            if (!args || args.destination === undefined) {
                throw new Error("Missing required property 'destination'");
            }
            if (!args || args.folder === undefined) {
                throw new Error("Missing required property 'folder'");
            }
            inputs["destination"] = args ? args.destination : undefined;
            inputs["filter"] = args ? args.filter : undefined;
            inputs["folder"] = args ? args.folder : undefined;
            inputs["includeChildren"] = args ? args.includeChildren : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["writerIdentity"] = undefined /*out*/;
        }
        super("gcp:logging/folderSink:FolderSink", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FolderSink resources.
 */
export interface FolderSinkState {
    readonly destination?: pulumi.Input<string>;
    readonly filter?: pulumi.Input<string>;
    readonly folder?: pulumi.Input<string>;
    readonly includeChildren?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly writerIdentity?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FolderSink resource.
 */
export interface FolderSinkArgs {
    readonly destination: pulumi.Input<string>;
    readonly filter?: pulumi.Input<string>;
    readonly folder: pulumi.Input<string>;
    readonly includeChildren?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
}
