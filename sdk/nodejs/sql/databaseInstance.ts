// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class DatabaseInstance extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseInstanceState, opts?: pulumi.CustomResourceOptions): DatabaseInstance {
        return new DatabaseInstance(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly connectionName: pulumi.Output<string>;
    public readonly databaseVersion: pulumi.Output<string | undefined>;
    public /*out*/ readonly firstIpAddress: pulumi.Output<string>;
    public /*out*/ readonly ipAddresses: pulumi.Output<{ ipAddress: string, timeToRetire: string }[]>;
    public readonly masterInstanceName: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly project: pulumi.Output<string>;
    public readonly region: pulumi.Output<string | undefined>;
    public readonly replicaConfiguration: pulumi.Output<{ caCertificate?: string, clientCertificate?: string, clientKey?: string, connectRetryInterval?: number, dumpFilePath?: string, failoverTarget?: boolean, masterHeartbeatPeriod?: number, password?: string, sslCipher?: string, username?: string, verifyServerCertificate?: boolean }>;
    public /*out*/ readonly selfLink: pulumi.Output<string>;
    public /*out*/ readonly serverCaCert: pulumi.Output<{ cert: string, commonName: string, createTime: string, expirationTime: string, sha1Fingerprint: string }>;
    public /*out*/ readonly serviceAccountEmailAddress: pulumi.Output<string>;
    public readonly settings: pulumi.Output<{ activationPolicy: string, authorizedGaeApplications?: string[], availabilityType: string, backupConfiguration: { binaryLogEnabled?: boolean, enabled?: boolean, startTime: string }, crashSafeReplication: boolean, databaseFlags?: { name?: string, value?: string }[], diskAutoresize?: boolean, diskSize: number, diskType: string, ipConfiguration: { authorizedNetworks?: { expirationTime?: string, name?: string, value?: string }[], ipv4Enabled: boolean, requireSsl?: boolean }, locationPreference: { followGaeApplication?: string, zone?: string }, maintenanceWindow?: { day?: number, hour?: number, updateTrack?: string }, pricingPlan?: string, replicationType?: string, tier: string, userLabels?: {[key: string]: string}, version: number }>;

    /**
     * Create a DatabaseInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseInstanceArgs | DatabaseInstanceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: DatabaseInstanceState = argsOrState as DatabaseInstanceState | undefined;
            inputs["connectionName"] = state ? state.connectionName : undefined;
            inputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            inputs["firstIpAddress"] = state ? state.firstIpAddress : undefined;
            inputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            inputs["masterInstanceName"] = state ? state.masterInstanceName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["replicaConfiguration"] = state ? state.replicaConfiguration : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["serverCaCert"] = state ? state.serverCaCert : undefined;
            inputs["serviceAccountEmailAddress"] = state ? state.serviceAccountEmailAddress : undefined;
            inputs["settings"] = state ? state.settings : undefined;
        } else {
            const args = argsOrState as DatabaseInstanceArgs | undefined;
            if (!args || args.settings === undefined) {
                throw new Error("Missing required property 'settings'");
            }
            inputs["databaseVersion"] = args ? args.databaseVersion : undefined;
            inputs["masterInstanceName"] = args ? args.masterInstanceName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["replicaConfiguration"] = args ? args.replicaConfiguration : undefined;
            inputs["settings"] = args ? args.settings : undefined;
            inputs["connectionName"] = undefined /*out*/;
            inputs["firstIpAddress"] = undefined /*out*/;
            inputs["ipAddresses"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
            inputs["serverCaCert"] = undefined /*out*/;
            inputs["serviceAccountEmailAddress"] = undefined /*out*/;
        }
        super("gcp:sql/databaseInstance:DatabaseInstance", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabaseInstance resources.
 */
export interface DatabaseInstanceState {
    readonly connectionName?: pulumi.Input<string>;
    readonly databaseVersion?: pulumi.Input<string>;
    readonly firstIpAddress?: pulumi.Input<string>;
    readonly ipAddresses?: pulumi.Input<pulumi.Input<{ ipAddress?: pulumi.Input<string>, timeToRetire?: pulumi.Input<string> }>[]>;
    readonly masterInstanceName?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly replicaConfiguration?: pulumi.Input<{ caCertificate?: pulumi.Input<string>, clientCertificate?: pulumi.Input<string>, clientKey?: pulumi.Input<string>, connectRetryInterval?: pulumi.Input<number>, dumpFilePath?: pulumi.Input<string>, failoverTarget?: pulumi.Input<boolean>, masterHeartbeatPeriod?: pulumi.Input<number>, password?: pulumi.Input<string>, sslCipher?: pulumi.Input<string>, username?: pulumi.Input<string>, verifyServerCertificate?: pulumi.Input<boolean> }>;
    readonly selfLink?: pulumi.Input<string>;
    readonly serverCaCert?: pulumi.Input<{ cert?: pulumi.Input<string>, commonName?: pulumi.Input<string>, createTime?: pulumi.Input<string>, expirationTime?: pulumi.Input<string>, sha1Fingerprint?: pulumi.Input<string> }>;
    readonly serviceAccountEmailAddress?: pulumi.Input<string>;
    readonly settings?: pulumi.Input<{ activationPolicy?: pulumi.Input<string>, authorizedGaeApplications?: pulumi.Input<pulumi.Input<string>[]>, availabilityType?: pulumi.Input<string>, backupConfiguration?: pulumi.Input<{ binaryLogEnabled?: pulumi.Input<boolean>, enabled?: pulumi.Input<boolean>, startTime?: pulumi.Input<string> }>, crashSafeReplication?: pulumi.Input<boolean>, databaseFlags?: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, value?: pulumi.Input<string> }>[]>, diskAutoresize?: pulumi.Input<boolean>, diskSize?: pulumi.Input<number>, diskType?: pulumi.Input<string>, ipConfiguration?: pulumi.Input<{ authorizedNetworks?: pulumi.Input<pulumi.Input<{ expirationTime?: pulumi.Input<string>, name?: pulumi.Input<string>, value?: pulumi.Input<string> }>[]>, ipv4Enabled?: pulumi.Input<boolean>, requireSsl?: pulumi.Input<boolean> }>, locationPreference?: pulumi.Input<{ followGaeApplication?: pulumi.Input<string>, zone?: pulumi.Input<string> }>, maintenanceWindow?: pulumi.Input<{ day?: pulumi.Input<number>, hour?: pulumi.Input<number>, updateTrack?: pulumi.Input<string> }>, pricingPlan?: pulumi.Input<string>, replicationType?: pulumi.Input<string>, tier: pulumi.Input<string>, userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, version?: pulumi.Input<number> }>;
}

/**
 * The set of arguments for constructing a DatabaseInstance resource.
 */
export interface DatabaseInstanceArgs {
    readonly databaseVersion?: pulumi.Input<string>;
    readonly masterInstanceName?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly replicaConfiguration?: pulumi.Input<{ caCertificate?: pulumi.Input<string>, clientCertificate?: pulumi.Input<string>, clientKey?: pulumi.Input<string>, connectRetryInterval?: pulumi.Input<number>, dumpFilePath?: pulumi.Input<string>, failoverTarget?: pulumi.Input<boolean>, masterHeartbeatPeriod?: pulumi.Input<number>, password?: pulumi.Input<string>, sslCipher?: pulumi.Input<string>, username?: pulumi.Input<string>, verifyServerCertificate?: pulumi.Input<boolean> }>;
    readonly settings: pulumi.Input<{ activationPolicy?: pulumi.Input<string>, authorizedGaeApplications?: pulumi.Input<pulumi.Input<string>[]>, availabilityType?: pulumi.Input<string>, backupConfiguration?: pulumi.Input<{ binaryLogEnabled?: pulumi.Input<boolean>, enabled?: pulumi.Input<boolean>, startTime?: pulumi.Input<string> }>, crashSafeReplication?: pulumi.Input<boolean>, databaseFlags?: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, value?: pulumi.Input<string> }>[]>, diskAutoresize?: pulumi.Input<boolean>, diskSize?: pulumi.Input<number>, diskType?: pulumi.Input<string>, ipConfiguration?: pulumi.Input<{ authorizedNetworks?: pulumi.Input<pulumi.Input<{ expirationTime?: pulumi.Input<string>, name?: pulumi.Input<string>, value?: pulumi.Input<string> }>[]>, ipv4Enabled?: pulumi.Input<boolean>, requireSsl?: pulumi.Input<boolean> }>, locationPreference?: pulumi.Input<{ followGaeApplication?: pulumi.Input<string>, zone?: pulumi.Input<string> }>, maintenanceWindow?: pulumi.Input<{ day?: pulumi.Input<number>, hour?: pulumi.Input<number>, updateTrack?: pulumi.Input<string> }>, pricingPlan?: pulumi.Input<string>, replicationType?: pulumi.Input<string>, tier: pulumi.Input<string>, userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, version?: pulumi.Input<number> }>;
}
