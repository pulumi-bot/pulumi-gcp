// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyState, opts?: pulumi.CustomResourceOptions): Key {
        return new Key(name, <any>state, { ...opts, id: id });
    }

    public readonly keyAlgorithm: pulumi.Output<string | undefined>;
    public /*out*/ readonly name: pulumi.Output<string>;
    public readonly pgpKey: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateKey: pulumi.Output<string>;
    public /*out*/ readonly privateKeyEncrypted: pulumi.Output<string>;
    public /*out*/ readonly privateKeyFingerprint: pulumi.Output<string>;
    public readonly privateKeyType: pulumi.Output<string | undefined>;
    public /*out*/ readonly publicKey: pulumi.Output<string>;
    public readonly publicKeyType: pulumi.Output<string | undefined>;
    public readonly serviceAccountId: pulumi.Output<string>;
    public /*out*/ readonly validAfter: pulumi.Output<string>;
    public /*out*/ readonly validBefore: pulumi.Output<string>;

    /**
     * Create a Key resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyArgs | KeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: KeyState = argsOrState as KeyState | undefined;
            inputs["keyAlgorithm"] = state ? state.keyAlgorithm : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pgpKey"] = state ? state.pgpKey : undefined;
            inputs["privateKey"] = state ? state.privateKey : undefined;
            inputs["privateKeyEncrypted"] = state ? state.privateKeyEncrypted : undefined;
            inputs["privateKeyFingerprint"] = state ? state.privateKeyFingerprint : undefined;
            inputs["privateKeyType"] = state ? state.privateKeyType : undefined;
            inputs["publicKey"] = state ? state.publicKey : undefined;
            inputs["publicKeyType"] = state ? state.publicKeyType : undefined;
            inputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            inputs["validAfter"] = state ? state.validAfter : undefined;
            inputs["validBefore"] = state ? state.validBefore : undefined;
        } else {
            const args = argsOrState as KeyArgs | undefined;
            if (!args || args.serviceAccountId === undefined) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            inputs["keyAlgorithm"] = args ? args.keyAlgorithm : undefined;
            inputs["pgpKey"] = args ? args.pgpKey : undefined;
            inputs["privateKeyType"] = args ? args.privateKeyType : undefined;
            inputs["publicKeyType"] = args ? args.publicKeyType : undefined;
            inputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["privateKey"] = undefined /*out*/;
            inputs["privateKeyEncrypted"] = undefined /*out*/;
            inputs["privateKeyFingerprint"] = undefined /*out*/;
            inputs["publicKey"] = undefined /*out*/;
            inputs["validAfter"] = undefined /*out*/;
            inputs["validBefore"] = undefined /*out*/;
        }
        super("gcp:serviceAccount/key:Key", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Key resources.
 */
export interface KeyState {
    readonly keyAlgorithm?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly pgpKey?: pulumi.Input<string>;
    readonly privateKey?: pulumi.Input<string>;
    readonly privateKeyEncrypted?: pulumi.Input<string>;
    readonly privateKeyFingerprint?: pulumi.Input<string>;
    readonly privateKeyType?: pulumi.Input<string>;
    readonly publicKey?: pulumi.Input<string>;
    readonly publicKeyType?: pulumi.Input<string>;
    readonly serviceAccountId?: pulumi.Input<string>;
    readonly validAfter?: pulumi.Input<string>;
    readonly validBefore?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Key resource.
 */
export interface KeyArgs {
    readonly keyAlgorithm?: pulumi.Input<string>;
    readonly pgpKey?: pulumi.Input<string>;
    readonly privateKeyType?: pulumi.Input<string>;
    readonly publicKeyType?: pulumi.Input<string>;
    readonly serviceAccountId: pulumi.Input<string>;
}
