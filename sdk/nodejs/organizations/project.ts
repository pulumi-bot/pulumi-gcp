// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    public readonly appEngine: pulumi.Output<{ authDomain: string, codeBucket: string, defaultBucket: string, defaultHostname: string, featureSettings: { splitHealthChecks?: boolean }, gcrDomain: string, locationId: string, name: string, servingStatus: string, urlDispatchRules: { domain: string, path: string, service: string }[] }>;
    public readonly autoCreateNetwork: pulumi.Output<boolean | undefined>;
    public readonly billingAccount: pulumi.Output<string | undefined>;
    public readonly folderId: pulumi.Output<string>;
    public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name: pulumi.Output<string>;
    public /*out*/ readonly number: pulumi.Output<string>;
    public readonly orgId: pulumi.Output<string>;
    public readonly projectId: pulumi.Output<string>;
    public readonly skipDelete: pulumi.Output<boolean>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ProjectState = argsOrState as ProjectState | undefined;
            inputs["appEngine"] = state ? state.appEngine : undefined;
            inputs["autoCreateNetwork"] = state ? state.autoCreateNetwork : undefined;
            inputs["billingAccount"] = state ? state.billingAccount : undefined;
            inputs["folderId"] = state ? state.folderId : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["number"] = state ? state.number : undefined;
            inputs["orgId"] = state ? state.orgId : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["skipDelete"] = state ? state.skipDelete : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            inputs["appEngine"] = args ? args.appEngine : undefined;
            inputs["autoCreateNetwork"] = args ? args.autoCreateNetwork : undefined;
            inputs["billingAccount"] = args ? args.billingAccount : undefined;
            inputs["folderId"] = args ? args.folderId : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["orgId"] = args ? args.orgId : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["skipDelete"] = args ? args.skipDelete : undefined;
            inputs["number"] = undefined /*out*/;
        }
        super("gcp:organizations/project:Project", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    readonly appEngine?: pulumi.Input<{ authDomain?: pulumi.Input<string>, codeBucket?: pulumi.Input<string>, defaultBucket?: pulumi.Input<string>, defaultHostname?: pulumi.Input<string>, featureSettings?: pulumi.Input<{ splitHealthChecks?: pulumi.Input<boolean> }>, gcrDomain?: pulumi.Input<string>, locationId?: pulumi.Input<string>, name?: pulumi.Input<string>, servingStatus?: pulumi.Input<string>, urlDispatchRules?: pulumi.Input<pulumi.Input<{ domain?: pulumi.Input<string>, path?: pulumi.Input<string>, service?: pulumi.Input<string> }>[]> }>;
    readonly autoCreateNetwork?: pulumi.Input<boolean>;
    readonly billingAccount?: pulumi.Input<string>;
    readonly folderId?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly name?: pulumi.Input<string>;
    readonly number?: pulumi.Input<string>;
    readonly orgId?: pulumi.Input<string>;
    readonly projectId?: pulumi.Input<string>;
    readonly skipDelete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    readonly appEngine?: pulumi.Input<{ authDomain?: pulumi.Input<string>, codeBucket?: pulumi.Input<string>, defaultBucket?: pulumi.Input<string>, defaultHostname?: pulumi.Input<string>, featureSettings?: pulumi.Input<{ splitHealthChecks?: pulumi.Input<boolean> }>, gcrDomain?: pulumi.Input<string>, locationId?: pulumi.Input<string>, name?: pulumi.Input<string>, servingStatus?: pulumi.Input<string>, urlDispatchRules?: pulumi.Input<pulumi.Input<{ domain?: pulumi.Input<string>, path?: pulumi.Input<string>, service?: pulumi.Input<string> }>[]> }>;
    readonly autoCreateNetwork?: pulumi.Input<boolean>;
    readonly billingAccount?: pulumi.Input<string>;
    readonly folderId?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly name?: pulumi.Input<string>;
    readonly orgId?: pulumi.Input<string>;
    readonly projectId: pulumi.Input<string>;
    readonly skipDelete?: pulumi.Input<boolean>;
}
