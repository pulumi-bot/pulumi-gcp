// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Cloud Firestore indexes enable simple and complex queries against documents in a database.
 *  This resource manages composite indexes and not single
 * field indexes.
 * 
 * 
 * To get more information about Index, see:
 * 
 * * [API documentation](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.collectionGroups.indexes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/firestore/docs/query-data/indexing)
 * 
 * ## Example Usage - Firestore Index Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const my_index = new gcp.firestore.Index("my-index", {
 *     collection: "chatrooms",
 *     fields: [
 *         {
 *             fieldPath: "name",
 *             order: "ASCENDING",
 *         },
 *         {
 *             fieldPath: "description",
 *             order: "DESCENDING",
 *         },
 *         {
 *             fieldPath: "__name__",
 *             order: "DESCENDING",
 *         },
 *     ],
 *     project: "my-project-name",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/firestore_index.html.markdown.
 */
export class Index extends pulumi.CustomResource {
    /**
     * Get an existing Index resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IndexState, opts?: pulumi.CustomResourceOptions): Index {
        return new Index(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:firestore/index:Index';

    /**
     * Returns true if the given object is an instance of Index.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Index {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Index.__pulumiType;
    }

    public readonly collection!: pulumi.Output<string>;
    public readonly database!: pulumi.Output<string | undefined>;
    public readonly fields!: pulumi.Output<{ arrayConfig?: string, fieldPath?: string, order?: string }[]>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly queryScope!: pulumi.Output<string | undefined>;

    /**
     * Create a Index resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IndexArgs | IndexState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as IndexState | undefined;
            inputs["collection"] = state ? state.collection : undefined;
            inputs["database"] = state ? state.database : undefined;
            inputs["fields"] = state ? state.fields : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["queryScope"] = state ? state.queryScope : undefined;
        } else {
            const args = argsOrState as IndexArgs | undefined;
            if (!args || args.collection === undefined) {
                throw new Error("Missing required property 'collection'");
            }
            if (!args || args.fields === undefined) {
                throw new Error("Missing required property 'fields'");
            }
            inputs["collection"] = args ? args.collection : undefined;
            inputs["database"] = args ? args.database : undefined;
            inputs["fields"] = args ? args.fields : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["queryScope"] = args ? args.queryScope : undefined;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Index.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Index resources.
 */
export interface IndexState {
    readonly collection?: pulumi.Input<string>;
    readonly database?: pulumi.Input<string>;
    readonly fields?: pulumi.Input<pulumi.Input<{ arrayConfig?: pulumi.Input<string>, fieldPath?: pulumi.Input<string>, order?: pulumi.Input<string> }>[]>;
    readonly name?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly queryScope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Index resource.
 */
export interface IndexArgs {
    readonly collection: pulumi.Input<string>;
    readonly database?: pulumi.Input<string>;
    readonly fields: pulumi.Input<pulumi.Input<{ arrayConfig?: pulumi.Input<string>, fieldPath?: pulumi.Input<string>, order?: pulumi.Input<string> }>[]>;
    readonly project?: pulumi.Input<string>;
    readonly queryScope?: pulumi.Input<string>;
}
