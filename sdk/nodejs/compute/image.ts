// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    public readonly createTimeout: pulumi.Output<number | undefined>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly family: pulumi.Output<string | undefined>;
    public /*out*/ readonly labelFingerprint: pulumi.Output<string>;
    public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly licenses: pulumi.Output<string[]>;
    public readonly name: pulumi.Output<string>;
    public readonly project: pulumi.Output<string>;
    public readonly rawDisk: pulumi.Output<{ containerType?: string, sha1?: string, source: string } | undefined>;
    public /*out*/ readonly selfLink: pulumi.Output<string>;
    public readonly sourceDisk: pulumi.Output<string | undefined>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ImageState = argsOrState as ImageState | undefined;
            inputs["createTimeout"] = state ? state.createTimeout : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["family"] = state ? state.family : undefined;
            inputs["labelFingerprint"] = state ? state.labelFingerprint : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["licenses"] = state ? state.licenses : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["rawDisk"] = state ? state.rawDisk : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["sourceDisk"] = state ? state.sourceDisk : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            inputs["createTimeout"] = args ? args.createTimeout : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["family"] = args ? args.family : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["licenses"] = args ? args.licenses : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["rawDisk"] = args ? args.rawDisk : undefined;
            inputs["sourceDisk"] = args ? args.sourceDisk : undefined;
            inputs["labelFingerprint"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
        }
        super("gcp:compute/image:Image", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    readonly createTimeout?: pulumi.Input<number>;
    readonly description?: pulumi.Input<string>;
    readonly family?: pulumi.Input<string>;
    readonly labelFingerprint?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly licenses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly name?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly rawDisk?: pulumi.Input<{ containerType?: pulumi.Input<string>, sha1?: pulumi.Input<string>, source: pulumi.Input<string> }>;
    readonly selfLink?: pulumi.Input<string>;
    readonly sourceDisk?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    readonly createTimeout?: pulumi.Input<number>;
    readonly description?: pulumi.Input<string>;
    readonly family?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly licenses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly name?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly rawDisk?: pulumi.Input<{ containerType?: pulumi.Input<string>, sha1?: pulumi.Input<string>, source: pulumi.Input<string> }>;
    readonly sourceDisk?: pulumi.Input<string>;
}
