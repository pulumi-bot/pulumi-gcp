// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPeeringState, opts?: pulumi.CustomResourceOptions): NetworkPeering {
        return new NetworkPeering(name, <any>state, { ...opts, id: id });
    }

    public readonly autoCreateRoutes: pulumi.Output<boolean | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly network: pulumi.Output<string>;
    public readonly peerNetwork: pulumi.Output<string>;
    public /*out*/ readonly state: pulumi.Output<string>;
    public /*out*/ readonly stateDetails: pulumi.Output<string>;

    /**
     * Create a NetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkPeeringArgs | NetworkPeeringState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: NetworkPeeringState = argsOrState as NetworkPeeringState | undefined;
            inputs["autoCreateRoutes"] = state ? state.autoCreateRoutes : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["peerNetwork"] = state ? state.peerNetwork : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["stateDetails"] = state ? state.stateDetails : undefined;
        } else {
            const args = argsOrState as NetworkPeeringArgs | undefined;
            if (!args || args.network === undefined) {
                throw new Error("Missing required property 'network'");
            }
            if (!args || args.peerNetwork === undefined) {
                throw new Error("Missing required property 'peerNetwork'");
            }
            inputs["autoCreateRoutes"] = args ? args.autoCreateRoutes : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["peerNetwork"] = args ? args.peerNetwork : undefined;
            inputs["state"] = undefined /*out*/;
            inputs["stateDetails"] = undefined /*out*/;
        }
        super("gcp:compute/networkPeering:NetworkPeering", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkPeering resources.
 */
export interface NetworkPeeringState {
    readonly autoCreateRoutes?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly network?: pulumi.Input<string>;
    readonly peerNetwork?: pulumi.Input<string>;
    readonly state?: pulumi.Input<string>;
    readonly stateDetails?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkPeering resource.
 */
export interface NetworkPeeringArgs {
    readonly autoCreateRoutes?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly network: pulumi.Input<string>;
    readonly peerNetwork: pulumi.Input<string>;
}
