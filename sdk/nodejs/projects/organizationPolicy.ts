// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class OrganizationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationPolicyState, opts?: pulumi.CustomResourceOptions): OrganizationPolicy {
        return new OrganizationPolicy(name, <any>state, { ...opts, id: id });
    }

    public readonly booleanPolicy: pulumi.Output<{ enforced: boolean } | undefined>;
    public readonly constraint: pulumi.Output<string>;
    public /*out*/ readonly etag: pulumi.Output<string>;
    public readonly listPolicy: pulumi.Output<{ allow?: { all?: boolean, values?: string[] }, deny?: { all?: boolean, values?: string[] }, suggestedValue: string } | undefined>;
    public readonly project: pulumi.Output<string>;
    public readonly restorePolicy: pulumi.Output<{ default: boolean } | undefined>;
    public /*out*/ readonly updateTime: pulumi.Output<string>;
    public readonly version: pulumi.Output<number>;

    /**
     * Create a OrganizationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationPolicyArgs | OrganizationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: OrganizationPolicyState = argsOrState as OrganizationPolicyState | undefined;
            inputs["booleanPolicy"] = state ? state.booleanPolicy : undefined;
            inputs["constraint"] = state ? state.constraint : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["listPolicy"] = state ? state.listPolicy : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["restorePolicy"] = state ? state.restorePolicy : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as OrganizationPolicyArgs | undefined;
            if (!args || args.constraint === undefined) {
                throw new Error("Missing required property 'constraint'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            inputs["booleanPolicy"] = args ? args.booleanPolicy : undefined;
            inputs["constraint"] = args ? args.constraint : undefined;
            inputs["listPolicy"] = args ? args.listPolicy : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["restorePolicy"] = args ? args.restorePolicy : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["etag"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        super("gcp:projects/organizationPolicy:OrganizationPolicy", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationPolicy resources.
 */
export interface OrganizationPolicyState {
    readonly booleanPolicy?: pulumi.Input<{ enforced: pulumi.Input<boolean> }>;
    readonly constraint?: pulumi.Input<string>;
    readonly etag?: pulumi.Input<string>;
    readonly listPolicy?: pulumi.Input<{ allow?: pulumi.Input<{ all?: pulumi.Input<boolean>, values?: pulumi.Input<pulumi.Input<string>[]> }>, deny?: pulumi.Input<{ all?: pulumi.Input<boolean>, values?: pulumi.Input<pulumi.Input<string>[]> }>, suggestedValue?: pulumi.Input<string> }>;
    readonly project?: pulumi.Input<string>;
    readonly restorePolicy?: pulumi.Input<{ default: pulumi.Input<boolean> }>;
    readonly updateTime?: pulumi.Input<string>;
    readonly version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OrganizationPolicy resource.
 */
export interface OrganizationPolicyArgs {
    readonly booleanPolicy?: pulumi.Input<{ enforced: pulumi.Input<boolean> }>;
    readonly constraint: pulumi.Input<string>;
    readonly listPolicy?: pulumi.Input<{ allow?: pulumi.Input<{ all?: pulumi.Input<boolean>, values?: pulumi.Input<pulumi.Input<string>[]> }>, deny?: pulumi.Input<{ all?: pulumi.Input<boolean>, values?: pulumi.Input<pulumi.Input<string>[]> }>, suggestedValue?: pulumi.Input<string> }>;
    readonly project: pulumi.Input<string>;
    readonly restorePolicy?: pulumi.Input<{ default: pulumi.Input<boolean> }>;
    readonly version?: pulumi.Input<number>;
}
