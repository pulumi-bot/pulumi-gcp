// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The SSH public key information associated with a Google account.
 *
 *
 * To get more information about SSHPublicKey, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/oslogin/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/oslogin)
 *
 * ## Example Usage - Os Login Ssh Key Provided User
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 *
 * const me = gcp.organizations.getClientOpenIdUserInfo({});
 * const cache = new gcp.oslogin.SshPublicKey("cache", {
 *     user: me.then(me => me.email),
 *     key: fs.readFileSync("path/to/id_rsa.pub"),
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/os_login_ssh_public_key.html.markdown.
 */
export class SshPublicKey extends pulumi.CustomResource {
    /**
     * Get an existing SshPublicKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SshPublicKeyState, opts?: pulumi.CustomResourceOptions): SshPublicKey {
        return new SshPublicKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:oslogin/sshPublicKey:SshPublicKey';

    /**
     * Returns true if the given object is an instance of SshPublicKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SshPublicKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SshPublicKey.__pulumiType;
    }

    /**
     * An expiration time in microseconds since epoch.
     */
    public readonly expirationTimeUsec!: pulumi.Output<string | undefined>;
    /**
     * The SHA-256 fingerprint of the SSH public key.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * Public key text in SSH format, defined by RFC4253 section 6.6.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The user email.
     */
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a SshPublicKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SshPublicKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SshPublicKeyArgs | SshPublicKeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SshPublicKeyState | undefined;
            inputs["expirationTimeUsec"] = state ? state.expirationTimeUsec : undefined;
            inputs["fingerprint"] = state ? state.fingerprint : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as SshPublicKeyArgs | undefined;
            if (!args || args.key === undefined) {
                throw new Error("Missing required property 'key'");
            }
            if (!args || args.user === undefined) {
                throw new Error("Missing required property 'user'");
            }
            inputs["expirationTimeUsec"] = args ? args.expirationTimeUsec : undefined;
            inputs["key"] = args ? args.key : undefined;
            inputs["user"] = args ? args.user : undefined;
            inputs["fingerprint"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SshPublicKey.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SshPublicKey resources.
 */
export interface SshPublicKeyState {
    /**
     * An expiration time in microseconds since epoch.
     */
    readonly expirationTimeUsec?: pulumi.Input<string>;
    /**
     * The SHA-256 fingerprint of the SSH public key.
     */
    readonly fingerprint?: pulumi.Input<string>;
    /**
     * Public key text in SSH format, defined by RFC4253 section 6.6.
     */
    readonly key?: pulumi.Input<string>;
    /**
     * The user email.
     */
    readonly user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SshPublicKey resource.
 */
export interface SshPublicKeyArgs {
    /**
     * An expiration time in microseconds since epoch.
     */
    readonly expirationTimeUsec?: pulumi.Input<string>;
    /**
     * Public key text in SSH format, defined by RFC4253 section 6.6.
     */
    readonly key: pulumi.Input<string>;
    /**
     * The user email.
     */
    readonly user: pulumi.Input<string>;
}
