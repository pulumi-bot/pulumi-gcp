// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class CryptoKey extends pulumi.CustomResource {
    /**
     * Get an existing CryptoKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CryptoKeyState, opts?: pulumi.CustomResourceOptions): CryptoKey {
        return new CryptoKey(name, <any>state, { ...opts, id: id });
    }

    public readonly keyRing: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly rotationPeriod: pulumi.Output<string | undefined>;
    public /*out*/ readonly selfLink: pulumi.Output<string>;

    /**
     * Create a CryptoKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CryptoKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CryptoKeyArgs | CryptoKeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: CryptoKeyState = argsOrState as CryptoKeyState | undefined;
            inputs["keyRing"] = state ? state.keyRing : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["rotationPeriod"] = state ? state.rotationPeriod : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
        } else {
            const args = argsOrState as CryptoKeyArgs | undefined;
            if (!args || args.keyRing === undefined) {
                throw new Error("Missing required property 'keyRing'");
            }
            inputs["keyRing"] = args ? args.keyRing : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rotationPeriod"] = args ? args.rotationPeriod : undefined;
            inputs["selfLink"] = undefined /*out*/;
        }
        super("gcp:kms/cryptoKey:CryptoKey", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CryptoKey resources.
 */
export interface CryptoKeyState {
    readonly keyRing?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly rotationPeriod?: pulumi.Input<string>;
    readonly selfLink?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CryptoKey resource.
 */
export interface CryptoKeyArgs {
    readonly keyRing: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly rotationPeriod?: pulumi.Input<string>;
}
