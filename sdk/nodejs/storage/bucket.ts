// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Bucket extends pulumi.CustomResource {
    /**
     * Get an existing Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketState, opts?: pulumi.CustomResourceOptions): Bucket {
        return new Bucket(name, <any>state, { ...opts, id: id });
    }

    public readonly cors: pulumi.Output<{ maxAgeSeconds?: number, methods?: string[], origins?: string[], responseHeaders?: string[] }[] | undefined>;
    public readonly encryption: pulumi.Output<{ defaultKmsKeyName: string } | undefined>;
    public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly lifecycleRules: pulumi.Output<{ action: { storageClass?: string, type: string }, condition: { age?: number, createdBefore?: string, isLive?: boolean, matchesStorageClasses?: string[], numNewerVersions?: number } }[] | undefined>;
    public readonly location: pulumi.Output<string | undefined>;
    public readonly logging: pulumi.Output<{ logBucket: string, logObjectPrefix: string } | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly project: pulumi.Output<string>;
    public /*out*/ readonly selfLink: pulumi.Output<string>;
    public readonly storageClass: pulumi.Output<string | undefined>;
    public /*out*/ readonly url: pulumi.Output<string>;
    public readonly versioning: pulumi.Output<{ enabled?: boolean } | undefined>;
    public readonly websites: pulumi.Output<{ mainPageSuffix?: string, notFoundPage?: string }[] | undefined>;

    /**
     * Create a Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketArgs | BucketState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: BucketState = argsOrState as BucketState | undefined;
            inputs["cors"] = state ? state.cors : undefined;
            inputs["encryption"] = state ? state.encryption : undefined;
            inputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["logging"] = state ? state.logging : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["storageClass"] = state ? state.storageClass : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["versioning"] = state ? state.versioning : undefined;
            inputs["websites"] = state ? state.websites : undefined;
        } else {
            const args = argsOrState as BucketArgs | undefined;
            inputs["cors"] = args ? args.cors : undefined;
            inputs["encryption"] = args ? args.encryption : undefined;
            inputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["logging"] = args ? args.logging : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["storageClass"] = args ? args.storageClass : undefined;
            inputs["versioning"] = args ? args.versioning : undefined;
            inputs["websites"] = args ? args.websites : undefined;
            inputs["selfLink"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        super("gcp:storage/bucket:Bucket", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Bucket resources.
 */
export interface BucketState {
    readonly cors?: pulumi.Input<pulumi.Input<{ maxAgeSeconds?: pulumi.Input<number>, methods?: pulumi.Input<pulumi.Input<string>[]>, origins?: pulumi.Input<pulumi.Input<string>[]>, responseHeaders?: pulumi.Input<pulumi.Input<string>[]> }>[]>;
    readonly encryption?: pulumi.Input<{ defaultKmsKeyName: pulumi.Input<string> }>;
    readonly forceDestroy?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly lifecycleRules?: pulumi.Input<pulumi.Input<{ action: pulumi.Input<{ storageClass?: pulumi.Input<string>, type: pulumi.Input<string> }>, condition: pulumi.Input<{ age?: pulumi.Input<number>, createdBefore?: pulumi.Input<string>, isLive?: pulumi.Input<boolean>, matchesStorageClasses?: pulumi.Input<pulumi.Input<string>[]>, numNewerVersions?: pulumi.Input<number> }> }>[]>;
    readonly location?: pulumi.Input<string>;
    readonly logging?: pulumi.Input<{ logBucket: pulumi.Input<string>, logObjectPrefix?: pulumi.Input<string> }>;
    readonly name?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly selfLink?: pulumi.Input<string>;
    readonly storageClass?: pulumi.Input<string>;
    readonly url?: pulumi.Input<string>;
    readonly versioning?: pulumi.Input<{ enabled?: pulumi.Input<boolean> }>;
    readonly websites?: pulumi.Input<pulumi.Input<{ mainPageSuffix?: pulumi.Input<string>, notFoundPage?: pulumi.Input<string> }>[]>;
}

/**
 * The set of arguments for constructing a Bucket resource.
 */
export interface BucketArgs {
    readonly cors?: pulumi.Input<pulumi.Input<{ maxAgeSeconds?: pulumi.Input<number>, methods?: pulumi.Input<pulumi.Input<string>[]>, origins?: pulumi.Input<pulumi.Input<string>[]>, responseHeaders?: pulumi.Input<pulumi.Input<string>[]> }>[]>;
    readonly encryption?: pulumi.Input<{ defaultKmsKeyName: pulumi.Input<string> }>;
    readonly forceDestroy?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly lifecycleRules?: pulumi.Input<pulumi.Input<{ action: pulumi.Input<{ storageClass?: pulumi.Input<string>, type: pulumi.Input<string> }>, condition: pulumi.Input<{ age?: pulumi.Input<number>, createdBefore?: pulumi.Input<string>, isLive?: pulumi.Input<boolean>, matchesStorageClasses?: pulumi.Input<pulumi.Input<string>[]>, numNewerVersions?: pulumi.Input<number> }> }>[]>;
    readonly location?: pulumi.Input<string>;
    readonly logging?: pulumi.Input<{ logBucket: pulumi.Input<string>, logObjectPrefix?: pulumi.Input<string> }>;
    readonly name?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly storageClass?: pulumi.Input<string>;
    readonly versioning?: pulumi.Input<{ enabled?: pulumi.Input<boolean> }>;
    readonly websites?: pulumi.Input<pulumi.Input<{ mainPageSuffix?: pulumi.Input<string>, notFoundPage?: pulumi.Input<string> }>[]>;
}
