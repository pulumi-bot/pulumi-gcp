// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    public readonly authDomain: pulumi.Output<string>;
    public /*out*/ readonly codeBucket: pulumi.Output<string>;
    public /*out*/ readonly defaultBucket: pulumi.Output<string>;
    public /*out*/ readonly defaultHostname: pulumi.Output<string>;
    public readonly featureSettings: pulumi.Output<{ splitHealthChecks?: boolean }>;
    public /*out*/ readonly gcrDomain: pulumi.Output<string>;
    public readonly locationId: pulumi.Output<string>;
    public /*out*/ readonly name: pulumi.Output<string>;
    public readonly project: pulumi.Output<string>;
    public readonly servingStatus: pulumi.Output<string>;
    public /*out*/ readonly urlDispatchRules: pulumi.Output<{ domain: string, path: string, service: string }[]>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ApplicationState = argsOrState as ApplicationState | undefined;
            inputs["authDomain"] = state ? state.authDomain : undefined;
            inputs["codeBucket"] = state ? state.codeBucket : undefined;
            inputs["defaultBucket"] = state ? state.defaultBucket : undefined;
            inputs["defaultHostname"] = state ? state.defaultHostname : undefined;
            inputs["featureSettings"] = state ? state.featureSettings : undefined;
            inputs["gcrDomain"] = state ? state.gcrDomain : undefined;
            inputs["locationId"] = state ? state.locationId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["servingStatus"] = state ? state.servingStatus : undefined;
            inputs["urlDispatchRules"] = state ? state.urlDispatchRules : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if (!args || args.locationId === undefined) {
                throw new Error("Missing required property 'locationId'");
            }
            inputs["authDomain"] = args ? args.authDomain : undefined;
            inputs["featureSettings"] = args ? args.featureSettings : undefined;
            inputs["locationId"] = args ? args.locationId : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["servingStatus"] = args ? args.servingStatus : undefined;
            inputs["codeBucket"] = undefined /*out*/;
            inputs["defaultBucket"] = undefined /*out*/;
            inputs["defaultHostname"] = undefined /*out*/;
            inputs["gcrDomain"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["urlDispatchRules"] = undefined /*out*/;
        }
        super("gcp:appengine/application:Application", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    readonly authDomain?: pulumi.Input<string>;
    readonly codeBucket?: pulumi.Input<string>;
    readonly defaultBucket?: pulumi.Input<string>;
    readonly defaultHostname?: pulumi.Input<string>;
    readonly featureSettings?: pulumi.Input<{ splitHealthChecks?: pulumi.Input<boolean> }>;
    readonly gcrDomain?: pulumi.Input<string>;
    readonly locationId?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly servingStatus?: pulumi.Input<string>;
    readonly urlDispatchRules?: pulumi.Input<pulumi.Input<{ domain?: pulumi.Input<string>, path?: pulumi.Input<string>, service?: pulumi.Input<string> }>[]>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    readonly authDomain?: pulumi.Input<string>;
    readonly featureSettings?: pulumi.Input<{ splitHealthChecks?: pulumi.Input<boolean> }>;
    readonly locationId: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly servingStatus?: pulumi.Input<string>;
}
