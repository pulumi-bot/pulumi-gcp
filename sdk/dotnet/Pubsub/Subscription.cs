// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.PubSub
{
    /// <summary>
    /// A named resource representing the stream of messages from a single,
    /// specific topic, to be delivered to the subscribing application.
    /// 
    /// 
    /// To get more information about Subscription, see:
    /// 
    /// * [API documentation](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions)
    /// * How-to Guides
    ///     * [Managing Subscriptions](https://cloud.google.com/pubsub/docs/admin#managing_subscriptions)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/pubsub_subscription.html.markdown.
    /// </summary>
    public partial class Subscription : Pulumi.CustomResource
    {
        /// <summary>
        /// -
        /// (Optional)
        /// This value is the maximum time after a subscriber receives a message
        /// before the subscriber should acknowledge the message. After message
        /// delivery but before the ack deadline expires and before the message is
        /// acknowledged, it is an outstanding message and will not be delivered
        /// again during that time (on a best-effort basis).
        /// For pull subscriptions, this value is used as the initial value for
        /// the ack deadline. To override this value for a given message, call
        /// subscriptions.modifyAckDeadline with the corresponding ackId if using
        /// pull. The minimum custom deadline you can specify is 10 seconds. The
        /// maximum custom deadline you can specify is 600 seconds (10 minutes).
        /// If this parameter is 0, a default value of 10 seconds is used.
        /// For push delivery, this value is also used to set the request timeout
        /// for the call to the push endpoint.
        /// If the subscriber never acknowledges the message, the Pub/Sub system
        /// will eventually redeliver the message.
        /// </summary>
        [Output("ackDeadlineSeconds")]
        public Output<int> AckDeadlineSeconds { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// A policy that specifies the conditions for dead lettering messages in
        /// this subscription. If dead_letter_policy is not set, dead lettering
        /// is disabled.
        /// The Cloud Pub/Sub service account associated with this subscriptions's
        /// parent project (i.e.,
        /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        /// permission to Acknowledge() messages on this subscription.  Structure is documented below.
        /// </summary>
        [Output("deadLetterPolicy")]
        public Output<Outputs.SubscriptionDeadLetterPolicy?> DeadLetterPolicy { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// A policy that specifies the conditions for this subscription's expiration.
        /// A subscription is considered active as long as any connected subscriber
        /// is successfully consuming messages from the subscription or is issuing
        /// operations on the subscription. If expirationPolicy is not set, a default
        /// policy with ttl of 31 days will be used.  If it is set but ttl is "", the
        /// resource never expires.  The minimum allowed value for expirationPolicy.ttl
        /// is 1 day.  Structure is documented below.
        /// </summary>
        [Output("expirationPolicy")]
        public Output<Outputs.SubscriptionExpirationPolicy> ExpirationPolicy { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// A set of key/value label pairs to assign to this Subscription.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// How long to retain unacknowledged messages in the subscription's
        /// backlog, from the moment a message is published. If
        /// retainAckedMessages is true, then this also configures the retention
        /// of acknowledged messages, and thus configures how far back in time a
        /// subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        /// than 7 days (`"604800s"`) or less than 10 minutes (`"600s"`).
        /// A duration in seconds with up to nine fractional digits, terminated
        /// by 's'. Example: `"600.5s"`.
        /// </summary>
        [Output("messageRetentionDuration")]
        public Output<string?> MessageRetentionDuration { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// Name of the subscription.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// If push delivery is used with this subscription, this field is used to
        /// configure it. An empty pushConfig signifies that the subscriber will
        /// pull and ack messages using API methods.  Structure is documented below.
        /// </summary>
        [Output("pushConfig")]
        public Output<Outputs.SubscriptionPushConfig?> PushConfig { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Indicates whether to retain acknowledged messages. If `true`, then
        /// messages are not expunged from the subscription's backlog, even if
        /// they are acknowledged, until they fall out of the
        /// messageRetentionDuration window.
        /// </summary>
        [Output("retainAckedMessages")]
        public Output<bool?> RetainAckedMessages { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// A reference to a Topic resource.
        /// </summary>
        [Output("topic")]
        public Output<string> Topic { get; private set; } = null!;


        /// <summary>
        /// Create a Subscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subscription(string name, SubscriptionArgs args, CustomResourceOptions? options = null)
            : base("gcp:pubsub/subscription:Subscription", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Subscription(string name, Input<string> id, SubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:pubsub/subscription:Subscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subscription Get(string name, Input<string> id, SubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new Subscription(name, id, state, options);
        }
    }

    public sealed class SubscriptionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// This value is the maximum time after a subscriber receives a message
        /// before the subscriber should acknowledge the message. After message
        /// delivery but before the ack deadline expires and before the message is
        /// acknowledged, it is an outstanding message and will not be delivered
        /// again during that time (on a best-effort basis).
        /// For pull subscriptions, this value is used as the initial value for
        /// the ack deadline. To override this value for a given message, call
        /// subscriptions.modifyAckDeadline with the corresponding ackId if using
        /// pull. The minimum custom deadline you can specify is 10 seconds. The
        /// maximum custom deadline you can specify is 600 seconds (10 minutes).
        /// If this parameter is 0, a default value of 10 seconds is used.
        /// For push delivery, this value is also used to set the request timeout
        /// for the call to the push endpoint.
        /// If the subscriber never acknowledges the message, the Pub/Sub system
        /// will eventually redeliver the message.
        /// </summary>
        [Input("ackDeadlineSeconds")]
        public Input<int>? AckDeadlineSeconds { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// A policy that specifies the conditions for dead lettering messages in
        /// this subscription. If dead_letter_policy is not set, dead lettering
        /// is disabled.
        /// The Cloud Pub/Sub service account associated with this subscriptions's
        /// parent project (i.e.,
        /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        /// permission to Acknowledge() messages on this subscription.  Structure is documented below.
        /// </summary>
        [Input("deadLetterPolicy")]
        public Input<Inputs.SubscriptionDeadLetterPolicyArgs>? DeadLetterPolicy { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// A policy that specifies the conditions for this subscription's expiration.
        /// A subscription is considered active as long as any connected subscriber
        /// is successfully consuming messages from the subscription or is issuing
        /// operations on the subscription. If expirationPolicy is not set, a default
        /// policy with ttl of 31 days will be used.  If it is set but ttl is "", the
        /// resource never expires.  The minimum allowed value for expirationPolicy.ttl
        /// is 1 day.  Structure is documented below.
        /// </summary>
        [Input("expirationPolicy")]
        public Input<Inputs.SubscriptionExpirationPolicyArgs>? ExpirationPolicy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// -
        /// (Optional)
        /// A set of key/value label pairs to assign to this Subscription.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// -
        /// (Optional)
        /// How long to retain unacknowledged messages in the subscription's
        /// backlog, from the moment a message is published. If
        /// retainAckedMessages is true, then this also configures the retention
        /// of acknowledged messages, and thus configures how far back in time a
        /// subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        /// than 7 days (`"604800s"`) or less than 10 minutes (`"600s"`).
        /// A duration in seconds with up to nine fractional digits, terminated
        /// by 's'. Example: `"600.5s"`.
        /// </summary>
        [Input("messageRetentionDuration")]
        public Input<string>? MessageRetentionDuration { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Name of the subscription.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// If push delivery is used with this subscription, this field is used to
        /// configure it. An empty pushConfig signifies that the subscriber will
        /// pull and ack messages using API methods.  Structure is documented below.
        /// </summary>
        [Input("pushConfig")]
        public Input<Inputs.SubscriptionPushConfigArgs>? PushConfig { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Indicates whether to retain acknowledged messages. If `true`, then
        /// messages are not expunged from the subscription's backlog, even if
        /// they are acknowledged, until they fall out of the
        /// messageRetentionDuration window.
        /// </summary>
        [Input("retainAckedMessages")]
        public Input<bool>? RetainAckedMessages { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// A reference to a Topic resource.
        /// </summary>
        [Input("topic", required: true)]
        public Input<string> Topic { get; set; } = null!;

        public SubscriptionArgs()
        {
        }
    }

    public sealed class SubscriptionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// This value is the maximum time after a subscriber receives a message
        /// before the subscriber should acknowledge the message. After message
        /// delivery but before the ack deadline expires and before the message is
        /// acknowledged, it is an outstanding message and will not be delivered
        /// again during that time (on a best-effort basis).
        /// For pull subscriptions, this value is used as the initial value for
        /// the ack deadline. To override this value for a given message, call
        /// subscriptions.modifyAckDeadline with the corresponding ackId if using
        /// pull. The minimum custom deadline you can specify is 10 seconds. The
        /// maximum custom deadline you can specify is 600 seconds (10 minutes).
        /// If this parameter is 0, a default value of 10 seconds is used.
        /// For push delivery, this value is also used to set the request timeout
        /// for the call to the push endpoint.
        /// If the subscriber never acknowledges the message, the Pub/Sub system
        /// will eventually redeliver the message.
        /// </summary>
        [Input("ackDeadlineSeconds")]
        public Input<int>? AckDeadlineSeconds { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// A policy that specifies the conditions for dead lettering messages in
        /// this subscription. If dead_letter_policy is not set, dead lettering
        /// is disabled.
        /// The Cloud Pub/Sub service account associated with this subscriptions's
        /// parent project (i.e.,
        /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        /// permission to Acknowledge() messages on this subscription.  Structure is documented below.
        /// </summary>
        [Input("deadLetterPolicy")]
        public Input<Inputs.SubscriptionDeadLetterPolicyGetArgs>? DeadLetterPolicy { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// A policy that specifies the conditions for this subscription's expiration.
        /// A subscription is considered active as long as any connected subscriber
        /// is successfully consuming messages from the subscription or is issuing
        /// operations on the subscription. If expirationPolicy is not set, a default
        /// policy with ttl of 31 days will be used.  If it is set but ttl is "", the
        /// resource never expires.  The minimum allowed value for expirationPolicy.ttl
        /// is 1 day.  Structure is documented below.
        /// </summary>
        [Input("expirationPolicy")]
        public Input<Inputs.SubscriptionExpirationPolicyGetArgs>? ExpirationPolicy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// -
        /// (Optional)
        /// A set of key/value label pairs to assign to this Subscription.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// -
        /// (Optional)
        /// How long to retain unacknowledged messages in the subscription's
        /// backlog, from the moment a message is published. If
        /// retainAckedMessages is true, then this also configures the retention
        /// of acknowledged messages, and thus configures how far back in time a
        /// subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        /// than 7 days (`"604800s"`) or less than 10 minutes (`"600s"`).
        /// A duration in seconds with up to nine fractional digits, terminated
        /// by 's'. Example: `"600.5s"`.
        /// </summary>
        [Input("messageRetentionDuration")]
        public Input<string>? MessageRetentionDuration { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Name of the subscription.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// If push delivery is used with this subscription, this field is used to
        /// configure it. An empty pushConfig signifies that the subscriber will
        /// pull and ack messages using API methods.  Structure is documented below.
        /// </summary>
        [Input("pushConfig")]
        public Input<Inputs.SubscriptionPushConfigGetArgs>? PushConfig { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Indicates whether to retain acknowledged messages. If `true`, then
        /// messages are not expunged from the subscription's backlog, even if
        /// they are acknowledged, until they fall out of the
        /// messageRetentionDuration window.
        /// </summary>
        [Input("retainAckedMessages")]
        public Input<bool>? RetainAckedMessages { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// A reference to a Topic resource.
        /// </summary>
        [Input("topic")]
        public Input<string>? Topic { get; set; }

        public SubscriptionState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class SubscriptionDeadLetterPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The name of the topic to which dead letter messages should be published.
        /// Format is `projects/{project}/topics/{topic}`.
        /// The Cloud Pub/Sub service\naccount associated with the enclosing subscription's
        /// parent project (i.e.,
        /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        /// permission to Publish() to this topic.
        /// The operation will fail if the topic does not exist.
        /// Users should ensure that there is a subscription attached to this topic
        /// since messages published to a topic with no subscriptions are lost.
        /// </summary>
        [Input("deadLetterTopic")]
        public Input<string>? DeadLetterTopic { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of delivery attempts for any message. The value must be
        /// between 5 and 100.
        /// The number of delivery attempts is defined as 1 + (the sum of number of
        /// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
        /// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
        /// client libraries may automatically extend ack_deadlines.
        /// This field will be honored on a best effort basis.
        /// If this parameter is 0, a default value of 5 is used.
        /// </summary>
        [Input("maxDeliveryAttempts")]
        public Input<int>? MaxDeliveryAttempts { get; set; }

        public SubscriptionDeadLetterPolicyArgs()
        {
        }
    }

    public sealed class SubscriptionDeadLetterPolicyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The name of the topic to which dead letter messages should be published.
        /// Format is `projects/{project}/topics/{topic}`.
        /// The Cloud Pub/Sub service\naccount associated with the enclosing subscription's
        /// parent project (i.e.,
        /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        /// permission to Publish() to this topic.
        /// The operation will fail if the topic does not exist.
        /// Users should ensure that there is a subscription attached to this topic
        /// since messages published to a topic with no subscriptions are lost.
        /// </summary>
        [Input("deadLetterTopic")]
        public Input<string>? DeadLetterTopic { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of delivery attempts for any message. The value must be
        /// between 5 and 100.
        /// The number of delivery attempts is defined as 1 + (the sum of number of
        /// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
        /// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
        /// client libraries may automatically extend ack_deadlines.
        /// This field will be honored on a best effort basis.
        /// If this parameter is 0, a default value of 5 is used.
        /// </summary>
        [Input("maxDeliveryAttempts")]
        public Input<int>? MaxDeliveryAttempts { get; set; }

        public SubscriptionDeadLetterPolicyGetArgs()
        {
        }
    }

    public sealed class SubscriptionExpirationPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Specifies the "time-to-live" duration for an associated resource. The
        /// resource expires if it is not active for a period of ttl.
        /// If ttl is not set, the associated resource never expires.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'.
        /// Example - "3.5s".
        /// </summary>
        [Input("ttl", required: true)]
        public Input<string> Ttl { get; set; } = null!;

        public SubscriptionExpirationPolicyArgs()
        {
        }
    }

    public sealed class SubscriptionExpirationPolicyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Specifies the "time-to-live" duration for an associated resource. The
        /// resource expires if it is not active for a period of ttl.
        /// If ttl is not set, the associated resource never expires.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'.
        /// Example - "3.5s".
        /// </summary>
        [Input("ttl", required: true)]
        public Input<string> Ttl { get; set; } = null!;

        public SubscriptionExpirationPolicyGetArgs()
        {
        }
    }

    public sealed class SubscriptionPushConfigArgs : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// -
        /// (Optional)
        /// Endpoint configuration attributes.
        /// Every endpoint has a set of API supported attributes that can
        /// be used to control different aspects of the message delivery.
        /// The currently supported attribute is x-goog-version, which you
        /// can use to change the format of the pushed message. This
        /// attribute indicates the version of the data expected by
        /// the endpoint. This controls the shape of the pushed message
        /// (i.e., its fields and metadata). The endpoint version is
        /// based on the version of the Pub/Sub API.
        /// If not present during the subscriptions.create call,
        /// it will default to the version of the API used to make
        /// such call. If not present during a subscriptions.modifyPushConfig
        /// call, its value will not be changed. subscriptions.get
        /// calls will always return a valid version, even if the
        /// subscription was created without this attribute.
        /// The possible values for this attribute are:
        /// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
        /// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// -
        /// (Optional)
        /// If specified, Pub/Sub will generate and attach an OIDC JWT token as
        /// an Authorization header in the HTTP request for every pushed message.  Structure is documented below.
        /// </summary>
        [Input("oidcToken")]
        public Input<SubscriptionPushConfigOidcTokenArgs>? OidcToken { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// A URL locating the endpoint to which messages should be pushed.
        /// For example, a Webhook endpoint might use
        /// "https://example.com/push".
        /// </summary>
        [Input("pushEndpoint", required: true)]
        public Input<string> PushEndpoint { get; set; } = null!;

        public SubscriptionPushConfigArgs()
        {
        }
    }

    public sealed class SubscriptionPushConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// -
        /// (Optional)
        /// Endpoint configuration attributes.
        /// Every endpoint has a set of API supported attributes that can
        /// be used to control different aspects of the message delivery.
        /// The currently supported attribute is x-goog-version, which you
        /// can use to change the format of the pushed message. This
        /// attribute indicates the version of the data expected by
        /// the endpoint. This controls the shape of the pushed message
        /// (i.e., its fields and metadata). The endpoint version is
        /// based on the version of the Pub/Sub API.
        /// If not present during the subscriptions.create call,
        /// it will default to the version of the API used to make
        /// such call. If not present during a subscriptions.modifyPushConfig
        /// call, its value will not be changed. subscriptions.get
        /// calls will always return a valid version, even if the
        /// subscription was created without this attribute.
        /// The possible values for this attribute are:
        /// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
        /// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// -
        /// (Optional)
        /// If specified, Pub/Sub will generate and attach an OIDC JWT token as
        /// an Authorization header in the HTTP request for every pushed message.  Structure is documented below.
        /// </summary>
        [Input("oidcToken")]
        public Input<SubscriptionPushConfigOidcTokenGetArgs>? OidcToken { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// A URL locating the endpoint to which messages should be pushed.
        /// For example, a Webhook endpoint might use
        /// "https://example.com/push".
        /// </summary>
        [Input("pushEndpoint", required: true)]
        public Input<string> PushEndpoint { get; set; } = null!;

        public SubscriptionPushConfigGetArgs()
        {
        }
    }

    public sealed class SubscriptionPushConfigOidcTokenArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Audience to be used when generating OIDC token. The audience claim
        /// identifies the recipients that the JWT is intended for. The audience
        /// value is a single case-sensitive string. Having multiple values (array)
        /// for the audience field is not supported. More info about the OIDC JWT
        /// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
        /// Note: if not specified, the Push endpoint URL will be used.
        /// </summary>
        [Input("audience")]
        public Input<string>? Audience { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Service account email to be used for generating the OIDC token.
        /// The caller (for subscriptions.create, subscriptions.patch, and
        /// subscriptions.modifyPushConfig RPCs) must have the
        /// iam.serviceAccounts.actAs permission for the service account.
        /// </summary>
        [Input("serviceAccountEmail", required: true)]
        public Input<string> ServiceAccountEmail { get; set; } = null!;

        public SubscriptionPushConfigOidcTokenArgs()
        {
        }
    }

    public sealed class SubscriptionPushConfigOidcTokenGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Audience to be used when generating OIDC token. The audience claim
        /// identifies the recipients that the JWT is intended for. The audience
        /// value is a single case-sensitive string. Having multiple values (array)
        /// for the audience field is not supported. More info about the OIDC JWT
        /// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
        /// Note: if not specified, the Push endpoint URL will be used.
        /// </summary>
        [Input("audience")]
        public Input<string>? Audience { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Service account email to be used for generating the OIDC token.
        /// The caller (for subscriptions.create, subscriptions.patch, and
        /// subscriptions.modifyPushConfig RPCs) must have the
        /// iam.serviceAccounts.actAs permission for the service account.
        /// </summary>
        [Input("serviceAccountEmail", required: true)]
        public Input<string> ServiceAccountEmail { get; set; } = null!;

        public SubscriptionPushConfigOidcTokenGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class SubscriptionDeadLetterPolicy
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The name of the topic to which dead letter messages should be published.
        /// Format is `projects/{project}/topics/{topic}`.
        /// The Cloud Pub/Sub service\naccount associated with the enclosing subscription's
        /// parent project (i.e.,
        /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        /// permission to Publish() to this topic.
        /// The operation will fail if the topic does not exist.
        /// Users should ensure that there is a subscription attached to this topic
        /// since messages published to a topic with no subscriptions are lost.
        /// </summary>
        public readonly string? DeadLetterTopic;
        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of delivery attempts for any message. The value must be
        /// between 5 and 100.
        /// The number of delivery attempts is defined as 1 + (the sum of number of
        /// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
        /// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
        /// client libraries may automatically extend ack_deadlines.
        /// This field will be honored on a best effort basis.
        /// If this parameter is 0, a default value of 5 is used.
        /// </summary>
        public readonly int? MaxDeliveryAttempts;

        [OutputConstructor]
        private SubscriptionDeadLetterPolicy(
            string? deadLetterTopic,
            int? maxDeliveryAttempts)
        {
            DeadLetterTopic = deadLetterTopic;
            MaxDeliveryAttempts = maxDeliveryAttempts;
        }
    }

    [OutputType]
    public sealed class SubscriptionExpirationPolicy
    {
        /// <summary>
        /// -
        /// (Required)
        /// Specifies the "time-to-live" duration for an associated resource. The
        /// resource expires if it is not active for a period of ttl.
        /// If ttl is not set, the associated resource never expires.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'.
        /// Example - "3.5s".
        /// </summary>
        public readonly string Ttl;

        [OutputConstructor]
        private SubscriptionExpirationPolicy(string ttl)
        {
            Ttl = ttl;
        }
    }

    [OutputType]
    public sealed class SubscriptionPushConfig
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Endpoint configuration attributes.
        /// Every endpoint has a set of API supported attributes that can
        /// be used to control different aspects of the message delivery.
        /// The currently supported attribute is x-goog-version, which you
        /// can use to change the format of the pushed message. This
        /// attribute indicates the version of the data expected by
        /// the endpoint. This controls the shape of the pushed message
        /// (i.e., its fields and metadata). The endpoint version is
        /// based on the version of the Pub/Sub API.
        /// If not present during the subscriptions.create call,
        /// it will default to the version of the API used to make
        /// such call. If not present during a subscriptions.modifyPushConfig
        /// call, its value will not be changed. subscriptions.get
        /// calls will always return a valid version, even if the
        /// subscription was created without this attribute.
        /// The possible values for this attribute are:
        /// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
        /// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Attributes;
        /// <summary>
        /// -
        /// (Optional)
        /// If specified, Pub/Sub will generate and attach an OIDC JWT token as
        /// an Authorization header in the HTTP request for every pushed message.  Structure is documented below.
        /// </summary>
        public readonly SubscriptionPushConfigOidcToken? OidcToken;
        /// <summary>
        /// -
        /// (Required)
        /// A URL locating the endpoint to which messages should be pushed.
        /// For example, a Webhook endpoint might use
        /// "https://example.com/push".
        /// </summary>
        public readonly string PushEndpoint;

        [OutputConstructor]
        private SubscriptionPushConfig(
            ImmutableDictionary<string, string>? attributes,
            SubscriptionPushConfigOidcToken? oidcToken,
            string pushEndpoint)
        {
            Attributes = attributes;
            OidcToken = oidcToken;
            PushEndpoint = pushEndpoint;
        }
    }

    [OutputType]
    public sealed class SubscriptionPushConfigOidcToken
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Audience to be used when generating OIDC token. The audience claim
        /// identifies the recipients that the JWT is intended for. The audience
        /// value is a single case-sensitive string. Having multiple values (array)
        /// for the audience field is not supported. More info about the OIDC JWT
        /// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
        /// Note: if not specified, the Push endpoint URL will be used.
        /// </summary>
        public readonly string? Audience;
        /// <summary>
        /// -
        /// (Required)
        /// Service account email to be used for generating the OIDC token.
        /// The caller (for subscriptions.create, subscriptions.patch, and
        /// subscriptions.modifyPushConfig RPCs) must have the
        /// iam.serviceAccounts.actAs permission for the service account.
        /// </summary>
        public readonly string ServiceAccountEmail;

        [OutputConstructor]
        private SubscriptionPushConfigOidcToken(
            string? audience,
            string serviceAccountEmail)
        {
            Audience = audience;
            ServiceAccountEmail = serviceAccountEmail;
        }
    }
    }
}
