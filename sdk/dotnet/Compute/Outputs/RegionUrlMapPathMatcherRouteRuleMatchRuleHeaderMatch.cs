// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The value should exactly match contents of exactMatch. Only one of exactMatch,
        /// prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
        /// </summary>
        public readonly string? ExactMatch;
        /// <summary>
        /// -
        /// (Required)
        /// The name of the header.
        /// </summary>
        public readonly string HeaderName;
        /// <summary>
        /// -
        /// (Optional)
        /// If set to false, the headerMatch is considered a match if the match criteria
        /// above are met. If set to true, the headerMatch is considered a match if the
        /// match criteria above are NOT met. Defaults to false.
        /// </summary>
        public readonly bool? InvertMatch;
        /// <summary>
        /// -
        /// (Optional)
        /// For satifying the matchRule condition, the request's path must begin with the
        /// specified prefixMatch. prefixMatch must begin with a /. The value must be
        /// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
        /// regexMatch must be specified.
        /// </summary>
        public readonly string? PrefixMatch;
        /// <summary>
        /// -
        /// (Optional)
        /// A header with the contents of headerName must exist. The match takes place
        /// whether or not the request's header has a value or not. Only one of exactMatch,
        /// prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
        /// </summary>
        public readonly bool? PresentMatch;
        /// <summary>
        /// -
        /// (Optional)
        /// The header value must be an integer and its value must be in the range specified
        /// in rangeMatch. If the header does not contain an integer, number or is empty,
        /// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
        /// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
        /// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        /// must be set.  Structure is documented below.
        /// </summary>
        public readonly Outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch? RangeMatch;
        /// <summary>
        /// -
        /// (Optional)
        /// For satifying the matchRule condition, the path of the request must satisfy the
        /// regular expression specified in regexMatch after removing any query parameters
        /// and anchor supplied with the original URL. For regular expression grammar please
        /// see en.cppreference.com/w/cpp/regex/ecmascript  Only one of prefixMatch,
        /// fullPathMatch or regexMatch must be specified.
        /// </summary>
        public readonly string? RegexMatch;
        /// <summary>
        /// -
        /// (Optional)
        /// The value of the header must end with the contents of suffixMatch. Only one of
        /// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
        /// must be set.
        /// </summary>
        public readonly string? SuffixMatch;

        [OutputConstructor]
        private RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch(
            string? exactMatch,

            string headerName,

            bool? invertMatch,

            string? prefixMatch,

            bool? presentMatch,

            Outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch? rangeMatch,

            string? regexMatch,

            string? suffixMatch)
        {
            ExactMatch = exactMatch;
            HeaderName = headerName;
            InvertMatch = invertMatch;
            PrefixMatch = prefixMatch;
            PresentMatch = presentMatch;
            RangeMatch = rangeMatch;
            RegexMatch = regexMatch;
            SuffixMatch = suffixMatch;
        }
    }
}
