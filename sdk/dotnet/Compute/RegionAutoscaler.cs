// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Represents an Autoscaler resource.
    /// 
    /// Autoscalers allow you to automatically scale virtual machine instances in
    /// managed instance groups according to an autoscaling policy that you
    /// define.
    /// 
    /// 
    /// To get more information about RegionAutoscaler, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionAutoscalers)
    /// * How-to Guides
    ///     * [Autoscaling Groups of Instances](https://cloud.google.com/compute/docs/autoscaler/)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_region_autoscaler.html.markdown.
    /// </summary>
    public partial class RegionAutoscaler : Pulumi.CustomResource
    {
        /// <summary>
        /// -
        /// (Required)
        /// The configuration parameters for the autoscaling algorithm. You can
        /// define one or more of the policies for an autoscaler: cpuUtilization,
        /// customMetricUtilizations, and loadBalancingUtilization.
        /// If none of these are specified, the default will be to autoscale based
        /// on cpuUtilization to 0.6 or 60%.  Structure is documented below.
        /// </summary>
        [Output("autoscalingPolicy")]
        public Output<Outputs.RegionAutoscalerAutoscalingPolicy> AutoscalingPolicy { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// URL of the region where the instance group resides.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;


        /// <summary>
        /// Create a RegionAutoscaler resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegionAutoscaler(string name, RegionAutoscalerArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/regionAutoscaler:RegionAutoscaler", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private RegionAutoscaler(string name, Input<string> id, RegionAutoscalerState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionAutoscaler:RegionAutoscaler", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegionAutoscaler resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegionAutoscaler Get(string name, Input<string> id, RegionAutoscalerState? state = null, CustomResourceOptions? options = null)
        {
            return new RegionAutoscaler(name, id, state, options);
        }
    }

    public sealed class RegionAutoscalerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// The configuration parameters for the autoscaling algorithm. You can
        /// define one or more of the policies for an autoscaler: cpuUtilization,
        /// customMetricUtilizations, and loadBalancingUtilization.
        /// If none of these are specified, the default will be to autoscale based
        /// on cpuUtilization to 0.6 or 60%.  Structure is documented below.
        /// </summary>
        [Input("autoscalingPolicy", required: true)]
        public Input<Inputs.RegionAutoscalerAutoscalingPolicyArgs> AutoscalingPolicy { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// URL of the region where the instance group resides.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        public RegionAutoscalerArgs()
        {
        }
    }

    public sealed class RegionAutoscalerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// The configuration parameters for the autoscaling algorithm. You can
        /// define one or more of the policies for an autoscaler: cpuUtilization,
        /// customMetricUtilizations, and loadBalancingUtilization.
        /// If none of these are specified, the default will be to autoscale based
        /// on cpuUtilization to 0.6 or 60%.  Structure is documented below.
        /// </summary>
        [Input("autoscalingPolicy")]
        public Input<Inputs.RegionAutoscalerAutoscalingPolicyGetArgs>? AutoscalingPolicy { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// URL of the region where the instance group resides.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        public RegionAutoscalerState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class RegionAutoscalerAutoscalingPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The number of seconds that the autoscaler should wait before it
        /// starts collecting information from a new instance. This prevents
        /// the autoscaler from collecting information when the instance is
        /// initializing, during which the collected usage would not be
        /// reliable. The default time autoscaler waits is 60 seconds.
        /// Virtual machine initialization times might vary because of
        /// numerous factors. We recommend that you test how long an
        /// instance may take to initialize. To do this, create an instance
        /// and time the startup process.
        /// </summary>
        [Input("cooldownPeriod")]
        public Input<int>? CooldownPeriod { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Defines the CPU utilization policy that allows the autoscaler to
        /// scale based on the average CPU utilization of a managed instance
        /// group.  Structure is documented below.
        /// </summary>
        [Input("cpuUtilization")]
        public Input<RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs>? CpuUtilization { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
        /// </summary>
        [Input("loadBalancingUtilization")]
        public Input<RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs>? LoadBalancingUtilization { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The maximum number of instances that the autoscaler can scale up
        /// to. This is required when creating or updating an autoscaler. The
        /// maximum number of replicas should not be lower than minimal number
        /// of replicas.
        /// </summary>
        [Input("maxReplicas", required: true)]
        public Input<int> MaxReplicas { get; set; } = null!;

        [Input("metrics")]
        private InputList<RegionAutoscalerAutoscalingPolicyMetricsArgs>? _metrics;

        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
        /// </summary>
        public InputList<RegionAutoscalerAutoscalingPolicyMetricsArgs> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<RegionAutoscalerAutoscalingPolicyMetricsArgs>());
            set => _metrics = value;
        }

        /// <summary>
        /// -
        /// (Required)
        /// The minimum number of replicas that the autoscaler can scale down
        /// to. This cannot be less than 0. If not provided, autoscaler will
        /// choose a default value depending on maximum number of instances
        /// allowed.
        /// </summary>
        [Input("minReplicas", required: true)]
        public Input<int> MinReplicas { get; set; } = null!;

        public RegionAutoscalerAutoscalingPolicyArgs()
        {
        }
    }

    public sealed class RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        public RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs()
        {
        }
    }

    public sealed class RegionAutoscalerAutoscalingPolicyCpuUtilizationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        public RegionAutoscalerAutoscalingPolicyCpuUtilizationGetArgs()
        {
        }
    }

    public sealed class RegionAutoscalerAutoscalingPolicyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The number of seconds that the autoscaler should wait before it
        /// starts collecting information from a new instance. This prevents
        /// the autoscaler from collecting information when the instance is
        /// initializing, during which the collected usage would not be
        /// reliable. The default time autoscaler waits is 60 seconds.
        /// Virtual machine initialization times might vary because of
        /// numerous factors. We recommend that you test how long an
        /// instance may take to initialize. To do this, create an instance
        /// and time the startup process.
        /// </summary>
        [Input("cooldownPeriod")]
        public Input<int>? CooldownPeriod { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Defines the CPU utilization policy that allows the autoscaler to
        /// scale based on the average CPU utilization of a managed instance
        /// group.  Structure is documented below.
        /// </summary>
        [Input("cpuUtilization")]
        public Input<RegionAutoscalerAutoscalingPolicyCpuUtilizationGetArgs>? CpuUtilization { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
        /// </summary>
        [Input("loadBalancingUtilization")]
        public Input<RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationGetArgs>? LoadBalancingUtilization { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The maximum number of instances that the autoscaler can scale up
        /// to. This is required when creating or updating an autoscaler. The
        /// maximum number of replicas should not be lower than minimal number
        /// of replicas.
        /// </summary>
        [Input("maxReplicas", required: true)]
        public Input<int> MaxReplicas { get; set; } = null!;

        [Input("metrics")]
        private InputList<RegionAutoscalerAutoscalingPolicyMetricsGetArgs>? _metrics;

        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
        /// </summary>
        public InputList<RegionAutoscalerAutoscalingPolicyMetricsGetArgs> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<RegionAutoscalerAutoscalingPolicyMetricsGetArgs>());
            set => _metrics = value;
        }

        /// <summary>
        /// -
        /// (Required)
        /// The minimum number of replicas that the autoscaler can scale down
        /// to. This cannot be less than 0. If not provided, autoscaler will
        /// choose a default value depending on maximum number of instances
        /// allowed.
        /// </summary>
        [Input("minReplicas", required: true)]
        public Input<int> MinReplicas { get; set; } = null!;

        public RegionAutoscalerAutoscalingPolicyGetArgs()
        {
        }
    }

    public sealed class RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        public RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs()
        {
        }
    }

    public sealed class RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        public RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationGetArgs()
        {
        }
    }

    public sealed class RegionAutoscalerAutoscalingPolicyMetricsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// A filter string to be used as the filter string for
        /// a Stackdriver Monitoring TimeSeries.list API call.
        /// This filter is used to select a specific TimeSeries for
        /// the purpose of autoscaling and to determine whether the metric
        /// is exporting per-instance or per-group data.
        /// You can only use the AND operator for joining selectors.
        /// You can only use direct equality comparison operator (=) without
        /// any functions for each selector.
        /// You can specify the metric in both the filter string and in the
        /// metric field. However, if specified in both places, the metric must
        /// be identical.
        /// The monitored resource type determines what kind of values are
        /// expected for the metric. If it is a gce_instance, the autoscaler
        /// expects the metric to include a separate TimeSeries for each
        /// instance in a group. In such a case, you cannot filter on resource
        /// labels.
        /// If the resource type is any other value, the autoscaler expects
        /// this metric to contain values that apply to the entire autoscaled
        /// instance group and resource label filtering can be performed to
        /// point autoscaler at the correct TimeSeries to scale upon.
        /// This is called a per-group metric for the purpose of autoscaling.
        /// If not specified, the type defaults to gce_instance.
        /// You should provide a filter that is selective enough to pick just
        /// one TimeSeries for the autoscaled group or for each of the instances
        /// (if you are using gce_instance resource type). If multiple
        /// TimeSeries are returned upon the query execution, the autoscaler
        /// will sum their respective values to obtain its scaling value.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// If scaling is based on a per-group metric value that represents the
        /// total amount of work to be done or resource usage, set this value to
        /// an amount assigned for a single instance of the scaled group.
        /// The autoscaler will keep the number of instances proportional to the
        /// value of this metric, the metric itself should not change value due
        /// to group resizing.
        /// For example, a good metric to use with the target is
        /// `pubsub.googleapis.com/subscription/num_undelivered_messages`
        /// or a custom metric exporting the total number of requests coming to
        /// your instances.
        /// A bad example would be a metric exporting an average or median
        /// latency, since this value can't include a chunk assignable to a
        /// single instance, it could be better used with utilization_target
        /// instead.
        /// </summary>
        [Input("singleInstanceAssignment")]
        public Input<double>? SingleInstanceAssignment { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target")]
        public Input<double>? Target { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Defines how target utilization value is expressed for a
        /// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
        /// or DELTA_PER_MINUTE.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RegionAutoscalerAutoscalingPolicyMetricsArgs()
        {
        }
    }

    public sealed class RegionAutoscalerAutoscalingPolicyMetricsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// A filter string to be used as the filter string for
        /// a Stackdriver Monitoring TimeSeries.list API call.
        /// This filter is used to select a specific TimeSeries for
        /// the purpose of autoscaling and to determine whether the metric
        /// is exporting per-instance or per-group data.
        /// You can only use the AND operator for joining selectors.
        /// You can only use direct equality comparison operator (=) without
        /// any functions for each selector.
        /// You can specify the metric in both the filter string and in the
        /// metric field. However, if specified in both places, the metric must
        /// be identical.
        /// The monitored resource type determines what kind of values are
        /// expected for the metric. If it is a gce_instance, the autoscaler
        /// expects the metric to include a separate TimeSeries for each
        /// instance in a group. In such a case, you cannot filter on resource
        /// labels.
        /// If the resource type is any other value, the autoscaler expects
        /// this metric to contain values that apply to the entire autoscaled
        /// instance group and resource label filtering can be performed to
        /// point autoscaler at the correct TimeSeries to scale upon.
        /// This is called a per-group metric for the purpose of autoscaling.
        /// If not specified, the type defaults to gce_instance.
        /// You should provide a filter that is selective enough to pick just
        /// one TimeSeries for the autoscaled group or for each of the instances
        /// (if you are using gce_instance resource type). If multiple
        /// TimeSeries are returned upon the query execution, the autoscaler
        /// will sum their respective values to obtain its scaling value.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// If scaling is based on a per-group metric value that represents the
        /// total amount of work to be done or resource usage, set this value to
        /// an amount assigned for a single instance of the scaled group.
        /// The autoscaler will keep the number of instances proportional to the
        /// value of this metric, the metric itself should not change value due
        /// to group resizing.
        /// For example, a good metric to use with the target is
        /// `pubsub.googleapis.com/subscription/num_undelivered_messages`
        /// or a custom metric exporting the total number of requests coming to
        /// your instances.
        /// A bad example would be a metric exporting an average or median
        /// latency, since this value can't include a chunk assignable to a
        /// single instance, it could be better used with utilization_target
        /// instead.
        /// </summary>
        [Input("singleInstanceAssignment")]
        public Input<double>? SingleInstanceAssignment { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target")]
        public Input<double>? Target { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Defines how target utilization value is expressed for a
        /// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
        /// or DELTA_PER_MINUTE.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RegionAutoscalerAutoscalingPolicyMetricsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class RegionAutoscalerAutoscalingPolicy
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The number of seconds that the autoscaler should wait before it
        /// starts collecting information from a new instance. This prevents
        /// the autoscaler from collecting information when the instance is
        /// initializing, during which the collected usage would not be
        /// reliable. The default time autoscaler waits is 60 seconds.
        /// Virtual machine initialization times might vary because of
        /// numerous factors. We recommend that you test how long an
        /// instance may take to initialize. To do this, create an instance
        /// and time the startup process.
        /// </summary>
        public readonly int? CooldownPeriod;
        /// <summary>
        /// -
        /// (Optional)
        /// Defines the CPU utilization policy that allows the autoscaler to
        /// scale based on the average CPU utilization of a managed instance
        /// group.  Structure is documented below.
        /// </summary>
        public readonly RegionAutoscalerAutoscalingPolicyCpuUtilization CpuUtilization;
        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
        /// </summary>
        public readonly RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization? LoadBalancingUtilization;
        /// <summary>
        /// -
        /// (Required)
        /// The maximum number of instances that the autoscaler can scale up
        /// to. This is required when creating or updating an autoscaler. The
        /// maximum number of replicas should not be lower than minimal number
        /// of replicas.
        /// </summary>
        public readonly int MaxReplicas;
        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<RegionAutoscalerAutoscalingPolicyMetrics> Metrics;
        /// <summary>
        /// -
        /// (Required)
        /// The minimum number of replicas that the autoscaler can scale down
        /// to. This cannot be less than 0. If not provided, autoscaler will
        /// choose a default value depending on maximum number of instances
        /// allowed.
        /// </summary>
        public readonly int MinReplicas;

        [OutputConstructor]
        private RegionAutoscalerAutoscalingPolicy(
            int? cooldownPeriod,
            RegionAutoscalerAutoscalingPolicyCpuUtilization cpuUtilization,
            RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization? loadBalancingUtilization,
            int maxReplicas,
            ImmutableArray<RegionAutoscalerAutoscalingPolicyMetrics> metrics,
            int minReplicas)
        {
            CooldownPeriod = cooldownPeriod;
            CpuUtilization = cpuUtilization;
            LoadBalancingUtilization = loadBalancingUtilization;
            MaxReplicas = maxReplicas;
            Metrics = metrics;
            MinReplicas = minReplicas;
        }
    }

    [OutputType]
    public sealed class RegionAutoscalerAutoscalingPolicyCpuUtilization
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        public readonly double Target;

        [OutputConstructor]
        private RegionAutoscalerAutoscalingPolicyCpuUtilization(double target)
        {
            Target = target;
        }
    }

    [OutputType]
    public sealed class RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        public readonly double Target;

        [OutputConstructor]
        private RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization(double target)
        {
            Target = target;
        }
    }

    [OutputType]
    public sealed class RegionAutoscalerAutoscalingPolicyMetrics
    {
        /// <summary>
        /// -
        /// (Optional)
        /// A filter string to be used as the filter string for
        /// a Stackdriver Monitoring TimeSeries.list API call.
        /// This filter is used to select a specific TimeSeries for
        /// the purpose of autoscaling and to determine whether the metric
        /// is exporting per-instance or per-group data.
        /// You can only use the AND operator for joining selectors.
        /// You can only use direct equality comparison operator (=) without
        /// any functions for each selector.
        /// You can specify the metric in both the filter string and in the
        /// metric field. However, if specified in both places, the metric must
        /// be identical.
        /// The monitored resource type determines what kind of values are
        /// expected for the metric. If it is a gce_instance, the autoscaler
        /// expects the metric to include a separate TimeSeries for each
        /// instance in a group. In such a case, you cannot filter on resource
        /// labels.
        /// If the resource type is any other value, the autoscaler expects
        /// this metric to contain values that apply to the entire autoscaled
        /// instance group and resource label filtering can be performed to
        /// point autoscaler at the correct TimeSeries to scale upon.
        /// This is called a per-group metric for the purpose of autoscaling.
        /// If not specified, the type defaults to gce_instance.
        /// You should provide a filter that is selective enough to pick just
        /// one TimeSeries for the autoscaled group or for each of the instances
        /// (if you are using gce_instance resource type). If multiple
        /// TimeSeries are returned upon the query execution, the autoscaler
        /// will sum their respective values to obtain its scaling value.
        /// </summary>
        public readonly string? Filter;
        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// -
        /// (Optional)
        /// If scaling is based on a per-group metric value that represents the
        /// total amount of work to be done or resource usage, set this value to
        /// an amount assigned for a single instance of the scaled group.
        /// The autoscaler will keep the number of instances proportional to the
        /// value of this metric, the metric itself should not change value due
        /// to group resizing.
        /// For example, a good metric to use with the target is
        /// `pubsub.googleapis.com/subscription/num_undelivered_messages`
        /// or a custom metric exporting the total number of requests coming to
        /// your instances.
        /// A bad example would be a metric exporting an average or median
        /// latency, since this value can't include a chunk assignable to a
        /// single instance, it could be better used with utilization_target
        /// instead.
        /// </summary>
        public readonly double? SingleInstanceAssignment;
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        public readonly double? Target;
        /// <summary>
        /// -
        /// (Optional)
        /// Defines how target utilization value is expressed for a
        /// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
        /// or DELTA_PER_MINUTE.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private RegionAutoscalerAutoscalingPolicyMetrics(
            string? filter,
            string name,
            double? singleInstanceAssignment,
            double? target,
            string? type)
        {
            Filter = filter;
            Name = name;
            SingleInstanceAssignment = singleInstanceAssignment;
            Target = target;
            Type = type;
        }
    }
    }
}
