// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// A Region Backend Service defines a regionally-scoped group of virtual
    /// machines that will serve traffic for load balancing.
    /// 
    /// 
    /// To get more information about RegionBackendService, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/latest/regionBackendServices)
    /// * How-to Guides
    ///     * [Internal TCP/UDP Load Balancing](https://cloud.google.com/compute/docs/load-balancing/internal/)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_region_backend_service.html.markdown.
    /// </summary>
    public partial class RegionBackendService : Pulumi.CustomResource
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Lifetime of cookies in seconds if session_affinity is
        /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        /// only until the end of the browser session (or equivalent). The
        /// maximum allowed value for TTL is one day.
        /// When the load balancing scheme is INTERNAL, this field is not used.
        /// </summary>
        [Output("affinityCookieTtlSec")]
        public Output<int?> AffinityCookieTtlSec { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The set of backends that serve this RegionBackendService.  Structure is documented below.
        /// </summary>
        [Output("backends")]
        public Output<ImmutableArray<Outputs.RegionBackendServiceBackends>> Backends { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Settings controlling the volume of connections to a backend service. This field
        /// is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
        /// and the `protocol` is set to HTTP, HTTPS, or HTTP2.  Structure is documented below.
        /// </summary>
        [Output("circuitBreakers")]
        public Output<Outputs.RegionBackendServiceCircuitBreakers?> CircuitBreakers { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Time for which instance will be drained (not accept new
        /// connections, but still work to finish started).
        /// </summary>
        [Output("connectionDrainingTimeoutSec")]
        public Output<int?> ConnectionDrainingTimeoutSec { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Consistent Hash-based load balancing can be used to provide soft session
        /// affinity based on HTTP headers, cookies or other properties. This load balancing
        /// policy is applicable only for HTTP connections. The affinity to a particular
        /// destination host will be lost when one or more hosts are added/removed from the
        /// destination service. This field specifies parameters that control consistent
        /// hashing.
        /// This field only applies when all of the following are true -
        /// </summary>
        [Output("consistentHash")]
        public Output<Outputs.RegionBackendServiceConsistentHash?> ConsistentHash { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Policy for failovers.  Structure is documented below.
        /// </summary>
        [Output("failoverPolicy")]
        public Output<Outputs.RegionBackendServiceFailoverPolicy?> FailoverPolicy { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic
        /// locking.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// The set of URLs to HealthCheck resources for health checking
        /// this RegionBackendService. Currently at most one health
        /// check can be specified, and a health check is required.
        /// </summary>
        [Output("healthChecks")]
        public Output<string> HealthChecks { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Indicates what kind of load balancing this regional backend service
        /// will be used for. A backend service created for one type of load
        /// balancing cannot be used with the other(s). Must be `INTERNAL` or
        /// `INTERNAL_MANAGED`. Defaults to `INTERNAL`.
        /// </summary>
        [Output("loadBalancingScheme")]
        public Output<string?> LoadBalancingScheme { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The load balancing algorithm used within the scope of the locality.
        /// The possible values are -
        /// ROUND_ROBIN - This is a simple policy in which each healthy backend
        /// is selected in round robin order.
        /// LEAST_REQUEST - An O(1) algorithm which selects two random healthy
        /// hosts and picks the host which has fewer active requests.
        /// RING_HASH - The ring/modulo hash load balancer implements consistent
        /// hashing to backends. The algorithm has the property that the
        /// addition/removal of a host from a set of N hosts only affects
        /// 1/N of the requests.
        /// RANDOM - The load balancer selects a random healthy host.
        /// ORIGINAL_DESTINATION - Backend host is selected based on the client
        /// connection metadata, i.e., connections are opened
        /// to the same address as the destination address of
        /// the incoming connection before the connection
        /// was redirected to the load balancer.
        /// MAGLEV - used as a drop in replacement for the ring hash load balancer.
        /// Maglev is not as stable as ring hash but has faster table lookup
        /// build times and host selection times. For more information about
        /// Maglev, refer to https://ai.google/research/pubs/pub44824
        /// This field is applicable only when the `load_balancing_scheme` is set to
        /// INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// </summary>
        [Output("localityLbPolicy")]
        public Output<string?> LocalityLbPolicy { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// This field denotes the logging options for the load balancer traffic served by this backend service.
        /// If logging is enabled, logs will be exported to Stackdriver.  Structure is documented below.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.RegionBackendServiceLogConfig?> LogConfig { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Name of the cookie.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The URL of the network to which this backend service belongs.
        /// This field can only be specified when the load balancing scheme is set to INTERNAL.
        /// </summary>
        [Output("network")]
        public Output<string?> Network { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
        /// This field is applicable only when the `load_balancing_scheme` is set
        /// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.  Structure is documented below.
        /// </summary>
        [Output("outlierDetection")]
        public Output<Outputs.RegionBackendServiceOutlierDetection?> OutlierDetection { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The protocol this RegionBackendService uses to communicate with backends.
        /// Possible values are HTTP, HTTPS, HTTP2, SSL, TCP, and UDP. The default is
        /// HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
        /// types and may result in errors if used with the GA API.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The Region in which the created backend service should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Type of session affinity to use. The default is NONE. Session affinity is
        /// not applicable if the protocol is UDP.
        /// </summary>
        [Output("sessionAffinity")]
        public Output<string> SessionAffinity { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// How many seconds to wait for the backend before considering it a
        /// failed request. Default is 30 seconds. Valid range is [1, 86400].
        /// </summary>
        [Output("timeoutSec")]
        public Output<int> TimeoutSec { get; private set; } = null!;


        /// <summary>
        /// Create a RegionBackendService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegionBackendService(string name, RegionBackendServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/regionBackendService:RegionBackendService", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private RegionBackendService(string name, Input<string> id, RegionBackendServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionBackendService:RegionBackendService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegionBackendService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegionBackendService Get(string name, Input<string> id, RegionBackendServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new RegionBackendService(name, id, state, options);
        }
    }

    public sealed class RegionBackendServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Lifetime of cookies in seconds if session_affinity is
        /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        /// only until the end of the browser session (or equivalent). The
        /// maximum allowed value for TTL is one day.
        /// When the load balancing scheme is INTERNAL, this field is not used.
        /// </summary>
        [Input("affinityCookieTtlSec")]
        public Input<int>? AffinityCookieTtlSec { get; set; }

        [Input("backends")]
        private InputList<Inputs.RegionBackendServiceBackendsArgs>? _backends;

        /// <summary>
        /// -
        /// (Optional)
        /// The set of backends that serve this RegionBackendService.  Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionBackendServiceBackendsArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.RegionBackendServiceBackendsArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// -
        /// (Optional)
        /// Settings controlling the volume of connections to a backend service. This field
        /// is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
        /// and the `protocol` is set to HTTP, HTTPS, or HTTP2.  Structure is documented below.
        /// </summary>
        [Input("circuitBreakers")]
        public Input<Inputs.RegionBackendServiceCircuitBreakersArgs>? CircuitBreakers { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Time for which instance will be drained (not accept new
        /// connections, but still work to finish started).
        /// </summary>
        [Input("connectionDrainingTimeoutSec")]
        public Input<int>? ConnectionDrainingTimeoutSec { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Consistent Hash-based load balancing can be used to provide soft session
        /// affinity based on HTTP headers, cookies or other properties. This load balancing
        /// policy is applicable only for HTTP connections. The affinity to a particular
        /// destination host will be lost when one or more hosts are added/removed from the
        /// destination service. This field specifies parameters that control consistent
        /// hashing.
        /// This field only applies when all of the following are true -
        /// </summary>
        [Input("consistentHash")]
        public Input<Inputs.RegionBackendServiceConsistentHashArgs>? ConsistentHash { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Policy for failovers.  Structure is documented below.
        /// </summary>
        [Input("failoverPolicy")]
        public Input<Inputs.RegionBackendServiceFailoverPolicyArgs>? FailoverPolicy { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The set of URLs to HealthCheck resources for health checking
        /// this RegionBackendService. Currently at most one health
        /// check can be specified, and a health check is required.
        /// </summary>
        [Input("healthChecks", required: true)]
        public Input<string> HealthChecks { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Indicates what kind of load balancing this regional backend service
        /// will be used for. A backend service created for one type of load
        /// balancing cannot be used with the other(s). Must be `INTERNAL` or
        /// `INTERNAL_MANAGED`. Defaults to `INTERNAL`.
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The load balancing algorithm used within the scope of the locality.
        /// The possible values are -
        /// ROUND_ROBIN - This is a simple policy in which each healthy backend
        /// is selected in round robin order.
        /// LEAST_REQUEST - An O(1) algorithm which selects two random healthy
        /// hosts and picks the host which has fewer active requests.
        /// RING_HASH - The ring/modulo hash load balancer implements consistent
        /// hashing to backends. The algorithm has the property that the
        /// addition/removal of a host from a set of N hosts only affects
        /// 1/N of the requests.
        /// RANDOM - The load balancer selects a random healthy host.
        /// ORIGINAL_DESTINATION - Backend host is selected based on the client
        /// connection metadata, i.e., connections are opened
        /// to the same address as the destination address of
        /// the incoming connection before the connection
        /// was redirected to the load balancer.
        /// MAGLEV - used as a drop in replacement for the ring hash load balancer.
        /// Maglev is not as stable as ring hash but has faster table lookup
        /// build times and host selection times. For more information about
        /// Maglev, refer to https://ai.google/research/pubs/pub44824
        /// This field is applicable only when the `load_balancing_scheme` is set to
        /// INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// </summary>
        [Input("localityLbPolicy")]
        public Input<string>? LocalityLbPolicy { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This field denotes the logging options for the load balancer traffic served by this backend service.
        /// If logging is enabled, logs will be exported to Stackdriver.  Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.RegionBackendServiceLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Name of the cookie.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The URL of the network to which this backend service belongs.
        /// This field can only be specified when the load balancing scheme is set to INTERNAL.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
        /// This field is applicable only when the `load_balancing_scheme` is set
        /// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.  Structure is documented below.
        /// </summary>
        [Input("outlierDetection")]
        public Input<Inputs.RegionBackendServiceOutlierDetectionArgs>? OutlierDetection { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The protocol this RegionBackendService uses to communicate with backends.
        /// Possible values are HTTP, HTTPS, HTTP2, SSL, TCP, and UDP. The default is
        /// HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
        /// types and may result in errors if used with the GA API.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The Region in which the created backend service should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Type of session affinity to use. The default is NONE. Session affinity is
        /// not applicable if the protocol is UDP.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// How many seconds to wait for the backend before considering it a
        /// failed request. Default is 30 seconds. Valid range is [1, 86400].
        /// </summary>
        [Input("timeoutSec")]
        public Input<int>? TimeoutSec { get; set; }

        public RegionBackendServiceArgs()
        {
        }
    }

    public sealed class RegionBackendServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Lifetime of cookies in seconds if session_affinity is
        /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        /// only until the end of the browser session (or equivalent). The
        /// maximum allowed value for TTL is one day.
        /// When the load balancing scheme is INTERNAL, this field is not used.
        /// </summary>
        [Input("affinityCookieTtlSec")]
        public Input<int>? AffinityCookieTtlSec { get; set; }

        [Input("backends")]
        private InputList<Inputs.RegionBackendServiceBackendsGetArgs>? _backends;

        /// <summary>
        /// -
        /// (Optional)
        /// The set of backends that serve this RegionBackendService.  Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionBackendServiceBackendsGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.RegionBackendServiceBackendsGetArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// -
        /// (Optional)
        /// Settings controlling the volume of connections to a backend service. This field
        /// is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
        /// and the `protocol` is set to HTTP, HTTPS, or HTTP2.  Structure is documented below.
        /// </summary>
        [Input("circuitBreakers")]
        public Input<Inputs.RegionBackendServiceCircuitBreakersGetArgs>? CircuitBreakers { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Time for which instance will be drained (not accept new
        /// connections, but still work to finish started).
        /// </summary>
        [Input("connectionDrainingTimeoutSec")]
        public Input<int>? ConnectionDrainingTimeoutSec { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Consistent Hash-based load balancing can be used to provide soft session
        /// affinity based on HTTP headers, cookies or other properties. This load balancing
        /// policy is applicable only for HTTP connections. The affinity to a particular
        /// destination host will be lost when one or more hosts are added/removed from the
        /// destination service. This field specifies parameters that control consistent
        /// hashing.
        /// This field only applies when all of the following are true -
        /// </summary>
        [Input("consistentHash")]
        public Input<Inputs.RegionBackendServiceConsistentHashGetArgs>? ConsistentHash { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Policy for failovers.  Structure is documented below.
        /// </summary>
        [Input("failoverPolicy")]
        public Input<Inputs.RegionBackendServiceFailoverPolicyGetArgs>? FailoverPolicy { get; set; }

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic
        /// locking.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The set of URLs to HealthCheck resources for health checking
        /// this RegionBackendService. Currently at most one health
        /// check can be specified, and a health check is required.
        /// </summary>
        [Input("healthChecks")]
        public Input<string>? HealthChecks { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Indicates what kind of load balancing this regional backend service
        /// will be used for. A backend service created for one type of load
        /// balancing cannot be used with the other(s). Must be `INTERNAL` or
        /// `INTERNAL_MANAGED`. Defaults to `INTERNAL`.
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The load balancing algorithm used within the scope of the locality.
        /// The possible values are -
        /// ROUND_ROBIN - This is a simple policy in which each healthy backend
        /// is selected in round robin order.
        /// LEAST_REQUEST - An O(1) algorithm which selects two random healthy
        /// hosts and picks the host which has fewer active requests.
        /// RING_HASH - The ring/modulo hash load balancer implements consistent
        /// hashing to backends. The algorithm has the property that the
        /// addition/removal of a host from a set of N hosts only affects
        /// 1/N of the requests.
        /// RANDOM - The load balancer selects a random healthy host.
        /// ORIGINAL_DESTINATION - Backend host is selected based on the client
        /// connection metadata, i.e., connections are opened
        /// to the same address as the destination address of
        /// the incoming connection before the connection
        /// was redirected to the load balancer.
        /// MAGLEV - used as a drop in replacement for the ring hash load balancer.
        /// Maglev is not as stable as ring hash but has faster table lookup
        /// build times and host selection times. For more information about
        /// Maglev, refer to https://ai.google/research/pubs/pub44824
        /// This field is applicable only when the `load_balancing_scheme` is set to
        /// INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// </summary>
        [Input("localityLbPolicy")]
        public Input<string>? LocalityLbPolicy { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This field denotes the logging options for the load balancer traffic served by this backend service.
        /// If logging is enabled, logs will be exported to Stackdriver.  Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.RegionBackendServiceLogConfigGetArgs>? LogConfig { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Name of the cookie.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The URL of the network to which this backend service belongs.
        /// This field can only be specified when the load balancing scheme is set to INTERNAL.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
        /// This field is applicable only when the `load_balancing_scheme` is set
        /// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.  Structure is documented below.
        /// </summary>
        [Input("outlierDetection")]
        public Input<Inputs.RegionBackendServiceOutlierDetectionGetArgs>? OutlierDetection { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The protocol this RegionBackendService uses to communicate with backends.
        /// Possible values are HTTP, HTTPS, HTTP2, SSL, TCP, and UDP. The default is
        /// HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
        /// types and may result in errors if used with the GA API.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The Region in which the created backend service should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Type of session affinity to use. The default is NONE. Session affinity is
        /// not applicable if the protocol is UDP.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// How many seconds to wait for the backend before considering it a
        /// failed request. Default is 30 seconds. Valid range is [1, 86400].
        /// </summary>
        [Input("timeoutSec")]
        public Input<int>? TimeoutSec { get; set; }

        public RegionBackendServiceState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class RegionBackendServiceBackendsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Specifies the balancing mode for this backend. Defaults to CONNECTION.
        /// </summary>
        [Input("balancingMode")]
        public Input<string>? BalancingMode { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// A multiplier applied to the group's maximum servicing capacity
        /// (based on UTILIZATION, RATE or CONNECTION).
        /// ~&gt;**NOTE**: This field cannot be set for
        /// INTERNAL region backend services (default loadBalancingScheme),
        /// but is required for non-INTERNAL backend service. The total
        /// capacity_scaler for all backends must be non-zero.
        /// A setting of 0 means the group is completely drained, offering
        /// 0% of its available Capacity. Valid range is [0.0,1.0].
        /// </summary>
        [Input("capacityScaler")]
        public Input<double>? CapacityScaler { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This field designates whether this is a failover backend. More
        /// than one failover backend can be configured for a given RegionBackendService.
        /// </summary>
        [Input("failover")]
        public Input<bool>? Failover { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The fully-qualified URL of an Instance Group or Network Endpoint
        /// Group resource. In case of instance group this defines the list
        /// of instances that serve traffic. Member virtual machine
        /// instances from each instance group must live in the same zone as
        /// the instance group itself. No two backends in a backend service
        /// are allowed to use same Instance Group resource.
        /// For Network Endpoint Groups this defines list of endpoints. All
        /// endpoints of Network Endpoint Group must be hosted on instances
        /// located in the same zone as the Network Endpoint Group.
        /// Backend services cannot mix Instance Group and
        /// Network Endpoint Group backends.
        /// When the `load_balancing_scheme` is INTERNAL, only instance groups
        /// are supported.
        /// Note that you must specify an Instance Group or Network Endpoint
        /// Group resource using the fully-qualified URL, rather than a
        /// partial URL.
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of connections to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max number of simultaneous connections that a single backend
        /// network endpoint can handle. Cannot be set
        /// for INTERNAL backend services.
        /// This is used to calculate the capacity of the group. Can be
        /// used in either CONNECTION or UTILIZATION balancing modes. For
        /// CONNECTION mode, either maxConnections or
        /// maxConnectionsPerEndpoint must be set.
        /// </summary>
        [Input("maxConnectionsPerEndpoint")]
        public Input<int>? MaxConnectionsPerEndpoint { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max number of simultaneous connections that a single
        /// backend instance can handle. Cannot be set for INTERNAL backend
        /// services.
        /// This is used to calculate the capacity of the group.
        /// Can be used in either CONNECTION or UTILIZATION balancing modes.
        /// For CONNECTION mode, either maxConnections or
        /// maxConnectionsPerInstance must be set.
        /// </summary>
        [Input("maxConnectionsPerInstance")]
        public Input<int>? MaxConnectionsPerInstance { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max requests per second (RPS) of the group. Cannot be set
        /// for INTERNAL backend services.
        /// Can be used with either RATE or UTILIZATION balancing modes,
        /// but required if RATE mode. Either maxRate or one
        /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        /// group type, must be set.
        /// </summary>
        [Input("maxRate")]
        public Input<int>? MaxRate { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max requests per second (RPS) that a single backend network
        /// endpoint can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerEndpoint must be set. Cannot be set
        /// for INTERNAL backend services.
        /// </summary>
        [Input("maxRatePerEndpoint")]
        public Input<double>? MaxRatePerEndpoint { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max requests per second (RPS) that a single backend
        /// instance can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerInstance must be set. Cannot be set
        /// for INTERNAL backend services.
        /// </summary>
        [Input("maxRatePerInstance")]
        public Input<double>? MaxRatePerInstance { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Used when balancingMode is UTILIZATION. This ratio defines the
        /// CPU utilization target for the group. Valid range is [0.0, 1.0].
        /// Cannot be set for INTERNAL backend services.
        /// </summary>
        [Input("maxUtilization")]
        public Input<double>? MaxUtilization { get; set; }

        public RegionBackendServiceBackendsArgs()
        {
        }
    }

    public sealed class RegionBackendServiceBackendsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Specifies the balancing mode for this backend. Defaults to CONNECTION.
        /// </summary>
        [Input("balancingMode")]
        public Input<string>? BalancingMode { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// A multiplier applied to the group's maximum servicing capacity
        /// (based on UTILIZATION, RATE or CONNECTION).
        /// ~&gt;**NOTE**: This field cannot be set for
        /// INTERNAL region backend services (default loadBalancingScheme),
        /// but is required for non-INTERNAL backend service. The total
        /// capacity_scaler for all backends must be non-zero.
        /// A setting of 0 means the group is completely drained, offering
        /// 0% of its available Capacity. Valid range is [0.0,1.0].
        /// </summary>
        [Input("capacityScaler")]
        public Input<double>? CapacityScaler { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This field designates whether this is a failover backend. More
        /// than one failover backend can be configured for a given RegionBackendService.
        /// </summary>
        [Input("failover")]
        public Input<bool>? Failover { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The fully-qualified URL of an Instance Group or Network Endpoint
        /// Group resource. In case of instance group this defines the list
        /// of instances that serve traffic. Member virtual machine
        /// instances from each instance group must live in the same zone as
        /// the instance group itself. No two backends in a backend service
        /// are allowed to use same Instance Group resource.
        /// For Network Endpoint Groups this defines list of endpoints. All
        /// endpoints of Network Endpoint Group must be hosted on instances
        /// located in the same zone as the Network Endpoint Group.
        /// Backend services cannot mix Instance Group and
        /// Network Endpoint Group backends.
        /// When the `load_balancing_scheme` is INTERNAL, only instance groups
        /// are supported.
        /// Note that you must specify an Instance Group or Network Endpoint
        /// Group resource using the fully-qualified URL, rather than a
        /// partial URL.
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of connections to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max number of simultaneous connections that a single backend
        /// network endpoint can handle. Cannot be set
        /// for INTERNAL backend services.
        /// This is used to calculate the capacity of the group. Can be
        /// used in either CONNECTION or UTILIZATION balancing modes. For
        /// CONNECTION mode, either maxConnections or
        /// maxConnectionsPerEndpoint must be set.
        /// </summary>
        [Input("maxConnectionsPerEndpoint")]
        public Input<int>? MaxConnectionsPerEndpoint { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max number of simultaneous connections that a single
        /// backend instance can handle. Cannot be set for INTERNAL backend
        /// services.
        /// This is used to calculate the capacity of the group.
        /// Can be used in either CONNECTION or UTILIZATION balancing modes.
        /// For CONNECTION mode, either maxConnections or
        /// maxConnectionsPerInstance must be set.
        /// </summary>
        [Input("maxConnectionsPerInstance")]
        public Input<int>? MaxConnectionsPerInstance { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max requests per second (RPS) of the group. Cannot be set
        /// for INTERNAL backend services.
        /// Can be used with either RATE or UTILIZATION balancing modes,
        /// but required if RATE mode. Either maxRate or one
        /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        /// group type, must be set.
        /// </summary>
        [Input("maxRate")]
        public Input<int>? MaxRate { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max requests per second (RPS) that a single backend network
        /// endpoint can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerEndpoint must be set. Cannot be set
        /// for INTERNAL backend services.
        /// </summary>
        [Input("maxRatePerEndpoint")]
        public Input<double>? MaxRatePerEndpoint { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The max requests per second (RPS) that a single backend
        /// instance can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerInstance must be set. Cannot be set
        /// for INTERNAL backend services.
        /// </summary>
        [Input("maxRatePerInstance")]
        public Input<double>? MaxRatePerInstance { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Used when balancingMode is UTILIZATION. This ratio defines the
        /// CPU utilization target for the group. Valid range is [0.0, 1.0].
        /// Cannot be set for INTERNAL backend services.
        /// </summary>
        [Input("maxUtilization")]
        public Input<double>? MaxUtilization { get; set; }

        public RegionBackendServiceBackendsGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceCircuitBreakersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The timeout for new network connections to hosts.  Structure is documented below.
        /// </summary>
        [Input("connectTimeout")]
        public Input<RegionBackendServiceCircuitBreakersConnectTimeoutArgs>? ConnectTimeout { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of connections to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of pending requests to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        [Input("maxPendingRequests")]
        public Input<int>? MaxPendingRequests { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of parallel requests to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        [Input("maxRequests")]
        public Input<int>? MaxRequests { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Maximum requests for a single backend connection. This parameter
        /// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
        /// not specified, there is no limit. Setting this parameter to 1
        /// will effectively disable keep alive.
        /// </summary>
        [Input("maxRequestsPerConnection")]
        public Input<int>? MaxRequestsPerConnection { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of parallel retries to the backend cluster.
        /// Defaults to 3.
        /// </summary>
        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        public RegionBackendServiceCircuitBreakersArgs()
        {
        }
    }

    public sealed class RegionBackendServiceCircuitBreakersConnectTimeoutArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        [Input("seconds", required: true)]
        public Input<int> Seconds { get; set; } = null!;

        public RegionBackendServiceCircuitBreakersConnectTimeoutArgs()
        {
        }
    }

    public sealed class RegionBackendServiceCircuitBreakersConnectTimeoutGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        [Input("seconds", required: true)]
        public Input<int> Seconds { get; set; } = null!;

        public RegionBackendServiceCircuitBreakersConnectTimeoutGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceCircuitBreakersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The timeout for new network connections to hosts.  Structure is documented below.
        /// </summary>
        [Input("connectTimeout")]
        public Input<RegionBackendServiceCircuitBreakersConnectTimeoutGetArgs>? ConnectTimeout { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of connections to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of pending requests to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        [Input("maxPendingRequests")]
        public Input<int>? MaxPendingRequests { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of parallel requests to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        [Input("maxRequests")]
        public Input<int>? MaxRequests { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Maximum requests for a single backend connection. This parameter
        /// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
        /// not specified, there is no limit. Setting this parameter to 1
        /// will effectively disable keep alive.
        /// </summary>
        [Input("maxRequestsPerConnection")]
        public Input<int>? MaxRequestsPerConnection { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of parallel retries to the backend cluster.
        /// Defaults to 3.
        /// </summary>
        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        public RegionBackendServiceCircuitBreakersGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceConsistentHashArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Hash is based on HTTP Cookie. This field describes a HTTP cookie
        /// that will be used as the hash key for the consistent hash load
        /// balancer. If the cookie is not present, it will be generated.
        /// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
        /// </summary>
        [Input("httpCookie")]
        public Input<RegionBackendServiceConsistentHashHttpCookieArgs>? HttpCookie { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The hash based on the value of the specified header field.
        /// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
        /// </summary>
        [Input("httpHeaderName")]
        public Input<string>? HttpHeaderName { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The minimum number of virtual nodes to use for the hash ring.
        /// Larger ring sizes result in more granular load
        /// distributions. If the number of hosts in the load balancing pool
        /// is larger than the ring size, each host will be assigned a single
        /// virtual node.
        /// Defaults to 1024.
        /// </summary>
        [Input("minimumRingSize")]
        public Input<int>? MinimumRingSize { get; set; }

        public RegionBackendServiceConsistentHashArgs()
        {
        }
    }

    public sealed class RegionBackendServiceConsistentHashGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Hash is based on HTTP Cookie. This field describes a HTTP cookie
        /// that will be used as the hash key for the consistent hash load
        /// balancer. If the cookie is not present, it will be generated.
        /// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
        /// </summary>
        [Input("httpCookie")]
        public Input<RegionBackendServiceConsistentHashHttpCookieGetArgs>? HttpCookie { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The hash based on the value of the specified header field.
        /// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
        /// </summary>
        [Input("httpHeaderName")]
        public Input<string>? HttpHeaderName { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The minimum number of virtual nodes to use for the hash ring.
        /// Larger ring sizes result in more granular load
        /// distributions. If the number of hosts in the load balancing pool
        /// is larger than the ring size, each host will be assigned a single
        /// virtual node.
        /// Defaults to 1024.
        /// </summary>
        [Input("minimumRingSize")]
        public Input<int>? MinimumRingSize { get; set; }

        public RegionBackendServiceConsistentHashGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceConsistentHashHttpCookieArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Name of the cookie.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Path to set for the cookie.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Lifetime of the cookie.  Structure is documented below.
        /// </summary>
        [Input("ttl")]
        public Input<RegionBackendServiceConsistentHashHttpCookieTtlArgs>? Ttl { get; set; }

        public RegionBackendServiceConsistentHashHttpCookieArgs()
        {
        }
    }

    public sealed class RegionBackendServiceConsistentHashHttpCookieGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Name of the cookie.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Path to set for the cookie.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Lifetime of the cookie.  Structure is documented below.
        /// </summary>
        [Input("ttl")]
        public Input<RegionBackendServiceConsistentHashHttpCookieTtlGetArgs>? Ttl { get; set; }

        public RegionBackendServiceConsistentHashHttpCookieGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceConsistentHashHttpCookieTtlArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        [Input("seconds", required: true)]
        public Input<int> Seconds { get; set; } = null!;

        public RegionBackendServiceConsistentHashHttpCookieTtlArgs()
        {
        }
    }

    public sealed class RegionBackendServiceConsistentHashHttpCookieTtlGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        [Input("seconds", required: true)]
        public Input<int> Seconds { get; set; } = null!;

        public RegionBackendServiceConsistentHashHttpCookieTtlGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceFailoverPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// On failover or failback, this field indicates whether connection drain
        /// will be honored. Setting this to true has the following effect: connections
        /// to the old active pool are not drained. Connections to the new active pool
        /// use the timeout of 10 min (currently fixed). Setting to false has the
        /// following effect: both old and new connections will have a drain timeout
        /// of 10 min.
        /// This can be set to true only if the protocol is TCP.
        /// The default is false.
        /// </summary>
        [Input("disableConnectionDrainOnFailover")]
        public Input<bool>? DisableConnectionDrainOnFailover { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This option is used only when no healthy VMs are detected in the primary
        /// and backup instance groups. When set to true, traffic is dropped. When
        /// set to false, new connections are sent across all VMs in the primary group.
        /// The default is false.
        /// </summary>
        [Input("dropTrafficIfUnhealthy")]
        public Input<bool>? DropTrafficIfUnhealthy { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The value of the field must be in [0, 1]. If the ratio of the healthy
        /// VMs in the primary backend is at or below this number, traffic arriving
        /// at the load-balanced IP will be directed to the failover backend.
        /// In case where 'failoverRatio' is not set or all the VMs in the backup
        /// backend are unhealthy, the traffic will be directed back to the primary
        /// backend in the "force" mode, where traffic will be spread to the healthy
        /// VMs with the best effort, or to all VMs when no VM is healthy.
        /// This field is only used with l4 load balancing.
        /// </summary>
        [Input("failoverRatio")]
        public Input<double>? FailoverRatio { get; set; }

        public RegionBackendServiceFailoverPolicyArgs()
        {
        }
    }

    public sealed class RegionBackendServiceFailoverPolicyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// On failover or failback, this field indicates whether connection drain
        /// will be honored. Setting this to true has the following effect: connections
        /// to the old active pool are not drained. Connections to the new active pool
        /// use the timeout of 10 min (currently fixed). Setting to false has the
        /// following effect: both old and new connections will have a drain timeout
        /// of 10 min.
        /// This can be set to true only if the protocol is TCP.
        /// The default is false.
        /// </summary>
        [Input("disableConnectionDrainOnFailover")]
        public Input<bool>? DisableConnectionDrainOnFailover { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This option is used only when no healthy VMs are detected in the primary
        /// and backup instance groups. When set to true, traffic is dropped. When
        /// set to false, new connections are sent across all VMs in the primary group.
        /// The default is false.
        /// </summary>
        [Input("dropTrafficIfUnhealthy")]
        public Input<bool>? DropTrafficIfUnhealthy { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The value of the field must be in [0, 1]. If the ratio of the healthy
        /// VMs in the primary backend is at or below this number, traffic arriving
        /// at the load-balanced IP will be directed to the failover backend.
        /// In case where 'failoverRatio' is not set or all the VMs in the backup
        /// backend are unhealthy, the traffic will be directed back to the primary
        /// backend in the "force" mode, where traffic will be spread to the healthy
        /// VMs with the best effort, or to all VMs when no VM is healthy.
        /// This field is only used with l4 load balancing.
        /// </summary>
        [Input("failoverRatio")]
        public Input<double>? FailoverRatio { get; set; }

        public RegionBackendServiceFailoverPolicyGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceLogConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Whether to enable logging for the load balancer traffic served by this backend service.
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This field can only be specified if logging is enabled for this backend service. The value of
        /// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
        /// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
        /// The default value is 1.0.
        /// </summary>
        [Input("sampleRate")]
        public Input<double>? SampleRate { get; set; }

        public RegionBackendServiceLogConfigArgs()
        {
        }
    }

    public sealed class RegionBackendServiceLogConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Whether to enable logging for the load balancer traffic served by this backend service.
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This field can only be specified if logging is enabled for this backend service. The value of
        /// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
        /// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
        /// The default value is 1.0.
        /// </summary>
        [Input("sampleRate")]
        public Input<double>? SampleRate { get; set; }

        public RegionBackendServiceLogConfigGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceOutlierDetectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The base time that a host is ejected for. The real time is equal to the base
        /// time multiplied by the number of times the host has been ejected. Defaults to
        /// 30000ms or 30s.  Structure is documented below.
        /// </summary>
        [Input("baseEjectionTime")]
        public Input<RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs>? BaseEjectionTime { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Number of errors before a host is ejected from the connection pool. When the
        /// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
        /// Defaults to 5.
        /// </summary>
        [Input("consecutiveErrors")]
        public Input<int>? ConsecutiveErrors { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The number of consecutive gateway failures (502, 503, 504 status or connection
        /// errors that are mapped to one of those status codes) before a consecutive
        /// gateway failure ejection occurs. Defaults to 5.
        /// </summary>
        [Input("consecutiveGatewayFailure")]
        public Input<int>? ConsecutiveGatewayFailure { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The percentage chance that a host will be actually ejected when an outlier
        /// status is detected through consecutive 5xx. This setting can be used to disable
        /// ejection or to ramp it up slowly. Defaults to 100.
        /// </summary>
        [Input("enforcingConsecutiveErrors")]
        public Input<int>? EnforcingConsecutiveErrors { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The percentage chance that a host will be actually ejected when an outlier
        /// status is detected through consecutive gateway failures. This setting can be
        /// used to disable ejection or to ramp it up slowly. Defaults to 0.
        /// </summary>
        [Input("enforcingConsecutiveGatewayFailure")]
        public Input<int>? EnforcingConsecutiveGatewayFailure { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The percentage chance that a host will be actually ejected when an outlier
        /// status is detected through success rate statistics. This setting can be used to
        /// disable ejection or to ramp it up slowly. Defaults to 100.
        /// </summary>
        [Input("enforcingSuccessRate")]
        public Input<int>? EnforcingSuccessRate { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Time interval between ejection sweep analysis. This can result in both new
        /// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
        /// </summary>
        [Input("interval")]
        public Input<RegionBackendServiceOutlierDetectionIntervalArgs>? Interval { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Maximum percentage of hosts in the load balancing pool for the backend service
        /// that can be ejected. Defaults to 10%.
        /// </summary>
        [Input("maxEjectionPercent")]
        public Input<int>? MaxEjectionPercent { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The number of hosts in a cluster that must have enough request volume to detect
        /// success rate outliers. If the number of hosts is less than this setting, outlier
        /// detection via success rate statistics is not performed for any host in the
        /// cluster. Defaults to 5.
        /// </summary>
        [Input("successRateMinimumHosts")]
        public Input<int>? SuccessRateMinimumHosts { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The minimum number of total requests that must be collected in one interval (as
        /// defined by the interval duration above) to include this host in success rate
        /// based outlier detection. If the volume is lower than this setting, outlier
        /// detection via success rate statistics is not performed for that host. Defaults
        /// to 100.
        /// </summary>
        [Input("successRateRequestVolume")]
        public Input<int>? SuccessRateRequestVolume { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This factor is used to determine the ejection threshold for success rate outlier
        /// ejection. The ejection threshold is the difference between the mean success
        /// rate, and the product of this factor and the standard deviation of the mean
        /// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
        /// by a thousand to get a double. That is, if the desired factor is 1.9, the
        /// runtime value should be 1900. Defaults to 1900.
        /// </summary>
        [Input("successRateStdevFactor")]
        public Input<int>? SuccessRateStdevFactor { get; set; }

        public RegionBackendServiceOutlierDetectionArgs()
        {
        }
    }

    public sealed class RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        [Input("seconds", required: true)]
        public Input<int> Seconds { get; set; } = null!;

        public RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs()
        {
        }
    }

    public sealed class RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        [Input("seconds", required: true)]
        public Input<int> Seconds { get; set; } = null!;

        public RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceOutlierDetectionGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The base time that a host is ejected for. The real time is equal to the base
        /// time multiplied by the number of times the host has been ejected. Defaults to
        /// 30000ms or 30s.  Structure is documented below.
        /// </summary>
        [Input("baseEjectionTime")]
        public Input<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs>? BaseEjectionTime { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Number of errors before a host is ejected from the connection pool. When the
        /// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
        /// Defaults to 5.
        /// </summary>
        [Input("consecutiveErrors")]
        public Input<int>? ConsecutiveErrors { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The number of consecutive gateway failures (502, 503, 504 status or connection
        /// errors that are mapped to one of those status codes) before a consecutive
        /// gateway failure ejection occurs. Defaults to 5.
        /// </summary>
        [Input("consecutiveGatewayFailure")]
        public Input<int>? ConsecutiveGatewayFailure { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The percentage chance that a host will be actually ejected when an outlier
        /// status is detected through consecutive 5xx. This setting can be used to disable
        /// ejection or to ramp it up slowly. Defaults to 100.
        /// </summary>
        [Input("enforcingConsecutiveErrors")]
        public Input<int>? EnforcingConsecutiveErrors { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The percentage chance that a host will be actually ejected when an outlier
        /// status is detected through consecutive gateway failures. This setting can be
        /// used to disable ejection or to ramp it up slowly. Defaults to 0.
        /// </summary>
        [Input("enforcingConsecutiveGatewayFailure")]
        public Input<int>? EnforcingConsecutiveGatewayFailure { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The percentage chance that a host will be actually ejected when an outlier
        /// status is detected through success rate statistics. This setting can be used to
        /// disable ejection or to ramp it up slowly. Defaults to 100.
        /// </summary>
        [Input("enforcingSuccessRate")]
        public Input<int>? EnforcingSuccessRate { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Time interval between ejection sweep analysis. This can result in both new
        /// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
        /// </summary>
        [Input("interval")]
        public Input<RegionBackendServiceOutlierDetectionIntervalGetArgs>? Interval { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Maximum percentage of hosts in the load balancing pool for the backend service
        /// that can be ejected. Defaults to 10%.
        /// </summary>
        [Input("maxEjectionPercent")]
        public Input<int>? MaxEjectionPercent { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The number of hosts in a cluster that must have enough request volume to detect
        /// success rate outliers. If the number of hosts is less than this setting, outlier
        /// detection via success rate statistics is not performed for any host in the
        /// cluster. Defaults to 5.
        /// </summary>
        [Input("successRateMinimumHosts")]
        public Input<int>? SuccessRateMinimumHosts { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The minimum number of total requests that must be collected in one interval (as
        /// defined by the interval duration above) to include this host in success rate
        /// based outlier detection. If the volume is lower than this setting, outlier
        /// detection via success rate statistics is not performed for that host. Defaults
        /// to 100.
        /// </summary>
        [Input("successRateRequestVolume")]
        public Input<int>? SuccessRateRequestVolume { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// This factor is used to determine the ejection threshold for success rate outlier
        /// ejection. The ejection threshold is the difference between the mean success
        /// rate, and the product of this factor and the standard deviation of the mean
        /// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
        /// by a thousand to get a double. That is, if the desired factor is 1.9, the
        /// runtime value should be 1900. Defaults to 1900.
        /// </summary>
        [Input("successRateStdevFactor")]
        public Input<int>? SuccessRateStdevFactor { get; set; }

        public RegionBackendServiceOutlierDetectionGetArgs()
        {
        }
    }

    public sealed class RegionBackendServiceOutlierDetectionIntervalArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        [Input("seconds", required: true)]
        public Input<int> Seconds { get; set; } = null!;

        public RegionBackendServiceOutlierDetectionIntervalArgs()
        {
        }
    }

    public sealed class RegionBackendServiceOutlierDetectionIntervalGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        [Input("seconds", required: true)]
        public Input<int> Seconds { get; set; } = null!;

        public RegionBackendServiceOutlierDetectionIntervalGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class RegionBackendServiceBackends
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Specifies the balancing mode for this backend. Defaults to CONNECTION.
        /// </summary>
        public readonly string? BalancingMode;
        /// <summary>
        /// -
        /// (Optional)
        /// A multiplier applied to the group's maximum servicing capacity
        /// (based on UTILIZATION, RATE or CONNECTION).
        /// ~&gt;**NOTE**: This field cannot be set for
        /// INTERNAL region backend services (default loadBalancingScheme),
        /// but is required for non-INTERNAL backend service. The total
        /// capacity_scaler for all backends must be non-zero.
        /// A setting of 0 means the group is completely drained, offering
        /// 0% of its available Capacity. Valid range is [0.0,1.0].
        /// </summary>
        public readonly double? CapacityScaler;
        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// -
        /// (Optional)
        /// This field designates whether this is a failover backend. More
        /// than one failover backend can be configured for a given RegionBackendService.
        /// </summary>
        public readonly bool Failover;
        /// <summary>
        /// -
        /// (Required)
        /// The fully-qualified URL of an Instance Group or Network Endpoint
        /// Group resource. In case of instance group this defines the list
        /// of instances that serve traffic. Member virtual machine
        /// instances from each instance group must live in the same zone as
        /// the instance group itself. No two backends in a backend service
        /// are allowed to use same Instance Group resource.
        /// For Network Endpoint Groups this defines list of endpoints. All
        /// endpoints of Network Endpoint Group must be hosted on instances
        /// located in the same zone as the Network Endpoint Group.
        /// Backend services cannot mix Instance Group and
        /// Network Endpoint Group backends.
        /// When the `load_balancing_scheme` is INTERNAL, only instance groups
        /// are supported.
        /// Note that you must specify an Instance Group or Network Endpoint
        /// Group resource using the fully-qualified URL, rather than a
        /// partial URL.
        /// </summary>
        public readonly string Group;
        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of connections to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        public readonly int? MaxConnections;
        /// <summary>
        /// -
        /// (Optional)
        /// The max number of simultaneous connections that a single backend
        /// network endpoint can handle. Cannot be set
        /// for INTERNAL backend services.
        /// This is used to calculate the capacity of the group. Can be
        /// used in either CONNECTION or UTILIZATION balancing modes. For
        /// CONNECTION mode, either maxConnections or
        /// maxConnectionsPerEndpoint must be set.
        /// </summary>
        public readonly int? MaxConnectionsPerEndpoint;
        /// <summary>
        /// -
        /// (Optional)
        /// The max number of simultaneous connections that a single
        /// backend instance can handle. Cannot be set for INTERNAL backend
        /// services.
        /// This is used to calculate the capacity of the group.
        /// Can be used in either CONNECTION or UTILIZATION balancing modes.
        /// For CONNECTION mode, either maxConnections or
        /// maxConnectionsPerInstance must be set.
        /// </summary>
        public readonly int? MaxConnectionsPerInstance;
        /// <summary>
        /// -
        /// (Optional)
        /// The max requests per second (RPS) of the group. Cannot be set
        /// for INTERNAL backend services.
        /// Can be used with either RATE or UTILIZATION balancing modes,
        /// but required if RATE mode. Either maxRate or one
        /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        /// group type, must be set.
        /// </summary>
        public readonly int? MaxRate;
        /// <summary>
        /// -
        /// (Optional)
        /// The max requests per second (RPS) that a single backend network
        /// endpoint can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerEndpoint must be set. Cannot be set
        /// for INTERNAL backend services.
        /// </summary>
        public readonly double? MaxRatePerEndpoint;
        /// <summary>
        /// -
        /// (Optional)
        /// The max requests per second (RPS) that a single backend
        /// instance can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerInstance must be set. Cannot be set
        /// for INTERNAL backend services.
        /// </summary>
        public readonly double? MaxRatePerInstance;
        /// <summary>
        /// -
        /// (Optional)
        /// Used when balancingMode is UTILIZATION. This ratio defines the
        /// CPU utilization target for the group. Valid range is [0.0, 1.0].
        /// Cannot be set for INTERNAL backend services.
        /// </summary>
        public readonly double? MaxUtilization;

        [OutputConstructor]
        private RegionBackendServiceBackends(
            string? balancingMode,
            double? capacityScaler,
            string? description,
            bool failover,
            string group,
            int? maxConnections,
            int? maxConnectionsPerEndpoint,
            int? maxConnectionsPerInstance,
            int? maxRate,
            double? maxRatePerEndpoint,
            double? maxRatePerInstance,
            double? maxUtilization)
        {
            BalancingMode = balancingMode;
            CapacityScaler = capacityScaler;
            Description = description;
            Failover = failover;
            Group = group;
            MaxConnections = maxConnections;
            MaxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            MaxConnectionsPerInstance = maxConnectionsPerInstance;
            MaxRate = maxRate;
            MaxRatePerEndpoint = maxRatePerEndpoint;
            MaxRatePerInstance = maxRatePerInstance;
            MaxUtilization = maxUtilization;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceCircuitBreakers
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The timeout for new network connections to hosts.  Structure is documented below.
        /// </summary>
        public readonly RegionBackendServiceCircuitBreakersConnectTimeout? ConnectTimeout;
        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of connections to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        public readonly int? MaxConnections;
        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of pending requests to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        public readonly int? MaxPendingRequests;
        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of parallel requests to the backend cluster.
        /// Defaults to 1024.
        /// </summary>
        public readonly int? MaxRequests;
        /// <summary>
        /// -
        /// (Optional)
        /// Maximum requests for a single backend connection. This parameter
        /// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
        /// not specified, there is no limit. Setting this parameter to 1
        /// will effectively disable keep alive.
        /// </summary>
        public readonly int? MaxRequestsPerConnection;
        /// <summary>
        /// -
        /// (Optional)
        /// The maximum number of parallel retries to the backend cluster.
        /// Defaults to 3.
        /// </summary>
        public readonly int? MaxRetries;

        [OutputConstructor]
        private RegionBackendServiceCircuitBreakers(
            RegionBackendServiceCircuitBreakersConnectTimeout? connectTimeout,
            int? maxConnections,
            int? maxPendingRequests,
            int? maxRequests,
            int? maxRequestsPerConnection,
            int? maxRetries)
        {
            ConnectTimeout = connectTimeout;
            MaxConnections = maxConnections;
            MaxPendingRequests = maxPendingRequests;
            MaxRequests = maxRequests;
            MaxRequestsPerConnection = maxRequestsPerConnection;
            MaxRetries = maxRetries;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceCircuitBreakersConnectTimeout
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        public readonly int? Nanos;
        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        public readonly int Seconds;

        [OutputConstructor]
        private RegionBackendServiceCircuitBreakersConnectTimeout(
            int? nanos,
            int seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceConsistentHash
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Hash is based on HTTP Cookie. This field describes a HTTP cookie
        /// that will be used as the hash key for the consistent hash load
        /// balancer. If the cookie is not present, it will be generated.
        /// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
        /// </summary>
        public readonly RegionBackendServiceConsistentHashHttpCookie? HttpCookie;
        /// <summary>
        /// -
        /// (Optional)
        /// The hash based on the value of the specified header field.
        /// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
        /// </summary>
        public readonly string? HttpHeaderName;
        /// <summary>
        /// -
        /// (Optional)
        /// The minimum number of virtual nodes to use for the hash ring.
        /// Larger ring sizes result in more granular load
        /// distributions. If the number of hosts in the load balancing pool
        /// is larger than the ring size, each host will be assigned a single
        /// virtual node.
        /// Defaults to 1024.
        /// </summary>
        public readonly int? MinimumRingSize;

        [OutputConstructor]
        private RegionBackendServiceConsistentHash(
            RegionBackendServiceConsistentHashHttpCookie? httpCookie,
            string? httpHeaderName,
            int? minimumRingSize)
        {
            HttpCookie = httpCookie;
            HttpHeaderName = httpHeaderName;
            MinimumRingSize = minimumRingSize;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceConsistentHashHttpCookie
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Name of the cookie.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// -
        /// (Optional)
        /// Path to set for the cookie.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// -
        /// (Optional)
        /// Lifetime of the cookie.  Structure is documented below.
        /// </summary>
        public readonly RegionBackendServiceConsistentHashHttpCookieTtl? Ttl;

        [OutputConstructor]
        private RegionBackendServiceConsistentHashHttpCookie(
            string? name,
            string? path,
            RegionBackendServiceConsistentHashHttpCookieTtl? ttl)
        {
            Name = name;
            Path = path;
            Ttl = ttl;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceConsistentHashHttpCookieTtl
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        public readonly int? Nanos;
        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        public readonly int Seconds;

        [OutputConstructor]
        private RegionBackendServiceConsistentHashHttpCookieTtl(
            int? nanos,
            int seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceFailoverPolicy
    {
        /// <summary>
        /// -
        /// (Optional)
        /// On failover or failback, this field indicates whether connection drain
        /// will be honored. Setting this to true has the following effect: connections
        /// to the old active pool are not drained. Connections to the new active pool
        /// use the timeout of 10 min (currently fixed). Setting to false has the
        /// following effect: both old and new connections will have a drain timeout
        /// of 10 min.
        /// This can be set to true only if the protocol is TCP.
        /// The default is false.
        /// </summary>
        public readonly bool? DisableConnectionDrainOnFailover;
        /// <summary>
        /// -
        /// (Optional)
        /// This option is used only when no healthy VMs are detected in the primary
        /// and backup instance groups. When set to true, traffic is dropped. When
        /// set to false, new connections are sent across all VMs in the primary group.
        /// The default is false.
        /// </summary>
        public readonly bool? DropTrafficIfUnhealthy;
        /// <summary>
        /// -
        /// (Optional)
        /// The value of the field must be in [0, 1]. If the ratio of the healthy
        /// VMs in the primary backend is at or below this number, traffic arriving
        /// at the load-balanced IP will be directed to the failover backend.
        /// In case where 'failoverRatio' is not set or all the VMs in the backup
        /// backend are unhealthy, the traffic will be directed back to the primary
        /// backend in the "force" mode, where traffic will be spread to the healthy
        /// VMs with the best effort, or to all VMs when no VM is healthy.
        /// This field is only used with l4 load balancing.
        /// </summary>
        public readonly double? FailoverRatio;

        [OutputConstructor]
        private RegionBackendServiceFailoverPolicy(
            bool? disableConnectionDrainOnFailover,
            bool? dropTrafficIfUnhealthy,
            double? failoverRatio)
        {
            DisableConnectionDrainOnFailover = disableConnectionDrainOnFailover;
            DropTrafficIfUnhealthy = dropTrafficIfUnhealthy;
            FailoverRatio = failoverRatio;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceLogConfig
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Whether to enable logging for the load balancer traffic served by this backend service.
        /// </summary>
        public readonly bool? Enable;
        /// <summary>
        /// -
        /// (Optional)
        /// This field can only be specified if logging is enabled for this backend service. The value of
        /// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
        /// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
        /// The default value is 1.0.
        /// </summary>
        public readonly double? SampleRate;

        [OutputConstructor]
        private RegionBackendServiceLogConfig(
            bool? enable,
            double? sampleRate)
        {
            Enable = enable;
            SampleRate = sampleRate;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceOutlierDetection
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The base time that a host is ejected for. The real time is equal to the base
        /// time multiplied by the number of times the host has been ejected. Defaults to
        /// 30000ms or 30s.  Structure is documented below.
        /// </summary>
        public readonly RegionBackendServiceOutlierDetectionBaseEjectionTime? BaseEjectionTime;
        /// <summary>
        /// -
        /// (Optional)
        /// Number of errors before a host is ejected from the connection pool. When the
        /// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
        /// Defaults to 5.
        /// </summary>
        public readonly int? ConsecutiveErrors;
        /// <summary>
        /// -
        /// (Optional)
        /// The number of consecutive gateway failures (502, 503, 504 status or connection
        /// errors that are mapped to one of those status codes) before a consecutive
        /// gateway failure ejection occurs. Defaults to 5.
        /// </summary>
        public readonly int? ConsecutiveGatewayFailure;
        /// <summary>
        /// -
        /// (Optional)
        /// The percentage chance that a host will be actually ejected when an outlier
        /// status is detected through consecutive 5xx. This setting can be used to disable
        /// ejection or to ramp it up slowly. Defaults to 100.
        /// </summary>
        public readonly int? EnforcingConsecutiveErrors;
        /// <summary>
        /// -
        /// (Optional)
        /// The percentage chance that a host will be actually ejected when an outlier
        /// status is detected through consecutive gateway failures. This setting can be
        /// used to disable ejection or to ramp it up slowly. Defaults to 0.
        /// </summary>
        public readonly int? EnforcingConsecutiveGatewayFailure;
        /// <summary>
        /// -
        /// (Optional)
        /// The percentage chance that a host will be actually ejected when an outlier
        /// status is detected through success rate statistics. This setting can be used to
        /// disable ejection or to ramp it up slowly. Defaults to 100.
        /// </summary>
        public readonly int? EnforcingSuccessRate;
        /// <summary>
        /// -
        /// (Optional)
        /// Time interval between ejection sweep analysis. This can result in both new
        /// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
        /// </summary>
        public readonly RegionBackendServiceOutlierDetectionInterval? Interval;
        /// <summary>
        /// -
        /// (Optional)
        /// Maximum percentage of hosts in the load balancing pool for the backend service
        /// that can be ejected. Defaults to 10%.
        /// </summary>
        public readonly int? MaxEjectionPercent;
        /// <summary>
        /// -
        /// (Optional)
        /// The number of hosts in a cluster that must have enough request volume to detect
        /// success rate outliers. If the number of hosts is less than this setting, outlier
        /// detection via success rate statistics is not performed for any host in the
        /// cluster. Defaults to 5.
        /// </summary>
        public readonly int? SuccessRateMinimumHosts;
        /// <summary>
        /// -
        /// (Optional)
        /// The minimum number of total requests that must be collected in one interval (as
        /// defined by the interval duration above) to include this host in success rate
        /// based outlier detection. If the volume is lower than this setting, outlier
        /// detection via success rate statistics is not performed for that host. Defaults
        /// to 100.
        /// </summary>
        public readonly int? SuccessRateRequestVolume;
        /// <summary>
        /// -
        /// (Optional)
        /// This factor is used to determine the ejection threshold for success rate outlier
        /// ejection. The ejection threshold is the difference between the mean success
        /// rate, and the product of this factor and the standard deviation of the mean
        /// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
        /// by a thousand to get a double. That is, if the desired factor is 1.9, the
        /// runtime value should be 1900. Defaults to 1900.
        /// </summary>
        public readonly int? SuccessRateStdevFactor;

        [OutputConstructor]
        private RegionBackendServiceOutlierDetection(
            RegionBackendServiceOutlierDetectionBaseEjectionTime? baseEjectionTime,
            int? consecutiveErrors,
            int? consecutiveGatewayFailure,
            int? enforcingConsecutiveErrors,
            int? enforcingConsecutiveGatewayFailure,
            int? enforcingSuccessRate,
            RegionBackendServiceOutlierDetectionInterval? interval,
            int? maxEjectionPercent,
            int? successRateMinimumHosts,
            int? successRateRequestVolume,
            int? successRateStdevFactor)
        {
            BaseEjectionTime = baseEjectionTime;
            ConsecutiveErrors = consecutiveErrors;
            ConsecutiveGatewayFailure = consecutiveGatewayFailure;
            EnforcingConsecutiveErrors = enforcingConsecutiveErrors;
            EnforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
            EnforcingSuccessRate = enforcingSuccessRate;
            Interval = interval;
            MaxEjectionPercent = maxEjectionPercent;
            SuccessRateMinimumHosts = successRateMinimumHosts;
            SuccessRateRequestVolume = successRateRequestVolume;
            SuccessRateStdevFactor = successRateStdevFactor;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceOutlierDetectionBaseEjectionTime
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        public readonly int? Nanos;
        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        public readonly int Seconds;

        [OutputConstructor]
        private RegionBackendServiceOutlierDetectionBaseEjectionTime(
            int? nanos,
            int seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class RegionBackendServiceOutlierDetectionInterval
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Span of time that's a fraction of a second at nanosecond resolution. Durations
        /// less than one second are represented with a 0 `seconds` field and a positive
        /// `nanos` field. Must be from 0 to 999,999,999 inclusive.
        /// </summary>
        public readonly int? Nanos;
        /// <summary>
        /// -
        /// (Required)
        /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
        /// inclusive.
        /// </summary>
        public readonly int Seconds;

        [OutputConstructor]
        private RegionBackendServiceOutlierDetectionInterval(
            int? nanos,
            int seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }
    }
}
