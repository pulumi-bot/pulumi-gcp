// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Represents an Autoscaler resource.
    /// 
    /// Autoscalers allow you to automatically scale virtual machine instances in
    /// managed instance groups according to an autoscaling policy that you
    /// define.
    /// 
    /// 
    /// To get more information about Autoscaler, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/autoscalers)
    /// * How-to Guides
    ///     * [Autoscaling Groups of Instances](https://cloud.google.com/compute/docs/autoscaler/)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_autoscaler.html.markdown.
    /// </summary>
    public partial class Autoscalar : Pulumi.CustomResource
    {
        /// <summary>
        /// -
        /// (Required)
        /// The configuration parameters for the autoscaling algorithm. You can
        /// define one or more of the policies for an autoscaler: cpuUtilization,
        /// customMetricUtilizations, and loadBalancingUtilization.
        /// If none of these are specified, the default will be to autoscale based
        /// on cpuUtilization to 0.6 or 60%.  Structure is documented below.
        /// </summary>
        [Output("autoscalingPolicy")]
        public Output<Outputs.AutoscalarAutoscalingPolicy> AutoscalingPolicy { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// URL of the zone where the instance group resides.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Autoscalar resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Autoscalar(string name, AutoscalarArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/autoscalar:Autoscalar", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Autoscalar(string name, Input<string> id, AutoscalarState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/autoscalar:Autoscalar", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Autoscalar resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Autoscalar Get(string name, Input<string> id, AutoscalarState? state = null, CustomResourceOptions? options = null)
        {
            return new Autoscalar(name, id, state, options);
        }
    }

    public sealed class AutoscalarArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// The configuration parameters for the autoscaling algorithm. You can
        /// define one or more of the policies for an autoscaler: cpuUtilization,
        /// customMetricUtilizations, and loadBalancingUtilization.
        /// If none of these are specified, the default will be to autoscale based
        /// on cpuUtilization to 0.6 or 60%.  Structure is documented below.
        /// </summary>
        [Input("autoscalingPolicy", required: true)]
        public Input<Inputs.AutoscalarAutoscalingPolicyArgs> AutoscalingPolicy { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// URL of the zone where the instance group resides.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public AutoscalarArgs()
        {
        }
    }

    public sealed class AutoscalarState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// The configuration parameters for the autoscaling algorithm. You can
        /// define one or more of the policies for an autoscaler: cpuUtilization,
        /// customMetricUtilizations, and loadBalancingUtilization.
        /// If none of these are specified, the default will be to autoscale based
        /// on cpuUtilization to 0.6 or 60%.  Structure is documented below.
        /// </summary>
        [Input("autoscalingPolicy")]
        public Input<Inputs.AutoscalarAutoscalingPolicyGetArgs>? AutoscalingPolicy { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// URL of the zone where the instance group resides.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public AutoscalarState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class AutoscalarAutoscalingPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The number of seconds that the autoscaler should wait before it
        /// starts collecting information from a new instance. This prevents
        /// the autoscaler from collecting information when the instance is
        /// initializing, during which the collected usage would not be
        /// reliable. The default time autoscaler waits is 60 seconds.
        /// Virtual machine initialization times might vary because of
        /// numerous factors. We recommend that you test how long an
        /// instance may take to initialize. To do this, create an instance
        /// and time the startup process.
        /// </summary>
        [Input("cooldownPeriod")]
        public Input<int>? CooldownPeriod { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Defines the CPU utilization policy that allows the autoscaler to
        /// scale based on the average CPU utilization of a managed instance
        /// group.  Structure is documented below.
        /// </summary>
        [Input("cpuUtilization")]
        public Input<AutoscalarAutoscalingPolicyCpuUtilizationArgs>? CpuUtilization { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
        /// </summary>
        [Input("loadBalancingUtilization")]
        public Input<AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs>? LoadBalancingUtilization { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The maximum number of instances that the autoscaler can scale up
        /// to. This is required when creating or updating an autoscaler. The
        /// maximum number of replicas should not be lower than minimal number
        /// of replicas.
        /// </summary>
        [Input("maxReplicas", required: true)]
        public Input<int> MaxReplicas { get; set; } = null!;

        [Input("metrics")]
        private InputList<AutoscalarAutoscalingPolicyMetricsArgs>? _metrics;

        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
        /// </summary>
        public InputList<AutoscalarAutoscalingPolicyMetricsArgs> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<AutoscalarAutoscalingPolicyMetricsArgs>());
            set => _metrics = value;
        }

        /// <summary>
        /// -
        /// (Required)
        /// The minimum number of replicas that the autoscaler can scale down
        /// to. This cannot be less than 0. If not provided, autoscaler will
        /// choose a default value depending on maximum number of instances
        /// allowed.
        /// </summary>
        [Input("minReplicas", required: true)]
        public Input<int> MinReplicas { get; set; } = null!;

        public AutoscalarAutoscalingPolicyArgs()
        {
        }
    }

    public sealed class AutoscalarAutoscalingPolicyCpuUtilizationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        public AutoscalarAutoscalingPolicyCpuUtilizationArgs()
        {
        }
    }

    public sealed class AutoscalarAutoscalingPolicyCpuUtilizationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        public AutoscalarAutoscalingPolicyCpuUtilizationGetArgs()
        {
        }
    }

    public sealed class AutoscalarAutoscalingPolicyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The number of seconds that the autoscaler should wait before it
        /// starts collecting information from a new instance. This prevents
        /// the autoscaler from collecting information when the instance is
        /// initializing, during which the collected usage would not be
        /// reliable. The default time autoscaler waits is 60 seconds.
        /// Virtual machine initialization times might vary because of
        /// numerous factors. We recommend that you test how long an
        /// instance may take to initialize. To do this, create an instance
        /// and time the startup process.
        /// </summary>
        [Input("cooldownPeriod")]
        public Input<int>? CooldownPeriod { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Defines the CPU utilization policy that allows the autoscaler to
        /// scale based on the average CPU utilization of a managed instance
        /// group.  Structure is documented below.
        /// </summary>
        [Input("cpuUtilization")]
        public Input<AutoscalarAutoscalingPolicyCpuUtilizationGetArgs>? CpuUtilization { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
        /// </summary>
        [Input("loadBalancingUtilization")]
        public Input<AutoscalarAutoscalingPolicyLoadBalancingUtilizationGetArgs>? LoadBalancingUtilization { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The maximum number of instances that the autoscaler can scale up
        /// to. This is required when creating or updating an autoscaler. The
        /// maximum number of replicas should not be lower than minimal number
        /// of replicas.
        /// </summary>
        [Input("maxReplicas", required: true)]
        public Input<int> MaxReplicas { get; set; } = null!;

        [Input("metrics")]
        private InputList<AutoscalarAutoscalingPolicyMetricsGetArgs>? _metrics;

        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
        /// </summary>
        public InputList<AutoscalarAutoscalingPolicyMetricsGetArgs> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<AutoscalarAutoscalingPolicyMetricsGetArgs>());
            set => _metrics = value;
        }

        /// <summary>
        /// -
        /// (Required)
        /// The minimum number of replicas that the autoscaler can scale down
        /// to. This cannot be less than 0. If not provided, autoscaler will
        /// choose a default value depending on maximum number of instances
        /// allowed.
        /// </summary>
        [Input("minReplicas", required: true)]
        public Input<int> MinReplicas { get; set; } = null!;

        public AutoscalarAutoscalingPolicyGetArgs()
        {
        }
    }

    public sealed class AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        public AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs()
        {
        }
    }

    public sealed class AutoscalarAutoscalingPolicyLoadBalancingUtilizationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        public AutoscalarAutoscalingPolicyLoadBalancingUtilizationGetArgs()
        {
        }
    }

    public sealed class AutoscalarAutoscalingPolicyMetricsArgs : Pulumi.ResourceArgs
    {
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("singleInstanceAssignment")]
        public Input<double>? SingleInstanceAssignment { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target")]
        public Input<double>? Target { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Defines how target utilization value is expressed for a
        /// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
        /// or DELTA_PER_MINUTE.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AutoscalarAutoscalingPolicyMetricsArgs()
        {
        }
    }

    public sealed class AutoscalarAutoscalingPolicyMetricsGetArgs : Pulumi.ResourceArgs
    {
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("singleInstanceAssignment")]
        public Input<double>? SingleInstanceAssignment { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        [Input("target")]
        public Input<double>? Target { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Defines how target utilization value is expressed for a
        /// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
        /// or DELTA_PER_MINUTE.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AutoscalarAutoscalingPolicyMetricsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class AutoscalarAutoscalingPolicy
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The number of seconds that the autoscaler should wait before it
        /// starts collecting information from a new instance. This prevents
        /// the autoscaler from collecting information when the instance is
        /// initializing, during which the collected usage would not be
        /// reliable. The default time autoscaler waits is 60 seconds.
        /// Virtual machine initialization times might vary because of
        /// numerous factors. We recommend that you test how long an
        /// instance may take to initialize. To do this, create an instance
        /// and time the startup process.
        /// </summary>
        public readonly int? CooldownPeriod;
        /// <summary>
        /// -
        /// (Optional)
        /// Defines the CPU utilization policy that allows the autoscaler to
        /// scale based on the average CPU utilization of a managed instance
        /// group.  Structure is documented below.
        /// </summary>
        public readonly AutoscalarAutoscalingPolicyCpuUtilization CpuUtilization;
        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
        /// </summary>
        public readonly AutoscalarAutoscalingPolicyLoadBalancingUtilization? LoadBalancingUtilization;
        /// <summary>
        /// -
        /// (Required)
        /// The maximum number of instances that the autoscaler can scale up
        /// to. This is required when creating or updating an autoscaler. The
        /// maximum number of replicas should not be lower than minimal number
        /// of replicas.
        /// </summary>
        public readonly int MaxReplicas;
        /// <summary>
        /// -
        /// (Optional)
        /// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<AutoscalarAutoscalingPolicyMetrics> Metrics;
        /// <summary>
        /// -
        /// (Required)
        /// The minimum number of replicas that the autoscaler can scale down
        /// to. This cannot be less than 0. If not provided, autoscaler will
        /// choose a default value depending on maximum number of instances
        /// allowed.
        /// </summary>
        public readonly int MinReplicas;

        [OutputConstructor]
        private AutoscalarAutoscalingPolicy(
            int? cooldownPeriod,
            AutoscalarAutoscalingPolicyCpuUtilization cpuUtilization,
            AutoscalarAutoscalingPolicyLoadBalancingUtilization? loadBalancingUtilization,
            int maxReplicas,
            ImmutableArray<AutoscalarAutoscalingPolicyMetrics> metrics,
            int minReplicas)
        {
            CooldownPeriod = cooldownPeriod;
            CpuUtilization = cpuUtilization;
            LoadBalancingUtilization = loadBalancingUtilization;
            MaxReplicas = maxReplicas;
            Metrics = metrics;
            MinReplicas = minReplicas;
        }
    }

    [OutputType]
    public sealed class AutoscalarAutoscalingPolicyCpuUtilization
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        public readonly double Target;

        [OutputConstructor]
        private AutoscalarAutoscalingPolicyCpuUtilization(double target)
        {
            Target = target;
        }
    }

    [OutputType]
    public sealed class AutoscalarAutoscalingPolicyLoadBalancingUtilization
    {
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        public readonly double Target;

        [OutputConstructor]
        private AutoscalarAutoscalingPolicyLoadBalancingUtilization(double target)
        {
            Target = target;
        }
    }

    [OutputType]
    public sealed class AutoscalarAutoscalingPolicyMetrics
    {
        public readonly string? Filter;
        /// <summary>
        /// -
        /// (Required)
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        public readonly string Name;
        public readonly double? SingleInstanceAssignment;
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of backend capacity utilization (set in HTTP(s) load
        /// balancing configuration) that autoscaler should maintain. Must
        /// be a positive float value. If not defined, the default is 0.8.
        /// </summary>
        public readonly double? Target;
        /// <summary>
        /// -
        /// (Optional)
        /// Defines how target utilization value is expressed for a
        /// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
        /// or DELTA_PER_MINUTE.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private AutoscalarAutoscalingPolicyMetrics(
            string? filter,
            string name,
            double? singleInstanceAssignment,
            double? target,
            string? type)
        {
            Filter = filter;
            Name = name;
            SingleInstanceAssignment = singleInstanceAssignment;
            Target = target;
            Type = type;
        }
    }
    }
}
