// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dns
{
    public static partial class GetKeys
    {
        public static Task<GetKeysResult> InvokeAsync(GetKeysArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKeysResult>("gcp:dns/getKeys:getKeys", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetKeysArgs : Pulumi.InvokeArgs
    {
        [Input("managedZone", required: true)]
        public string ManagedZone { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetKeysArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetKeysResult
    {
        public readonly ImmutableArray<Outputs.GetKeysKeySigningKeysResult> KeySigningKeys;
        public readonly string ManagedZone;
        public readonly string Project;
        public readonly ImmutableArray<Outputs.GetKeysZoneSigningKeysResult> ZoneSigningKeys;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetKeysResult(
            ImmutableArray<Outputs.GetKeysKeySigningKeysResult> keySigningKeys,
            string managedZone,
            string project,
            ImmutableArray<Outputs.GetKeysZoneSigningKeysResult> zoneSigningKeys,
            string id)
        {
            KeySigningKeys = keySigningKeys;
            ManagedZone = managedZone;
            Project = project;
            ZoneSigningKeys = zoneSigningKeys;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetKeysKeySigningKeysDigestsResult
    {
        public readonly string? Digest;
        public readonly string? Type;

        [OutputConstructor]
        private GetKeysKeySigningKeysDigestsResult(
            string? digest,
            string? type)
        {
            Digest = digest;
            Type = type;
        }
    }

    [OutputType]
    public sealed class GetKeysKeySigningKeysResult
    {
        public readonly string Algorithm;
        public readonly string CreationTime;
        public readonly string Description;
        public readonly ImmutableArray<GetKeysKeySigningKeysDigestsResult> Digests;
        public readonly string DsRecord;
        public readonly string Id;
        public readonly bool IsActive;
        public readonly int KeyLength;
        public readonly int KeyTag;
        public readonly string PublicKey;

        [OutputConstructor]
        private GetKeysKeySigningKeysResult(
            string algorithm,
            string creationTime,
            string description,
            ImmutableArray<GetKeysKeySigningKeysDigestsResult> digests,
            string dsRecord,
            string id,
            bool isActive,
            int keyLength,
            int keyTag,
            string publicKey)
        {
            Algorithm = algorithm;
            CreationTime = creationTime;
            Description = description;
            Digests = digests;
            DsRecord = dsRecord;
            Id = id;
            IsActive = isActive;
            KeyLength = keyLength;
            KeyTag = keyTag;
            PublicKey = publicKey;
        }
    }

    [OutputType]
    public sealed class GetKeysZoneSigningKeysDigestsResult
    {
        public readonly string? Digest;
        public readonly string? Type;

        [OutputConstructor]
        private GetKeysZoneSigningKeysDigestsResult(
            string? digest,
            string? type)
        {
            Digest = digest;
            Type = type;
        }
    }

    [OutputType]
    public sealed class GetKeysZoneSigningKeysResult
    {
        public readonly string Algorithm;
        public readonly string CreationTime;
        public readonly string Description;
        public readonly ImmutableArray<GetKeysZoneSigningKeysDigestsResult> Digests;
        public readonly string Id;
        public readonly bool IsActive;
        public readonly int KeyLength;
        public readonly int KeyTag;
        public readonly string PublicKey;

        [OutputConstructor]
        private GetKeysZoneSigningKeysResult(
            string algorithm,
            string creationTime,
            string description,
            ImmutableArray<GetKeysZoneSigningKeysDigestsResult> digests,
            string id,
            bool isActive,
            int keyLength,
            int keyTag,
            string publicKey)
        {
            Algorithm = algorithm;
            CreationTime = creationTime;
            Description = description;
            Digests = digests;
            Id = id;
            IsActive = isActive;
            KeyLength = keyLength;
            KeyTag = keyTag;
            PublicKey = publicKey;
        }
    }
    }
}
