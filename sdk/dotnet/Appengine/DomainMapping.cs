// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.AppEngine
{
    /// <summary>
    /// A domain serving an App Engine application.
    /// 
    /// 
    /// To get more information about DomainMapping, see:
    /// 
    /// * [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.domainMappings)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/appengine/docs/standard/python/mapping-custom-domains)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/app_engine_domain_mapping.html.markdown.
    /// </summary>
    public partial class DomainMapping : Pulumi.CustomResource
    {
        /// <summary>
        /// -
        /// (Required)
        /// Relative name of the domain serving the application. Example: example.com.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Whether the domain creation should override any existing mappings for this domain.
        /// By default, overrides are rejected.
        /// </summary>
        [Output("overrideStrategy")]
        public Output<string?> OverrideStrategy { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The resource records required to configure this domain mapping. These records must be added to the domain's
        /// DNS configuration in order to serve the application via this domain mapping.
        /// </summary>
        [Output("resourceRecords")]
        public Output<ImmutableArray<Outputs.DomainMappingResourceRecords>> ResourceRecords { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.  Structure is documented below.
        /// </summary>
        [Output("sslSettings")]
        public Output<Outputs.DomainMappingSslSettings?> SslSettings { get; private set; } = null!;


        /// <summary>
        /// Create a DomainMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainMapping(string name, DomainMappingArgs args, CustomResourceOptions? options = null)
            : base("gcp:appengine/domainMapping:DomainMapping", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private DomainMapping(string name, Input<string> id, DomainMappingState? state = null, CustomResourceOptions? options = null)
            : base("gcp:appengine/domainMapping:DomainMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainMapping Get(string name, Input<string> id, DomainMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainMapping(name, id, state, options);
        }
    }

    public sealed class DomainMappingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Relative name of the domain serving the application. Example: example.com.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Whether the domain creation should override any existing mappings for this domain.
        /// By default, overrides are rejected.
        /// </summary>
        [Input("overrideStrategy")]
        public Input<string>? OverrideStrategy { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.  Structure is documented below.
        /// </summary>
        [Input("sslSettings")]
        public Input<Inputs.DomainMappingSslSettingsArgs>? SslSettings { get; set; }

        public DomainMappingArgs()
        {
        }
    }

    public sealed class DomainMappingState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Relative name of the domain serving the application. Example: example.com.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Whether the domain creation should override any existing mappings for this domain.
        /// By default, overrides are rejected.
        /// </summary>
        [Input("overrideStrategy")]
        public Input<string>? OverrideStrategy { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("resourceRecords")]
        private InputList<Inputs.DomainMappingResourceRecordsGetArgs>? _resourceRecords;

        /// <summary>
        /// The resource records required to configure this domain mapping. These records must be added to the domain's
        /// DNS configuration in order to serve the application via this domain mapping.
        /// </summary>
        public InputList<Inputs.DomainMappingResourceRecordsGetArgs> ResourceRecords
        {
            get => _resourceRecords ?? (_resourceRecords = new InputList<Inputs.DomainMappingResourceRecordsGetArgs>());
            set => _resourceRecords = value;
        }

        /// <summary>
        /// -
        /// (Optional)
        /// SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.  Structure is documented below.
        /// </summary>
        [Input("sslSettings")]
        public Input<Inputs.DomainMappingSslSettingsGetArgs>? SslSettings { get; set; }

        public DomainMappingState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DomainMappingResourceRecordsGetArgs : Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rrdata")]
        public Input<string>? Rrdata { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public DomainMappingResourceRecordsGetArgs()
        {
        }
    }

    public sealed class DomainMappingSslSettingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
        /// remove SSL support.
        /// By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
        /// or to configure SSL manually, specify `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must be
        /// authorized to administer the `AuthorizedCertificate` resource to manually map it to a DomainMapping resource.
        /// Example: 12345.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// -
        /// ID of the managed `AuthorizedCertificate` resource currently being provisioned, if applicable. Until the new
        /// managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
        /// provisioning process completes, the `certificateId` field will reflect the new managed certificate and this
        /// field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
        /// `certificateId` field with an update request.
        /// </summary>
        [Input("pendingManagedCertificateId")]
        public Input<string>? PendingManagedCertificateId { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// SSL management type for this domain. If `AUTOMATIC`, a managed certificate is automatically provisioned.
        /// If `MANUAL`, `certificateId` must be manually specified in order to configure SSL for this domain.
        /// </summary>
        [Input("sslManagementType", required: true)]
        public Input<string> SslManagementType { get; set; } = null!;

        public DomainMappingSslSettingsArgs()
        {
        }
    }

    public sealed class DomainMappingSslSettingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
        /// remove SSL support.
        /// By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
        /// or to configure SSL manually, specify `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must be
        /// authorized to administer the `AuthorizedCertificate` resource to manually map it to a DomainMapping resource.
        /// Example: 12345.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// -
        /// ID of the managed `AuthorizedCertificate` resource currently being provisioned, if applicable. Until the new
        /// managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
        /// provisioning process completes, the `certificateId` field will reflect the new managed certificate and this
        /// field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
        /// `certificateId` field with an update request.
        /// </summary>
        [Input("pendingManagedCertificateId")]
        public Input<string>? PendingManagedCertificateId { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// SSL management type for this domain. If `AUTOMATIC`, a managed certificate is automatically provisioned.
        /// If `MANUAL`, `certificateId` must be manually specified in order to configure SSL for this domain.
        /// </summary>
        [Input("sslManagementType", required: true)]
        public Input<string> SslManagementType { get; set; } = null!;

        public DomainMappingSslSettingsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DomainMappingResourceRecords
    {
        public readonly string? Name;
        public readonly string? Rrdata;
        public readonly string? Type;

        [OutputConstructor]
        private DomainMappingResourceRecords(
            string? name,
            string? rrdata,
            string? type)
        {
            Name = name;
            Rrdata = rrdata;
            Type = type;
        }
    }

    [OutputType]
    public sealed class DomainMappingSslSettings
    {
        /// <summary>
        /// -
        /// (Optional)
        /// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
        /// remove SSL support.
        /// By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
        /// or to configure SSL manually, specify `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must be
        /// authorized to administer the `AuthorizedCertificate` resource to manually map it to a DomainMapping resource.
        /// Example: 12345.
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// -
        /// ID of the managed `AuthorizedCertificate` resource currently being provisioned, if applicable. Until the new
        /// managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
        /// provisioning process completes, the `certificateId` field will reflect the new managed certificate and this
        /// field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
        /// `certificateId` field with an update request.
        /// </summary>
        public readonly string PendingManagedCertificateId;
        /// <summary>
        /// -
        /// (Required)
        /// SSL management type for this domain. If `AUTOMATIC`, a managed certificate is automatically provisioned.
        /// If `MANUAL`, `certificateId` must be manually specified in order to configure SSL for this domain.
        /// </summary>
        public readonly string SslManagementType;

        [OutputConstructor]
        private DomainMappingSslSettings(
            string certificateId,
            string pendingManagedCertificateId,
            string sslManagementType)
        {
            CertificateId = certificateId;
            PendingManagedCertificateId = pendingManagedCertificateId;
            SslManagementType = sslManagementType;
        }
    }
    }
}
