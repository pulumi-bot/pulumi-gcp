// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc
{
    /// <summary>
    /// Describes an autoscaling policy for Dataproc cluster autoscaler.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/dataproc_autoscaling_policy.html.markdown.
    /// </summary>
    public partial class AutoscalingPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Basic algorithm for autoscaling.  Structure is documented below.
        /// </summary>
        [Output("basicAlgorithm")]
        public Output<Outputs.AutoscalingPolicyBasicAlgorithm?> BasicAlgorithm { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The  location where the autoscaling poicy should reside.
        /// The default value is `global`.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The "resource name" of the autoscaling policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
        /// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
        /// 3 and 50 characters.
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Describes how the autoscaler will operate for secondary workers.  Structure is documented below.
        /// </summary>
        [Output("secondaryWorkerConfig")]
        public Output<Outputs.AutoscalingPolicySecondaryWorkerConfig?> SecondaryWorkerConfig { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Describes how the autoscaler will operate for primary workers.  Structure is documented below.
        /// </summary>
        [Output("workerConfig")]
        public Output<Outputs.AutoscalingPolicyWorkerConfig?> WorkerConfig { get; private set; } = null!;


        /// <summary>
        /// Create a AutoscalingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutoscalingPolicy(string name, AutoscalingPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataproc/autoscalingPolicy:AutoscalingPolicy", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private AutoscalingPolicy(string name, Input<string> id, AutoscalingPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataproc/autoscalingPolicy:AutoscalingPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutoscalingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutoscalingPolicy Get(string name, Input<string> id, AutoscalingPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AutoscalingPolicy(name, id, state, options);
        }
    }

    public sealed class AutoscalingPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Basic algorithm for autoscaling.  Structure is documented below.
        /// </summary>
        [Input("basicAlgorithm")]
        public Input<Inputs.AutoscalingPolicyBasicAlgorithmArgs>? BasicAlgorithm { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The  location where the autoscaling poicy should reside.
        /// The default value is `global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
        /// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
        /// 3 and 50 characters.
        /// </summary>
        [Input("policyId", required: true)]
        public Input<string> PolicyId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Describes how the autoscaler will operate for secondary workers.  Structure is documented below.
        /// </summary>
        [Input("secondaryWorkerConfig")]
        public Input<Inputs.AutoscalingPolicySecondaryWorkerConfigArgs>? SecondaryWorkerConfig { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Describes how the autoscaler will operate for primary workers.  Structure is documented below.
        /// </summary>
        [Input("workerConfig")]
        public Input<Inputs.AutoscalingPolicyWorkerConfigArgs>? WorkerConfig { get; set; }

        public AutoscalingPolicyArgs()
        {
        }
    }

    public sealed class AutoscalingPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Basic algorithm for autoscaling.  Structure is documented below.
        /// </summary>
        [Input("basicAlgorithm")]
        public Input<Inputs.AutoscalingPolicyBasicAlgorithmGetArgs>? BasicAlgorithm { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The  location where the autoscaling poicy should reside.
        /// The default value is `global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The "resource name" of the autoscaling policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
        /// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
        /// 3 and 50 characters.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Describes how the autoscaler will operate for secondary workers.  Structure is documented below.
        /// </summary>
        [Input("secondaryWorkerConfig")]
        public Input<Inputs.AutoscalingPolicySecondaryWorkerConfigGetArgs>? SecondaryWorkerConfig { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Describes how the autoscaler will operate for primary workers.  Structure is documented below.
        /// </summary>
        [Input("workerConfig")]
        public Input<Inputs.AutoscalingPolicyWorkerConfigGetArgs>? WorkerConfig { get; set; }

        public AutoscalingPolicyState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class AutoscalingPolicyBasicAlgorithmArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Duration between scaling events. A scaling period starts after the
        /// update operation from the previous event has completed.
        /// Bounds: [2m, 1d]. Default: 2m.
        /// </summary>
        [Input("cooldownPeriod")]
        public Input<string>? CooldownPeriod { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// YARN autoscaling configuration.  Structure is documented below.
        /// </summary>
        [Input("yarnConfig", required: true)]
        public Input<AutoscalingPolicyBasicAlgorithmYarnConfigArgs> YarnConfig { get; set; } = null!;

        public AutoscalingPolicyBasicAlgorithmArgs()
        {
        }
    }

    public sealed class AutoscalingPolicyBasicAlgorithmGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Duration between scaling events. A scaling period starts after the
        /// update operation from the previous event has completed.
        /// Bounds: [2m, 1d]. Default: 2m.
        /// </summary>
        [Input("cooldownPeriod")]
        public Input<string>? CooldownPeriod { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// YARN autoscaling configuration.  Structure is documented below.
        /// </summary>
        [Input("yarnConfig", required: true)]
        public Input<AutoscalingPolicyBasicAlgorithmYarnConfigGetArgs> YarnConfig { get; set; } = null!;

        public AutoscalingPolicyBasicAlgorithmGetArgs()
        {
        }
    }

    public sealed class AutoscalingPolicyBasicAlgorithmYarnConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Timeout for YARN graceful decommissioning of Node Managers. Specifies the
        /// duration to wait for jobs to complete before forcefully removing workers
        /// (and potentially interrupting jobs). Only applicable to downscaling operations.
        /// Bounds: [0s, 1d].
        /// </summary>
        [Input("gracefulDecommissionTimeout", required: true)]
        public Input<string> GracefulDecommissionTimeout { get; set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of average pending memory in the last cooldown period for which to
        /// remove workers. A scale-down factor of 1 will result in scaling down so that there
        /// is no available memory remaining after the update (more aggressive scaling).
        /// A scale-down factor of 0 disables removing workers, which can be beneficial for
        /// autoscaling a single job.
        /// Bounds: [0.0, 1.0].
        /// </summary>
        [Input("scaleDownFactor", required: true)]
        public Input<double> ScaleDownFactor { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
        /// For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
        /// recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
        /// means the autoscaler will scale down on any recommended change.
        /// Bounds: [0.0, 1.0]. Default: 0.0.
        /// </summary>
        [Input("scaleDownMinWorkerFraction")]
        public Input<double>? ScaleDownMinWorkerFraction { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of average pending memory in the last cooldown period for which to
        /// add workers. A scale-up factor of 1.0 will result in scaling up so that there
        /// is no pending memory remaining after the update (more aggressive scaling).
        /// A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
        /// (less aggressive scaling).
        /// Bounds: [0.0, 1.0].
        /// </summary>
        [Input("scaleUpFactor", required: true)]
        public Input<double> ScaleUpFactor { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Minimum scale-up threshold as a fraction of total cluster size before scaling
        /// occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
        /// must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
        /// 0 means the autoscaler will scale up on any recommended change.
        /// Bounds: [0.0, 1.0]. Default: 0.0.
        /// </summary>
        [Input("scaleUpMinWorkerFraction")]
        public Input<double>? ScaleUpMinWorkerFraction { get; set; }

        public AutoscalingPolicyBasicAlgorithmYarnConfigArgs()
        {
        }
    }

    public sealed class AutoscalingPolicyBasicAlgorithmYarnConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// Timeout for YARN graceful decommissioning of Node Managers. Specifies the
        /// duration to wait for jobs to complete before forcefully removing workers
        /// (and potentially interrupting jobs). Only applicable to downscaling operations.
        /// Bounds: [0s, 1d].
        /// </summary>
        [Input("gracefulDecommissionTimeout", required: true)]
        public Input<string> GracefulDecommissionTimeout { get; set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of average pending memory in the last cooldown period for which to
        /// remove workers. A scale-down factor of 1 will result in scaling down so that there
        /// is no available memory remaining after the update (more aggressive scaling).
        /// A scale-down factor of 0 disables removing workers, which can be beneficial for
        /// autoscaling a single job.
        /// Bounds: [0.0, 1.0].
        /// </summary>
        [Input("scaleDownFactor", required: true)]
        public Input<double> ScaleDownFactor { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
        /// For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
        /// recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
        /// means the autoscaler will scale down on any recommended change.
        /// Bounds: [0.0, 1.0]. Default: 0.0.
        /// </summary>
        [Input("scaleDownMinWorkerFraction")]
        public Input<double>? ScaleDownMinWorkerFraction { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Fraction of average pending memory in the last cooldown period for which to
        /// add workers. A scale-up factor of 1.0 will result in scaling up so that there
        /// is no pending memory remaining after the update (more aggressive scaling).
        /// A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
        /// (less aggressive scaling).
        /// Bounds: [0.0, 1.0].
        /// </summary>
        [Input("scaleUpFactor", required: true)]
        public Input<double> ScaleUpFactor { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Minimum scale-up threshold as a fraction of total cluster size before scaling
        /// occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
        /// must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
        /// 0 means the autoscaler will scale up on any recommended change.
        /// Bounds: [0.0, 1.0]. Default: 0.0.
        /// </summary>
        [Input("scaleUpMinWorkerFraction")]
        public Input<double>? ScaleUpMinWorkerFraction { get; set; }

        public AutoscalingPolicyBasicAlgorithmYarnConfigGetArgs()
        {
        }
    }

    public sealed class AutoscalingPolicySecondaryWorkerConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Maximum number of instances for this group. Note that by default, clusters will not use
        /// secondary workers. Required for secondary workers if the minimum secondary instances is set.
        /// Bounds: [minInstances, ). Defaults to 0.
        /// </summary>
        [Input("maxInstances")]
        public Input<int>? MaxInstances { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
        /// </summary>
        [Input("minInstances")]
        public Input<int>? MinInstances { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Weight for the instance group, which is used to determine the fraction of total workers
        /// in the cluster from this instance group. For example, if primary workers have weight 2,
        /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
        /// for each secondary worker.
        /// The cluster may not reach the specified balance if constrained by min/max bounds or other
        /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
        /// primary workers will be added. The cluster can also be out of balance when created.
        /// If weight is not set on any instance group, the cluster will default to equal weight for
        /// all groups: the cluster will attempt to maintain an equal number of workers in each group
        /// within the configured size bounds for each group. If weight is set for one group only,
        /// the cluster will default to zero weight on the unset group. For example if weight is set
        /// only on primary workers, the cluster will use primary workers only and no secondary workers.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public AutoscalingPolicySecondaryWorkerConfigArgs()
        {
        }
    }

    public sealed class AutoscalingPolicySecondaryWorkerConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Maximum number of instances for this group. Note that by default, clusters will not use
        /// secondary workers. Required for secondary workers if the minimum secondary instances is set.
        /// Bounds: [minInstances, ). Defaults to 0.
        /// </summary>
        [Input("maxInstances")]
        public Input<int>? MaxInstances { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
        /// </summary>
        [Input("minInstances")]
        public Input<int>? MinInstances { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Weight for the instance group, which is used to determine the fraction of total workers
        /// in the cluster from this instance group. For example, if primary workers have weight 2,
        /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
        /// for each secondary worker.
        /// The cluster may not reach the specified balance if constrained by min/max bounds or other
        /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
        /// primary workers will be added. The cluster can also be out of balance when created.
        /// If weight is not set on any instance group, the cluster will default to equal weight for
        /// all groups: the cluster will attempt to maintain an equal number of workers in each group
        /// within the configured size bounds for each group. If weight is set for one group only,
        /// the cluster will default to zero weight on the unset group. For example if weight is set
        /// only on primary workers, the cluster will use primary workers only and no secondary workers.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public AutoscalingPolicySecondaryWorkerConfigGetArgs()
        {
        }
    }

    public sealed class AutoscalingPolicyWorkerConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Maximum number of instances for this group. Note that by default, clusters will not use
        /// secondary workers. Required for secondary workers if the minimum secondary instances is set.
        /// Bounds: [minInstances, ). Defaults to 0.
        /// </summary>
        [Input("maxInstances", required: true)]
        public Input<int> MaxInstances { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
        /// </summary>
        [Input("minInstances")]
        public Input<int>? MinInstances { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Weight for the instance group, which is used to determine the fraction of total workers
        /// in the cluster from this instance group. For example, if primary workers have weight 2,
        /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
        /// for each secondary worker.
        /// The cluster may not reach the specified balance if constrained by min/max bounds or other
        /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
        /// primary workers will be added. The cluster can also be out of balance when created.
        /// If weight is not set on any instance group, the cluster will default to equal weight for
        /// all groups: the cluster will attempt to maintain an equal number of workers in each group
        /// within the configured size bounds for each group. If weight is set for one group only,
        /// the cluster will default to zero weight on the unset group. For example if weight is set
        /// only on primary workers, the cluster will use primary workers only and no secondary workers.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public AutoscalingPolicyWorkerConfigArgs()
        {
        }
    }

    public sealed class AutoscalingPolicyWorkerConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Maximum number of instances for this group. Note that by default, clusters will not use
        /// secondary workers. Required for secondary workers if the minimum secondary instances is set.
        /// Bounds: [minInstances, ). Defaults to 0.
        /// </summary>
        [Input("maxInstances", required: true)]
        public Input<int> MaxInstances { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
        /// </summary>
        [Input("minInstances")]
        public Input<int>? MinInstances { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Weight for the instance group, which is used to determine the fraction of total workers
        /// in the cluster from this instance group. For example, if primary workers have weight 2,
        /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
        /// for each secondary worker.
        /// The cluster may not reach the specified balance if constrained by min/max bounds or other
        /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
        /// primary workers will be added. The cluster can also be out of balance when created.
        /// If weight is not set on any instance group, the cluster will default to equal weight for
        /// all groups: the cluster will attempt to maintain an equal number of workers in each group
        /// within the configured size bounds for each group. If weight is set for one group only,
        /// the cluster will default to zero weight on the unset group. For example if weight is set
        /// only on primary workers, the cluster will use primary workers only and no secondary workers.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public AutoscalingPolicyWorkerConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class AutoscalingPolicyBasicAlgorithm
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Duration between scaling events. A scaling period starts after the
        /// update operation from the previous event has completed.
        /// Bounds: [2m, 1d]. Default: 2m.
        /// </summary>
        public readonly string? CooldownPeriod;
        /// <summary>
        /// -
        /// (Required)
        /// YARN autoscaling configuration.  Structure is documented below.
        /// </summary>
        public readonly AutoscalingPolicyBasicAlgorithmYarnConfig YarnConfig;

        [OutputConstructor]
        private AutoscalingPolicyBasicAlgorithm(
            string? cooldownPeriod,
            AutoscalingPolicyBasicAlgorithmYarnConfig yarnConfig)
        {
            CooldownPeriod = cooldownPeriod;
            YarnConfig = yarnConfig;
        }
    }

    [OutputType]
    public sealed class AutoscalingPolicyBasicAlgorithmYarnConfig
    {
        /// <summary>
        /// -
        /// (Required)
        /// Timeout for YARN graceful decommissioning of Node Managers. Specifies the
        /// duration to wait for jobs to complete before forcefully removing workers
        /// (and potentially interrupting jobs). Only applicable to downscaling operations.
        /// Bounds: [0s, 1d].
        /// </summary>
        public readonly string GracefulDecommissionTimeout;
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of average pending memory in the last cooldown period for which to
        /// remove workers. A scale-down factor of 1 will result in scaling down so that there
        /// is no available memory remaining after the update (more aggressive scaling).
        /// A scale-down factor of 0 disables removing workers, which can be beneficial for
        /// autoscaling a single job.
        /// Bounds: [0.0, 1.0].
        /// </summary>
        public readonly double ScaleDownFactor;
        /// <summary>
        /// -
        /// (Optional)
        /// Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
        /// For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
        /// recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
        /// means the autoscaler will scale down on any recommended change.
        /// Bounds: [0.0, 1.0]. Default: 0.0.
        /// </summary>
        public readonly double? ScaleDownMinWorkerFraction;
        /// <summary>
        /// -
        /// (Required)
        /// Fraction of average pending memory in the last cooldown period for which to
        /// add workers. A scale-up factor of 1.0 will result in scaling up so that there
        /// is no pending memory remaining after the update (more aggressive scaling).
        /// A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
        /// (less aggressive scaling).
        /// Bounds: [0.0, 1.0].
        /// </summary>
        public readonly double ScaleUpFactor;
        /// <summary>
        /// -
        /// (Optional)
        /// Minimum scale-up threshold as a fraction of total cluster size before scaling
        /// occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
        /// must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
        /// 0 means the autoscaler will scale up on any recommended change.
        /// Bounds: [0.0, 1.0]. Default: 0.0.
        /// </summary>
        public readonly double? ScaleUpMinWorkerFraction;

        [OutputConstructor]
        private AutoscalingPolicyBasicAlgorithmYarnConfig(
            string gracefulDecommissionTimeout,
            double scaleDownFactor,
            double? scaleDownMinWorkerFraction,
            double scaleUpFactor,
            double? scaleUpMinWorkerFraction)
        {
            GracefulDecommissionTimeout = gracefulDecommissionTimeout;
            ScaleDownFactor = scaleDownFactor;
            ScaleDownMinWorkerFraction = scaleDownMinWorkerFraction;
            ScaleUpFactor = scaleUpFactor;
            ScaleUpMinWorkerFraction = scaleUpMinWorkerFraction;
        }
    }

    [OutputType]
    public sealed class AutoscalingPolicySecondaryWorkerConfig
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Maximum number of instances for this group. Note that by default, clusters will not use
        /// secondary workers. Required for secondary workers if the minimum secondary instances is set.
        /// Bounds: [minInstances, ). Defaults to 0.
        /// </summary>
        public readonly int? MaxInstances;
        /// <summary>
        /// -
        /// (Optional)
        /// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
        /// </summary>
        public readonly int? MinInstances;
        /// <summary>
        /// -
        /// (Optional)
        /// Weight for the instance group, which is used to determine the fraction of total workers
        /// in the cluster from this instance group. For example, if primary workers have weight 2,
        /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
        /// for each secondary worker.
        /// The cluster may not reach the specified balance if constrained by min/max bounds or other
        /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
        /// primary workers will be added. The cluster can also be out of balance when created.
        /// If weight is not set on any instance group, the cluster will default to equal weight for
        /// all groups: the cluster will attempt to maintain an equal number of workers in each group
        /// within the configured size bounds for each group. If weight is set for one group only,
        /// the cluster will default to zero weight on the unset group. For example if weight is set
        /// only on primary workers, the cluster will use primary workers only and no secondary workers.
        /// </summary>
        public readonly int? Weight;

        [OutputConstructor]
        private AutoscalingPolicySecondaryWorkerConfig(
            int? maxInstances,
            int? minInstances,
            int? weight)
        {
            MaxInstances = maxInstances;
            MinInstances = minInstances;
            Weight = weight;
        }
    }

    [OutputType]
    public sealed class AutoscalingPolicyWorkerConfig
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Maximum number of instances for this group. Note that by default, clusters will not use
        /// secondary workers. Required for secondary workers if the minimum secondary instances is set.
        /// Bounds: [minInstances, ). Defaults to 0.
        /// </summary>
        public readonly int MaxInstances;
        /// <summary>
        /// -
        /// (Optional)
        /// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
        /// </summary>
        public readonly int? MinInstances;
        /// <summary>
        /// -
        /// (Optional)
        /// Weight for the instance group, which is used to determine the fraction of total workers
        /// in the cluster from this instance group. For example, if primary workers have weight 2,
        /// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
        /// for each secondary worker.
        /// The cluster may not reach the specified balance if constrained by min/max bounds or other
        /// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
        /// primary workers will be added. The cluster can also be out of balance when created.
        /// If weight is not set on any instance group, the cluster will default to equal weight for
        /// all groups: the cluster will attempt to maintain an equal number of workers in each group
        /// within the configured size bounds for each group. If weight is set for one group only,
        /// the cluster will default to zero weight on the unset group. For example if weight is set
        /// only on primary workers, the cluster will use primary workers only and no secondary workers.
        /// </summary>
        public readonly int? Weight;

        [OutputConstructor]
        private AutoscalingPolicyWorkerConfig(
            int maxInstances,
            int? minInstances,
            int? weight)
        {
            MaxInstances = maxInstances;
            MinInstances = minInstances;
            Weight = weight;
        }
    }
    }
}
