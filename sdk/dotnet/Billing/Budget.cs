// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Billing
{
    /// <summary>
    /// Budget configuration for a billing account.
    /// 
    /// To get more information about Budget, see:
    /// 
    /// * [API documentation](https://cloud.google.com/billing/docs/reference/budget/rest/v1beta1/billingAccounts.budgets)
    /// * How-to Guides
    ///     * [Creating a budget](https://cloud.google.com/billing/docs/how-to/budgets)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/billing_budget.html.markdown.
    /// </summary>
    public partial class Budget : Pulumi.CustomResource
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Defines notifications that are sent on every update to the
        /// billing account's spend, regardless of the thresholds defined
        /// using threshold rules.  Structure is documented below.
        /// </summary>
        [Output("allUpdatesRule")]
        public Output<Outputs.BudgetAllUpdatesRule?> AllUpdatesRule { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// The budgeted amount for each usage period.  Structure is documented below.
        /// </summary>
        [Output("amount")]
        public Output<Outputs.BudgetAmount> Amount { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// ID of the billing account to set a budget on.
        /// </summary>
        [Output("billingAccount")]
        public Output<string> BillingAccount { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Filters that define which resources are used to compute the actual
        /// spend against the budget.  Structure is documented below.
        /// </summary>
        [Output("budgetFilter")]
        public Output<Outputs.BudgetBudgetFilter?> BudgetFilter { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// User data for display name in UI. Must be &lt;= 60 chars.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
        /// billingAccounts/{billingAccountId}/budgets/{budgetId}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// Rules that trigger alerts (notifications of thresholds being
        /// crossed) when spend exceeds the specified percentages of the
        /// budget.  Structure is documented below.
        /// </summary>
        [Output("thresholdRules")]
        public Output<ImmutableArray<Outputs.BudgetThresholdRules>> ThresholdRules { get; private set; } = null!;


        /// <summary>
        /// Create a Budget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Budget(string name, BudgetArgs args, CustomResourceOptions? options = null)
            : base("gcp:billing/budget:Budget", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Budget(string name, Input<string> id, BudgetState? state = null, CustomResourceOptions? options = null)
            : base("gcp:billing/budget:Budget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Budget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Budget Get(string name, Input<string> id, BudgetState? state = null, CustomResourceOptions? options = null)
        {
            return new Budget(name, id, state, options);
        }
    }

    public sealed class BudgetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Defines notifications that are sent on every update to the
        /// billing account's spend, regardless of the thresholds defined
        /// using threshold rules.  Structure is documented below.
        /// </summary>
        [Input("allUpdatesRule")]
        public Input<Inputs.BudgetAllUpdatesRuleArgs>? AllUpdatesRule { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The budgeted amount for each usage period.  Structure is documented below.
        /// </summary>
        [Input("amount", required: true)]
        public Input<Inputs.BudgetAmountArgs> Amount { get; set; } = null!;

        /// <summary>
        /// -
        /// (Required)
        /// ID of the billing account to set a budget on.
        /// </summary>
        [Input("billingAccount", required: true)]
        public Input<string> BillingAccount { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// Filters that define which resources are used to compute the actual
        /// spend against the budget.  Structure is documented below.
        /// </summary>
        [Input("budgetFilter")]
        public Input<Inputs.BudgetBudgetFilterArgs>? BudgetFilter { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// User data for display name in UI. Must be &lt;= 60 chars.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("thresholdRules", required: true)]
        private InputList<Inputs.BudgetThresholdRulesArgs>? _thresholdRules;

        /// <summary>
        /// -
        /// (Required)
        /// Rules that trigger alerts (notifications of thresholds being
        /// crossed) when spend exceeds the specified percentages of the
        /// budget.  Structure is documented below.
        /// </summary>
        public InputList<Inputs.BudgetThresholdRulesArgs> ThresholdRules
        {
            get => _thresholdRules ?? (_thresholdRules = new InputList<Inputs.BudgetThresholdRulesArgs>());
            set => _thresholdRules = value;
        }

        public BudgetArgs()
        {
        }
    }

    public sealed class BudgetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Defines notifications that are sent on every update to the
        /// billing account's spend, regardless of the thresholds defined
        /// using threshold rules.  Structure is documented below.
        /// </summary>
        [Input("allUpdatesRule")]
        public Input<Inputs.BudgetAllUpdatesRuleGetArgs>? AllUpdatesRule { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// The budgeted amount for each usage period.  Structure is documented below.
        /// </summary>
        [Input("amount")]
        public Input<Inputs.BudgetAmountGetArgs>? Amount { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// ID of the billing account to set a budget on.
        /// </summary>
        [Input("billingAccount")]
        public Input<string>? BillingAccount { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Filters that define which resources are used to compute the actual
        /// spend against the budget.  Structure is documented below.
        /// </summary>
        [Input("budgetFilter")]
        public Input<Inputs.BudgetBudgetFilterGetArgs>? BudgetFilter { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// User data for display name in UI. Must be &lt;= 60 chars.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
        /// billingAccounts/{billingAccountId}/budgets/{budgetId}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("thresholdRules")]
        private InputList<Inputs.BudgetThresholdRulesGetArgs>? _thresholdRules;

        /// <summary>
        /// -
        /// (Required)
        /// Rules that trigger alerts (notifications of thresholds being
        /// crossed) when spend exceeds the specified percentages of the
        /// budget.  Structure is documented below.
        /// </summary>
        public InputList<Inputs.BudgetThresholdRulesGetArgs> ThresholdRules
        {
            get => _thresholdRules ?? (_thresholdRules = new InputList<Inputs.BudgetThresholdRulesGetArgs>());
            set => _thresholdRules = value;
        }

        public BudgetState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class BudgetAllUpdatesRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// The name of the Cloud Pub/Sub topic where budget related
        /// messages will be published, in the form
        /// projects/{project_id}/topics/{topic_id}. Updates are sent
        /// at regular intervals to the topic.
        /// </summary>
        [Input("pubsubTopic", required: true)]
        public Input<string> PubsubTopic { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The schema version of the notification. Only "1.0" is
        /// accepted. It represents the JSON schema as defined in
        /// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
        /// </summary>
        [Input("schemaVersion")]
        public Input<string>? SchemaVersion { get; set; }

        public BudgetAllUpdatesRuleArgs()
        {
        }
    }

    public sealed class BudgetAllUpdatesRuleGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// The name of the Cloud Pub/Sub topic where budget related
        /// messages will be published, in the form
        /// projects/{project_id}/topics/{topic_id}. Updates are sent
        /// at regular intervals to the topic.
        /// </summary>
        [Input("pubsubTopic", required: true)]
        public Input<string> PubsubTopic { get; set; } = null!;

        /// <summary>
        /// -
        /// (Optional)
        /// The schema version of the notification. Only "1.0" is
        /// accepted. It represents the JSON schema as defined in
        /// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
        /// </summary>
        [Input("schemaVersion")]
        public Input<string>? SchemaVersion { get; set; }

        public BudgetAllUpdatesRuleGetArgs()
        {
        }
    }

    public sealed class BudgetAmountArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// A specified amount to use as the budget. currencyCode is
        /// optional. If specified, it must match the currency of the
        /// billing account. The currencyCode is provided on output.  Structure is documented below.
        /// </summary>
        [Input("specifiedAmount", required: true)]
        public Input<BudgetAmountSpecifiedAmountArgs> SpecifiedAmount { get; set; } = null!;

        public BudgetAmountArgs()
        {
        }
    }

    public sealed class BudgetAmountGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Required)
        /// A specified amount to use as the budget. currencyCode is
        /// optional. If specified, it must match the currency of the
        /// billing account. The currencyCode is provided on output.  Structure is documented below.
        /// </summary>
        [Input("specifiedAmount", required: true)]
        public Input<BudgetAmountSpecifiedAmountGetArgs> SpecifiedAmount { get; set; } = null!;

        public BudgetAmountGetArgs()
        {
        }
    }

    public sealed class BudgetAmountSpecifiedAmountArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The 3-letter currency code defined in ISO 4217.
        /// </summary>
        [Input("currencyCode")]
        public Input<string>? CurrencyCode { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Number of nano (10^-9) units of the amount.
        /// The value must be between -999,999,999 and +999,999,999
        /// inclusive. If units is positive, nanos must be positive or
        /// zero. If units is zero, nanos can be positive, zero, or
        /// negative. If units is negative, nanos must be negative or
        /// zero. For example $-1.75 is represented as units=-1 and
        /// nanos=-750,000,000.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The whole units of the amount. For example if currencyCode
        /// is "USD", then 1 unit is one US dollar.
        /// </summary>
        [Input("units")]
        public Input<string>? Units { get; set; }

        public BudgetAmountSpecifiedAmountArgs()
        {
        }
    }

    public sealed class BudgetAmountSpecifiedAmountGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The 3-letter currency code defined in ISO 4217.
        /// </summary>
        [Input("currencyCode")]
        public Input<string>? CurrencyCode { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// Number of nano (10^-9) units of the amount.
        /// The value must be between -999,999,999 and +999,999,999
        /// inclusive. If units is positive, nanos must be positive or
        /// zero. If units is zero, nanos can be positive, zero, or
        /// negative. If units is negative, nanos must be negative or
        /// zero. For example $-1.75 is represented as units=-1 and
        /// nanos=-750,000,000.
        /// </summary>
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        /// <summary>
        /// -
        /// (Optional)
        /// The whole units of the amount. For example if currencyCode
        /// is "USD", then 1 unit is one US dollar.
        /// </summary>
        [Input("units")]
        public Input<string>? Units { get; set; }

        public BudgetAmountSpecifiedAmountGetArgs()
        {
        }
    }

    public sealed class BudgetBudgetFilterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Specifies how credits should be treated when determining spend
        /// for threshold calculations.
        /// </summary>
        [Input("creditTypesTreatment")]
        public Input<string>? CreditTypesTreatment { get; set; }

        [Input("projects")]
        private InputList<string>? _projects;

        /// <summary>
        /// -
        /// (Optional)
        /// A set of projects of the form projects/{project_id},
        /// specifying that usage from only this set of projects should be
        /// included in the budget. If omitted, the report will include
        /// all usage for the billing account, regardless of which project
        /// the usage occurred on. Only zero or one project can be
        /// specified currently.
        /// </summary>
        public InputList<string> Projects
        {
            get => _projects ?? (_projects = new InputList<string>());
            set => _projects = value;
        }

        [Input("services")]
        private InputList<string>? _services;

        /// <summary>
        /// -
        /// (Optional)
        /// A set of services of the form services/{service_id},
        /// specifying that usage from only this set of services should be
        /// included in the budget. If omitted, the report will include
        /// usage for all the services. The service names are available
        /// through the Catalog API:
        /// https://cloud.google.com/billing/v1/how-tos/catalog-api.
        /// </summary>
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public BudgetBudgetFilterArgs()
        {
        }
    }

    public sealed class BudgetBudgetFilterGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Specifies how credits should be treated when determining spend
        /// for threshold calculations.
        /// </summary>
        [Input("creditTypesTreatment")]
        public Input<string>? CreditTypesTreatment { get; set; }

        [Input("projects")]
        private InputList<string>? _projects;

        /// <summary>
        /// -
        /// (Optional)
        /// A set of projects of the form projects/{project_id},
        /// specifying that usage from only this set of projects should be
        /// included in the budget. If omitted, the report will include
        /// all usage for the billing account, regardless of which project
        /// the usage occurred on. Only zero or one project can be
        /// specified currently.
        /// </summary>
        public InputList<string> Projects
        {
            get => _projects ?? (_projects = new InputList<string>());
            set => _projects = value;
        }

        [Input("services")]
        private InputList<string>? _services;

        /// <summary>
        /// -
        /// (Optional)
        /// A set of services of the form services/{service_id},
        /// specifying that usage from only this set of services should be
        /// included in the budget. If omitted, the report will include
        /// usage for all the services. The service names are available
        /// through the Catalog API:
        /// https://cloud.google.com/billing/v1/how-tos/catalog-api.
        /// </summary>
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public BudgetBudgetFilterGetArgs()
        {
        }
    }

    public sealed class BudgetThresholdRulesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The type of basis used to determine if spend has passed
        /// the threshold.
        /// </summary>
        [Input("spendBasis")]
        public Input<string>? SpendBasis { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Send an alert when this threshold is exceeded. This is a
        /// 1.0-based percentage, so 0.5 = 50%. Must be &gt;= 0.
        /// </summary>
        [Input("thresholdPercent", required: true)]
        public Input<double> ThresholdPercent { get; set; } = null!;

        public BudgetThresholdRulesArgs()
        {
        }
    }

    public sealed class BudgetThresholdRulesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The type of basis used to determine if spend has passed
        /// the threshold.
        /// </summary>
        [Input("spendBasis")]
        public Input<string>? SpendBasis { get; set; }

        /// <summary>
        /// -
        /// (Required)
        /// Send an alert when this threshold is exceeded. This is a
        /// 1.0-based percentage, so 0.5 = 50%. Must be &gt;= 0.
        /// </summary>
        [Input("thresholdPercent", required: true)]
        public Input<double> ThresholdPercent { get; set; } = null!;

        public BudgetThresholdRulesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class BudgetAllUpdatesRule
    {
        /// <summary>
        /// -
        /// (Required)
        /// The name of the Cloud Pub/Sub topic where budget related
        /// messages will be published, in the form
        /// projects/{project_id}/topics/{topic_id}. Updates are sent
        /// at regular intervals to the topic.
        /// </summary>
        public readonly string PubsubTopic;
        /// <summary>
        /// -
        /// (Optional)
        /// The schema version of the notification. Only "1.0" is
        /// accepted. It represents the JSON schema as defined in
        /// https://cloud.google.com/billing/docs/how-to/budgets#notification_format.
        /// </summary>
        public readonly string? SchemaVersion;

        [OutputConstructor]
        private BudgetAllUpdatesRule(
            string pubsubTopic,
            string? schemaVersion)
        {
            PubsubTopic = pubsubTopic;
            SchemaVersion = schemaVersion;
        }
    }

    [OutputType]
    public sealed class BudgetAmount
    {
        /// <summary>
        /// -
        /// (Required)
        /// A specified amount to use as the budget. currencyCode is
        /// optional. If specified, it must match the currency of the
        /// billing account. The currencyCode is provided on output.  Structure is documented below.
        /// </summary>
        public readonly BudgetAmountSpecifiedAmount SpecifiedAmount;

        [OutputConstructor]
        private BudgetAmount(BudgetAmountSpecifiedAmount specifiedAmount)
        {
            SpecifiedAmount = specifiedAmount;
        }
    }

    [OutputType]
    public sealed class BudgetAmountSpecifiedAmount
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The 3-letter currency code defined in ISO 4217.
        /// </summary>
        public readonly string? CurrencyCode;
        /// <summary>
        /// -
        /// (Optional)
        /// Number of nano (10^-9) units of the amount.
        /// The value must be between -999,999,999 and +999,999,999
        /// inclusive. If units is positive, nanos must be positive or
        /// zero. If units is zero, nanos can be positive, zero, or
        /// negative. If units is negative, nanos must be negative or
        /// zero. For example $-1.75 is represented as units=-1 and
        /// nanos=-750,000,000.
        /// </summary>
        public readonly int? Nanos;
        /// <summary>
        /// -
        /// (Optional)
        /// The whole units of the amount. For example if currencyCode
        /// is "USD", then 1 unit is one US dollar.
        /// </summary>
        public readonly string? Units;

        [OutputConstructor]
        private BudgetAmountSpecifiedAmount(
            string? currencyCode,
            int? nanos,
            string? units)
        {
            CurrencyCode = currencyCode;
            Nanos = nanos;
            Units = units;
        }
    }

    [OutputType]
    public sealed class BudgetBudgetFilter
    {
        /// <summary>
        /// -
        /// (Optional)
        /// Specifies how credits should be treated when determining spend
        /// for threshold calculations.
        /// </summary>
        public readonly string? CreditTypesTreatment;
        /// <summary>
        /// -
        /// (Optional)
        /// A set of projects of the form projects/{project_id},
        /// specifying that usage from only this set of projects should be
        /// included in the budget. If omitted, the report will include
        /// all usage for the billing account, regardless of which project
        /// the usage occurred on. Only zero or one project can be
        /// specified currently.
        /// </summary>
        public readonly ImmutableArray<string> Projects;
        /// <summary>
        /// -
        /// (Optional)
        /// A set of services of the form services/{service_id},
        /// specifying that usage from only this set of services should be
        /// included in the budget. If omitted, the report will include
        /// usage for all the services. The service names are available
        /// through the Catalog API:
        /// https://cloud.google.com/billing/v1/how-tos/catalog-api.
        /// </summary>
        public readonly ImmutableArray<string> Services;

        [OutputConstructor]
        private BudgetBudgetFilter(
            string? creditTypesTreatment,
            ImmutableArray<string> projects,
            ImmutableArray<string> services)
        {
            CreditTypesTreatment = creditTypesTreatment;
            Projects = projects;
            Services = services;
        }
    }

    [OutputType]
    public sealed class BudgetThresholdRules
    {
        /// <summary>
        /// -
        /// (Optional)
        /// The type of basis used to determine if spend has passed
        /// the threshold.
        /// </summary>
        public readonly string? SpendBasis;
        /// <summary>
        /// -
        /// (Required)
        /// Send an alert when this threshold is exceeded. This is a
        /// 1.0-based percentage, so 0.5 = 50%. Must be &gt;= 0.
        /// </summary>
        public readonly double ThresholdPercent;

        [OutputConstructor]
        private BudgetThresholdRules(
            string? spendBasis,
            double thresholdPercent)
        {
            SpendBasis = spendBasis;
            ThresholdPercent = thresholdPercent;
        }
    }
    }
}
