// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logging

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type BillingAccountSinkBigqueryOptions struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type BillingAccountSinkBigqueryOptionsInput interface {
	pulumi.Input

	ToBillingAccountSinkBigqueryOptionsOutput() BillingAccountSinkBigqueryOptionsOutput
	ToBillingAccountSinkBigqueryOptionsOutputWithContext(context.Context) BillingAccountSinkBigqueryOptionsOutput
}

type BillingAccountSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (BillingAccountSinkBigqueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingAccountSinkBigqueryOptions)(nil)).Elem()
}

func (i BillingAccountSinkBigqueryOptionsArgs) ToBillingAccountSinkBigqueryOptionsOutput() BillingAccountSinkBigqueryOptionsOutput {
	return i.ToBillingAccountSinkBigqueryOptionsOutputWithContext(context.Background())
}

func (i BillingAccountSinkBigqueryOptionsArgs) ToBillingAccountSinkBigqueryOptionsOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsOutput)
}

func (i BillingAccountSinkBigqueryOptionsArgs) ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput {
	return i.ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i BillingAccountSinkBigqueryOptionsArgs) ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsOutput).ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx)
}

type BillingAccountSinkBigqueryOptionsPtrInput interface {
	pulumi.Input

	ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput
	ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(context.Context) BillingAccountSinkBigqueryOptionsPtrOutput
}

type billingAccountSinkBigqueryOptionsPtrType BillingAccountSinkBigqueryOptionsArgs

func BillingAccountSinkBigqueryOptionsPtr(v *BillingAccountSinkBigqueryOptionsArgs) BillingAccountSinkBigqueryOptionsPtrInput {
	return (*billingAccountSinkBigqueryOptionsPtrType)(v)
}

func (*billingAccountSinkBigqueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingAccountSinkBigqueryOptions)(nil)).Elem()
}

func (i *billingAccountSinkBigqueryOptionsPtrType) ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput {
	return i.ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i *billingAccountSinkBigqueryOptionsPtrType) ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsPtrOutput)
}

type BillingAccountSinkBigqueryOptionsOutput struct{ *pulumi.OutputState }

func (BillingAccountSinkBigqueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingAccountSinkBigqueryOptions)(nil)).Elem()
}

func (o BillingAccountSinkBigqueryOptionsOutput) ToBillingAccountSinkBigqueryOptionsOutput() BillingAccountSinkBigqueryOptionsOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsOutput) ToBillingAccountSinkBigqueryOptionsOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsOutput) ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput {
	return o.ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (o BillingAccountSinkBigqueryOptionsOutput) ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsPtrOutput {
	return o.ApplyT(func(v BillingAccountSinkBigqueryOptions) *BillingAccountSinkBigqueryOptions {
		return &v
	}).(BillingAccountSinkBigqueryOptionsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BillingAccountSinkBigqueryOptionsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v BillingAccountSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type BillingAccountSinkBigqueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (BillingAccountSinkBigqueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingAccountSinkBigqueryOptions)(nil)).Elem()
}

func (o BillingAccountSinkBigqueryOptionsPtrOutput) ToBillingAccountSinkBigqueryOptionsPtrOutput() BillingAccountSinkBigqueryOptionsPtrOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsPtrOutput) ToBillingAccountSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsPtrOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsPtrOutput) Elem() BillingAccountSinkBigqueryOptionsOutput {
	return o.ApplyT(func(v *BillingAccountSinkBigqueryOptions) BillingAccountSinkBigqueryOptions { return *v }).(BillingAccountSinkBigqueryOptionsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BillingAccountSinkBigqueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v BillingAccountSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type BillingAccountSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type BillingAccountSinkBigqueryOptionsArgsInput interface {
	pulumi.Input

	ToBillingAccountSinkBigqueryOptionsArgsOutput() BillingAccountSinkBigqueryOptionsArgsOutput
	ToBillingAccountSinkBigqueryOptionsArgsOutputWithContext(context.Context) BillingAccountSinkBigqueryOptionsArgsOutput
}

type BillingAccountSinkBigqueryOptionsArgsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (BillingAccountSinkBigqueryOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingAccountSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (i BillingAccountSinkBigqueryOptionsArgsArgs) ToBillingAccountSinkBigqueryOptionsArgsOutput() BillingAccountSinkBigqueryOptionsArgsOutput {
	return i.ToBillingAccountSinkBigqueryOptionsArgsOutputWithContext(context.Background())
}

func (i BillingAccountSinkBigqueryOptionsArgsArgs) ToBillingAccountSinkBigqueryOptionsArgsOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsArgsOutput)
}

func (i BillingAccountSinkBigqueryOptionsArgsArgs) ToBillingAccountSinkBigqueryOptionsArgsPtrOutput() BillingAccountSinkBigqueryOptionsArgsPtrOutput {
	return i.ToBillingAccountSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (i BillingAccountSinkBigqueryOptionsArgsArgs) ToBillingAccountSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsArgsOutput).ToBillingAccountSinkBigqueryOptionsArgsPtrOutputWithContext(ctx)
}

type BillingAccountSinkBigqueryOptionsArgsPtrInput interface {
	pulumi.Input

	ToBillingAccountSinkBigqueryOptionsArgsPtrOutput() BillingAccountSinkBigqueryOptionsArgsPtrOutput
	ToBillingAccountSinkBigqueryOptionsArgsPtrOutputWithContext(context.Context) BillingAccountSinkBigqueryOptionsArgsPtrOutput
}

type billingAccountSinkBigqueryOptionsArgsPtrType BillingAccountSinkBigqueryOptionsArgsArgs

func BillingAccountSinkBigqueryOptionsArgsPtr(v *BillingAccountSinkBigqueryOptionsArgsArgs) BillingAccountSinkBigqueryOptionsArgsPtrInput {
	return (*billingAccountSinkBigqueryOptionsArgsPtrType)(v)
}

func (*billingAccountSinkBigqueryOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingAccountSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (i *billingAccountSinkBigqueryOptionsArgsPtrType) ToBillingAccountSinkBigqueryOptionsArgsPtrOutput() BillingAccountSinkBigqueryOptionsArgsPtrOutput {
	return i.ToBillingAccountSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *billingAccountSinkBigqueryOptionsArgsPtrType) ToBillingAccountSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsArgsPtrOutput)
}

type BillingAccountSinkBigqueryOptionsArgsOutput struct{ *pulumi.OutputState }

func (BillingAccountSinkBigqueryOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingAccountSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (o BillingAccountSinkBigqueryOptionsArgsOutput) ToBillingAccountSinkBigqueryOptionsArgsOutput() BillingAccountSinkBigqueryOptionsArgsOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsArgsOutput) ToBillingAccountSinkBigqueryOptionsArgsOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsArgsOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsArgsOutput) ToBillingAccountSinkBigqueryOptionsArgsPtrOutput() BillingAccountSinkBigqueryOptionsArgsPtrOutput {
	return o.ToBillingAccountSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (o BillingAccountSinkBigqueryOptionsArgsOutput) ToBillingAccountSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsArgsPtrOutput {
	return o.ApplyT(func(v BillingAccountSinkBigqueryOptionsArgs) *BillingAccountSinkBigqueryOptionsArgs {
		return &v
	}).(BillingAccountSinkBigqueryOptionsArgsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BillingAccountSinkBigqueryOptionsArgsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v BillingAccountSinkBigqueryOptionsArgs) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type BillingAccountSinkBigqueryOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (BillingAccountSinkBigqueryOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingAccountSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (o BillingAccountSinkBigqueryOptionsArgsPtrOutput) ToBillingAccountSinkBigqueryOptionsArgsPtrOutput() BillingAccountSinkBigqueryOptionsArgsPtrOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsArgsPtrOutput) ToBillingAccountSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsArgsPtrOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsArgsPtrOutput) Elem() BillingAccountSinkBigqueryOptionsArgsOutput {
	return o.ApplyT(func(v *BillingAccountSinkBigqueryOptionsArgs) BillingAccountSinkBigqueryOptionsArgs { return *v }).(BillingAccountSinkBigqueryOptionsArgsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BillingAccountSinkBigqueryOptionsArgsPtrOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v BillingAccountSinkBigqueryOptionsArgs) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type BillingAccountSinkBigqueryOptionsState struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type BillingAccountSinkBigqueryOptionsStateInput interface {
	pulumi.Input

	ToBillingAccountSinkBigqueryOptionsStateOutput() BillingAccountSinkBigqueryOptionsStateOutput
	ToBillingAccountSinkBigqueryOptionsStateOutputWithContext(context.Context) BillingAccountSinkBigqueryOptionsStateOutput
}

type BillingAccountSinkBigqueryOptionsStateArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (BillingAccountSinkBigqueryOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingAccountSinkBigqueryOptionsState)(nil)).Elem()
}

func (i BillingAccountSinkBigqueryOptionsStateArgs) ToBillingAccountSinkBigqueryOptionsStateOutput() BillingAccountSinkBigqueryOptionsStateOutput {
	return i.ToBillingAccountSinkBigqueryOptionsStateOutputWithContext(context.Background())
}

func (i BillingAccountSinkBigqueryOptionsStateArgs) ToBillingAccountSinkBigqueryOptionsStateOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingAccountSinkBigqueryOptionsStateOutput)
}

type BillingAccountSinkBigqueryOptionsStateOutput struct{ *pulumi.OutputState }

func (BillingAccountSinkBigqueryOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingAccountSinkBigqueryOptionsState)(nil)).Elem()
}

func (o BillingAccountSinkBigqueryOptionsStateOutput) ToBillingAccountSinkBigqueryOptionsStateOutput() BillingAccountSinkBigqueryOptionsStateOutput {
	return o
}

func (o BillingAccountSinkBigqueryOptionsStateOutput) ToBillingAccountSinkBigqueryOptionsStateOutputWithContext(ctx context.Context) BillingAccountSinkBigqueryOptionsStateOutput {
	return o
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BillingAccountSinkBigqueryOptionsStateOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v BillingAccountSinkBigqueryOptionsState) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type FolderSinkBigqueryOptions struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type FolderSinkBigqueryOptionsInput interface {
	pulumi.Input

	ToFolderSinkBigqueryOptionsOutput() FolderSinkBigqueryOptionsOutput
	ToFolderSinkBigqueryOptionsOutputWithContext(context.Context) FolderSinkBigqueryOptionsOutput
}

type FolderSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (FolderSinkBigqueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderSinkBigqueryOptions)(nil)).Elem()
}

func (i FolderSinkBigqueryOptionsArgs) ToFolderSinkBigqueryOptionsOutput() FolderSinkBigqueryOptionsOutput {
	return i.ToFolderSinkBigqueryOptionsOutputWithContext(context.Background())
}

func (i FolderSinkBigqueryOptionsArgs) ToFolderSinkBigqueryOptionsOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsOutput)
}

func (i FolderSinkBigqueryOptionsArgs) ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput {
	return i.ToFolderSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i FolderSinkBigqueryOptionsArgs) ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsOutput).ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx)
}

type FolderSinkBigqueryOptionsPtrInput interface {
	pulumi.Input

	ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput
	ToFolderSinkBigqueryOptionsPtrOutputWithContext(context.Context) FolderSinkBigqueryOptionsPtrOutput
}

type folderSinkBigqueryOptionsPtrType FolderSinkBigqueryOptionsArgs

func FolderSinkBigqueryOptionsPtr(v *FolderSinkBigqueryOptionsArgs) FolderSinkBigqueryOptionsPtrInput {
	return (*folderSinkBigqueryOptionsPtrType)(v)
}

func (*folderSinkBigqueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderSinkBigqueryOptions)(nil)).Elem()
}

func (i *folderSinkBigqueryOptionsPtrType) ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput {
	return i.ToFolderSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i *folderSinkBigqueryOptionsPtrType) ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsPtrOutput)
}

type FolderSinkBigqueryOptionsOutput struct{ *pulumi.OutputState }

func (FolderSinkBigqueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderSinkBigqueryOptions)(nil)).Elem()
}

func (o FolderSinkBigqueryOptionsOutput) ToFolderSinkBigqueryOptionsOutput() FolderSinkBigqueryOptionsOutput {
	return o
}

func (o FolderSinkBigqueryOptionsOutput) ToFolderSinkBigqueryOptionsOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsOutput {
	return o
}

func (o FolderSinkBigqueryOptionsOutput) ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput {
	return o.ToFolderSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (o FolderSinkBigqueryOptionsOutput) ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsPtrOutput {
	return o.ApplyT(func(v FolderSinkBigqueryOptions) *FolderSinkBigqueryOptions {
		return &v
	}).(FolderSinkBigqueryOptionsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o FolderSinkBigqueryOptionsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v FolderSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type FolderSinkBigqueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (FolderSinkBigqueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderSinkBigqueryOptions)(nil)).Elem()
}

func (o FolderSinkBigqueryOptionsPtrOutput) ToFolderSinkBigqueryOptionsPtrOutput() FolderSinkBigqueryOptionsPtrOutput {
	return o
}

func (o FolderSinkBigqueryOptionsPtrOutput) ToFolderSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsPtrOutput {
	return o
}

func (o FolderSinkBigqueryOptionsPtrOutput) Elem() FolderSinkBigqueryOptionsOutput {
	return o.ApplyT(func(v *FolderSinkBigqueryOptions) FolderSinkBigqueryOptions { return *v }).(FolderSinkBigqueryOptionsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o FolderSinkBigqueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v FolderSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type FolderSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type FolderSinkBigqueryOptionsArgsInput interface {
	pulumi.Input

	ToFolderSinkBigqueryOptionsArgsOutput() FolderSinkBigqueryOptionsArgsOutput
	ToFolderSinkBigqueryOptionsArgsOutputWithContext(context.Context) FolderSinkBigqueryOptionsArgsOutput
}

type FolderSinkBigqueryOptionsArgsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (FolderSinkBigqueryOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (i FolderSinkBigqueryOptionsArgsArgs) ToFolderSinkBigqueryOptionsArgsOutput() FolderSinkBigqueryOptionsArgsOutput {
	return i.ToFolderSinkBigqueryOptionsArgsOutputWithContext(context.Background())
}

func (i FolderSinkBigqueryOptionsArgsArgs) ToFolderSinkBigqueryOptionsArgsOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsArgsOutput)
}

func (i FolderSinkBigqueryOptionsArgsArgs) ToFolderSinkBigqueryOptionsArgsPtrOutput() FolderSinkBigqueryOptionsArgsPtrOutput {
	return i.ToFolderSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (i FolderSinkBigqueryOptionsArgsArgs) ToFolderSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsArgsOutput).ToFolderSinkBigqueryOptionsArgsPtrOutputWithContext(ctx)
}

type FolderSinkBigqueryOptionsArgsPtrInput interface {
	pulumi.Input

	ToFolderSinkBigqueryOptionsArgsPtrOutput() FolderSinkBigqueryOptionsArgsPtrOutput
	ToFolderSinkBigqueryOptionsArgsPtrOutputWithContext(context.Context) FolderSinkBigqueryOptionsArgsPtrOutput
}

type folderSinkBigqueryOptionsArgsPtrType FolderSinkBigqueryOptionsArgsArgs

func FolderSinkBigqueryOptionsArgsPtr(v *FolderSinkBigqueryOptionsArgsArgs) FolderSinkBigqueryOptionsArgsPtrInput {
	return (*folderSinkBigqueryOptionsArgsPtrType)(v)
}

func (*folderSinkBigqueryOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (i *folderSinkBigqueryOptionsArgsPtrType) ToFolderSinkBigqueryOptionsArgsPtrOutput() FolderSinkBigqueryOptionsArgsPtrOutput {
	return i.ToFolderSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *folderSinkBigqueryOptionsArgsPtrType) ToFolderSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsArgsPtrOutput)
}

type FolderSinkBigqueryOptionsArgsOutput struct{ *pulumi.OutputState }

func (FolderSinkBigqueryOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (o FolderSinkBigqueryOptionsArgsOutput) ToFolderSinkBigqueryOptionsArgsOutput() FolderSinkBigqueryOptionsArgsOutput {
	return o
}

func (o FolderSinkBigqueryOptionsArgsOutput) ToFolderSinkBigqueryOptionsArgsOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsArgsOutput {
	return o
}

func (o FolderSinkBigqueryOptionsArgsOutput) ToFolderSinkBigqueryOptionsArgsPtrOutput() FolderSinkBigqueryOptionsArgsPtrOutput {
	return o.ToFolderSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (o FolderSinkBigqueryOptionsArgsOutput) ToFolderSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsArgsPtrOutput {
	return o.ApplyT(func(v FolderSinkBigqueryOptionsArgs) *FolderSinkBigqueryOptionsArgs {
		return &v
	}).(FolderSinkBigqueryOptionsArgsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o FolderSinkBigqueryOptionsArgsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v FolderSinkBigqueryOptionsArgs) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type FolderSinkBigqueryOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (FolderSinkBigqueryOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (o FolderSinkBigqueryOptionsArgsPtrOutput) ToFolderSinkBigqueryOptionsArgsPtrOutput() FolderSinkBigqueryOptionsArgsPtrOutput {
	return o
}

func (o FolderSinkBigqueryOptionsArgsPtrOutput) ToFolderSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsArgsPtrOutput {
	return o
}

func (o FolderSinkBigqueryOptionsArgsPtrOutput) Elem() FolderSinkBigqueryOptionsArgsOutput {
	return o.ApplyT(func(v *FolderSinkBigqueryOptionsArgs) FolderSinkBigqueryOptionsArgs { return *v }).(FolderSinkBigqueryOptionsArgsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o FolderSinkBigqueryOptionsArgsPtrOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v FolderSinkBigqueryOptionsArgs) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type FolderSinkBigqueryOptionsState struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type FolderSinkBigqueryOptionsStateInput interface {
	pulumi.Input

	ToFolderSinkBigqueryOptionsStateOutput() FolderSinkBigqueryOptionsStateOutput
	ToFolderSinkBigqueryOptionsStateOutputWithContext(context.Context) FolderSinkBigqueryOptionsStateOutput
}

type FolderSinkBigqueryOptionsStateArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (FolderSinkBigqueryOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderSinkBigqueryOptionsState)(nil)).Elem()
}

func (i FolderSinkBigqueryOptionsStateArgs) ToFolderSinkBigqueryOptionsStateOutput() FolderSinkBigqueryOptionsStateOutput {
	return i.ToFolderSinkBigqueryOptionsStateOutputWithContext(context.Background())
}

func (i FolderSinkBigqueryOptionsStateArgs) ToFolderSinkBigqueryOptionsStateOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderSinkBigqueryOptionsStateOutput)
}

type FolderSinkBigqueryOptionsStateOutput struct{ *pulumi.OutputState }

func (FolderSinkBigqueryOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderSinkBigqueryOptionsState)(nil)).Elem()
}

func (o FolderSinkBigqueryOptionsStateOutput) ToFolderSinkBigqueryOptionsStateOutput() FolderSinkBigqueryOptionsStateOutput {
	return o
}

func (o FolderSinkBigqueryOptionsStateOutput) ToFolderSinkBigqueryOptionsStateOutputWithContext(ctx context.Context) FolderSinkBigqueryOptionsStateOutput {
	return o
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o FolderSinkBigqueryOptionsStateOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v FolderSinkBigqueryOptionsState) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type MetricBucketOptions struct {
	ExplicitBuckets    *MetricBucketOptionsExplicitBuckets    `pulumi:"explicitBuckets"`
	ExponentialBuckets *MetricBucketOptionsExponentialBuckets `pulumi:"exponentialBuckets"`
	LinearBuckets      *MetricBucketOptionsLinearBuckets      `pulumi:"linearBuckets"`
}

type MetricBucketOptionsInput interface {
	pulumi.Input

	ToMetricBucketOptionsOutput() MetricBucketOptionsOutput
	ToMetricBucketOptionsOutputWithContext(context.Context) MetricBucketOptionsOutput
}

type MetricBucketOptionsArgs struct {
	ExplicitBuckets    MetricBucketOptionsExplicitBucketsPtrInput    `pulumi:"explicitBuckets"`
	ExponentialBuckets MetricBucketOptionsExponentialBucketsPtrInput `pulumi:"exponentialBuckets"`
	LinearBuckets      MetricBucketOptionsLinearBucketsPtrInput      `pulumi:"linearBuckets"`
}

func (MetricBucketOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptions)(nil)).Elem()
}

func (i MetricBucketOptionsArgs) ToMetricBucketOptionsOutput() MetricBucketOptionsOutput {
	return i.ToMetricBucketOptionsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsArgs) ToMetricBucketOptionsOutputWithContext(ctx context.Context) MetricBucketOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsOutput)
}

func (i MetricBucketOptionsArgs) ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput {
	return i.ToMetricBucketOptionsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsArgs) ToMetricBucketOptionsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsOutput).ToMetricBucketOptionsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput
	ToMetricBucketOptionsPtrOutputWithContext(context.Context) MetricBucketOptionsPtrOutput
}

type metricBucketOptionsPtrType MetricBucketOptionsArgs

func MetricBucketOptionsPtr(v *MetricBucketOptionsArgs) MetricBucketOptionsPtrInput {
	return (*metricBucketOptionsPtrType)(v)
}

func (*metricBucketOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptions)(nil)).Elem()
}

func (i *metricBucketOptionsPtrType) ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput {
	return i.ToMetricBucketOptionsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsPtrType) ToMetricBucketOptionsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsPtrOutput)
}

type MetricBucketOptionsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptions)(nil)).Elem()
}

func (o MetricBucketOptionsOutput) ToMetricBucketOptionsOutput() MetricBucketOptionsOutput {
	return o
}

func (o MetricBucketOptionsOutput) ToMetricBucketOptionsOutputWithContext(ctx context.Context) MetricBucketOptionsOutput {
	return o
}

func (o MetricBucketOptionsOutput) ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput {
	return o.ToMetricBucketOptionsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsOutput) ToMetricBucketOptionsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptions {
		return &v
	}).(MetricBucketOptionsPtrOutput)
}
func (o MetricBucketOptionsOutput) ExplicitBuckets() MetricBucketOptionsExplicitBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptionsExplicitBuckets { return v.ExplicitBuckets }).(MetricBucketOptionsExplicitBucketsPtrOutput)
}

func (o MetricBucketOptionsOutput) ExponentialBuckets() MetricBucketOptionsExponentialBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptionsExponentialBuckets { return v.ExponentialBuckets }).(MetricBucketOptionsExponentialBucketsPtrOutput)
}

func (o MetricBucketOptionsOutput) LinearBuckets() MetricBucketOptionsLinearBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptionsLinearBuckets { return v.LinearBuckets }).(MetricBucketOptionsLinearBucketsPtrOutput)
}

type MetricBucketOptionsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptions)(nil)).Elem()
}

func (o MetricBucketOptionsPtrOutput) ToMetricBucketOptionsPtrOutput() MetricBucketOptionsPtrOutput {
	return o
}

func (o MetricBucketOptionsPtrOutput) ToMetricBucketOptionsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsPtrOutput {
	return o
}

func (o MetricBucketOptionsPtrOutput) Elem() MetricBucketOptionsOutput {
	return o.ApplyT(func(v *MetricBucketOptions) MetricBucketOptions { return *v }).(MetricBucketOptionsOutput)
}

func (o MetricBucketOptionsPtrOutput) ExplicitBuckets() MetricBucketOptionsExplicitBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptionsExplicitBuckets { return v.ExplicitBuckets }).(MetricBucketOptionsExplicitBucketsPtrOutput)
}

func (o MetricBucketOptionsPtrOutput) ExponentialBuckets() MetricBucketOptionsExponentialBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptionsExponentialBuckets { return v.ExponentialBuckets }).(MetricBucketOptionsExponentialBucketsPtrOutput)
}

func (o MetricBucketOptionsPtrOutput) LinearBuckets() MetricBucketOptionsLinearBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptions) *MetricBucketOptionsLinearBuckets { return v.LinearBuckets }).(MetricBucketOptionsLinearBucketsPtrOutput)
}

type MetricBucketOptionsArgs struct {
	ExplicitBuckets    *MetricBucketOptionsExplicitBucketsArgs    `pulumi:"explicitBuckets"`
	ExponentialBuckets *MetricBucketOptionsExponentialBucketsArgs `pulumi:"exponentialBuckets"`
	LinearBuckets      *MetricBucketOptionsLinearBucketsArgs      `pulumi:"linearBuckets"`
}

type MetricBucketOptionsArgsInput interface {
	pulumi.Input

	ToMetricBucketOptionsArgsOutput() MetricBucketOptionsArgsOutput
	ToMetricBucketOptionsArgsOutputWithContext(context.Context) MetricBucketOptionsArgsOutput
}

type MetricBucketOptionsArgsArgs struct {
	ExplicitBuckets    MetricBucketOptionsExplicitBucketsArgsPtrInput    `pulumi:"explicitBuckets"`
	ExponentialBuckets MetricBucketOptionsExponentialBucketsArgsPtrInput `pulumi:"exponentialBuckets"`
	LinearBuckets      MetricBucketOptionsLinearBucketsArgsPtrInput      `pulumi:"linearBuckets"`
}

func (MetricBucketOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsArgs)(nil)).Elem()
}

func (i MetricBucketOptionsArgsArgs) ToMetricBucketOptionsArgsOutput() MetricBucketOptionsArgsOutput {
	return i.ToMetricBucketOptionsArgsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsArgsArgs) ToMetricBucketOptionsArgsOutputWithContext(ctx context.Context) MetricBucketOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsArgsOutput)
}

func (i MetricBucketOptionsArgsArgs) ToMetricBucketOptionsArgsPtrOutput() MetricBucketOptionsArgsPtrOutput {
	return i.ToMetricBucketOptionsArgsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsArgsArgs) ToMetricBucketOptionsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsArgsOutput).ToMetricBucketOptionsArgsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsArgsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsArgsPtrOutput() MetricBucketOptionsArgsPtrOutput
	ToMetricBucketOptionsArgsPtrOutputWithContext(context.Context) MetricBucketOptionsArgsPtrOutput
}

type metricBucketOptionsArgsPtrType MetricBucketOptionsArgsArgs

func MetricBucketOptionsArgsPtr(v *MetricBucketOptionsArgsArgs) MetricBucketOptionsArgsPtrInput {
	return (*metricBucketOptionsArgsPtrType)(v)
}

func (*metricBucketOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsArgs)(nil)).Elem()
}

func (i *metricBucketOptionsArgsPtrType) ToMetricBucketOptionsArgsPtrOutput() MetricBucketOptionsArgsPtrOutput {
	return i.ToMetricBucketOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsArgsPtrType) ToMetricBucketOptionsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsArgsPtrOutput)
}

type MetricBucketOptionsArgsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsArgs)(nil)).Elem()
}

func (o MetricBucketOptionsArgsOutput) ToMetricBucketOptionsArgsOutput() MetricBucketOptionsArgsOutput {
	return o
}

func (o MetricBucketOptionsArgsOutput) ToMetricBucketOptionsArgsOutputWithContext(ctx context.Context) MetricBucketOptionsArgsOutput {
	return o
}

func (o MetricBucketOptionsArgsOutput) ToMetricBucketOptionsArgsPtrOutput() MetricBucketOptionsArgsPtrOutput {
	return o.ToMetricBucketOptionsArgsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsArgsOutput) ToMetricBucketOptionsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsArgs) *MetricBucketOptionsArgs {
		return &v
	}).(MetricBucketOptionsArgsPtrOutput)
}
func (o MetricBucketOptionsArgsOutput) ExplicitBuckets() MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsArgs) *MetricBucketOptionsExplicitBucketsArgs { return v.ExplicitBuckets }).(MetricBucketOptionsExplicitBucketsArgsPtrOutput)
}

func (o MetricBucketOptionsArgsOutput) ExponentialBuckets() MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsArgs) *MetricBucketOptionsExponentialBucketsArgs {
		return v.ExponentialBuckets
	}).(MetricBucketOptionsExponentialBucketsArgsPtrOutput)
}

func (o MetricBucketOptionsArgsOutput) LinearBuckets() MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsArgs) *MetricBucketOptionsLinearBucketsArgs { return v.LinearBuckets }).(MetricBucketOptionsLinearBucketsArgsPtrOutput)
}

type MetricBucketOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsArgs)(nil)).Elem()
}

func (o MetricBucketOptionsArgsPtrOutput) ToMetricBucketOptionsArgsPtrOutput() MetricBucketOptionsArgsPtrOutput {
	return o
}

func (o MetricBucketOptionsArgsPtrOutput) ToMetricBucketOptionsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsArgsPtrOutput {
	return o
}

func (o MetricBucketOptionsArgsPtrOutput) Elem() MetricBucketOptionsArgsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsArgs) MetricBucketOptionsArgs { return *v }).(MetricBucketOptionsArgsOutput)
}

func (o MetricBucketOptionsArgsPtrOutput) ExplicitBuckets() MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsArgs) *MetricBucketOptionsExplicitBucketsArgs { return v.ExplicitBuckets }).(MetricBucketOptionsExplicitBucketsArgsPtrOutput)
}

func (o MetricBucketOptionsArgsPtrOutput) ExponentialBuckets() MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsArgs) *MetricBucketOptionsExponentialBucketsArgs {
		return v.ExponentialBuckets
	}).(MetricBucketOptionsExponentialBucketsArgsPtrOutput)
}

func (o MetricBucketOptionsArgsPtrOutput) LinearBuckets() MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsArgs) *MetricBucketOptionsLinearBucketsArgs { return v.LinearBuckets }).(MetricBucketOptionsLinearBucketsArgsPtrOutput)
}

type MetricBucketOptionsExplicitBuckets struct {
	Bounds []float64 `pulumi:"bounds"`
}

type MetricBucketOptionsExplicitBucketsInput interface {
	pulumi.Input

	ToMetricBucketOptionsExplicitBucketsOutput() MetricBucketOptionsExplicitBucketsOutput
	ToMetricBucketOptionsExplicitBucketsOutputWithContext(context.Context) MetricBucketOptionsExplicitBucketsOutput
}

type MetricBucketOptionsExplicitBucketsArgs struct {
	Bounds pulumi.Float64ArrayInput `pulumi:"bounds"`
}

func (MetricBucketOptionsExplicitBucketsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExplicitBuckets)(nil)).Elem()
}

func (i MetricBucketOptionsExplicitBucketsArgs) ToMetricBucketOptionsExplicitBucketsOutput() MetricBucketOptionsExplicitBucketsOutput {
	return i.ToMetricBucketOptionsExplicitBucketsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExplicitBucketsArgs) ToMetricBucketOptionsExplicitBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExplicitBucketsOutput)
}

func (i MetricBucketOptionsExplicitBucketsArgs) ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput {
	return i.ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExplicitBucketsArgs) ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExplicitBucketsOutput).ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsExplicitBucketsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput
	ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(context.Context) MetricBucketOptionsExplicitBucketsPtrOutput
}

type metricBucketOptionsExplicitBucketsPtrType MetricBucketOptionsExplicitBucketsArgs

func MetricBucketOptionsExplicitBucketsPtr(v *MetricBucketOptionsExplicitBucketsArgs) MetricBucketOptionsExplicitBucketsPtrInput {
	return (*metricBucketOptionsExplicitBucketsPtrType)(v)
}

func (*metricBucketOptionsExplicitBucketsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExplicitBuckets)(nil)).Elem()
}

func (i *metricBucketOptionsExplicitBucketsPtrType) ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput {
	return i.ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsExplicitBucketsPtrType) ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExplicitBucketsPtrOutput)
}

type MetricBucketOptionsExplicitBucketsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExplicitBucketsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExplicitBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsExplicitBucketsOutput) ToMetricBucketOptionsExplicitBucketsOutput() MetricBucketOptionsExplicitBucketsOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsOutput) ToMetricBucketOptionsExplicitBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsOutput) ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput {
	return o.ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsExplicitBucketsOutput) ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExplicitBuckets) *MetricBucketOptionsExplicitBuckets {
		return &v
	}).(MetricBucketOptionsExplicitBucketsPtrOutput)
}
func (o MetricBucketOptionsExplicitBucketsOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v MetricBucketOptionsExplicitBuckets) []float64 { return v.Bounds }).(pulumi.Float64ArrayOutput)
}

type MetricBucketOptionsExplicitBucketsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExplicitBucketsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExplicitBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsExplicitBucketsPtrOutput) ToMetricBucketOptionsExplicitBucketsPtrOutput() MetricBucketOptionsExplicitBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsPtrOutput) ToMetricBucketOptionsExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsPtrOutput) Elem() MetricBucketOptionsExplicitBucketsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExplicitBuckets) MetricBucketOptionsExplicitBuckets { return *v }).(MetricBucketOptionsExplicitBucketsOutput)
}

func (o MetricBucketOptionsExplicitBucketsPtrOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v MetricBucketOptionsExplicitBuckets) []float64 { return v.Bounds }).(pulumi.Float64ArrayOutput)
}

type MetricBucketOptionsExplicitBucketsArgs struct {
	Bounds []float64 `pulumi:"bounds"`
}

type MetricBucketOptionsExplicitBucketsArgsInput interface {
	pulumi.Input

	ToMetricBucketOptionsExplicitBucketsArgsOutput() MetricBucketOptionsExplicitBucketsArgsOutput
	ToMetricBucketOptionsExplicitBucketsArgsOutputWithContext(context.Context) MetricBucketOptionsExplicitBucketsArgsOutput
}

type MetricBucketOptionsExplicitBucketsArgsArgs struct {
	Bounds pulumi.Float64ArrayInput `pulumi:"bounds"`
}

func (MetricBucketOptionsExplicitBucketsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExplicitBucketsArgs)(nil)).Elem()
}

func (i MetricBucketOptionsExplicitBucketsArgsArgs) ToMetricBucketOptionsExplicitBucketsArgsOutput() MetricBucketOptionsExplicitBucketsArgsOutput {
	return i.ToMetricBucketOptionsExplicitBucketsArgsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExplicitBucketsArgsArgs) ToMetricBucketOptionsExplicitBucketsArgsOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExplicitBucketsArgsOutput)
}

func (i MetricBucketOptionsExplicitBucketsArgsArgs) ToMetricBucketOptionsExplicitBucketsArgsPtrOutput() MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return i.ToMetricBucketOptionsExplicitBucketsArgsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExplicitBucketsArgsArgs) ToMetricBucketOptionsExplicitBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExplicitBucketsArgsOutput).ToMetricBucketOptionsExplicitBucketsArgsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsExplicitBucketsArgsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsExplicitBucketsArgsPtrOutput() MetricBucketOptionsExplicitBucketsArgsPtrOutput
	ToMetricBucketOptionsExplicitBucketsArgsPtrOutputWithContext(context.Context) MetricBucketOptionsExplicitBucketsArgsPtrOutput
}

type metricBucketOptionsExplicitBucketsArgsPtrType MetricBucketOptionsExplicitBucketsArgsArgs

func MetricBucketOptionsExplicitBucketsArgsPtr(v *MetricBucketOptionsExplicitBucketsArgsArgs) MetricBucketOptionsExplicitBucketsArgsPtrInput {
	return (*metricBucketOptionsExplicitBucketsArgsPtrType)(v)
}

func (*metricBucketOptionsExplicitBucketsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExplicitBucketsArgs)(nil)).Elem()
}

func (i *metricBucketOptionsExplicitBucketsArgsPtrType) ToMetricBucketOptionsExplicitBucketsArgsPtrOutput() MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return i.ToMetricBucketOptionsExplicitBucketsArgsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsExplicitBucketsArgsPtrType) ToMetricBucketOptionsExplicitBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExplicitBucketsArgsPtrOutput)
}

type MetricBucketOptionsExplicitBucketsArgsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExplicitBucketsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExplicitBucketsArgs)(nil)).Elem()
}

func (o MetricBucketOptionsExplicitBucketsArgsOutput) ToMetricBucketOptionsExplicitBucketsArgsOutput() MetricBucketOptionsExplicitBucketsArgsOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsArgsOutput) ToMetricBucketOptionsExplicitBucketsArgsOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsArgsOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsArgsOutput) ToMetricBucketOptionsExplicitBucketsArgsPtrOutput() MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return o.ToMetricBucketOptionsExplicitBucketsArgsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsExplicitBucketsArgsOutput) ToMetricBucketOptionsExplicitBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExplicitBucketsArgs) *MetricBucketOptionsExplicitBucketsArgs {
		return &v
	}).(MetricBucketOptionsExplicitBucketsArgsPtrOutput)
}
func (o MetricBucketOptionsExplicitBucketsArgsOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v MetricBucketOptionsExplicitBucketsArgs) []float64 { return v.Bounds }).(pulumi.Float64ArrayOutput)
}

type MetricBucketOptionsExplicitBucketsArgsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExplicitBucketsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExplicitBucketsArgs)(nil)).Elem()
}

func (o MetricBucketOptionsExplicitBucketsArgsPtrOutput) ToMetricBucketOptionsExplicitBucketsArgsPtrOutput() MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsArgsPtrOutput) ToMetricBucketOptionsExplicitBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExplicitBucketsArgsPtrOutput {
	return o
}

func (o MetricBucketOptionsExplicitBucketsArgsPtrOutput) Elem() MetricBucketOptionsExplicitBucketsArgsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExplicitBucketsArgs) MetricBucketOptionsExplicitBucketsArgs { return *v }).(MetricBucketOptionsExplicitBucketsArgsOutput)
}

func (o MetricBucketOptionsExplicitBucketsArgsPtrOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v MetricBucketOptionsExplicitBucketsArgs) []float64 { return v.Bounds }).(pulumi.Float64ArrayOutput)
}

type MetricBucketOptionsExponentialBuckets struct {
	GrowthFactor     *float64 `pulumi:"growthFactor"`
	NumFiniteBuckets *int     `pulumi:"numFiniteBuckets"`
	Scale            *float64 `pulumi:"scale"`
}

type MetricBucketOptionsExponentialBucketsInput interface {
	pulumi.Input

	ToMetricBucketOptionsExponentialBucketsOutput() MetricBucketOptionsExponentialBucketsOutput
	ToMetricBucketOptionsExponentialBucketsOutputWithContext(context.Context) MetricBucketOptionsExponentialBucketsOutput
}

type MetricBucketOptionsExponentialBucketsArgs struct {
	GrowthFactor     pulumi.Float64PtrInput `pulumi:"growthFactor"`
	NumFiniteBuckets pulumi.IntPtrInput     `pulumi:"numFiniteBuckets"`
	Scale            pulumi.Float64PtrInput `pulumi:"scale"`
}

func (MetricBucketOptionsExponentialBucketsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExponentialBuckets)(nil)).Elem()
}

func (i MetricBucketOptionsExponentialBucketsArgs) ToMetricBucketOptionsExponentialBucketsOutput() MetricBucketOptionsExponentialBucketsOutput {
	return i.ToMetricBucketOptionsExponentialBucketsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExponentialBucketsArgs) ToMetricBucketOptionsExponentialBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExponentialBucketsOutput)
}

func (i MetricBucketOptionsExponentialBucketsArgs) ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput {
	return i.ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExponentialBucketsArgs) ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExponentialBucketsOutput).ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsExponentialBucketsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput
	ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(context.Context) MetricBucketOptionsExponentialBucketsPtrOutput
}

type metricBucketOptionsExponentialBucketsPtrType MetricBucketOptionsExponentialBucketsArgs

func MetricBucketOptionsExponentialBucketsPtr(v *MetricBucketOptionsExponentialBucketsArgs) MetricBucketOptionsExponentialBucketsPtrInput {
	return (*metricBucketOptionsExponentialBucketsPtrType)(v)
}

func (*metricBucketOptionsExponentialBucketsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExponentialBuckets)(nil)).Elem()
}

func (i *metricBucketOptionsExponentialBucketsPtrType) ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput {
	return i.ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsExponentialBucketsPtrType) ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExponentialBucketsPtrOutput)
}

type MetricBucketOptionsExponentialBucketsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExponentialBucketsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExponentialBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsExponentialBucketsOutput) ToMetricBucketOptionsExponentialBucketsOutput() MetricBucketOptionsExponentialBucketsOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsOutput) ToMetricBucketOptionsExponentialBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsOutput) ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput {
	return o.ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsExponentialBucketsOutput) ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *MetricBucketOptionsExponentialBuckets {
		return &v
	}).(MetricBucketOptionsExponentialBucketsPtrOutput)
}
func (o MetricBucketOptionsExponentialBucketsOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *float64 { return v.GrowthFactor }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsExponentialBucketsOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsExponentialBucketsOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *float64 { return v.Scale }).(pulumi.Float64PtrOutput)
}

type MetricBucketOptionsExponentialBucketsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExponentialBucketsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExponentialBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsExponentialBucketsPtrOutput) ToMetricBucketOptionsExponentialBucketsPtrOutput() MetricBucketOptionsExponentialBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsPtrOutput) ToMetricBucketOptionsExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsPtrOutput) Elem() MetricBucketOptionsExponentialBucketsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExponentialBuckets) MetricBucketOptionsExponentialBuckets { return *v }).(MetricBucketOptionsExponentialBucketsOutput)
}

func (o MetricBucketOptionsExponentialBucketsPtrOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *float64 { return v.GrowthFactor }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsExponentialBucketsPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsExponentialBucketsPtrOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBuckets) *float64 { return v.Scale }).(pulumi.Float64PtrOutput)
}

type MetricBucketOptionsExponentialBucketsArgs struct {
	GrowthFactor     *float64 `pulumi:"growthFactor"`
	NumFiniteBuckets *int     `pulumi:"numFiniteBuckets"`
	Scale            *float64 `pulumi:"scale"`
}

type MetricBucketOptionsExponentialBucketsArgsInput interface {
	pulumi.Input

	ToMetricBucketOptionsExponentialBucketsArgsOutput() MetricBucketOptionsExponentialBucketsArgsOutput
	ToMetricBucketOptionsExponentialBucketsArgsOutputWithContext(context.Context) MetricBucketOptionsExponentialBucketsArgsOutput
}

type MetricBucketOptionsExponentialBucketsArgsArgs struct {
	GrowthFactor     pulumi.Float64PtrInput `pulumi:"growthFactor"`
	NumFiniteBuckets pulumi.IntPtrInput     `pulumi:"numFiniteBuckets"`
	Scale            pulumi.Float64PtrInput `pulumi:"scale"`
}

func (MetricBucketOptionsExponentialBucketsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExponentialBucketsArgs)(nil)).Elem()
}

func (i MetricBucketOptionsExponentialBucketsArgsArgs) ToMetricBucketOptionsExponentialBucketsArgsOutput() MetricBucketOptionsExponentialBucketsArgsOutput {
	return i.ToMetricBucketOptionsExponentialBucketsArgsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExponentialBucketsArgsArgs) ToMetricBucketOptionsExponentialBucketsArgsOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExponentialBucketsArgsOutput)
}

func (i MetricBucketOptionsExponentialBucketsArgsArgs) ToMetricBucketOptionsExponentialBucketsArgsPtrOutput() MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return i.ToMetricBucketOptionsExponentialBucketsArgsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsExponentialBucketsArgsArgs) ToMetricBucketOptionsExponentialBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExponentialBucketsArgsOutput).ToMetricBucketOptionsExponentialBucketsArgsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsExponentialBucketsArgsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsExponentialBucketsArgsPtrOutput() MetricBucketOptionsExponentialBucketsArgsPtrOutput
	ToMetricBucketOptionsExponentialBucketsArgsPtrOutputWithContext(context.Context) MetricBucketOptionsExponentialBucketsArgsPtrOutput
}

type metricBucketOptionsExponentialBucketsArgsPtrType MetricBucketOptionsExponentialBucketsArgsArgs

func MetricBucketOptionsExponentialBucketsArgsPtr(v *MetricBucketOptionsExponentialBucketsArgsArgs) MetricBucketOptionsExponentialBucketsArgsPtrInput {
	return (*metricBucketOptionsExponentialBucketsArgsPtrType)(v)
}

func (*metricBucketOptionsExponentialBucketsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExponentialBucketsArgs)(nil)).Elem()
}

func (i *metricBucketOptionsExponentialBucketsArgsPtrType) ToMetricBucketOptionsExponentialBucketsArgsPtrOutput() MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return i.ToMetricBucketOptionsExponentialBucketsArgsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsExponentialBucketsArgsPtrType) ToMetricBucketOptionsExponentialBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsExponentialBucketsArgsPtrOutput)
}

type MetricBucketOptionsExponentialBucketsArgsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExponentialBucketsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsExponentialBucketsArgs)(nil)).Elem()
}

func (o MetricBucketOptionsExponentialBucketsArgsOutput) ToMetricBucketOptionsExponentialBucketsArgsOutput() MetricBucketOptionsExponentialBucketsArgsOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsArgsOutput) ToMetricBucketOptionsExponentialBucketsArgsOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsArgsOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsArgsOutput) ToMetricBucketOptionsExponentialBucketsArgsPtrOutput() MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return o.ToMetricBucketOptionsExponentialBucketsArgsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsExponentialBucketsArgsOutput) ToMetricBucketOptionsExponentialBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBucketsArgs) *MetricBucketOptionsExponentialBucketsArgs {
		return &v
	}).(MetricBucketOptionsExponentialBucketsArgsPtrOutput)
}
func (o MetricBucketOptionsExponentialBucketsArgsOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBucketsArgs) *float64 { return v.GrowthFactor }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsExponentialBucketsArgsOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBucketsArgs) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsExponentialBucketsArgsOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBucketsArgs) *float64 { return v.Scale }).(pulumi.Float64PtrOutput)
}

type MetricBucketOptionsExponentialBucketsArgsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsExponentialBucketsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsExponentialBucketsArgs)(nil)).Elem()
}

func (o MetricBucketOptionsExponentialBucketsArgsPtrOutput) ToMetricBucketOptionsExponentialBucketsArgsPtrOutput() MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsArgsPtrOutput) ToMetricBucketOptionsExponentialBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsExponentialBucketsArgsPtrOutput {
	return o
}

func (o MetricBucketOptionsExponentialBucketsArgsPtrOutput) Elem() MetricBucketOptionsExponentialBucketsArgsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsExponentialBucketsArgs) MetricBucketOptionsExponentialBucketsArgs {
		return *v
	}).(MetricBucketOptionsExponentialBucketsArgsOutput)
}

func (o MetricBucketOptionsExponentialBucketsArgsPtrOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBucketsArgs) *float64 { return v.GrowthFactor }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsExponentialBucketsArgsPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBucketsArgs) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsExponentialBucketsArgsPtrOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsExponentialBucketsArgs) *float64 { return v.Scale }).(pulumi.Float64PtrOutput)
}

type MetricBucketOptionsLinearBuckets struct {
	NumFiniteBuckets *int     `pulumi:"numFiniteBuckets"`
	Offset           *float64 `pulumi:"offset"`
	Width            *int     `pulumi:"width"`
}

type MetricBucketOptionsLinearBucketsInput interface {
	pulumi.Input

	ToMetricBucketOptionsLinearBucketsOutput() MetricBucketOptionsLinearBucketsOutput
	ToMetricBucketOptionsLinearBucketsOutputWithContext(context.Context) MetricBucketOptionsLinearBucketsOutput
}

type MetricBucketOptionsLinearBucketsArgs struct {
	NumFiniteBuckets pulumi.IntPtrInput     `pulumi:"numFiniteBuckets"`
	Offset           pulumi.Float64PtrInput `pulumi:"offset"`
	Width            pulumi.IntPtrInput     `pulumi:"width"`
}

func (MetricBucketOptionsLinearBucketsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsLinearBuckets)(nil)).Elem()
}

func (i MetricBucketOptionsLinearBucketsArgs) ToMetricBucketOptionsLinearBucketsOutput() MetricBucketOptionsLinearBucketsOutput {
	return i.ToMetricBucketOptionsLinearBucketsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsLinearBucketsArgs) ToMetricBucketOptionsLinearBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsLinearBucketsOutput)
}

func (i MetricBucketOptionsLinearBucketsArgs) ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput {
	return i.ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsLinearBucketsArgs) ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsLinearBucketsOutput).ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsLinearBucketsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput
	ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(context.Context) MetricBucketOptionsLinearBucketsPtrOutput
}

type metricBucketOptionsLinearBucketsPtrType MetricBucketOptionsLinearBucketsArgs

func MetricBucketOptionsLinearBucketsPtr(v *MetricBucketOptionsLinearBucketsArgs) MetricBucketOptionsLinearBucketsPtrInput {
	return (*metricBucketOptionsLinearBucketsPtrType)(v)
}

func (*metricBucketOptionsLinearBucketsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsLinearBuckets)(nil)).Elem()
}

func (i *metricBucketOptionsLinearBucketsPtrType) ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput {
	return i.ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsLinearBucketsPtrType) ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsLinearBucketsPtrOutput)
}

type MetricBucketOptionsLinearBucketsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsLinearBucketsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsLinearBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsLinearBucketsOutput) ToMetricBucketOptionsLinearBucketsOutput() MetricBucketOptionsLinearBucketsOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsOutput) ToMetricBucketOptionsLinearBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsOutput) ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput {
	return o.ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsLinearBucketsOutput) ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *MetricBucketOptionsLinearBuckets {
		return &v
	}).(MetricBucketOptionsLinearBucketsPtrOutput)
}
func (o MetricBucketOptionsLinearBucketsOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsLinearBucketsOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *float64 { return v.Offset }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsLinearBucketsOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type MetricBucketOptionsLinearBucketsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsLinearBucketsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsLinearBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsLinearBucketsPtrOutput) ToMetricBucketOptionsLinearBucketsPtrOutput() MetricBucketOptionsLinearBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsPtrOutput) ToMetricBucketOptionsLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsPtrOutput) Elem() MetricBucketOptionsLinearBucketsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsLinearBuckets) MetricBucketOptionsLinearBuckets { return *v }).(MetricBucketOptionsLinearBucketsOutput)
}

func (o MetricBucketOptionsLinearBucketsPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsLinearBucketsPtrOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *float64 { return v.Offset }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsLinearBucketsPtrOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBuckets) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type MetricBucketOptionsLinearBucketsArgs struct {
	NumFiniteBuckets *int     `pulumi:"numFiniteBuckets"`
	Offset           *float64 `pulumi:"offset"`
	Width            *int     `pulumi:"width"`
}

type MetricBucketOptionsLinearBucketsArgsInput interface {
	pulumi.Input

	ToMetricBucketOptionsLinearBucketsArgsOutput() MetricBucketOptionsLinearBucketsArgsOutput
	ToMetricBucketOptionsLinearBucketsArgsOutputWithContext(context.Context) MetricBucketOptionsLinearBucketsArgsOutput
}

type MetricBucketOptionsLinearBucketsArgsArgs struct {
	NumFiniteBuckets pulumi.IntPtrInput     `pulumi:"numFiniteBuckets"`
	Offset           pulumi.Float64PtrInput `pulumi:"offset"`
	Width            pulumi.IntPtrInput     `pulumi:"width"`
}

func (MetricBucketOptionsLinearBucketsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsLinearBucketsArgs)(nil)).Elem()
}

func (i MetricBucketOptionsLinearBucketsArgsArgs) ToMetricBucketOptionsLinearBucketsArgsOutput() MetricBucketOptionsLinearBucketsArgsOutput {
	return i.ToMetricBucketOptionsLinearBucketsArgsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsLinearBucketsArgsArgs) ToMetricBucketOptionsLinearBucketsArgsOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsLinearBucketsArgsOutput)
}

func (i MetricBucketOptionsLinearBucketsArgsArgs) ToMetricBucketOptionsLinearBucketsArgsPtrOutput() MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return i.ToMetricBucketOptionsLinearBucketsArgsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsLinearBucketsArgsArgs) ToMetricBucketOptionsLinearBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsLinearBucketsArgsOutput).ToMetricBucketOptionsLinearBucketsArgsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsLinearBucketsArgsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsLinearBucketsArgsPtrOutput() MetricBucketOptionsLinearBucketsArgsPtrOutput
	ToMetricBucketOptionsLinearBucketsArgsPtrOutputWithContext(context.Context) MetricBucketOptionsLinearBucketsArgsPtrOutput
}

type metricBucketOptionsLinearBucketsArgsPtrType MetricBucketOptionsLinearBucketsArgsArgs

func MetricBucketOptionsLinearBucketsArgsPtr(v *MetricBucketOptionsLinearBucketsArgsArgs) MetricBucketOptionsLinearBucketsArgsPtrInput {
	return (*metricBucketOptionsLinearBucketsArgsPtrType)(v)
}

func (*metricBucketOptionsLinearBucketsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsLinearBucketsArgs)(nil)).Elem()
}

func (i *metricBucketOptionsLinearBucketsArgsPtrType) ToMetricBucketOptionsLinearBucketsArgsPtrOutput() MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return i.ToMetricBucketOptionsLinearBucketsArgsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsLinearBucketsArgsPtrType) ToMetricBucketOptionsLinearBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsLinearBucketsArgsPtrOutput)
}

type MetricBucketOptionsLinearBucketsArgsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsLinearBucketsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsLinearBucketsArgs)(nil)).Elem()
}

func (o MetricBucketOptionsLinearBucketsArgsOutput) ToMetricBucketOptionsLinearBucketsArgsOutput() MetricBucketOptionsLinearBucketsArgsOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsArgsOutput) ToMetricBucketOptionsLinearBucketsArgsOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsArgsOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsArgsOutput) ToMetricBucketOptionsLinearBucketsArgsPtrOutput() MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return o.ToMetricBucketOptionsLinearBucketsArgsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsLinearBucketsArgsOutput) ToMetricBucketOptionsLinearBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBucketsArgs) *MetricBucketOptionsLinearBucketsArgs {
		return &v
	}).(MetricBucketOptionsLinearBucketsArgsPtrOutput)
}
func (o MetricBucketOptionsLinearBucketsArgsOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBucketsArgs) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsLinearBucketsArgsOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBucketsArgs) *float64 { return v.Offset }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsLinearBucketsArgsOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBucketsArgs) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type MetricBucketOptionsLinearBucketsArgsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsLinearBucketsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsLinearBucketsArgs)(nil)).Elem()
}

func (o MetricBucketOptionsLinearBucketsArgsPtrOutput) ToMetricBucketOptionsLinearBucketsArgsPtrOutput() MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsArgsPtrOutput) ToMetricBucketOptionsLinearBucketsArgsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsLinearBucketsArgsPtrOutput {
	return o
}

func (o MetricBucketOptionsLinearBucketsArgsPtrOutput) Elem() MetricBucketOptionsLinearBucketsArgsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsLinearBucketsArgs) MetricBucketOptionsLinearBucketsArgs { return *v }).(MetricBucketOptionsLinearBucketsArgsOutput)
}

func (o MetricBucketOptionsLinearBucketsArgsPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBucketsArgs) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsLinearBucketsArgsPtrOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBucketsArgs) *float64 { return v.Offset }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsLinearBucketsArgsPtrOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsLinearBucketsArgs) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type MetricBucketOptionsState struct {
	ExplicitBuckets    *MetricBucketOptionsStateExplicitBuckets    `pulumi:"explicitBuckets"`
	ExponentialBuckets *MetricBucketOptionsStateExponentialBuckets `pulumi:"exponentialBuckets"`
	LinearBuckets      *MetricBucketOptionsStateLinearBuckets      `pulumi:"linearBuckets"`
}

type MetricBucketOptionsStateInput interface {
	pulumi.Input

	ToMetricBucketOptionsStateOutput() MetricBucketOptionsStateOutput
	ToMetricBucketOptionsStateOutputWithContext(context.Context) MetricBucketOptionsStateOutput
}

type MetricBucketOptionsStateArgs struct {
	ExplicitBuckets    MetricBucketOptionsStateExplicitBucketsPtrInput    `pulumi:"explicitBuckets"`
	ExponentialBuckets MetricBucketOptionsStateExponentialBucketsPtrInput `pulumi:"exponentialBuckets"`
	LinearBuckets      MetricBucketOptionsStateLinearBucketsPtrInput      `pulumi:"linearBuckets"`
}

func (MetricBucketOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsState)(nil)).Elem()
}

func (i MetricBucketOptionsStateArgs) ToMetricBucketOptionsStateOutput() MetricBucketOptionsStateOutput {
	return i.ToMetricBucketOptionsStateOutputWithContext(context.Background())
}

func (i MetricBucketOptionsStateArgs) ToMetricBucketOptionsStateOutputWithContext(ctx context.Context) MetricBucketOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateOutput)
}

type MetricBucketOptionsStateOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsState)(nil)).Elem()
}

func (o MetricBucketOptionsStateOutput) ToMetricBucketOptionsStateOutput() MetricBucketOptionsStateOutput {
	return o
}

func (o MetricBucketOptionsStateOutput) ToMetricBucketOptionsStateOutputWithContext(ctx context.Context) MetricBucketOptionsStateOutput {
	return o
}

func (o MetricBucketOptionsStateOutput) ExplicitBuckets() MetricBucketOptionsStateExplicitBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsState) *MetricBucketOptionsStateExplicitBuckets { return v.ExplicitBuckets }).(MetricBucketOptionsStateExplicitBucketsPtrOutput)
}

func (o MetricBucketOptionsStateOutput) ExponentialBuckets() MetricBucketOptionsStateExponentialBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsState) *MetricBucketOptionsStateExponentialBuckets {
		return v.ExponentialBuckets
	}).(MetricBucketOptionsStateExponentialBucketsPtrOutput)
}

func (o MetricBucketOptionsStateOutput) LinearBuckets() MetricBucketOptionsStateLinearBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsState) *MetricBucketOptionsStateLinearBuckets { return v.LinearBuckets }).(MetricBucketOptionsStateLinearBucketsPtrOutput)
}

type MetricBucketOptionsStateExplicitBuckets struct {
	Bounds []float64 `pulumi:"bounds"`
}

type MetricBucketOptionsStateExplicitBucketsInput interface {
	pulumi.Input

	ToMetricBucketOptionsStateExplicitBucketsOutput() MetricBucketOptionsStateExplicitBucketsOutput
	ToMetricBucketOptionsStateExplicitBucketsOutputWithContext(context.Context) MetricBucketOptionsStateExplicitBucketsOutput
}

type MetricBucketOptionsStateExplicitBucketsArgs struct {
	Bounds pulumi.Float64ArrayInput `pulumi:"bounds"`
}

func (MetricBucketOptionsStateExplicitBucketsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsStateExplicitBuckets)(nil)).Elem()
}

func (i MetricBucketOptionsStateExplicitBucketsArgs) ToMetricBucketOptionsStateExplicitBucketsOutput() MetricBucketOptionsStateExplicitBucketsOutput {
	return i.ToMetricBucketOptionsStateExplicitBucketsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsStateExplicitBucketsArgs) ToMetricBucketOptionsStateExplicitBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsStateExplicitBucketsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateExplicitBucketsOutput)
}

func (i MetricBucketOptionsStateExplicitBucketsArgs) ToMetricBucketOptionsStateExplicitBucketsPtrOutput() MetricBucketOptionsStateExplicitBucketsPtrOutput {
	return i.ToMetricBucketOptionsStateExplicitBucketsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsStateExplicitBucketsArgs) ToMetricBucketOptionsStateExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateExplicitBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateExplicitBucketsOutput).ToMetricBucketOptionsStateExplicitBucketsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsStateExplicitBucketsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsStateExplicitBucketsPtrOutput() MetricBucketOptionsStateExplicitBucketsPtrOutput
	ToMetricBucketOptionsStateExplicitBucketsPtrOutputWithContext(context.Context) MetricBucketOptionsStateExplicitBucketsPtrOutput
}

type metricBucketOptionsStateExplicitBucketsPtrType MetricBucketOptionsStateExplicitBucketsArgs

func MetricBucketOptionsStateExplicitBucketsPtr(v *MetricBucketOptionsStateExplicitBucketsArgs) MetricBucketOptionsStateExplicitBucketsPtrInput {
	return (*metricBucketOptionsStateExplicitBucketsPtrType)(v)
}

func (*metricBucketOptionsStateExplicitBucketsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsStateExplicitBuckets)(nil)).Elem()
}

func (i *metricBucketOptionsStateExplicitBucketsPtrType) ToMetricBucketOptionsStateExplicitBucketsPtrOutput() MetricBucketOptionsStateExplicitBucketsPtrOutput {
	return i.ToMetricBucketOptionsStateExplicitBucketsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsStateExplicitBucketsPtrType) ToMetricBucketOptionsStateExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateExplicitBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateExplicitBucketsPtrOutput)
}

type MetricBucketOptionsStateExplicitBucketsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsStateExplicitBucketsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsStateExplicitBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsStateExplicitBucketsOutput) ToMetricBucketOptionsStateExplicitBucketsOutput() MetricBucketOptionsStateExplicitBucketsOutput {
	return o
}

func (o MetricBucketOptionsStateExplicitBucketsOutput) ToMetricBucketOptionsStateExplicitBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsStateExplicitBucketsOutput {
	return o
}

func (o MetricBucketOptionsStateExplicitBucketsOutput) ToMetricBucketOptionsStateExplicitBucketsPtrOutput() MetricBucketOptionsStateExplicitBucketsPtrOutput {
	return o.ToMetricBucketOptionsStateExplicitBucketsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsStateExplicitBucketsOutput) ToMetricBucketOptionsStateExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateExplicitBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExplicitBuckets) *MetricBucketOptionsStateExplicitBuckets {
		return &v
	}).(MetricBucketOptionsStateExplicitBucketsPtrOutput)
}
func (o MetricBucketOptionsStateExplicitBucketsOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExplicitBuckets) []float64 { return v.Bounds }).(pulumi.Float64ArrayOutput)
}

type MetricBucketOptionsStateExplicitBucketsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsStateExplicitBucketsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsStateExplicitBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsStateExplicitBucketsPtrOutput) ToMetricBucketOptionsStateExplicitBucketsPtrOutput() MetricBucketOptionsStateExplicitBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsStateExplicitBucketsPtrOutput) ToMetricBucketOptionsStateExplicitBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateExplicitBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsStateExplicitBucketsPtrOutput) Elem() MetricBucketOptionsStateExplicitBucketsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsStateExplicitBuckets) MetricBucketOptionsStateExplicitBuckets { return *v }).(MetricBucketOptionsStateExplicitBucketsOutput)
}

func (o MetricBucketOptionsStateExplicitBucketsPtrOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExplicitBuckets) []float64 { return v.Bounds }).(pulumi.Float64ArrayOutput)
}

type MetricBucketOptionsStateExponentialBuckets struct {
	GrowthFactor     *float64 `pulumi:"growthFactor"`
	NumFiniteBuckets *int     `pulumi:"numFiniteBuckets"`
	Scale            *float64 `pulumi:"scale"`
}

type MetricBucketOptionsStateExponentialBucketsInput interface {
	pulumi.Input

	ToMetricBucketOptionsStateExponentialBucketsOutput() MetricBucketOptionsStateExponentialBucketsOutput
	ToMetricBucketOptionsStateExponentialBucketsOutputWithContext(context.Context) MetricBucketOptionsStateExponentialBucketsOutput
}

type MetricBucketOptionsStateExponentialBucketsArgs struct {
	GrowthFactor     pulumi.Float64PtrInput `pulumi:"growthFactor"`
	NumFiniteBuckets pulumi.IntPtrInput     `pulumi:"numFiniteBuckets"`
	Scale            pulumi.Float64PtrInput `pulumi:"scale"`
}

func (MetricBucketOptionsStateExponentialBucketsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsStateExponentialBuckets)(nil)).Elem()
}

func (i MetricBucketOptionsStateExponentialBucketsArgs) ToMetricBucketOptionsStateExponentialBucketsOutput() MetricBucketOptionsStateExponentialBucketsOutput {
	return i.ToMetricBucketOptionsStateExponentialBucketsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsStateExponentialBucketsArgs) ToMetricBucketOptionsStateExponentialBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsStateExponentialBucketsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateExponentialBucketsOutput)
}

func (i MetricBucketOptionsStateExponentialBucketsArgs) ToMetricBucketOptionsStateExponentialBucketsPtrOutput() MetricBucketOptionsStateExponentialBucketsPtrOutput {
	return i.ToMetricBucketOptionsStateExponentialBucketsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsStateExponentialBucketsArgs) ToMetricBucketOptionsStateExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateExponentialBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateExponentialBucketsOutput).ToMetricBucketOptionsStateExponentialBucketsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsStateExponentialBucketsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsStateExponentialBucketsPtrOutput() MetricBucketOptionsStateExponentialBucketsPtrOutput
	ToMetricBucketOptionsStateExponentialBucketsPtrOutputWithContext(context.Context) MetricBucketOptionsStateExponentialBucketsPtrOutput
}

type metricBucketOptionsStateExponentialBucketsPtrType MetricBucketOptionsStateExponentialBucketsArgs

func MetricBucketOptionsStateExponentialBucketsPtr(v *MetricBucketOptionsStateExponentialBucketsArgs) MetricBucketOptionsStateExponentialBucketsPtrInput {
	return (*metricBucketOptionsStateExponentialBucketsPtrType)(v)
}

func (*metricBucketOptionsStateExponentialBucketsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsStateExponentialBuckets)(nil)).Elem()
}

func (i *metricBucketOptionsStateExponentialBucketsPtrType) ToMetricBucketOptionsStateExponentialBucketsPtrOutput() MetricBucketOptionsStateExponentialBucketsPtrOutput {
	return i.ToMetricBucketOptionsStateExponentialBucketsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsStateExponentialBucketsPtrType) ToMetricBucketOptionsStateExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateExponentialBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateExponentialBucketsPtrOutput)
}

type MetricBucketOptionsStateExponentialBucketsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsStateExponentialBucketsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsStateExponentialBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsStateExponentialBucketsOutput) ToMetricBucketOptionsStateExponentialBucketsOutput() MetricBucketOptionsStateExponentialBucketsOutput {
	return o
}

func (o MetricBucketOptionsStateExponentialBucketsOutput) ToMetricBucketOptionsStateExponentialBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsStateExponentialBucketsOutput {
	return o
}

func (o MetricBucketOptionsStateExponentialBucketsOutput) ToMetricBucketOptionsStateExponentialBucketsPtrOutput() MetricBucketOptionsStateExponentialBucketsPtrOutput {
	return o.ToMetricBucketOptionsStateExponentialBucketsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsStateExponentialBucketsOutput) ToMetricBucketOptionsStateExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateExponentialBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExponentialBuckets) *MetricBucketOptionsStateExponentialBuckets {
		return &v
	}).(MetricBucketOptionsStateExponentialBucketsPtrOutput)
}
func (o MetricBucketOptionsStateExponentialBucketsOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExponentialBuckets) *float64 { return v.GrowthFactor }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsStateExponentialBucketsOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExponentialBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsStateExponentialBucketsOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExponentialBuckets) *float64 { return v.Scale }).(pulumi.Float64PtrOutput)
}

type MetricBucketOptionsStateExponentialBucketsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsStateExponentialBucketsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsStateExponentialBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsStateExponentialBucketsPtrOutput) ToMetricBucketOptionsStateExponentialBucketsPtrOutput() MetricBucketOptionsStateExponentialBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsStateExponentialBucketsPtrOutput) ToMetricBucketOptionsStateExponentialBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateExponentialBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsStateExponentialBucketsPtrOutput) Elem() MetricBucketOptionsStateExponentialBucketsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsStateExponentialBuckets) MetricBucketOptionsStateExponentialBuckets {
		return *v
	}).(MetricBucketOptionsStateExponentialBucketsOutput)
}

func (o MetricBucketOptionsStateExponentialBucketsPtrOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExponentialBuckets) *float64 { return v.GrowthFactor }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsStateExponentialBucketsPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExponentialBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsStateExponentialBucketsPtrOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateExponentialBuckets) *float64 { return v.Scale }).(pulumi.Float64PtrOutput)
}

type MetricBucketOptionsStateLinearBuckets struct {
	NumFiniteBuckets *int     `pulumi:"numFiniteBuckets"`
	Offset           *float64 `pulumi:"offset"`
	Width            *int     `pulumi:"width"`
}

type MetricBucketOptionsStateLinearBucketsInput interface {
	pulumi.Input

	ToMetricBucketOptionsStateLinearBucketsOutput() MetricBucketOptionsStateLinearBucketsOutput
	ToMetricBucketOptionsStateLinearBucketsOutputWithContext(context.Context) MetricBucketOptionsStateLinearBucketsOutput
}

type MetricBucketOptionsStateLinearBucketsArgs struct {
	NumFiniteBuckets pulumi.IntPtrInput     `pulumi:"numFiniteBuckets"`
	Offset           pulumi.Float64PtrInput `pulumi:"offset"`
	Width            pulumi.IntPtrInput     `pulumi:"width"`
}

func (MetricBucketOptionsStateLinearBucketsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsStateLinearBuckets)(nil)).Elem()
}

func (i MetricBucketOptionsStateLinearBucketsArgs) ToMetricBucketOptionsStateLinearBucketsOutput() MetricBucketOptionsStateLinearBucketsOutput {
	return i.ToMetricBucketOptionsStateLinearBucketsOutputWithContext(context.Background())
}

func (i MetricBucketOptionsStateLinearBucketsArgs) ToMetricBucketOptionsStateLinearBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsStateLinearBucketsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateLinearBucketsOutput)
}

func (i MetricBucketOptionsStateLinearBucketsArgs) ToMetricBucketOptionsStateLinearBucketsPtrOutput() MetricBucketOptionsStateLinearBucketsPtrOutput {
	return i.ToMetricBucketOptionsStateLinearBucketsPtrOutputWithContext(context.Background())
}

func (i MetricBucketOptionsStateLinearBucketsArgs) ToMetricBucketOptionsStateLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateLinearBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateLinearBucketsOutput).ToMetricBucketOptionsStateLinearBucketsPtrOutputWithContext(ctx)
}

type MetricBucketOptionsStateLinearBucketsPtrInput interface {
	pulumi.Input

	ToMetricBucketOptionsStateLinearBucketsPtrOutput() MetricBucketOptionsStateLinearBucketsPtrOutput
	ToMetricBucketOptionsStateLinearBucketsPtrOutputWithContext(context.Context) MetricBucketOptionsStateLinearBucketsPtrOutput
}

type metricBucketOptionsStateLinearBucketsPtrType MetricBucketOptionsStateLinearBucketsArgs

func MetricBucketOptionsStateLinearBucketsPtr(v *MetricBucketOptionsStateLinearBucketsArgs) MetricBucketOptionsStateLinearBucketsPtrInput {
	return (*metricBucketOptionsStateLinearBucketsPtrType)(v)
}

func (*metricBucketOptionsStateLinearBucketsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsStateLinearBuckets)(nil)).Elem()
}

func (i *metricBucketOptionsStateLinearBucketsPtrType) ToMetricBucketOptionsStateLinearBucketsPtrOutput() MetricBucketOptionsStateLinearBucketsPtrOutput {
	return i.ToMetricBucketOptionsStateLinearBucketsPtrOutputWithContext(context.Background())
}

func (i *metricBucketOptionsStateLinearBucketsPtrType) ToMetricBucketOptionsStateLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateLinearBucketsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricBucketOptionsStateLinearBucketsPtrOutput)
}

type MetricBucketOptionsStateLinearBucketsOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsStateLinearBucketsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricBucketOptionsStateLinearBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsStateLinearBucketsOutput) ToMetricBucketOptionsStateLinearBucketsOutput() MetricBucketOptionsStateLinearBucketsOutput {
	return o
}

func (o MetricBucketOptionsStateLinearBucketsOutput) ToMetricBucketOptionsStateLinearBucketsOutputWithContext(ctx context.Context) MetricBucketOptionsStateLinearBucketsOutput {
	return o
}

func (o MetricBucketOptionsStateLinearBucketsOutput) ToMetricBucketOptionsStateLinearBucketsPtrOutput() MetricBucketOptionsStateLinearBucketsPtrOutput {
	return o.ToMetricBucketOptionsStateLinearBucketsPtrOutputWithContext(context.Background())
}

func (o MetricBucketOptionsStateLinearBucketsOutput) ToMetricBucketOptionsStateLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateLinearBucketsPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateLinearBuckets) *MetricBucketOptionsStateLinearBuckets {
		return &v
	}).(MetricBucketOptionsStateLinearBucketsPtrOutput)
}
func (o MetricBucketOptionsStateLinearBucketsOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateLinearBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsStateLinearBucketsOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateLinearBuckets) *float64 { return v.Offset }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsStateLinearBucketsOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateLinearBuckets) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type MetricBucketOptionsStateLinearBucketsPtrOutput struct{ *pulumi.OutputState }

func (MetricBucketOptionsStateLinearBucketsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricBucketOptionsStateLinearBuckets)(nil)).Elem()
}

func (o MetricBucketOptionsStateLinearBucketsPtrOutput) ToMetricBucketOptionsStateLinearBucketsPtrOutput() MetricBucketOptionsStateLinearBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsStateLinearBucketsPtrOutput) ToMetricBucketOptionsStateLinearBucketsPtrOutputWithContext(ctx context.Context) MetricBucketOptionsStateLinearBucketsPtrOutput {
	return o
}

func (o MetricBucketOptionsStateLinearBucketsPtrOutput) Elem() MetricBucketOptionsStateLinearBucketsOutput {
	return o.ApplyT(func(v *MetricBucketOptionsStateLinearBuckets) MetricBucketOptionsStateLinearBuckets { return *v }).(MetricBucketOptionsStateLinearBucketsOutput)
}

func (o MetricBucketOptionsStateLinearBucketsPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateLinearBuckets) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

func (o MetricBucketOptionsStateLinearBucketsPtrOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateLinearBuckets) *float64 { return v.Offset }).(pulumi.Float64PtrOutput)
}

func (o MetricBucketOptionsStateLinearBucketsPtrOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricBucketOptionsStateLinearBuckets) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type MetricMetricDescriptor struct {
	DisplayName *string                       `pulumi:"displayName"`
	Labels      []MetricMetricDescriptorLabel `pulumi:"labels"`
	MetricKind  string                        `pulumi:"metricKind"`
	Unit        *string                       `pulumi:"unit"`
	ValueType   string                        `pulumi:"valueType"`
}

type MetricMetricDescriptorInput interface {
	pulumi.Input

	ToMetricMetricDescriptorOutput() MetricMetricDescriptorOutput
	ToMetricMetricDescriptorOutputWithContext(context.Context) MetricMetricDescriptorOutput
}

type MetricMetricDescriptorArgs struct {
	DisplayName pulumi.StringPtrInput                 `pulumi:"displayName"`
	Labels      MetricMetricDescriptorLabelArrayInput `pulumi:"labels"`
	MetricKind  pulumi.StringInput                    `pulumi:"metricKind"`
	Unit        pulumi.StringPtrInput                 `pulumi:"unit"`
	ValueType   pulumi.StringInput                    `pulumi:"valueType"`
}

func (MetricMetricDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptor)(nil)).Elem()
}

func (i MetricMetricDescriptorArgs) ToMetricMetricDescriptorOutput() MetricMetricDescriptorOutput {
	return i.ToMetricMetricDescriptorOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorArgs) ToMetricMetricDescriptorOutputWithContext(ctx context.Context) MetricMetricDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorOutput)
}

func (i MetricMetricDescriptorArgs) ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput {
	return i.ToMetricMetricDescriptorPtrOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorArgs) ToMetricMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorOutput).ToMetricMetricDescriptorPtrOutputWithContext(ctx)
}

type MetricMetricDescriptorPtrInput interface {
	pulumi.Input

	ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput
	ToMetricMetricDescriptorPtrOutputWithContext(context.Context) MetricMetricDescriptorPtrOutput
}

type metricMetricDescriptorPtrType MetricMetricDescriptorArgs

func MetricMetricDescriptorPtr(v *MetricMetricDescriptorArgs) MetricMetricDescriptorPtrInput {
	return (*metricMetricDescriptorPtrType)(v)
}

func (*metricMetricDescriptorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetricDescriptor)(nil)).Elem()
}

func (i *metricMetricDescriptorPtrType) ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput {
	return i.ToMetricMetricDescriptorPtrOutputWithContext(context.Background())
}

func (i *metricMetricDescriptorPtrType) ToMetricMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorPtrOutput)
}

type MetricMetricDescriptorOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptor)(nil)).Elem()
}

func (o MetricMetricDescriptorOutput) ToMetricMetricDescriptorOutput() MetricMetricDescriptorOutput {
	return o
}

func (o MetricMetricDescriptorOutput) ToMetricMetricDescriptorOutputWithContext(ctx context.Context) MetricMetricDescriptorOutput {
	return o
}

func (o MetricMetricDescriptorOutput) ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput {
	return o.ToMetricMetricDescriptorPtrOutputWithContext(context.Background())
}

func (o MetricMetricDescriptorOutput) ToMetricMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) *MetricMetricDescriptor {
		return &v
	}).(MetricMetricDescriptorPtrOutput)
}
func (o MetricMetricDescriptorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorOutput) Labels() MetricMetricDescriptorLabelArrayOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) []MetricMetricDescriptorLabel { return v.Labels }).(MetricMetricDescriptorLabelArrayOutput)
}

func (o MetricMetricDescriptorOutput) MetricKind() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) string { return v.MetricKind }).(pulumi.StringOutput)
}

func (o MetricMetricDescriptorOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) string { return v.ValueType }).(pulumi.StringOutput)
}

type MetricMetricDescriptorPtrOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetricDescriptor)(nil)).Elem()
}

func (o MetricMetricDescriptorPtrOutput) ToMetricMetricDescriptorPtrOutput() MetricMetricDescriptorPtrOutput {
	return o
}

func (o MetricMetricDescriptorPtrOutput) ToMetricMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorPtrOutput {
	return o
}

func (o MetricMetricDescriptorPtrOutput) Elem() MetricMetricDescriptorOutput {
	return o.ApplyT(func(v *MetricMetricDescriptor) MetricMetricDescriptor { return *v }).(MetricMetricDescriptorOutput)
}

func (o MetricMetricDescriptorPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorPtrOutput) Labels() MetricMetricDescriptorLabelArrayOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) []MetricMetricDescriptorLabel { return v.Labels }).(MetricMetricDescriptorLabelArrayOutput)
}

func (o MetricMetricDescriptorPtrOutput) MetricKind() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) string { return v.MetricKind }).(pulumi.StringOutput)
}

func (o MetricMetricDescriptorPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorPtrOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptor) string { return v.ValueType }).(pulumi.StringOutput)
}

type MetricMetricDescriptorArgs struct {
	DisplayName *string                           `pulumi:"displayName"`
	Labels      []MetricMetricDescriptorLabelArgs `pulumi:"labels"`
	MetricKind  string                            `pulumi:"metricKind"`
	Unit        *string                           `pulumi:"unit"`
	ValueType   string                            `pulumi:"valueType"`
}

type MetricMetricDescriptorArgsInput interface {
	pulumi.Input

	ToMetricMetricDescriptorArgsOutput() MetricMetricDescriptorArgsOutput
	ToMetricMetricDescriptorArgsOutputWithContext(context.Context) MetricMetricDescriptorArgsOutput
}

type MetricMetricDescriptorArgsArgs struct {
	DisplayName pulumi.StringPtrInput                     `pulumi:"displayName"`
	Labels      MetricMetricDescriptorLabelArgsArrayInput `pulumi:"labels"`
	MetricKind  pulumi.StringInput                        `pulumi:"metricKind"`
	Unit        pulumi.StringPtrInput                     `pulumi:"unit"`
	ValueType   pulumi.StringInput                        `pulumi:"valueType"`
}

func (MetricMetricDescriptorArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorArgs)(nil)).Elem()
}

func (i MetricMetricDescriptorArgsArgs) ToMetricMetricDescriptorArgsOutput() MetricMetricDescriptorArgsOutput {
	return i.ToMetricMetricDescriptorArgsOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorArgsArgs) ToMetricMetricDescriptorArgsOutputWithContext(ctx context.Context) MetricMetricDescriptorArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorArgsOutput)
}

func (i MetricMetricDescriptorArgsArgs) ToMetricMetricDescriptorArgsPtrOutput() MetricMetricDescriptorArgsPtrOutput {
	return i.ToMetricMetricDescriptorArgsPtrOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorArgsArgs) ToMetricMetricDescriptorArgsPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorArgsOutput).ToMetricMetricDescriptorArgsPtrOutputWithContext(ctx)
}

type MetricMetricDescriptorArgsPtrInput interface {
	pulumi.Input

	ToMetricMetricDescriptorArgsPtrOutput() MetricMetricDescriptorArgsPtrOutput
	ToMetricMetricDescriptorArgsPtrOutputWithContext(context.Context) MetricMetricDescriptorArgsPtrOutput
}

type metricMetricDescriptorArgsPtrType MetricMetricDescriptorArgsArgs

func MetricMetricDescriptorArgsPtr(v *MetricMetricDescriptorArgsArgs) MetricMetricDescriptorArgsPtrInput {
	return (*metricMetricDescriptorArgsPtrType)(v)
}

func (*metricMetricDescriptorArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetricDescriptorArgs)(nil)).Elem()
}

func (i *metricMetricDescriptorArgsPtrType) ToMetricMetricDescriptorArgsPtrOutput() MetricMetricDescriptorArgsPtrOutput {
	return i.ToMetricMetricDescriptorArgsPtrOutputWithContext(context.Background())
}

func (i *metricMetricDescriptorArgsPtrType) ToMetricMetricDescriptorArgsPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorArgsPtrOutput)
}

type MetricMetricDescriptorArgsOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorArgs)(nil)).Elem()
}

func (o MetricMetricDescriptorArgsOutput) ToMetricMetricDescriptorArgsOutput() MetricMetricDescriptorArgsOutput {
	return o
}

func (o MetricMetricDescriptorArgsOutput) ToMetricMetricDescriptorArgsOutputWithContext(ctx context.Context) MetricMetricDescriptorArgsOutput {
	return o
}

func (o MetricMetricDescriptorArgsOutput) ToMetricMetricDescriptorArgsPtrOutput() MetricMetricDescriptorArgsPtrOutput {
	return o.ToMetricMetricDescriptorArgsPtrOutputWithContext(context.Background())
}

func (o MetricMetricDescriptorArgsOutput) ToMetricMetricDescriptorArgsPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorArgsPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) *MetricMetricDescriptorArgs {
		return &v
	}).(MetricMetricDescriptorArgsPtrOutput)
}
func (o MetricMetricDescriptorArgsOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorArgsOutput) Labels() MetricMetricDescriptorLabelArgsArrayOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) []MetricMetricDescriptorLabelArgs { return v.Labels }).(MetricMetricDescriptorLabelArgsArrayOutput)
}

func (o MetricMetricDescriptorArgsOutput) MetricKind() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) string { return v.MetricKind }).(pulumi.StringOutput)
}

func (o MetricMetricDescriptorArgsOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorArgsOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) string { return v.ValueType }).(pulumi.StringOutput)
}

type MetricMetricDescriptorArgsPtrOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetricDescriptorArgs)(nil)).Elem()
}

func (o MetricMetricDescriptorArgsPtrOutput) ToMetricMetricDescriptorArgsPtrOutput() MetricMetricDescriptorArgsPtrOutput {
	return o
}

func (o MetricMetricDescriptorArgsPtrOutput) ToMetricMetricDescriptorArgsPtrOutputWithContext(ctx context.Context) MetricMetricDescriptorArgsPtrOutput {
	return o
}

func (o MetricMetricDescriptorArgsPtrOutput) Elem() MetricMetricDescriptorArgsOutput {
	return o.ApplyT(func(v *MetricMetricDescriptorArgs) MetricMetricDescriptorArgs { return *v }).(MetricMetricDescriptorArgsOutput)
}

func (o MetricMetricDescriptorArgsPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorArgsPtrOutput) Labels() MetricMetricDescriptorLabelArgsArrayOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) []MetricMetricDescriptorLabelArgs { return v.Labels }).(MetricMetricDescriptorLabelArgsArrayOutput)
}

func (o MetricMetricDescriptorArgsPtrOutput) MetricKind() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) string { return v.MetricKind }).(pulumi.StringOutput)
}

func (o MetricMetricDescriptorArgsPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorArgsPtrOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorArgs) string { return v.ValueType }).(pulumi.StringOutput)
}

type MetricMetricDescriptorLabel struct {
	Description *string `pulumi:"description"`
	Key         string  `pulumi:"key"`
	ValueType   *string `pulumi:"valueType"`
}

type MetricMetricDescriptorLabelInput interface {
	pulumi.Input

	ToMetricMetricDescriptorLabelOutput() MetricMetricDescriptorLabelOutput
	ToMetricMetricDescriptorLabelOutputWithContext(context.Context) MetricMetricDescriptorLabelOutput
}

type MetricMetricDescriptorLabelArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Key         pulumi.StringInput    `pulumi:"key"`
	ValueType   pulumi.StringPtrInput `pulumi:"valueType"`
}

func (MetricMetricDescriptorLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorLabel)(nil)).Elem()
}

func (i MetricMetricDescriptorLabelArgs) ToMetricMetricDescriptorLabelOutput() MetricMetricDescriptorLabelOutput {
	return i.ToMetricMetricDescriptorLabelOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorLabelArgs) ToMetricMetricDescriptorLabelOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorLabelOutput)
}

type MetricMetricDescriptorLabelArrayInput interface {
	pulumi.Input

	ToMetricMetricDescriptorLabelArrayOutput() MetricMetricDescriptorLabelArrayOutput
	ToMetricMetricDescriptorLabelArrayOutputWithContext(context.Context) MetricMetricDescriptorLabelArrayOutput
}

type MetricMetricDescriptorLabelArray []MetricMetricDescriptorLabelInput

func (MetricMetricDescriptorLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricDescriptorLabel)(nil)).Elem()
}

func (i MetricMetricDescriptorLabelArray) ToMetricMetricDescriptorLabelArrayOutput() MetricMetricDescriptorLabelArrayOutput {
	return i.ToMetricMetricDescriptorLabelArrayOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorLabelArray) ToMetricMetricDescriptorLabelArrayOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorLabelArrayOutput)
}

type MetricMetricDescriptorLabelOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorLabel)(nil)).Elem()
}

func (o MetricMetricDescriptorLabelOutput) ToMetricMetricDescriptorLabelOutput() MetricMetricDescriptorLabelOutput {
	return o
}

func (o MetricMetricDescriptorLabelOutput) ToMetricMetricDescriptorLabelOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelOutput {
	return o
}

func (o MetricMetricDescriptorLabelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorLabel) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o MetricMetricDescriptorLabelOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorLabel) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type MetricMetricDescriptorLabelArrayOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricDescriptorLabel)(nil)).Elem()
}

func (o MetricMetricDescriptorLabelArrayOutput) ToMetricMetricDescriptorLabelArrayOutput() MetricMetricDescriptorLabelArrayOutput {
	return o
}

func (o MetricMetricDescriptorLabelArrayOutput) ToMetricMetricDescriptorLabelArrayOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelArrayOutput {
	return o
}

func (o MetricMetricDescriptorLabelArrayOutput) Index(i pulumi.IntInput) MetricMetricDescriptorLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricMetricDescriptorLabel {
		return vs[0].([]MetricMetricDescriptorLabel)[vs[1].(int)]
	}).(MetricMetricDescriptorLabelOutput)
}

type MetricMetricDescriptorLabelArgs struct {
	Description *string `pulumi:"description"`
	Key         string  `pulumi:"key"`
	ValueType   *string `pulumi:"valueType"`
}

type MetricMetricDescriptorLabelArgsInput interface {
	pulumi.Input

	ToMetricMetricDescriptorLabelArgsOutput() MetricMetricDescriptorLabelArgsOutput
	ToMetricMetricDescriptorLabelArgsOutputWithContext(context.Context) MetricMetricDescriptorLabelArgsOutput
}

type MetricMetricDescriptorLabelArgsArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Key         pulumi.StringInput    `pulumi:"key"`
	ValueType   pulumi.StringPtrInput `pulumi:"valueType"`
}

func (MetricMetricDescriptorLabelArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorLabelArgs)(nil)).Elem()
}

func (i MetricMetricDescriptorLabelArgsArgs) ToMetricMetricDescriptorLabelArgsOutput() MetricMetricDescriptorLabelArgsOutput {
	return i.ToMetricMetricDescriptorLabelArgsOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorLabelArgsArgs) ToMetricMetricDescriptorLabelArgsOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorLabelArgsOutput)
}

type MetricMetricDescriptorLabelArgsArrayInput interface {
	pulumi.Input

	ToMetricMetricDescriptorLabelArgsArrayOutput() MetricMetricDescriptorLabelArgsArrayOutput
	ToMetricMetricDescriptorLabelArgsArrayOutputWithContext(context.Context) MetricMetricDescriptorLabelArgsArrayOutput
}

type MetricMetricDescriptorLabelArgsArray []MetricMetricDescriptorLabelArgsInput

func (MetricMetricDescriptorLabelArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricDescriptorLabelArgs)(nil)).Elem()
}

func (i MetricMetricDescriptorLabelArgsArray) ToMetricMetricDescriptorLabelArgsArrayOutput() MetricMetricDescriptorLabelArgsArrayOutput {
	return i.ToMetricMetricDescriptorLabelArgsArrayOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorLabelArgsArray) ToMetricMetricDescriptorLabelArgsArrayOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorLabelArgsArrayOutput)
}

type MetricMetricDescriptorLabelArgsOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorLabelArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorLabelArgs)(nil)).Elem()
}

func (o MetricMetricDescriptorLabelArgsOutput) ToMetricMetricDescriptorLabelArgsOutput() MetricMetricDescriptorLabelArgsOutput {
	return o
}

func (o MetricMetricDescriptorLabelArgsOutput) ToMetricMetricDescriptorLabelArgsOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelArgsOutput {
	return o
}

func (o MetricMetricDescriptorLabelArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorLabelArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorLabelArgsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorLabelArgs) string { return v.Key }).(pulumi.StringOutput)
}

func (o MetricMetricDescriptorLabelArgsOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorLabelArgs) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type MetricMetricDescriptorLabelArgsArrayOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorLabelArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricDescriptorLabelArgs)(nil)).Elem()
}

func (o MetricMetricDescriptorLabelArgsArrayOutput) ToMetricMetricDescriptorLabelArgsArrayOutput() MetricMetricDescriptorLabelArgsArrayOutput {
	return o
}

func (o MetricMetricDescriptorLabelArgsArrayOutput) ToMetricMetricDescriptorLabelArgsArrayOutputWithContext(ctx context.Context) MetricMetricDescriptorLabelArgsArrayOutput {
	return o
}

func (o MetricMetricDescriptorLabelArgsArrayOutput) Index(i pulumi.IntInput) MetricMetricDescriptorLabelArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricMetricDescriptorLabelArgs {
		return vs[0].([]MetricMetricDescriptorLabelArgs)[vs[1].(int)]
	}).(MetricMetricDescriptorLabelArgsOutput)
}

type MetricMetricDescriptorState struct {
	DisplayName *string                            `pulumi:"displayName"`
	Labels      []MetricMetricDescriptorStateLabel `pulumi:"labels"`
	MetricKind  string                             `pulumi:"metricKind"`
	Unit        *string                            `pulumi:"unit"`
	ValueType   string                             `pulumi:"valueType"`
}

type MetricMetricDescriptorStateInput interface {
	pulumi.Input

	ToMetricMetricDescriptorStateOutput() MetricMetricDescriptorStateOutput
	ToMetricMetricDescriptorStateOutputWithContext(context.Context) MetricMetricDescriptorStateOutput
}

type MetricMetricDescriptorStateArgs struct {
	DisplayName pulumi.StringPtrInput                      `pulumi:"displayName"`
	Labels      MetricMetricDescriptorStateLabelArrayInput `pulumi:"labels"`
	MetricKind  pulumi.StringInput                         `pulumi:"metricKind"`
	Unit        pulumi.StringPtrInput                      `pulumi:"unit"`
	ValueType   pulumi.StringInput                         `pulumi:"valueType"`
}

func (MetricMetricDescriptorStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorState)(nil)).Elem()
}

func (i MetricMetricDescriptorStateArgs) ToMetricMetricDescriptorStateOutput() MetricMetricDescriptorStateOutput {
	return i.ToMetricMetricDescriptorStateOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorStateArgs) ToMetricMetricDescriptorStateOutputWithContext(ctx context.Context) MetricMetricDescriptorStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorStateOutput)
}

type MetricMetricDescriptorStateOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorState)(nil)).Elem()
}

func (o MetricMetricDescriptorStateOutput) ToMetricMetricDescriptorStateOutput() MetricMetricDescriptorStateOutput {
	return o
}

func (o MetricMetricDescriptorStateOutput) ToMetricMetricDescriptorStateOutputWithContext(ctx context.Context) MetricMetricDescriptorStateOutput {
	return o
}

func (o MetricMetricDescriptorStateOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorState) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorStateOutput) Labels() MetricMetricDescriptorStateLabelArrayOutput {
	return o.ApplyT(func(v MetricMetricDescriptorState) []MetricMetricDescriptorStateLabel { return v.Labels }).(MetricMetricDescriptorStateLabelArrayOutput)
}

func (o MetricMetricDescriptorStateOutput) MetricKind() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorState) string { return v.MetricKind }).(pulumi.StringOutput)
}

func (o MetricMetricDescriptorStateOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorState) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorStateOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorState) string { return v.ValueType }).(pulumi.StringOutput)
}

type MetricMetricDescriptorStateLabel struct {
	Description *string `pulumi:"description"`
	Key         string  `pulumi:"key"`
	ValueType   *string `pulumi:"valueType"`
}

type MetricMetricDescriptorStateLabelInput interface {
	pulumi.Input

	ToMetricMetricDescriptorStateLabelOutput() MetricMetricDescriptorStateLabelOutput
	ToMetricMetricDescriptorStateLabelOutputWithContext(context.Context) MetricMetricDescriptorStateLabelOutput
}

type MetricMetricDescriptorStateLabelArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Key         pulumi.StringInput    `pulumi:"key"`
	ValueType   pulumi.StringPtrInput `pulumi:"valueType"`
}

func (MetricMetricDescriptorStateLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorStateLabel)(nil)).Elem()
}

func (i MetricMetricDescriptorStateLabelArgs) ToMetricMetricDescriptorStateLabelOutput() MetricMetricDescriptorStateLabelOutput {
	return i.ToMetricMetricDescriptorStateLabelOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorStateLabelArgs) ToMetricMetricDescriptorStateLabelOutputWithContext(ctx context.Context) MetricMetricDescriptorStateLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorStateLabelOutput)
}

type MetricMetricDescriptorStateLabelArrayInput interface {
	pulumi.Input

	ToMetricMetricDescriptorStateLabelArrayOutput() MetricMetricDescriptorStateLabelArrayOutput
	ToMetricMetricDescriptorStateLabelArrayOutputWithContext(context.Context) MetricMetricDescriptorStateLabelArrayOutput
}

type MetricMetricDescriptorStateLabelArray []MetricMetricDescriptorStateLabelInput

func (MetricMetricDescriptorStateLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricDescriptorStateLabel)(nil)).Elem()
}

func (i MetricMetricDescriptorStateLabelArray) ToMetricMetricDescriptorStateLabelArrayOutput() MetricMetricDescriptorStateLabelArrayOutput {
	return i.ToMetricMetricDescriptorStateLabelArrayOutputWithContext(context.Background())
}

func (i MetricMetricDescriptorStateLabelArray) ToMetricMetricDescriptorStateLabelArrayOutputWithContext(ctx context.Context) MetricMetricDescriptorStateLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricDescriptorStateLabelArrayOutput)
}

type MetricMetricDescriptorStateLabelOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorStateLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricDescriptorStateLabel)(nil)).Elem()
}

func (o MetricMetricDescriptorStateLabelOutput) ToMetricMetricDescriptorStateLabelOutput() MetricMetricDescriptorStateLabelOutput {
	return o
}

func (o MetricMetricDescriptorStateLabelOutput) ToMetricMetricDescriptorStateLabelOutputWithContext(ctx context.Context) MetricMetricDescriptorStateLabelOutput {
	return o
}

func (o MetricMetricDescriptorStateLabelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorStateLabel) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MetricMetricDescriptorStateLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricDescriptorStateLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o MetricMetricDescriptorStateLabelOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricDescriptorStateLabel) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type MetricMetricDescriptorStateLabelArrayOutput struct{ *pulumi.OutputState }

func (MetricMetricDescriptorStateLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricDescriptorStateLabel)(nil)).Elem()
}

func (o MetricMetricDescriptorStateLabelArrayOutput) ToMetricMetricDescriptorStateLabelArrayOutput() MetricMetricDescriptorStateLabelArrayOutput {
	return o
}

func (o MetricMetricDescriptorStateLabelArrayOutput) ToMetricMetricDescriptorStateLabelArrayOutputWithContext(ctx context.Context) MetricMetricDescriptorStateLabelArrayOutput {
	return o
}

func (o MetricMetricDescriptorStateLabelArrayOutput) Index(i pulumi.IntInput) MetricMetricDescriptorStateLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricMetricDescriptorStateLabel {
		return vs[0].([]MetricMetricDescriptorStateLabel)[vs[1].(int)]
	}).(MetricMetricDescriptorStateLabelOutput)
}

type OrganizationSinkBigqueryOptions struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type OrganizationSinkBigqueryOptionsInput interface {
	pulumi.Input

	ToOrganizationSinkBigqueryOptionsOutput() OrganizationSinkBigqueryOptionsOutput
	ToOrganizationSinkBigqueryOptionsOutputWithContext(context.Context) OrganizationSinkBigqueryOptionsOutput
}

type OrganizationSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (OrganizationSinkBigqueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationSinkBigqueryOptions)(nil)).Elem()
}

func (i OrganizationSinkBigqueryOptionsArgs) ToOrganizationSinkBigqueryOptionsOutput() OrganizationSinkBigqueryOptionsOutput {
	return i.ToOrganizationSinkBigqueryOptionsOutputWithContext(context.Background())
}

func (i OrganizationSinkBigqueryOptionsArgs) ToOrganizationSinkBigqueryOptionsOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsOutput)
}

func (i OrganizationSinkBigqueryOptionsArgs) ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput {
	return i.ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i OrganizationSinkBigqueryOptionsArgs) ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsOutput).ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx)
}

type OrganizationSinkBigqueryOptionsPtrInput interface {
	pulumi.Input

	ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput
	ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(context.Context) OrganizationSinkBigqueryOptionsPtrOutput
}

type organizationSinkBigqueryOptionsPtrType OrganizationSinkBigqueryOptionsArgs

func OrganizationSinkBigqueryOptionsPtr(v *OrganizationSinkBigqueryOptionsArgs) OrganizationSinkBigqueryOptionsPtrInput {
	return (*organizationSinkBigqueryOptionsPtrType)(v)
}

func (*organizationSinkBigqueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationSinkBigqueryOptions)(nil)).Elem()
}

func (i *organizationSinkBigqueryOptionsPtrType) ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput {
	return i.ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i *organizationSinkBigqueryOptionsPtrType) ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsPtrOutput)
}

type OrganizationSinkBigqueryOptionsOutput struct{ *pulumi.OutputState }

func (OrganizationSinkBigqueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationSinkBigqueryOptions)(nil)).Elem()
}

func (o OrganizationSinkBigqueryOptionsOutput) ToOrganizationSinkBigqueryOptionsOutput() OrganizationSinkBigqueryOptionsOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsOutput) ToOrganizationSinkBigqueryOptionsOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsOutput) ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput {
	return o.ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (o OrganizationSinkBigqueryOptionsOutput) ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsPtrOutput {
	return o.ApplyT(func(v OrganizationSinkBigqueryOptions) *OrganizationSinkBigqueryOptions {
		return &v
	}).(OrganizationSinkBigqueryOptionsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o OrganizationSinkBigqueryOptionsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v OrganizationSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type OrganizationSinkBigqueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (OrganizationSinkBigqueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationSinkBigqueryOptions)(nil)).Elem()
}

func (o OrganizationSinkBigqueryOptionsPtrOutput) ToOrganizationSinkBigqueryOptionsPtrOutput() OrganizationSinkBigqueryOptionsPtrOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsPtrOutput) ToOrganizationSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsPtrOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsPtrOutput) Elem() OrganizationSinkBigqueryOptionsOutput {
	return o.ApplyT(func(v *OrganizationSinkBigqueryOptions) OrganizationSinkBigqueryOptions { return *v }).(OrganizationSinkBigqueryOptionsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o OrganizationSinkBigqueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v OrganizationSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type OrganizationSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type OrganizationSinkBigqueryOptionsArgsInput interface {
	pulumi.Input

	ToOrganizationSinkBigqueryOptionsArgsOutput() OrganizationSinkBigqueryOptionsArgsOutput
	ToOrganizationSinkBigqueryOptionsArgsOutputWithContext(context.Context) OrganizationSinkBigqueryOptionsArgsOutput
}

type OrganizationSinkBigqueryOptionsArgsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (OrganizationSinkBigqueryOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (i OrganizationSinkBigqueryOptionsArgsArgs) ToOrganizationSinkBigqueryOptionsArgsOutput() OrganizationSinkBigqueryOptionsArgsOutput {
	return i.ToOrganizationSinkBigqueryOptionsArgsOutputWithContext(context.Background())
}

func (i OrganizationSinkBigqueryOptionsArgsArgs) ToOrganizationSinkBigqueryOptionsArgsOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsArgsOutput)
}

func (i OrganizationSinkBigqueryOptionsArgsArgs) ToOrganizationSinkBigqueryOptionsArgsPtrOutput() OrganizationSinkBigqueryOptionsArgsPtrOutput {
	return i.ToOrganizationSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (i OrganizationSinkBigqueryOptionsArgsArgs) ToOrganizationSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsArgsOutput).ToOrganizationSinkBigqueryOptionsArgsPtrOutputWithContext(ctx)
}

type OrganizationSinkBigqueryOptionsArgsPtrInput interface {
	pulumi.Input

	ToOrganizationSinkBigqueryOptionsArgsPtrOutput() OrganizationSinkBigqueryOptionsArgsPtrOutput
	ToOrganizationSinkBigqueryOptionsArgsPtrOutputWithContext(context.Context) OrganizationSinkBigqueryOptionsArgsPtrOutput
}

type organizationSinkBigqueryOptionsArgsPtrType OrganizationSinkBigqueryOptionsArgsArgs

func OrganizationSinkBigqueryOptionsArgsPtr(v *OrganizationSinkBigqueryOptionsArgsArgs) OrganizationSinkBigqueryOptionsArgsPtrInput {
	return (*organizationSinkBigqueryOptionsArgsPtrType)(v)
}

func (*organizationSinkBigqueryOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (i *organizationSinkBigqueryOptionsArgsPtrType) ToOrganizationSinkBigqueryOptionsArgsPtrOutput() OrganizationSinkBigqueryOptionsArgsPtrOutput {
	return i.ToOrganizationSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *organizationSinkBigqueryOptionsArgsPtrType) ToOrganizationSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsArgsPtrOutput)
}

type OrganizationSinkBigqueryOptionsArgsOutput struct{ *pulumi.OutputState }

func (OrganizationSinkBigqueryOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (o OrganizationSinkBigqueryOptionsArgsOutput) ToOrganizationSinkBigqueryOptionsArgsOutput() OrganizationSinkBigqueryOptionsArgsOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsArgsOutput) ToOrganizationSinkBigqueryOptionsArgsOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsArgsOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsArgsOutput) ToOrganizationSinkBigqueryOptionsArgsPtrOutput() OrganizationSinkBigqueryOptionsArgsPtrOutput {
	return o.ToOrganizationSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (o OrganizationSinkBigqueryOptionsArgsOutput) ToOrganizationSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsArgsPtrOutput {
	return o.ApplyT(func(v OrganizationSinkBigqueryOptionsArgs) *OrganizationSinkBigqueryOptionsArgs {
		return &v
	}).(OrganizationSinkBigqueryOptionsArgsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o OrganizationSinkBigqueryOptionsArgsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v OrganizationSinkBigqueryOptionsArgs) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type OrganizationSinkBigqueryOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (OrganizationSinkBigqueryOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (o OrganizationSinkBigqueryOptionsArgsPtrOutput) ToOrganizationSinkBigqueryOptionsArgsPtrOutput() OrganizationSinkBigqueryOptionsArgsPtrOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsArgsPtrOutput) ToOrganizationSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsArgsPtrOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsArgsPtrOutput) Elem() OrganizationSinkBigqueryOptionsArgsOutput {
	return o.ApplyT(func(v *OrganizationSinkBigqueryOptionsArgs) OrganizationSinkBigqueryOptionsArgs { return *v }).(OrganizationSinkBigqueryOptionsArgsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o OrganizationSinkBigqueryOptionsArgsPtrOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v OrganizationSinkBigqueryOptionsArgs) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type OrganizationSinkBigqueryOptionsState struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type OrganizationSinkBigqueryOptionsStateInput interface {
	pulumi.Input

	ToOrganizationSinkBigqueryOptionsStateOutput() OrganizationSinkBigqueryOptionsStateOutput
	ToOrganizationSinkBigqueryOptionsStateOutputWithContext(context.Context) OrganizationSinkBigqueryOptionsStateOutput
}

type OrganizationSinkBigqueryOptionsStateArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (OrganizationSinkBigqueryOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationSinkBigqueryOptionsState)(nil)).Elem()
}

func (i OrganizationSinkBigqueryOptionsStateArgs) ToOrganizationSinkBigqueryOptionsStateOutput() OrganizationSinkBigqueryOptionsStateOutput {
	return i.ToOrganizationSinkBigqueryOptionsStateOutputWithContext(context.Background())
}

func (i OrganizationSinkBigqueryOptionsStateArgs) ToOrganizationSinkBigqueryOptionsStateOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationSinkBigqueryOptionsStateOutput)
}

type OrganizationSinkBigqueryOptionsStateOutput struct{ *pulumi.OutputState }

func (OrganizationSinkBigqueryOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationSinkBigqueryOptionsState)(nil)).Elem()
}

func (o OrganizationSinkBigqueryOptionsStateOutput) ToOrganizationSinkBigqueryOptionsStateOutput() OrganizationSinkBigqueryOptionsStateOutput {
	return o
}

func (o OrganizationSinkBigqueryOptionsStateOutput) ToOrganizationSinkBigqueryOptionsStateOutputWithContext(ctx context.Context) OrganizationSinkBigqueryOptionsStateOutput {
	return o
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o OrganizationSinkBigqueryOptionsStateOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v OrganizationSinkBigqueryOptionsState) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type ProjectSinkBigqueryOptions struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type ProjectSinkBigqueryOptionsInput interface {
	pulumi.Input

	ToProjectSinkBigqueryOptionsOutput() ProjectSinkBigqueryOptionsOutput
	ToProjectSinkBigqueryOptionsOutputWithContext(context.Context) ProjectSinkBigqueryOptionsOutput
}

type ProjectSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (ProjectSinkBigqueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSinkBigqueryOptions)(nil)).Elem()
}

func (i ProjectSinkBigqueryOptionsArgs) ToProjectSinkBigqueryOptionsOutput() ProjectSinkBigqueryOptionsOutput {
	return i.ToProjectSinkBigqueryOptionsOutputWithContext(context.Background())
}

func (i ProjectSinkBigqueryOptionsArgs) ToProjectSinkBigqueryOptionsOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsOutput)
}

func (i ProjectSinkBigqueryOptionsArgs) ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput {
	return i.ToProjectSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i ProjectSinkBigqueryOptionsArgs) ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsOutput).ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx)
}

type ProjectSinkBigqueryOptionsPtrInput interface {
	pulumi.Input

	ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput
	ToProjectSinkBigqueryOptionsPtrOutputWithContext(context.Context) ProjectSinkBigqueryOptionsPtrOutput
}

type projectSinkBigqueryOptionsPtrType ProjectSinkBigqueryOptionsArgs

func ProjectSinkBigqueryOptionsPtr(v *ProjectSinkBigqueryOptionsArgs) ProjectSinkBigqueryOptionsPtrInput {
	return (*projectSinkBigqueryOptionsPtrType)(v)
}

func (*projectSinkBigqueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSinkBigqueryOptions)(nil)).Elem()
}

func (i *projectSinkBigqueryOptionsPtrType) ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput {
	return i.ToProjectSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (i *projectSinkBigqueryOptionsPtrType) ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsPtrOutput)
}

type ProjectSinkBigqueryOptionsOutput struct{ *pulumi.OutputState }

func (ProjectSinkBigqueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSinkBigqueryOptions)(nil)).Elem()
}

func (o ProjectSinkBigqueryOptionsOutput) ToProjectSinkBigqueryOptionsOutput() ProjectSinkBigqueryOptionsOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsOutput) ToProjectSinkBigqueryOptionsOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsOutput) ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput {
	return o.ToProjectSinkBigqueryOptionsPtrOutputWithContext(context.Background())
}

func (o ProjectSinkBigqueryOptionsOutput) ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsPtrOutput {
	return o.ApplyT(func(v ProjectSinkBigqueryOptions) *ProjectSinkBigqueryOptions {
		return &v
	}).(ProjectSinkBigqueryOptionsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o ProjectSinkBigqueryOptionsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type ProjectSinkBigqueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (ProjectSinkBigqueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSinkBigqueryOptions)(nil)).Elem()
}

func (o ProjectSinkBigqueryOptionsPtrOutput) ToProjectSinkBigqueryOptionsPtrOutput() ProjectSinkBigqueryOptionsPtrOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsPtrOutput) ToProjectSinkBigqueryOptionsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsPtrOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsPtrOutput) Elem() ProjectSinkBigqueryOptionsOutput {
	return o.ApplyT(func(v *ProjectSinkBigqueryOptions) ProjectSinkBigqueryOptions { return *v }).(ProjectSinkBigqueryOptionsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o ProjectSinkBigqueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSinkBigqueryOptions) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type ProjectSinkBigqueryOptionsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type ProjectSinkBigqueryOptionsArgsInput interface {
	pulumi.Input

	ToProjectSinkBigqueryOptionsArgsOutput() ProjectSinkBigqueryOptionsArgsOutput
	ToProjectSinkBigqueryOptionsArgsOutputWithContext(context.Context) ProjectSinkBigqueryOptionsArgsOutput
}

type ProjectSinkBigqueryOptionsArgsArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (ProjectSinkBigqueryOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (i ProjectSinkBigqueryOptionsArgsArgs) ToProjectSinkBigqueryOptionsArgsOutput() ProjectSinkBigqueryOptionsArgsOutput {
	return i.ToProjectSinkBigqueryOptionsArgsOutputWithContext(context.Background())
}

func (i ProjectSinkBigqueryOptionsArgsArgs) ToProjectSinkBigqueryOptionsArgsOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsArgsOutput)
}

func (i ProjectSinkBigqueryOptionsArgsArgs) ToProjectSinkBigqueryOptionsArgsPtrOutput() ProjectSinkBigqueryOptionsArgsPtrOutput {
	return i.ToProjectSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (i ProjectSinkBigqueryOptionsArgsArgs) ToProjectSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsArgsOutput).ToProjectSinkBigqueryOptionsArgsPtrOutputWithContext(ctx)
}

type ProjectSinkBigqueryOptionsArgsPtrInput interface {
	pulumi.Input

	ToProjectSinkBigqueryOptionsArgsPtrOutput() ProjectSinkBigqueryOptionsArgsPtrOutput
	ToProjectSinkBigqueryOptionsArgsPtrOutputWithContext(context.Context) ProjectSinkBigqueryOptionsArgsPtrOutput
}

type projectSinkBigqueryOptionsArgsPtrType ProjectSinkBigqueryOptionsArgsArgs

func ProjectSinkBigqueryOptionsArgsPtr(v *ProjectSinkBigqueryOptionsArgsArgs) ProjectSinkBigqueryOptionsArgsPtrInput {
	return (*projectSinkBigqueryOptionsArgsPtrType)(v)
}

func (*projectSinkBigqueryOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (i *projectSinkBigqueryOptionsArgsPtrType) ToProjectSinkBigqueryOptionsArgsPtrOutput() ProjectSinkBigqueryOptionsArgsPtrOutput {
	return i.ToProjectSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *projectSinkBigqueryOptionsArgsPtrType) ToProjectSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsArgsPtrOutput)
}

type ProjectSinkBigqueryOptionsArgsOutput struct{ *pulumi.OutputState }

func (ProjectSinkBigqueryOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (o ProjectSinkBigqueryOptionsArgsOutput) ToProjectSinkBigqueryOptionsArgsOutput() ProjectSinkBigqueryOptionsArgsOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsArgsOutput) ToProjectSinkBigqueryOptionsArgsOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsArgsOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsArgsOutput) ToProjectSinkBigqueryOptionsArgsPtrOutput() ProjectSinkBigqueryOptionsArgsPtrOutput {
	return o.ToProjectSinkBigqueryOptionsArgsPtrOutputWithContext(context.Background())
}

func (o ProjectSinkBigqueryOptionsArgsOutput) ToProjectSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsArgsPtrOutput {
	return o.ApplyT(func(v ProjectSinkBigqueryOptionsArgs) *ProjectSinkBigqueryOptionsArgs {
		return &v
	}).(ProjectSinkBigqueryOptionsArgsPtrOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o ProjectSinkBigqueryOptionsArgsOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSinkBigqueryOptionsArgs) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type ProjectSinkBigqueryOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (ProjectSinkBigqueryOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSinkBigqueryOptionsArgs)(nil)).Elem()
}

func (o ProjectSinkBigqueryOptionsArgsPtrOutput) ToProjectSinkBigqueryOptionsArgsPtrOutput() ProjectSinkBigqueryOptionsArgsPtrOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsArgsPtrOutput) ToProjectSinkBigqueryOptionsArgsPtrOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsArgsPtrOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsArgsPtrOutput) Elem() ProjectSinkBigqueryOptionsArgsOutput {
	return o.ApplyT(func(v *ProjectSinkBigqueryOptionsArgs) ProjectSinkBigqueryOptionsArgs { return *v }).(ProjectSinkBigqueryOptionsArgsOutput)
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o ProjectSinkBigqueryOptionsArgsPtrOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSinkBigqueryOptionsArgs) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

type ProjectSinkBigqueryOptionsState struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
}

type ProjectSinkBigqueryOptionsStateInput interface {
	pulumi.Input

	ToProjectSinkBigqueryOptionsStateOutput() ProjectSinkBigqueryOptionsStateOutput
	ToProjectSinkBigqueryOptionsStateOutputWithContext(context.Context) ProjectSinkBigqueryOptionsStateOutput
}

type ProjectSinkBigqueryOptionsStateArgs struct {
	// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
	// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
	// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
	// has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
}

func (ProjectSinkBigqueryOptionsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSinkBigqueryOptionsState)(nil)).Elem()
}

func (i ProjectSinkBigqueryOptionsStateArgs) ToProjectSinkBigqueryOptionsStateOutput() ProjectSinkBigqueryOptionsStateOutput {
	return i.ToProjectSinkBigqueryOptionsStateOutputWithContext(context.Background())
}

func (i ProjectSinkBigqueryOptionsStateArgs) ToProjectSinkBigqueryOptionsStateOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSinkBigqueryOptionsStateOutput)
}

type ProjectSinkBigqueryOptionsStateOutput struct{ *pulumi.OutputState }

func (ProjectSinkBigqueryOptionsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSinkBigqueryOptionsState)(nil)).Elem()
}

func (o ProjectSinkBigqueryOptionsStateOutput) ToProjectSinkBigqueryOptionsStateOutput() ProjectSinkBigqueryOptionsStateOutput {
	return o
}

func (o ProjectSinkBigqueryOptionsStateOutput) ToProjectSinkBigqueryOptionsStateOutputWithContext(ctx context.Context) ProjectSinkBigqueryOptionsStateOutput {
	return o
}

// Whether to use [BigQuery's partition tables](https://cloud.google.com/bigquery/docs/partitioned-tables).
// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
// tables the date suffix is no longer present and [special query syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
// has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o ProjectSinkBigqueryOptionsStateOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSinkBigqueryOptionsState) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(BillingAccountSinkBigqueryOptionsOutput{})
	pulumi.RegisterOutputType(BillingAccountSinkBigqueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(BillingAccountSinkBigqueryOptionsArgsOutput{})
	pulumi.RegisterOutputType(BillingAccountSinkBigqueryOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(BillingAccountSinkBigqueryOptionsStateOutput{})
	pulumi.RegisterOutputType(FolderSinkBigqueryOptionsOutput{})
	pulumi.RegisterOutputType(FolderSinkBigqueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(FolderSinkBigqueryOptionsArgsOutput{})
	pulumi.RegisterOutputType(FolderSinkBigqueryOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(FolderSinkBigqueryOptionsStateOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsArgsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExplicitBucketsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExplicitBucketsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExplicitBucketsArgsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExplicitBucketsArgsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExponentialBucketsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExponentialBucketsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExponentialBucketsArgsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsExponentialBucketsArgsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsLinearBucketsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsLinearBucketsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsLinearBucketsArgsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsLinearBucketsArgsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsStateOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsStateExplicitBucketsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsStateExplicitBucketsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsStateExponentialBucketsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsStateExponentialBucketsPtrOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsStateLinearBucketsOutput{})
	pulumi.RegisterOutputType(MetricBucketOptionsStateLinearBucketsPtrOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorPtrOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorArgsOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorArgsPtrOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorLabelOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorLabelArrayOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorLabelArgsOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorLabelArgsArrayOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorStateOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorStateLabelOutput{})
	pulumi.RegisterOutputType(MetricMetricDescriptorStateLabelArrayOutput{})
	pulumi.RegisterOutputType(OrganizationSinkBigqueryOptionsOutput{})
	pulumi.RegisterOutputType(OrganizationSinkBigqueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(OrganizationSinkBigqueryOptionsArgsOutput{})
	pulumi.RegisterOutputType(OrganizationSinkBigqueryOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(OrganizationSinkBigqueryOptionsStateOutput{})
	pulumi.RegisterOutputType(ProjectSinkBigqueryOptionsOutput{})
	pulumi.RegisterOutputType(ProjectSinkBigqueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(ProjectSinkBigqueryOptionsArgsOutput{})
	pulumi.RegisterOutputType(ProjectSinkBigqueryOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(ProjectSinkBigqueryOptionsStateOutput{})
}
