// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logging

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Logs-based metric can also be used to extract values from logs and create a a distribution
// of the values. The distribution records the statistics of the extracted values along with
// an optional histogram of the values as specified by the bucket options.
// 
// 
// To get more information about Metric, see:
// 
// * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics/create)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/logging/docs/apis)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/logging_metric.html.markdown.
type Metric struct {
	s *pulumi.ResourceState
}

// NewMetric registers a new resource with the given unique name, arguments, and options.
func NewMetric(ctx *pulumi.Context,
	name string, args *MetricArgs, opts ...pulumi.ResourceOpt) (*Metric, error) {
	if args == nil || args.Filter == nil {
		return nil, errors.New("missing required argument 'Filter'")
	}
	if args == nil || args.MetricDescriptor == nil {
		return nil, errors.New("missing required argument 'MetricDescriptor'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bucketOptions"] = nil
		inputs["description"] = nil
		inputs["filter"] = nil
		inputs["labelExtractors"] = nil
		inputs["metricDescriptor"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["valueExtractor"] = nil
	} else {
		inputs["bucketOptions"] = args.BucketOptions
		inputs["description"] = args.Description
		inputs["filter"] = args.Filter
		inputs["labelExtractors"] = args.LabelExtractors
		inputs["metricDescriptor"] = args.MetricDescriptor
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["valueExtractor"] = args.ValueExtractor
	}
	s, err := ctx.RegisterResource("gcp:logging/metric:Metric", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Metric{s: s}, nil
}

// GetMetric gets an existing Metric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetric(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MetricState, opts ...pulumi.ResourceOpt) (*Metric, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bucketOptions"] = state.BucketOptions
		inputs["description"] = state.Description
		inputs["filter"] = state.Filter
		inputs["labelExtractors"] = state.LabelExtractors
		inputs["metricDescriptor"] = state.MetricDescriptor
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["valueExtractor"] = state.ValueExtractor
	}
	s, err := ctx.ReadResource("gcp:logging/metric:Metric", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Metric{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Metric) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Metric) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Metric) BucketOptions() *pulumi.Output {
	return r.s.State["bucketOptions"]
}

func (r *Metric) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *Metric) Filter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["filter"])
}

func (r *Metric) LabelExtractors() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labelExtractors"])
}

func (r *Metric) MetricDescriptor() *pulumi.Output {
	return r.s.State["metricDescriptor"]
}

func (r *Metric) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Metric) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *Metric) ValueExtractor() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["valueExtractor"])
}

// Input properties used for looking up and filtering Metric resources.
type MetricState struct {
	BucketOptions interface{}
	Description interface{}
	Filter interface{}
	LabelExtractors interface{}
	MetricDescriptor interface{}
	Name interface{}
	Project interface{}
	ValueExtractor interface{}
}

// The set of arguments for constructing a Metric resource.
type MetricArgs struct {
	BucketOptions interface{}
	Description interface{}
	Filter interface{}
	LabelExtractors interface{}
	MetricDescriptor interface{}
	Name interface{}
	Project interface{}
	ValueExtractor interface{}
}
