// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AppProfileSingleClusterRouting struct {
	AllowTransactionalWrites *bool  `pulumi:"allowTransactionalWrites"`
	ClusterId                string `pulumi:"clusterId"`
}

type AppProfileSingleClusterRoutingInput interface {
	pulumi.Input

	ToAppProfileSingleClusterRoutingOutput() AppProfileSingleClusterRoutingOutput
	ToAppProfileSingleClusterRoutingOutputWithContext(context.Context) AppProfileSingleClusterRoutingOutput
}

type AppProfileSingleClusterRoutingArgs struct {
	AllowTransactionalWrites pulumi.BoolPtrInput `pulumi:"allowTransactionalWrites"`
	ClusterId                pulumi.StringInput  `pulumi:"clusterId"`
}

func (AppProfileSingleClusterRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRouting)(nil)).Elem()
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingOutput() AppProfileSingleClusterRoutingOutput {
	return i.ToAppProfileSingleClusterRoutingOutputWithContext(context.Background())
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingOutput)
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return i.ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingOutput).ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx)
}

type AppProfileSingleClusterRoutingPtrInput interface {
	pulumi.Input

	ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput
	ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Context) AppProfileSingleClusterRoutingPtrOutput
}

type appProfileSingleClusterRoutingPtrType AppProfileSingleClusterRoutingArgs

func AppProfileSingleClusterRoutingPtr(v *AppProfileSingleClusterRoutingArgs) AppProfileSingleClusterRoutingPtrInput {
	return (*appProfileSingleClusterRoutingPtrType)(v)
}

func (*appProfileSingleClusterRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProfileSingleClusterRouting)(nil)).Elem()
}

func (i *appProfileSingleClusterRoutingPtrType) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return i.ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i *appProfileSingleClusterRoutingPtrType) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingPtrOutput)
}

type AppProfileSingleClusterRoutingOutput struct{ *pulumi.OutputState }

func (AppProfileSingleClusterRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRouting)(nil)).Elem()
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingOutput() AppProfileSingleClusterRoutingOutput {
	return o
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingOutput {
	return o
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return o.ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) *AppProfileSingleClusterRouting {
		return &v
	}).(AppProfileSingleClusterRoutingPtrOutput)
}
func (o AppProfileSingleClusterRoutingOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

func (o AppProfileSingleClusterRoutingOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) string { return v.ClusterId }).(pulumi.StringOutput)
}

type AppProfileSingleClusterRoutingPtrOutput struct{ *pulumi.OutputState }

func (AppProfileSingleClusterRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProfileSingleClusterRouting)(nil)).Elem()
}

func (o AppProfileSingleClusterRoutingPtrOutput) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return o
}

func (o AppProfileSingleClusterRoutingPtrOutput) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return o
}

func (o AppProfileSingleClusterRoutingPtrOutput) Elem() AppProfileSingleClusterRoutingOutput {
	return o.ApplyT(func(v *AppProfileSingleClusterRouting) AppProfileSingleClusterRouting { return *v }).(AppProfileSingleClusterRoutingOutput)
}

func (o AppProfileSingleClusterRoutingPtrOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

func (o AppProfileSingleClusterRoutingPtrOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) string { return v.ClusterId }).(pulumi.StringOutput)
}

type AppProfileSingleClusterRoutingArgs struct {
	AllowTransactionalWrites *bool  `pulumi:"allowTransactionalWrites"`
	ClusterId                string `pulumi:"clusterId"`
}

type AppProfileSingleClusterRoutingArgsInput interface {
	pulumi.Input

	ToAppProfileSingleClusterRoutingArgsOutput() AppProfileSingleClusterRoutingArgsOutput
	ToAppProfileSingleClusterRoutingArgsOutputWithContext(context.Context) AppProfileSingleClusterRoutingArgsOutput
}

type AppProfileSingleClusterRoutingArgsArgs struct {
	AllowTransactionalWrites pulumi.BoolPtrInput `pulumi:"allowTransactionalWrites"`
	ClusterId                pulumi.StringInput  `pulumi:"clusterId"`
}

func (AppProfileSingleClusterRoutingArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRoutingArgs)(nil)).Elem()
}

func (i AppProfileSingleClusterRoutingArgsArgs) ToAppProfileSingleClusterRoutingArgsOutput() AppProfileSingleClusterRoutingArgsOutput {
	return i.ToAppProfileSingleClusterRoutingArgsOutputWithContext(context.Background())
}

func (i AppProfileSingleClusterRoutingArgsArgs) ToAppProfileSingleClusterRoutingArgsOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingArgsOutput)
}

func (i AppProfileSingleClusterRoutingArgsArgs) ToAppProfileSingleClusterRoutingArgsPtrOutput() AppProfileSingleClusterRoutingArgsPtrOutput {
	return i.ToAppProfileSingleClusterRoutingArgsPtrOutputWithContext(context.Background())
}

func (i AppProfileSingleClusterRoutingArgsArgs) ToAppProfileSingleClusterRoutingArgsPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingArgsOutput).ToAppProfileSingleClusterRoutingArgsPtrOutputWithContext(ctx)
}

type AppProfileSingleClusterRoutingArgsPtrInput interface {
	pulumi.Input

	ToAppProfileSingleClusterRoutingArgsPtrOutput() AppProfileSingleClusterRoutingArgsPtrOutput
	ToAppProfileSingleClusterRoutingArgsPtrOutputWithContext(context.Context) AppProfileSingleClusterRoutingArgsPtrOutput
}

type appProfileSingleClusterRoutingArgsPtrType AppProfileSingleClusterRoutingArgsArgs

func AppProfileSingleClusterRoutingArgsPtr(v *AppProfileSingleClusterRoutingArgsArgs) AppProfileSingleClusterRoutingArgsPtrInput {
	return (*appProfileSingleClusterRoutingArgsPtrType)(v)
}

func (*appProfileSingleClusterRoutingArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProfileSingleClusterRoutingArgs)(nil)).Elem()
}

func (i *appProfileSingleClusterRoutingArgsPtrType) ToAppProfileSingleClusterRoutingArgsPtrOutput() AppProfileSingleClusterRoutingArgsPtrOutput {
	return i.ToAppProfileSingleClusterRoutingArgsPtrOutputWithContext(context.Background())
}

func (i *appProfileSingleClusterRoutingArgsPtrType) ToAppProfileSingleClusterRoutingArgsPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingArgsPtrOutput)
}

type AppProfileSingleClusterRoutingArgsOutput struct{ *pulumi.OutputState }

func (AppProfileSingleClusterRoutingArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRoutingArgs)(nil)).Elem()
}

func (o AppProfileSingleClusterRoutingArgsOutput) ToAppProfileSingleClusterRoutingArgsOutput() AppProfileSingleClusterRoutingArgsOutput {
	return o
}

func (o AppProfileSingleClusterRoutingArgsOutput) ToAppProfileSingleClusterRoutingArgsOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingArgsOutput {
	return o
}

func (o AppProfileSingleClusterRoutingArgsOutput) ToAppProfileSingleClusterRoutingArgsPtrOutput() AppProfileSingleClusterRoutingArgsPtrOutput {
	return o.ToAppProfileSingleClusterRoutingArgsPtrOutputWithContext(context.Background())
}

func (o AppProfileSingleClusterRoutingArgsOutput) ToAppProfileSingleClusterRoutingArgsPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingArgsPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRoutingArgs) *AppProfileSingleClusterRoutingArgs {
		return &v
	}).(AppProfileSingleClusterRoutingArgsPtrOutput)
}
func (o AppProfileSingleClusterRoutingArgsOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRoutingArgs) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

func (o AppProfileSingleClusterRoutingArgsOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRoutingArgs) string { return v.ClusterId }).(pulumi.StringOutput)
}

type AppProfileSingleClusterRoutingArgsPtrOutput struct{ *pulumi.OutputState }

func (AppProfileSingleClusterRoutingArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProfileSingleClusterRoutingArgs)(nil)).Elem()
}

func (o AppProfileSingleClusterRoutingArgsPtrOutput) ToAppProfileSingleClusterRoutingArgsPtrOutput() AppProfileSingleClusterRoutingArgsPtrOutput {
	return o
}

func (o AppProfileSingleClusterRoutingArgsPtrOutput) ToAppProfileSingleClusterRoutingArgsPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingArgsPtrOutput {
	return o
}

func (o AppProfileSingleClusterRoutingArgsPtrOutput) Elem() AppProfileSingleClusterRoutingArgsOutput {
	return o.ApplyT(func(v *AppProfileSingleClusterRoutingArgs) AppProfileSingleClusterRoutingArgs { return *v }).(AppProfileSingleClusterRoutingArgsOutput)
}

func (o AppProfileSingleClusterRoutingArgsPtrOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRoutingArgs) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

func (o AppProfileSingleClusterRoutingArgsPtrOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRoutingArgs) string { return v.ClusterId }).(pulumi.StringOutput)
}

type AppProfileSingleClusterRoutingState struct {
	AllowTransactionalWrites *bool  `pulumi:"allowTransactionalWrites"`
	ClusterId                string `pulumi:"clusterId"`
}

type AppProfileSingleClusterRoutingStateInput interface {
	pulumi.Input

	ToAppProfileSingleClusterRoutingStateOutput() AppProfileSingleClusterRoutingStateOutput
	ToAppProfileSingleClusterRoutingStateOutputWithContext(context.Context) AppProfileSingleClusterRoutingStateOutput
}

type AppProfileSingleClusterRoutingStateArgs struct {
	AllowTransactionalWrites pulumi.BoolPtrInput `pulumi:"allowTransactionalWrites"`
	ClusterId                pulumi.StringInput  `pulumi:"clusterId"`
}

func (AppProfileSingleClusterRoutingStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRoutingState)(nil)).Elem()
}

func (i AppProfileSingleClusterRoutingStateArgs) ToAppProfileSingleClusterRoutingStateOutput() AppProfileSingleClusterRoutingStateOutput {
	return i.ToAppProfileSingleClusterRoutingStateOutputWithContext(context.Background())
}

func (i AppProfileSingleClusterRoutingStateArgs) ToAppProfileSingleClusterRoutingStateOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingStateOutput)
}

type AppProfileSingleClusterRoutingStateOutput struct{ *pulumi.OutputState }

func (AppProfileSingleClusterRoutingStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRoutingState)(nil)).Elem()
}

func (o AppProfileSingleClusterRoutingStateOutput) ToAppProfileSingleClusterRoutingStateOutput() AppProfileSingleClusterRoutingStateOutput {
	return o
}

func (o AppProfileSingleClusterRoutingStateOutput) ToAppProfileSingleClusterRoutingStateOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingStateOutput {
	return o
}

func (o AppProfileSingleClusterRoutingStateOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRoutingState) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

func (o AppProfileSingleClusterRoutingStateOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRoutingState) string { return v.ClusterId }).(pulumi.StringOutput)
}

type DatasetAccess struct {
	Domain       *string            `pulumi:"domain"`
	GroupByEmail *string            `pulumi:"groupByEmail"`
	Role         *string            `pulumi:"role"`
	SpecialGroup *string            `pulumi:"specialGroup"`
	UserByEmail  *string            `pulumi:"userByEmail"`
	View         *DatasetAccessView `pulumi:"view"`
}

type DatasetAccessInput interface {
	pulumi.Input

	ToDatasetAccessOutput() DatasetAccessOutput
	ToDatasetAccessOutputWithContext(context.Context) DatasetAccessOutput
}

type DatasetAccessArgs struct {
	Domain       pulumi.StringPtrInput     `pulumi:"domain"`
	GroupByEmail pulumi.StringPtrInput     `pulumi:"groupByEmail"`
	Role         pulumi.StringPtrInput     `pulumi:"role"`
	SpecialGroup pulumi.StringPtrInput     `pulumi:"specialGroup"`
	UserByEmail  pulumi.StringPtrInput     `pulumi:"userByEmail"`
	View         DatasetAccessViewPtrInput `pulumi:"view"`
}

func (DatasetAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccess)(nil)).Elem()
}

func (i DatasetAccessArgs) ToDatasetAccessOutput() DatasetAccessOutput {
	return i.ToDatasetAccessOutputWithContext(context.Background())
}

func (i DatasetAccessArgs) ToDatasetAccessOutputWithContext(ctx context.Context) DatasetAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessOutput)
}

type DatasetAccessArrayInput interface {
	pulumi.Input

	ToDatasetAccessArrayOutput() DatasetAccessArrayOutput
	ToDatasetAccessArrayOutputWithContext(context.Context) DatasetAccessArrayOutput
}

type DatasetAccessArray []DatasetAccessInput

func (DatasetAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccess)(nil)).Elem()
}

func (i DatasetAccessArray) ToDatasetAccessArrayOutput() DatasetAccessArrayOutput {
	return i.ToDatasetAccessArrayOutputWithContext(context.Background())
}

func (i DatasetAccessArray) ToDatasetAccessArrayOutputWithContext(ctx context.Context) DatasetAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessArrayOutput)
}

type DatasetAccessOutput struct{ *pulumi.OutputState }

func (DatasetAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccess)(nil)).Elem()
}

func (o DatasetAccessOutput) ToDatasetAccessOutput() DatasetAccessOutput {
	return o
}

func (o DatasetAccessOutput) ToDatasetAccessOutputWithContext(ctx context.Context) DatasetAccessOutput {
	return o
}

func (o DatasetAccessOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccess) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) GroupByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccess) *string { return v.GroupByEmail }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccess) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) SpecialGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccess) *string { return v.SpecialGroup }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) UserByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccess) *string { return v.UserByEmail }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) View() DatasetAccessViewPtrOutput {
	return o.ApplyT(func(v DatasetAccess) *DatasetAccessView { return v.View }).(DatasetAccessViewPtrOutput)
}

type DatasetAccessArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccess)(nil)).Elem()
}

func (o DatasetAccessArrayOutput) ToDatasetAccessArrayOutput() DatasetAccessArrayOutput {
	return o
}

func (o DatasetAccessArrayOutput) ToDatasetAccessArrayOutputWithContext(ctx context.Context) DatasetAccessArrayOutput {
	return o
}

func (o DatasetAccessArrayOutput) Index(i pulumi.IntInput) DatasetAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccess {
		return vs[0].([]DatasetAccess)[vs[1].(int)]
	}).(DatasetAccessOutput)
}

type DatasetAccessArgs struct {
	Domain       *string                `pulumi:"domain"`
	GroupByEmail *string                `pulumi:"groupByEmail"`
	Role         *string                `pulumi:"role"`
	SpecialGroup *string                `pulumi:"specialGroup"`
	UserByEmail  *string                `pulumi:"userByEmail"`
	View         *DatasetAccessViewArgs `pulumi:"view"`
}

type DatasetAccessArgsInput interface {
	pulumi.Input

	ToDatasetAccessArgsOutput() DatasetAccessArgsOutput
	ToDatasetAccessArgsOutputWithContext(context.Context) DatasetAccessArgsOutput
}

type DatasetAccessArgsArgs struct {
	Domain       pulumi.StringPtrInput         `pulumi:"domain"`
	GroupByEmail pulumi.StringPtrInput         `pulumi:"groupByEmail"`
	Role         pulumi.StringPtrInput         `pulumi:"role"`
	SpecialGroup pulumi.StringPtrInput         `pulumi:"specialGroup"`
	UserByEmail  pulumi.StringPtrInput         `pulumi:"userByEmail"`
	View         DatasetAccessViewArgsPtrInput `pulumi:"view"`
}

func (DatasetAccessArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessArgs)(nil)).Elem()
}

func (i DatasetAccessArgsArgs) ToDatasetAccessArgsOutput() DatasetAccessArgsOutput {
	return i.ToDatasetAccessArgsOutputWithContext(context.Background())
}

func (i DatasetAccessArgsArgs) ToDatasetAccessArgsOutputWithContext(ctx context.Context) DatasetAccessArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessArgsOutput)
}

type DatasetAccessArgsArrayInput interface {
	pulumi.Input

	ToDatasetAccessArgsArrayOutput() DatasetAccessArgsArrayOutput
	ToDatasetAccessArgsArrayOutputWithContext(context.Context) DatasetAccessArgsArrayOutput
}

type DatasetAccessArgsArray []DatasetAccessArgsInput

func (DatasetAccessArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessArgs)(nil)).Elem()
}

func (i DatasetAccessArgsArray) ToDatasetAccessArgsArrayOutput() DatasetAccessArgsArrayOutput {
	return i.ToDatasetAccessArgsArrayOutputWithContext(context.Background())
}

func (i DatasetAccessArgsArray) ToDatasetAccessArgsArrayOutputWithContext(ctx context.Context) DatasetAccessArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessArgsArrayOutput)
}

type DatasetAccessArgsOutput struct{ *pulumi.OutputState }

func (DatasetAccessArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessArgs)(nil)).Elem()
}

func (o DatasetAccessArgsOutput) ToDatasetAccessArgsOutput() DatasetAccessArgsOutput {
	return o
}

func (o DatasetAccessArgsOutput) ToDatasetAccessArgsOutputWithContext(ctx context.Context) DatasetAccessArgsOutput {
	return o
}

func (o DatasetAccessArgsOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessArgs) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessArgsOutput) GroupByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessArgs) *string { return v.GroupByEmail }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessArgsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessArgs) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessArgsOutput) SpecialGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessArgs) *string { return v.SpecialGroup }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessArgsOutput) UserByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessArgs) *string { return v.UserByEmail }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessArgsOutput) View() DatasetAccessViewArgsPtrOutput {
	return o.ApplyT(func(v DatasetAccessArgs) *DatasetAccessViewArgs { return v.View }).(DatasetAccessViewArgsPtrOutput)
}

type DatasetAccessArgsArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessArgs)(nil)).Elem()
}

func (o DatasetAccessArgsArrayOutput) ToDatasetAccessArgsArrayOutput() DatasetAccessArgsArrayOutput {
	return o
}

func (o DatasetAccessArgsArrayOutput) ToDatasetAccessArgsArrayOutputWithContext(ctx context.Context) DatasetAccessArgsArrayOutput {
	return o
}

func (o DatasetAccessArgsArrayOutput) Index(i pulumi.IntInput) DatasetAccessArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessArgs {
		return vs[0].([]DatasetAccessArgs)[vs[1].(int)]
	}).(DatasetAccessArgsOutput)
}

type DatasetAccessState struct {
	Domain       *string                 `pulumi:"domain"`
	GroupByEmail *string                 `pulumi:"groupByEmail"`
	Role         *string                 `pulumi:"role"`
	SpecialGroup *string                 `pulumi:"specialGroup"`
	UserByEmail  *string                 `pulumi:"userByEmail"`
	View         *DatasetAccessStateView `pulumi:"view"`
}

type DatasetAccessStateInput interface {
	pulumi.Input

	ToDatasetAccessStateOutput() DatasetAccessStateOutput
	ToDatasetAccessStateOutputWithContext(context.Context) DatasetAccessStateOutput
}

type DatasetAccessStateArgs struct {
	Domain       pulumi.StringPtrInput          `pulumi:"domain"`
	GroupByEmail pulumi.StringPtrInput          `pulumi:"groupByEmail"`
	Role         pulumi.StringPtrInput          `pulumi:"role"`
	SpecialGroup pulumi.StringPtrInput          `pulumi:"specialGroup"`
	UserByEmail  pulumi.StringPtrInput          `pulumi:"userByEmail"`
	View         DatasetAccessStateViewPtrInput `pulumi:"view"`
}

func (DatasetAccessStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessState)(nil)).Elem()
}

func (i DatasetAccessStateArgs) ToDatasetAccessStateOutput() DatasetAccessStateOutput {
	return i.ToDatasetAccessStateOutputWithContext(context.Background())
}

func (i DatasetAccessStateArgs) ToDatasetAccessStateOutputWithContext(ctx context.Context) DatasetAccessStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessStateOutput)
}

type DatasetAccessStateArrayInput interface {
	pulumi.Input

	ToDatasetAccessStateArrayOutput() DatasetAccessStateArrayOutput
	ToDatasetAccessStateArrayOutputWithContext(context.Context) DatasetAccessStateArrayOutput
}

type DatasetAccessStateArray []DatasetAccessStateInput

func (DatasetAccessStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessState)(nil)).Elem()
}

func (i DatasetAccessStateArray) ToDatasetAccessStateArrayOutput() DatasetAccessStateArrayOutput {
	return i.ToDatasetAccessStateArrayOutputWithContext(context.Background())
}

func (i DatasetAccessStateArray) ToDatasetAccessStateArrayOutputWithContext(ctx context.Context) DatasetAccessStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessStateArrayOutput)
}

type DatasetAccessStateOutput struct{ *pulumi.OutputState }

func (DatasetAccessStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessState)(nil)).Elem()
}

func (o DatasetAccessStateOutput) ToDatasetAccessStateOutput() DatasetAccessStateOutput {
	return o
}

func (o DatasetAccessStateOutput) ToDatasetAccessStateOutputWithContext(ctx context.Context) DatasetAccessStateOutput {
	return o
}

func (o DatasetAccessStateOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessState) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessStateOutput) GroupByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessState) *string { return v.GroupByEmail }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessStateOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessState) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessStateOutput) SpecialGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessState) *string { return v.SpecialGroup }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessStateOutput) UserByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessState) *string { return v.UserByEmail }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessStateOutput) View() DatasetAccessStateViewPtrOutput {
	return o.ApplyT(func(v DatasetAccessState) *DatasetAccessStateView { return v.View }).(DatasetAccessStateViewPtrOutput)
}

type DatasetAccessStateArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessState)(nil)).Elem()
}

func (o DatasetAccessStateArrayOutput) ToDatasetAccessStateArrayOutput() DatasetAccessStateArrayOutput {
	return o
}

func (o DatasetAccessStateArrayOutput) ToDatasetAccessStateArrayOutputWithContext(ctx context.Context) DatasetAccessStateArrayOutput {
	return o
}

func (o DatasetAccessStateArrayOutput) Index(i pulumi.IntInput) DatasetAccessStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessState {
		return vs[0].([]DatasetAccessState)[vs[1].(int)]
	}).(DatasetAccessStateOutput)
}

type DatasetAccessStateView struct {
	DatasetId string `pulumi:"datasetId"`
	ProjectId string `pulumi:"projectId"`
	TableId   string `pulumi:"tableId"`
}

type DatasetAccessStateViewInput interface {
	pulumi.Input

	ToDatasetAccessStateViewOutput() DatasetAccessStateViewOutput
	ToDatasetAccessStateViewOutputWithContext(context.Context) DatasetAccessStateViewOutput
}

type DatasetAccessStateViewArgs struct {
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	TableId   pulumi.StringInput `pulumi:"tableId"`
}

func (DatasetAccessStateViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessStateView)(nil)).Elem()
}

func (i DatasetAccessStateViewArgs) ToDatasetAccessStateViewOutput() DatasetAccessStateViewOutput {
	return i.ToDatasetAccessStateViewOutputWithContext(context.Background())
}

func (i DatasetAccessStateViewArgs) ToDatasetAccessStateViewOutputWithContext(ctx context.Context) DatasetAccessStateViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessStateViewOutput)
}

func (i DatasetAccessStateViewArgs) ToDatasetAccessStateViewPtrOutput() DatasetAccessStateViewPtrOutput {
	return i.ToDatasetAccessStateViewPtrOutputWithContext(context.Background())
}

func (i DatasetAccessStateViewArgs) ToDatasetAccessStateViewPtrOutputWithContext(ctx context.Context) DatasetAccessStateViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessStateViewOutput).ToDatasetAccessStateViewPtrOutputWithContext(ctx)
}

type DatasetAccessStateViewPtrInput interface {
	pulumi.Input

	ToDatasetAccessStateViewPtrOutput() DatasetAccessStateViewPtrOutput
	ToDatasetAccessStateViewPtrOutputWithContext(context.Context) DatasetAccessStateViewPtrOutput
}

type datasetAccessStateViewPtrType DatasetAccessStateViewArgs

func DatasetAccessStateViewPtr(v *DatasetAccessStateViewArgs) DatasetAccessStateViewPtrInput {
	return (*datasetAccessStateViewPtrType)(v)
}

func (*datasetAccessStateViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessStateView)(nil)).Elem()
}

func (i *datasetAccessStateViewPtrType) ToDatasetAccessStateViewPtrOutput() DatasetAccessStateViewPtrOutput {
	return i.ToDatasetAccessStateViewPtrOutputWithContext(context.Background())
}

func (i *datasetAccessStateViewPtrType) ToDatasetAccessStateViewPtrOutputWithContext(ctx context.Context) DatasetAccessStateViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessStateViewPtrOutput)
}

type DatasetAccessStateViewOutput struct{ *pulumi.OutputState }

func (DatasetAccessStateViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessStateView)(nil)).Elem()
}

func (o DatasetAccessStateViewOutput) ToDatasetAccessStateViewOutput() DatasetAccessStateViewOutput {
	return o
}

func (o DatasetAccessStateViewOutput) ToDatasetAccessStateViewOutputWithContext(ctx context.Context) DatasetAccessStateViewOutput {
	return o
}

func (o DatasetAccessStateViewOutput) ToDatasetAccessStateViewPtrOutput() DatasetAccessStateViewPtrOutput {
	return o.ToDatasetAccessStateViewPtrOutputWithContext(context.Background())
}

func (o DatasetAccessStateViewOutput) ToDatasetAccessStateViewPtrOutputWithContext(ctx context.Context) DatasetAccessStateViewPtrOutput {
	return o.ApplyT(func(v DatasetAccessStateView) *DatasetAccessStateView {
		return &v
	}).(DatasetAccessStateViewPtrOutput)
}
func (o DatasetAccessStateViewOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessStateView) string { return v.DatasetId }).(pulumi.StringOutput)
}

func (o DatasetAccessStateViewOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessStateView) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o DatasetAccessStateViewOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessStateView) string { return v.TableId }).(pulumi.StringOutput)
}

type DatasetAccessStateViewPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessStateViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessStateView)(nil)).Elem()
}

func (o DatasetAccessStateViewPtrOutput) ToDatasetAccessStateViewPtrOutput() DatasetAccessStateViewPtrOutput {
	return o
}

func (o DatasetAccessStateViewPtrOutput) ToDatasetAccessStateViewPtrOutputWithContext(ctx context.Context) DatasetAccessStateViewPtrOutput {
	return o
}

func (o DatasetAccessStateViewPtrOutput) Elem() DatasetAccessStateViewOutput {
	return o.ApplyT(func(v *DatasetAccessStateView) DatasetAccessStateView { return *v }).(DatasetAccessStateViewOutput)
}

func (o DatasetAccessStateViewPtrOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessStateView) string { return v.DatasetId }).(pulumi.StringOutput)
}

func (o DatasetAccessStateViewPtrOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessStateView) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o DatasetAccessStateViewPtrOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessStateView) string { return v.TableId }).(pulumi.StringOutput)
}

type DatasetAccessView struct {
	DatasetId string `pulumi:"datasetId"`
	ProjectId string `pulumi:"projectId"`
	TableId   string `pulumi:"tableId"`
}

type DatasetAccessViewInput interface {
	pulumi.Input

	ToDatasetAccessViewOutput() DatasetAccessViewOutput
	ToDatasetAccessViewOutputWithContext(context.Context) DatasetAccessViewOutput
}

type DatasetAccessViewArgs struct {
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	TableId   pulumi.StringInput `pulumi:"tableId"`
}

func (DatasetAccessViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessView)(nil)).Elem()
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewOutput() DatasetAccessViewOutput {
	return i.ToDatasetAccessViewOutputWithContext(context.Background())
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewOutputWithContext(ctx context.Context) DatasetAccessViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewOutput)
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return i.ToDatasetAccessViewPtrOutputWithContext(context.Background())
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewOutput).ToDatasetAccessViewPtrOutputWithContext(ctx)
}

type DatasetAccessViewPtrInput interface {
	pulumi.Input

	ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput
	ToDatasetAccessViewPtrOutputWithContext(context.Context) DatasetAccessViewPtrOutput
}

type datasetAccessViewPtrType DatasetAccessViewArgs

func DatasetAccessViewPtr(v *DatasetAccessViewArgs) DatasetAccessViewPtrInput {
	return (*datasetAccessViewPtrType)(v)
}

func (*datasetAccessViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessView)(nil)).Elem()
}

func (i *datasetAccessViewPtrType) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return i.ToDatasetAccessViewPtrOutputWithContext(context.Background())
}

func (i *datasetAccessViewPtrType) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewPtrOutput)
}

type DatasetAccessViewOutput struct{ *pulumi.OutputState }

func (DatasetAccessViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessView)(nil)).Elem()
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewOutput() DatasetAccessViewOutput {
	return o
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewOutputWithContext(ctx context.Context) DatasetAccessViewOutput {
	return o
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return o.ToDatasetAccessViewPtrOutputWithContext(context.Background())
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return o.ApplyT(func(v DatasetAccessView) *DatasetAccessView {
		return &v
	}).(DatasetAccessViewPtrOutput)
}
func (o DatasetAccessViewOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.DatasetId }).(pulumi.StringOutput)
}

func (o DatasetAccessViewOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o DatasetAccessViewOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.TableId }).(pulumi.StringOutput)
}

type DatasetAccessViewPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessView)(nil)).Elem()
}

func (o DatasetAccessViewPtrOutput) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return o
}

func (o DatasetAccessViewPtrOutput) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return o
}

func (o DatasetAccessViewPtrOutput) Elem() DatasetAccessViewOutput {
	return o.ApplyT(func(v *DatasetAccessView) DatasetAccessView { return *v }).(DatasetAccessViewOutput)
}

func (o DatasetAccessViewPtrOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.DatasetId }).(pulumi.StringOutput)
}

func (o DatasetAccessViewPtrOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o DatasetAccessViewPtrOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.TableId }).(pulumi.StringOutput)
}

type DatasetAccessViewArgs struct {
	DatasetId string `pulumi:"datasetId"`
	ProjectId string `pulumi:"projectId"`
	TableId   string `pulumi:"tableId"`
}

type DatasetAccessViewArgsInput interface {
	pulumi.Input

	ToDatasetAccessViewArgsOutput() DatasetAccessViewArgsOutput
	ToDatasetAccessViewArgsOutputWithContext(context.Context) DatasetAccessViewArgsOutput
}

type DatasetAccessViewArgsArgs struct {
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	TableId   pulumi.StringInput `pulumi:"tableId"`
}

func (DatasetAccessViewArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessViewArgs)(nil)).Elem()
}

func (i DatasetAccessViewArgsArgs) ToDatasetAccessViewArgsOutput() DatasetAccessViewArgsOutput {
	return i.ToDatasetAccessViewArgsOutputWithContext(context.Background())
}

func (i DatasetAccessViewArgsArgs) ToDatasetAccessViewArgsOutputWithContext(ctx context.Context) DatasetAccessViewArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewArgsOutput)
}

func (i DatasetAccessViewArgsArgs) ToDatasetAccessViewArgsPtrOutput() DatasetAccessViewArgsPtrOutput {
	return i.ToDatasetAccessViewArgsPtrOutputWithContext(context.Background())
}

func (i DatasetAccessViewArgsArgs) ToDatasetAccessViewArgsPtrOutputWithContext(ctx context.Context) DatasetAccessViewArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewArgsOutput).ToDatasetAccessViewArgsPtrOutputWithContext(ctx)
}

type DatasetAccessViewArgsPtrInput interface {
	pulumi.Input

	ToDatasetAccessViewArgsPtrOutput() DatasetAccessViewArgsPtrOutput
	ToDatasetAccessViewArgsPtrOutputWithContext(context.Context) DatasetAccessViewArgsPtrOutput
}

type datasetAccessViewArgsPtrType DatasetAccessViewArgsArgs

func DatasetAccessViewArgsPtr(v *DatasetAccessViewArgsArgs) DatasetAccessViewArgsPtrInput {
	return (*datasetAccessViewArgsPtrType)(v)
}

func (*datasetAccessViewArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessViewArgs)(nil)).Elem()
}

func (i *datasetAccessViewArgsPtrType) ToDatasetAccessViewArgsPtrOutput() DatasetAccessViewArgsPtrOutput {
	return i.ToDatasetAccessViewArgsPtrOutputWithContext(context.Background())
}

func (i *datasetAccessViewArgsPtrType) ToDatasetAccessViewArgsPtrOutputWithContext(ctx context.Context) DatasetAccessViewArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewArgsPtrOutput)
}

type DatasetAccessViewArgsOutput struct{ *pulumi.OutputState }

func (DatasetAccessViewArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessViewArgs)(nil)).Elem()
}

func (o DatasetAccessViewArgsOutput) ToDatasetAccessViewArgsOutput() DatasetAccessViewArgsOutput {
	return o
}

func (o DatasetAccessViewArgsOutput) ToDatasetAccessViewArgsOutputWithContext(ctx context.Context) DatasetAccessViewArgsOutput {
	return o
}

func (o DatasetAccessViewArgsOutput) ToDatasetAccessViewArgsPtrOutput() DatasetAccessViewArgsPtrOutput {
	return o.ToDatasetAccessViewArgsPtrOutputWithContext(context.Background())
}

func (o DatasetAccessViewArgsOutput) ToDatasetAccessViewArgsPtrOutputWithContext(ctx context.Context) DatasetAccessViewArgsPtrOutput {
	return o.ApplyT(func(v DatasetAccessViewArgs) *DatasetAccessViewArgs {
		return &v
	}).(DatasetAccessViewArgsPtrOutput)
}
func (o DatasetAccessViewArgsOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessViewArgs) string { return v.DatasetId }).(pulumi.StringOutput)
}

func (o DatasetAccessViewArgsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessViewArgs) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o DatasetAccessViewArgsOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessViewArgs) string { return v.TableId }).(pulumi.StringOutput)
}

type DatasetAccessViewArgsPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessViewArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessViewArgs)(nil)).Elem()
}

func (o DatasetAccessViewArgsPtrOutput) ToDatasetAccessViewArgsPtrOutput() DatasetAccessViewArgsPtrOutput {
	return o
}

func (o DatasetAccessViewArgsPtrOutput) ToDatasetAccessViewArgsPtrOutputWithContext(ctx context.Context) DatasetAccessViewArgsPtrOutput {
	return o
}

func (o DatasetAccessViewArgsPtrOutput) Elem() DatasetAccessViewArgsOutput {
	return o.ApplyT(func(v *DatasetAccessViewArgs) DatasetAccessViewArgs { return *v }).(DatasetAccessViewArgsOutput)
}

func (o DatasetAccessViewArgsPtrOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessViewArgs) string { return v.DatasetId }).(pulumi.StringOutput)
}

func (o DatasetAccessViewArgsPtrOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessViewArgs) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o DatasetAccessViewArgsPtrOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessViewArgs) string { return v.TableId }).(pulumi.StringOutput)
}

type DatasetDefaultEncryptionConfiguration struct {
	KmsKeyName string `pulumi:"kmsKeyName"`
}

type DatasetDefaultEncryptionConfigurationInput interface {
	pulumi.Input

	ToDatasetDefaultEncryptionConfigurationOutput() DatasetDefaultEncryptionConfigurationOutput
	ToDatasetDefaultEncryptionConfigurationOutputWithContext(context.Context) DatasetDefaultEncryptionConfigurationOutput
}

type DatasetDefaultEncryptionConfigurationArgs struct {
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (DatasetDefaultEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationOutput() DatasetDefaultEncryptionConfigurationOutput {
	return i.ToDatasetDefaultEncryptionConfigurationOutputWithContext(context.Background())
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationOutput)
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return i.ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationOutput).ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx)
}

type DatasetDefaultEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput
	ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Context) DatasetDefaultEncryptionConfigurationPtrOutput
}

type datasetDefaultEncryptionConfigurationPtrType DatasetDefaultEncryptionConfigurationArgs

func DatasetDefaultEncryptionConfigurationPtr(v *DatasetDefaultEncryptionConfigurationArgs) DatasetDefaultEncryptionConfigurationPtrInput {
	return (*datasetDefaultEncryptionConfigurationPtrType)(v)
}

func (*datasetDefaultEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (i *datasetDefaultEncryptionConfigurationPtrType) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return i.ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *datasetDefaultEncryptionConfigurationPtrType) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationPtrOutput)
}

type DatasetDefaultEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (DatasetDefaultEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationOutput() DatasetDefaultEncryptionConfigurationOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return o.ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfiguration) *DatasetDefaultEncryptionConfiguration {
		return &v
	}).(DatasetDefaultEncryptionConfigurationPtrOutput)
}
func (o DatasetDefaultEncryptionConfigurationOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type DatasetDefaultEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DatasetDefaultEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) Elem() DatasetDefaultEncryptionConfigurationOutput {
	return o.ApplyT(func(v *DatasetDefaultEncryptionConfiguration) DatasetDefaultEncryptionConfiguration { return *v }).(DatasetDefaultEncryptionConfigurationOutput)
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type DatasetDefaultEncryptionConfigurationArgs struct {
	KmsKeyName string `pulumi:"kmsKeyName"`
}

type DatasetDefaultEncryptionConfigurationArgsInput interface {
	pulumi.Input

	ToDatasetDefaultEncryptionConfigurationArgsOutput() DatasetDefaultEncryptionConfigurationArgsOutput
	ToDatasetDefaultEncryptionConfigurationArgsOutputWithContext(context.Context) DatasetDefaultEncryptionConfigurationArgsOutput
}

type DatasetDefaultEncryptionConfigurationArgsArgs struct {
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (DatasetDefaultEncryptionConfigurationArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfigurationArgs)(nil)).Elem()
}

func (i DatasetDefaultEncryptionConfigurationArgsArgs) ToDatasetDefaultEncryptionConfigurationArgsOutput() DatasetDefaultEncryptionConfigurationArgsOutput {
	return i.ToDatasetDefaultEncryptionConfigurationArgsOutputWithContext(context.Background())
}

func (i DatasetDefaultEncryptionConfigurationArgsArgs) ToDatasetDefaultEncryptionConfigurationArgsOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationArgsOutput)
}

func (i DatasetDefaultEncryptionConfigurationArgsArgs) ToDatasetDefaultEncryptionConfigurationArgsPtrOutput() DatasetDefaultEncryptionConfigurationArgsPtrOutput {
	return i.ToDatasetDefaultEncryptionConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i DatasetDefaultEncryptionConfigurationArgsArgs) ToDatasetDefaultEncryptionConfigurationArgsPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationArgsOutput).ToDatasetDefaultEncryptionConfigurationArgsPtrOutputWithContext(ctx)
}

type DatasetDefaultEncryptionConfigurationArgsPtrInput interface {
	pulumi.Input

	ToDatasetDefaultEncryptionConfigurationArgsPtrOutput() DatasetDefaultEncryptionConfigurationArgsPtrOutput
	ToDatasetDefaultEncryptionConfigurationArgsPtrOutputWithContext(context.Context) DatasetDefaultEncryptionConfigurationArgsPtrOutput
}

type datasetDefaultEncryptionConfigurationArgsPtrType DatasetDefaultEncryptionConfigurationArgsArgs

func DatasetDefaultEncryptionConfigurationArgsPtr(v *DatasetDefaultEncryptionConfigurationArgsArgs) DatasetDefaultEncryptionConfigurationArgsPtrInput {
	return (*datasetDefaultEncryptionConfigurationArgsPtrType)(v)
}

func (*datasetDefaultEncryptionConfigurationArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefaultEncryptionConfigurationArgs)(nil)).Elem()
}

func (i *datasetDefaultEncryptionConfigurationArgsPtrType) ToDatasetDefaultEncryptionConfigurationArgsPtrOutput() DatasetDefaultEncryptionConfigurationArgsPtrOutput {
	return i.ToDatasetDefaultEncryptionConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i *datasetDefaultEncryptionConfigurationArgsPtrType) ToDatasetDefaultEncryptionConfigurationArgsPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationArgsPtrOutput)
}

type DatasetDefaultEncryptionConfigurationArgsOutput struct{ *pulumi.OutputState }

func (DatasetDefaultEncryptionConfigurationArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfigurationArgs)(nil)).Elem()
}

func (o DatasetDefaultEncryptionConfigurationArgsOutput) ToDatasetDefaultEncryptionConfigurationArgsOutput() DatasetDefaultEncryptionConfigurationArgsOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationArgsOutput) ToDatasetDefaultEncryptionConfigurationArgsOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationArgsOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationArgsOutput) ToDatasetDefaultEncryptionConfigurationArgsPtrOutput() DatasetDefaultEncryptionConfigurationArgsPtrOutput {
	return o.ToDatasetDefaultEncryptionConfigurationArgsPtrOutputWithContext(context.Background())
}

func (o DatasetDefaultEncryptionConfigurationArgsOutput) ToDatasetDefaultEncryptionConfigurationArgsPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationArgsPtrOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfigurationArgs) *DatasetDefaultEncryptionConfigurationArgs {
		return &v
	}).(DatasetDefaultEncryptionConfigurationArgsPtrOutput)
}
func (o DatasetDefaultEncryptionConfigurationArgsOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfigurationArgs) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type DatasetDefaultEncryptionConfigurationArgsPtrOutput struct{ *pulumi.OutputState }

func (DatasetDefaultEncryptionConfigurationArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefaultEncryptionConfigurationArgs)(nil)).Elem()
}

func (o DatasetDefaultEncryptionConfigurationArgsPtrOutput) ToDatasetDefaultEncryptionConfigurationArgsPtrOutput() DatasetDefaultEncryptionConfigurationArgsPtrOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationArgsPtrOutput) ToDatasetDefaultEncryptionConfigurationArgsPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationArgsPtrOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationArgsPtrOutput) Elem() DatasetDefaultEncryptionConfigurationArgsOutput {
	return o.ApplyT(func(v *DatasetDefaultEncryptionConfigurationArgs) DatasetDefaultEncryptionConfigurationArgs {
		return *v
	}).(DatasetDefaultEncryptionConfigurationArgsOutput)
}

func (o DatasetDefaultEncryptionConfigurationArgsPtrOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfigurationArgs) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type DatasetDefaultEncryptionConfigurationState struct {
	KmsKeyName string `pulumi:"kmsKeyName"`
}

type DatasetDefaultEncryptionConfigurationStateInput interface {
	pulumi.Input

	ToDatasetDefaultEncryptionConfigurationStateOutput() DatasetDefaultEncryptionConfigurationStateOutput
	ToDatasetDefaultEncryptionConfigurationStateOutputWithContext(context.Context) DatasetDefaultEncryptionConfigurationStateOutput
}

type DatasetDefaultEncryptionConfigurationStateArgs struct {
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (DatasetDefaultEncryptionConfigurationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfigurationState)(nil)).Elem()
}

func (i DatasetDefaultEncryptionConfigurationStateArgs) ToDatasetDefaultEncryptionConfigurationStateOutput() DatasetDefaultEncryptionConfigurationStateOutput {
	return i.ToDatasetDefaultEncryptionConfigurationStateOutputWithContext(context.Background())
}

func (i DatasetDefaultEncryptionConfigurationStateArgs) ToDatasetDefaultEncryptionConfigurationStateOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationStateOutput)
}

type DatasetDefaultEncryptionConfigurationStateOutput struct{ *pulumi.OutputState }

func (DatasetDefaultEncryptionConfigurationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfigurationState)(nil)).Elem()
}

func (o DatasetDefaultEncryptionConfigurationStateOutput) ToDatasetDefaultEncryptionConfigurationStateOutput() DatasetDefaultEncryptionConfigurationStateOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationStateOutput) ToDatasetDefaultEncryptionConfigurationStateOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationStateOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationStateOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfigurationState) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type TableEncryptionConfiguration struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

type TableEncryptionConfigurationInput interface {
	pulumi.Input

	ToTableEncryptionConfigurationOutput() TableEncryptionConfigurationOutput
	ToTableEncryptionConfigurationOutputWithContext(context.Context) TableEncryptionConfigurationOutput
}

type TableEncryptionConfigurationArgs struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (TableEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfiguration)(nil)).Elem()
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationOutput() TableEncryptionConfigurationOutput {
	return i.ToTableEncryptionConfigurationOutputWithContext(context.Background())
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationOutputWithContext(ctx context.Context) TableEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationOutput)
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return i.ToTableEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationOutput).ToTableEncryptionConfigurationPtrOutputWithContext(ctx)
}

type TableEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput
	ToTableEncryptionConfigurationPtrOutputWithContext(context.Context) TableEncryptionConfigurationPtrOutput
}

type tableEncryptionConfigurationPtrType TableEncryptionConfigurationArgs

func TableEncryptionConfigurationPtr(v *TableEncryptionConfigurationArgs) TableEncryptionConfigurationPtrInput {
	return (*tableEncryptionConfigurationPtrType)(v)
}

func (*tableEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionConfiguration)(nil)).Elem()
}

func (i *tableEncryptionConfigurationPtrType) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return i.ToTableEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *tableEncryptionConfigurationPtrType) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationPtrOutput)
}

type TableEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (TableEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfiguration)(nil)).Elem()
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationOutput() TableEncryptionConfigurationOutput {
	return o
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationOutputWithContext(ctx context.Context) TableEncryptionConfigurationOutput {
	return o
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return o.ToTableEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v TableEncryptionConfiguration) *TableEncryptionConfiguration {
		return &v
	}).(TableEncryptionConfigurationPtrOutput)
}

// The self link or full name of a key which should be used to
// encrypt this table.  Note that the default bigquery service account will need to have
// encrypt/decrypt permissions on this key - you may want to see the
// `bigquery.getDefaultServiceAccount` datasource and the
// `kms.CryptoKeyIAMBinding` resource.
func (o TableEncryptionConfigurationOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v TableEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type TableEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TableEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionConfiguration)(nil)).Elem()
}

func (o TableEncryptionConfigurationPtrOutput) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return o
}

func (o TableEncryptionConfigurationPtrOutput) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return o
}

func (o TableEncryptionConfigurationPtrOutput) Elem() TableEncryptionConfigurationOutput {
	return o.ApplyT(func(v *TableEncryptionConfiguration) TableEncryptionConfiguration { return *v }).(TableEncryptionConfigurationOutput)
}

// The self link or full name of a key which should be used to
// encrypt this table.  Note that the default bigquery service account will need to have
// encrypt/decrypt permissions on this key - you may want to see the
// `bigquery.getDefaultServiceAccount` datasource and the
// `kms.CryptoKeyIAMBinding` resource.
func (o TableEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v TableEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type TableEncryptionConfigurationArgs struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

type TableEncryptionConfigurationArgsInput interface {
	pulumi.Input

	ToTableEncryptionConfigurationArgsOutput() TableEncryptionConfigurationArgsOutput
	ToTableEncryptionConfigurationArgsOutputWithContext(context.Context) TableEncryptionConfigurationArgsOutput
}

type TableEncryptionConfigurationArgsArgs struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (TableEncryptionConfigurationArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfigurationArgs)(nil)).Elem()
}

func (i TableEncryptionConfigurationArgsArgs) ToTableEncryptionConfigurationArgsOutput() TableEncryptionConfigurationArgsOutput {
	return i.ToTableEncryptionConfigurationArgsOutputWithContext(context.Background())
}

func (i TableEncryptionConfigurationArgsArgs) ToTableEncryptionConfigurationArgsOutputWithContext(ctx context.Context) TableEncryptionConfigurationArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationArgsOutput)
}

func (i TableEncryptionConfigurationArgsArgs) ToTableEncryptionConfigurationArgsPtrOutput() TableEncryptionConfigurationArgsPtrOutput {
	return i.ToTableEncryptionConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i TableEncryptionConfigurationArgsArgs) ToTableEncryptionConfigurationArgsPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationArgsOutput).ToTableEncryptionConfigurationArgsPtrOutputWithContext(ctx)
}

type TableEncryptionConfigurationArgsPtrInput interface {
	pulumi.Input

	ToTableEncryptionConfigurationArgsPtrOutput() TableEncryptionConfigurationArgsPtrOutput
	ToTableEncryptionConfigurationArgsPtrOutputWithContext(context.Context) TableEncryptionConfigurationArgsPtrOutput
}

type tableEncryptionConfigurationArgsPtrType TableEncryptionConfigurationArgsArgs

func TableEncryptionConfigurationArgsPtr(v *TableEncryptionConfigurationArgsArgs) TableEncryptionConfigurationArgsPtrInput {
	return (*tableEncryptionConfigurationArgsPtrType)(v)
}

func (*tableEncryptionConfigurationArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionConfigurationArgs)(nil)).Elem()
}

func (i *tableEncryptionConfigurationArgsPtrType) ToTableEncryptionConfigurationArgsPtrOutput() TableEncryptionConfigurationArgsPtrOutput {
	return i.ToTableEncryptionConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i *tableEncryptionConfigurationArgsPtrType) ToTableEncryptionConfigurationArgsPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationArgsPtrOutput)
}

type TableEncryptionConfigurationArgsOutput struct{ *pulumi.OutputState }

func (TableEncryptionConfigurationArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfigurationArgs)(nil)).Elem()
}

func (o TableEncryptionConfigurationArgsOutput) ToTableEncryptionConfigurationArgsOutput() TableEncryptionConfigurationArgsOutput {
	return o
}

func (o TableEncryptionConfigurationArgsOutput) ToTableEncryptionConfigurationArgsOutputWithContext(ctx context.Context) TableEncryptionConfigurationArgsOutput {
	return o
}

func (o TableEncryptionConfigurationArgsOutput) ToTableEncryptionConfigurationArgsPtrOutput() TableEncryptionConfigurationArgsPtrOutput {
	return o.ToTableEncryptionConfigurationArgsPtrOutputWithContext(context.Background())
}

func (o TableEncryptionConfigurationArgsOutput) ToTableEncryptionConfigurationArgsPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationArgsPtrOutput {
	return o.ApplyT(func(v TableEncryptionConfigurationArgs) *TableEncryptionConfigurationArgs {
		return &v
	}).(TableEncryptionConfigurationArgsPtrOutput)
}

// The self link or full name of a key which should be used to
// encrypt this table.  Note that the default bigquery service account will need to have
// encrypt/decrypt permissions on this key - you may want to see the
// `bigquery.getDefaultServiceAccount` datasource and the
// `kms.CryptoKeyIAMBinding` resource.
func (o TableEncryptionConfigurationArgsOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v TableEncryptionConfigurationArgs) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type TableEncryptionConfigurationArgsPtrOutput struct{ *pulumi.OutputState }

func (TableEncryptionConfigurationArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionConfigurationArgs)(nil)).Elem()
}

func (o TableEncryptionConfigurationArgsPtrOutput) ToTableEncryptionConfigurationArgsPtrOutput() TableEncryptionConfigurationArgsPtrOutput {
	return o
}

func (o TableEncryptionConfigurationArgsPtrOutput) ToTableEncryptionConfigurationArgsPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationArgsPtrOutput {
	return o
}

func (o TableEncryptionConfigurationArgsPtrOutput) Elem() TableEncryptionConfigurationArgsOutput {
	return o.ApplyT(func(v *TableEncryptionConfigurationArgs) TableEncryptionConfigurationArgs { return *v }).(TableEncryptionConfigurationArgsOutput)
}

// The self link or full name of a key which should be used to
// encrypt this table.  Note that the default bigquery service account will need to have
// encrypt/decrypt permissions on this key - you may want to see the
// `bigquery.getDefaultServiceAccount` datasource and the
// `kms.CryptoKeyIAMBinding` resource.
func (o TableEncryptionConfigurationArgsPtrOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v TableEncryptionConfigurationArgs) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type TableEncryptionConfigurationState struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

type TableEncryptionConfigurationStateInput interface {
	pulumi.Input

	ToTableEncryptionConfigurationStateOutput() TableEncryptionConfigurationStateOutput
	ToTableEncryptionConfigurationStateOutputWithContext(context.Context) TableEncryptionConfigurationStateOutput
}

type TableEncryptionConfigurationStateArgs struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (TableEncryptionConfigurationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfigurationState)(nil)).Elem()
}

func (i TableEncryptionConfigurationStateArgs) ToTableEncryptionConfigurationStateOutput() TableEncryptionConfigurationStateOutput {
	return i.ToTableEncryptionConfigurationStateOutputWithContext(context.Background())
}

func (i TableEncryptionConfigurationStateArgs) ToTableEncryptionConfigurationStateOutputWithContext(ctx context.Context) TableEncryptionConfigurationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationStateOutput)
}

type TableEncryptionConfigurationStateOutput struct{ *pulumi.OutputState }

func (TableEncryptionConfigurationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfigurationState)(nil)).Elem()
}

func (o TableEncryptionConfigurationStateOutput) ToTableEncryptionConfigurationStateOutput() TableEncryptionConfigurationStateOutput {
	return o
}

func (o TableEncryptionConfigurationStateOutput) ToTableEncryptionConfigurationStateOutputWithContext(ctx context.Context) TableEncryptionConfigurationStateOutput {
	return o
}

// The self link or full name of a key which should be used to
// encrypt this table.  Note that the default bigquery service account will need to have
// encrypt/decrypt permissions on this key - you may want to see the
// `bigquery.getDefaultServiceAccount` datasource and the
// `kms.CryptoKeyIAMBinding` resource.
func (o TableEncryptionConfigurationStateOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v TableEncryptionConfigurationState) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type TableExternalDataConfiguration struct {
	// - Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect bool `pulumi:"autodetect"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression *string `pulumi:"compression"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions *TableExternalDataConfigurationCsvOptions `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions *TableExternalDataConfigurationGoogleSheetsOptions `pulumi:"googleSheetsOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
	// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat string `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris []string `pulumi:"sourceUris"`
}

type TableExternalDataConfigurationInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationOutput() TableExternalDataConfigurationOutput
	ToTableExternalDataConfigurationOutputWithContext(context.Context) TableExternalDataConfigurationOutput
}

type TableExternalDataConfigurationArgs struct {
	// - Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect pulumi.BoolInput `pulumi:"autodetect"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions TableExternalDataConfigurationCsvOptionsPtrInput `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions TableExternalDataConfigurationGoogleSheetsOptionsPtrInput `pulumi:"googleSheetsOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
	// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat pulumi.StringInput `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
}

func (TableExternalDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfiguration)(nil)).Elem()
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationOutput() TableExternalDataConfigurationOutput {
	return i.ToTableExternalDataConfigurationOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationOutputWithContext(ctx context.Context) TableExternalDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationOutput)
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return i.ToTableExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationOutput).ToTableExternalDataConfigurationPtrOutputWithContext(ctx)
}

type TableExternalDataConfigurationPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput
	ToTableExternalDataConfigurationPtrOutputWithContext(context.Context) TableExternalDataConfigurationPtrOutput
}

type tableExternalDataConfigurationPtrType TableExternalDataConfigurationArgs

func TableExternalDataConfigurationPtr(v *TableExternalDataConfigurationArgs) TableExternalDataConfigurationPtrInput {
	return (*tableExternalDataConfigurationPtrType)(v)
}

func (*tableExternalDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfiguration)(nil)).Elem()
}

func (i *tableExternalDataConfigurationPtrType) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return i.ToTableExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationPtrType) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationPtrOutput)
}

type TableExternalDataConfigurationOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfiguration)(nil)).Elem()
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationOutput() TableExternalDataConfigurationOutput {
	return o
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationOutputWithContext(ctx context.Context) TableExternalDataConfigurationOutput {
	return o
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return o.ToTableExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfiguration {
		return &v
	}).(TableExternalDataConfigurationPtrOutput)
}

// - Let BigQuery try to autodetect the schema
// and format of the table.
func (o TableExternalDataConfigurationOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// The compression type of the data source.
// Valid values are "NONE" or "GZIP".
func (o TableExternalDataConfigurationOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// Additional properties to set if
// `sourceFormat` is set to "CSV". Structure is documented below.
func (o TableExternalDataConfigurationOutput) CsvOptions() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationCsvOptions { return v.CsvOptions }).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

// Additional options if
// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
// documented below.
func (o TableExternalDataConfigurationOutput) GoogleSheetsOptions() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationGoogleSheetsOptions {
		return v.GoogleSheetsOptions
	}).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

// Indicates if BigQuery should
// allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with
// extra columns are treated as bad records, and if there are too
// many bad records, an invalid error is returned in the job result.
// The default value is false.
func (o TableExternalDataConfigurationOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// The maximum number of bad records that
// BigQuery can ignore when reading data.
func (o TableExternalDataConfigurationOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// The data format. Supported values are:
// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
// the `scopes` must include
// "https://www.googleapis.com/auth/drive.readonly".
func (o TableExternalDataConfigurationOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// A list of the fully-qualified URIs that point to
// your data in Google Cloud.
func (o TableExternalDataConfigurationOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type TableExternalDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfiguration)(nil)).Elem()
}

func (o TableExternalDataConfigurationPtrOutput) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return o
}

func (o TableExternalDataConfigurationPtrOutput) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return o
}

func (o TableExternalDataConfigurationPtrOutput) Elem() TableExternalDataConfigurationOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) TableExternalDataConfiguration { return *v }).(TableExternalDataConfigurationOutput)
}

// - Let BigQuery try to autodetect the schema
// and format of the table.
func (o TableExternalDataConfigurationPtrOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// The compression type of the data source.
// Valid values are "NONE" or "GZIP".
func (o TableExternalDataConfigurationPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// Additional properties to set if
// `sourceFormat` is set to "CSV". Structure is documented below.
func (o TableExternalDataConfigurationPtrOutput) CsvOptions() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationCsvOptions { return v.CsvOptions }).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

// Additional options if
// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
// documented below.
func (o TableExternalDataConfigurationPtrOutput) GoogleSheetsOptions() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationGoogleSheetsOptions {
		return v.GoogleSheetsOptions
	}).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

// Indicates if BigQuery should
// allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with
// extra columns are treated as bad records, and if there are too
// many bad records, an invalid error is returned in the job result.
// The default value is false.
func (o TableExternalDataConfigurationPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// The maximum number of bad records that
// BigQuery can ignore when reading data.
func (o TableExternalDataConfigurationPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// The data format. Supported values are:
// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
// the `scopes` must include
// "https://www.googleapis.com/auth/drive.readonly".
func (o TableExternalDataConfigurationPtrOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// A list of the fully-qualified URIs that point to
// your data in Google Cloud.
func (o TableExternalDataConfigurationPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type TableExternalDataConfigurationArgs struct {
	// - Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect bool `pulumi:"autodetect"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression *string `pulumi:"compression"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions *TableExternalDataConfigurationCsvOptionsArgs `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions *TableExternalDataConfigurationGoogleSheetsOptionsArgs `pulumi:"googleSheetsOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
	// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat string `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris []string `pulumi:"sourceUris"`
}

type TableExternalDataConfigurationArgsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationArgsOutput() TableExternalDataConfigurationArgsOutput
	ToTableExternalDataConfigurationArgsOutputWithContext(context.Context) TableExternalDataConfigurationArgsOutput
}

type TableExternalDataConfigurationArgsArgs struct {
	// - Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect pulumi.BoolInput `pulumi:"autodetect"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions TableExternalDataConfigurationCsvOptionsArgsPtrInput `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrInput `pulumi:"googleSheetsOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
	// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat pulumi.StringInput `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
}

func (TableExternalDataConfigurationArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationArgs)(nil)).Elem()
}

func (i TableExternalDataConfigurationArgsArgs) ToTableExternalDataConfigurationArgsOutput() TableExternalDataConfigurationArgsOutput {
	return i.ToTableExternalDataConfigurationArgsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationArgsArgs) ToTableExternalDataConfigurationArgsOutputWithContext(ctx context.Context) TableExternalDataConfigurationArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationArgsOutput)
}

func (i TableExternalDataConfigurationArgsArgs) ToTableExternalDataConfigurationArgsPtrOutput() TableExternalDataConfigurationArgsPtrOutput {
	return i.ToTableExternalDataConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationArgsArgs) ToTableExternalDataConfigurationArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationArgsOutput).ToTableExternalDataConfigurationArgsPtrOutputWithContext(ctx)
}

type TableExternalDataConfigurationArgsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationArgsPtrOutput() TableExternalDataConfigurationArgsPtrOutput
	ToTableExternalDataConfigurationArgsPtrOutputWithContext(context.Context) TableExternalDataConfigurationArgsPtrOutput
}

type tableExternalDataConfigurationArgsPtrType TableExternalDataConfigurationArgsArgs

func TableExternalDataConfigurationArgsPtr(v *TableExternalDataConfigurationArgsArgs) TableExternalDataConfigurationArgsPtrInput {
	return (*tableExternalDataConfigurationArgsPtrType)(v)
}

func (*tableExternalDataConfigurationArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationArgs)(nil)).Elem()
}

func (i *tableExternalDataConfigurationArgsPtrType) ToTableExternalDataConfigurationArgsPtrOutput() TableExternalDataConfigurationArgsPtrOutput {
	return i.ToTableExternalDataConfigurationArgsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationArgsPtrType) ToTableExternalDataConfigurationArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationArgsPtrOutput)
}

type TableExternalDataConfigurationArgsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationArgs)(nil)).Elem()
}

func (o TableExternalDataConfigurationArgsOutput) ToTableExternalDataConfigurationArgsOutput() TableExternalDataConfigurationArgsOutput {
	return o
}

func (o TableExternalDataConfigurationArgsOutput) ToTableExternalDataConfigurationArgsOutputWithContext(ctx context.Context) TableExternalDataConfigurationArgsOutput {
	return o
}

func (o TableExternalDataConfigurationArgsOutput) ToTableExternalDataConfigurationArgsPtrOutput() TableExternalDataConfigurationArgsPtrOutput {
	return o.ToTableExternalDataConfigurationArgsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationArgsOutput) ToTableExternalDataConfigurationArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationArgsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *TableExternalDataConfigurationArgs {
		return &v
	}).(TableExternalDataConfigurationArgsPtrOutput)
}

// - Let BigQuery try to autodetect the schema
// and format of the table.
func (o TableExternalDataConfigurationArgsOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// The compression type of the data source.
// Valid values are "NONE" or "GZIP".
func (o TableExternalDataConfigurationArgsOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// Additional properties to set if
// `sourceFormat` is set to "CSV". Structure is documented below.
func (o TableExternalDataConfigurationArgsOutput) CsvOptions() TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *TableExternalDataConfigurationCsvOptionsArgs {
		return v.CsvOptions
	}).(TableExternalDataConfigurationCsvOptionsArgsPtrOutput)
}

// Additional options if
// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
// documented below.
func (o TableExternalDataConfigurationArgsOutput) GoogleSheetsOptions() TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *TableExternalDataConfigurationGoogleSheetsOptionsArgs {
		return v.GoogleSheetsOptions
	}).(TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput)
}

// Indicates if BigQuery should
// allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with
// extra columns are treated as bad records, and if there are too
// many bad records, an invalid error is returned in the job result.
// The default value is false.
func (o TableExternalDataConfigurationArgsOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// The maximum number of bad records that
// BigQuery can ignore when reading data.
func (o TableExternalDataConfigurationArgsOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// The data format. Supported values are:
// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
// the `scopes` must include
// "https://www.googleapis.com/auth/drive.readonly".
func (o TableExternalDataConfigurationArgsOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// A list of the fully-qualified URIs that point to
// your data in Google Cloud.
func (o TableExternalDataConfigurationArgsOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type TableExternalDataConfigurationArgsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationArgs)(nil)).Elem()
}

func (o TableExternalDataConfigurationArgsPtrOutput) ToTableExternalDataConfigurationArgsPtrOutput() TableExternalDataConfigurationArgsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationArgsPtrOutput) ToTableExternalDataConfigurationArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationArgsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationArgsPtrOutput) Elem() TableExternalDataConfigurationArgsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationArgs) TableExternalDataConfigurationArgs { return *v }).(TableExternalDataConfigurationArgsOutput)
}

// - Let BigQuery try to autodetect the schema
// and format of the table.
func (o TableExternalDataConfigurationArgsPtrOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// The compression type of the data source.
// Valid values are "NONE" or "GZIP".
func (o TableExternalDataConfigurationArgsPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// Additional properties to set if
// `sourceFormat` is set to "CSV". Structure is documented below.
func (o TableExternalDataConfigurationArgsPtrOutput) CsvOptions() TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *TableExternalDataConfigurationCsvOptionsArgs {
		return v.CsvOptions
	}).(TableExternalDataConfigurationCsvOptionsArgsPtrOutput)
}

// Additional options if
// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
// documented below.
func (o TableExternalDataConfigurationArgsPtrOutput) GoogleSheetsOptions() TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *TableExternalDataConfigurationGoogleSheetsOptionsArgs {
		return v.GoogleSheetsOptions
	}).(TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput)
}

// Indicates if BigQuery should
// allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with
// extra columns are treated as bad records, and if there are too
// many bad records, an invalid error is returned in the job result.
// The default value is false.
func (o TableExternalDataConfigurationArgsPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// The maximum number of bad records that
// BigQuery can ignore when reading data.
func (o TableExternalDataConfigurationArgsPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// The data format. Supported values are:
// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
// the `scopes` must include
// "https://www.googleapis.com/auth/drive.readonly".
func (o TableExternalDataConfigurationArgsPtrOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// A list of the fully-qualified URIs that point to
// your data in Google Cloud.
func (o TableExternalDataConfigurationArgsPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationArgs) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type TableExternalDataConfigurationCsvOptions struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding *string `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The value that is used to quote data sections in a
	// CSV file. If your data does not contain quoted sections, set the
	// property value to an empty string. If your data contains quoted newline
	// characters, you must also set the `allowQuotedNewlines` property to true.
	// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
	// limitations with default values, this value is required to be
	// explicitly set.
	Quote string `pulumi:"quote"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

type TableExternalDataConfigurationCsvOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationCsvOptionsOutput() TableExternalDataConfigurationCsvOptionsOutput
	ToTableExternalDataConfigurationCsvOptionsOutputWithContext(context.Context) TableExternalDataConfigurationCsvOptionsOutput
}

type TableExternalDataConfigurationCsvOptionsArgs struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The value that is used to quote data sections in a
	// CSV file. If your data does not contain quoted sections, set the
	// property value to an empty string. If your data contains quoted newline
	// characters, you must also set the `allowQuotedNewlines` property to true.
	// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
	// limitations with default values, this value is required to be
	// explicitly set.
	Quote pulumi.StringInput `pulumi:"quote"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationCsvOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsOutput() TableExternalDataConfigurationCsvOptionsOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsOutput)
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsOutput).ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx)
}

type TableExternalDataConfigurationCsvOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput
	ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput
}

type tableExternalDataConfigurationCsvOptionsPtrType TableExternalDataConfigurationCsvOptionsArgs

func TableExternalDataConfigurationCsvOptionsPtr(v *TableExternalDataConfigurationCsvOptionsArgs) TableExternalDataConfigurationCsvOptionsPtrInput {
	return (*tableExternalDataConfigurationCsvOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationCsvOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationCsvOptionsPtrType) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationCsvOptionsPtrType) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

type TableExternalDataConfigurationCsvOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationCsvOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsOutput() TableExternalDataConfigurationCsvOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *TableExternalDataConfigurationCsvOptions {
		return &v
	}).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationCsvOptionsOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationCsvOptionsOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationCsvOptionsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationCsvOptionsOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The value that is used to quote data sections in a
// CSV file. If your data does not contain quoted sections, set the
// property value to an empty string. If your data contains quoted newline
// characters, you must also set the `allowQuotedNewlines` property to true.
// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
// limitations with default values, this value is required to be
// explicitly set.
func (o TableExternalDataConfigurationCsvOptionsOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) string { return v.Quote }).(pulumi.StringOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationCsvOptionsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationCsvOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationCsvOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) Elem() TableExternalDataConfigurationCsvOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) TableExternalDataConfigurationCsvOptions { return *v }).(TableExternalDataConfigurationCsvOptionsOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The value that is used to quote data sections in a
// CSV file. If your data does not contain quoted sections, set the
// property value to an empty string. If your data contains quoted newline
// characters, you must also set the `allowQuotedNewlines` property to true.
// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
// limitations with default values, this value is required to be
// explicitly set.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) string { return v.Quote }).(pulumi.StringOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationCsvOptionsArgs struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding *string `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The value that is used to quote data sections in a
	// CSV file. If your data does not contain quoted sections, set the
	// property value to an empty string. If your data contains quoted newline
	// characters, you must also set the `allowQuotedNewlines` property to true.
	// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
	// limitations with default values, this value is required to be
	// explicitly set.
	Quote string `pulumi:"quote"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

type TableExternalDataConfigurationCsvOptionsArgsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationCsvOptionsArgsOutput() TableExternalDataConfigurationCsvOptionsArgsOutput
	ToTableExternalDataConfigurationCsvOptionsArgsOutputWithContext(context.Context) TableExternalDataConfigurationCsvOptionsArgsOutput
}

type TableExternalDataConfigurationCsvOptionsArgsArgs struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The value that is used to quote data sections in a
	// CSV file. If your data does not contain quoted sections, set the
	// property value to an empty string. If your data contains quoted newline
	// characters, you must also set the `allowQuotedNewlines` property to true.
	// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
	// limitations with default values, this value is required to be
	// explicitly set.
	Quote pulumi.StringInput `pulumi:"quote"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationCsvOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationCsvOptionsArgs)(nil)).Elem()
}

func (i TableExternalDataConfigurationCsvOptionsArgsArgs) ToTableExternalDataConfigurationCsvOptionsArgsOutput() TableExternalDataConfigurationCsvOptionsArgsOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsArgsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationCsvOptionsArgsArgs) ToTableExternalDataConfigurationCsvOptionsArgsOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsArgsOutput)
}

func (i TableExternalDataConfigurationCsvOptionsArgsArgs) ToTableExternalDataConfigurationCsvOptionsArgsPtrOutput() TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsArgsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationCsvOptionsArgsArgs) ToTableExternalDataConfigurationCsvOptionsArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsArgsOutput).ToTableExternalDataConfigurationCsvOptionsArgsPtrOutputWithContext(ctx)
}

type TableExternalDataConfigurationCsvOptionsArgsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationCsvOptionsArgsPtrOutput() TableExternalDataConfigurationCsvOptionsArgsPtrOutput
	ToTableExternalDataConfigurationCsvOptionsArgsPtrOutputWithContext(context.Context) TableExternalDataConfigurationCsvOptionsArgsPtrOutput
}

type tableExternalDataConfigurationCsvOptionsArgsPtrType TableExternalDataConfigurationCsvOptionsArgsArgs

func TableExternalDataConfigurationCsvOptionsArgsPtr(v *TableExternalDataConfigurationCsvOptionsArgsArgs) TableExternalDataConfigurationCsvOptionsArgsPtrInput {
	return (*tableExternalDataConfigurationCsvOptionsArgsPtrType)(v)
}

func (*tableExternalDataConfigurationCsvOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationCsvOptionsArgs)(nil)).Elem()
}

func (i *tableExternalDataConfigurationCsvOptionsArgsPtrType) ToTableExternalDataConfigurationCsvOptionsArgsPtrOutput() TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationCsvOptionsArgsPtrType) ToTableExternalDataConfigurationCsvOptionsArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsArgsPtrOutput)
}

type TableExternalDataConfigurationCsvOptionsArgsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationCsvOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationCsvOptionsArgs)(nil)).Elem()
}

func (o TableExternalDataConfigurationCsvOptionsArgsOutput) ToTableExternalDataConfigurationCsvOptionsArgsOutput() TableExternalDataConfigurationCsvOptionsArgsOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsArgsOutput) ToTableExternalDataConfigurationCsvOptionsArgsOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsArgsOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsArgsOutput) ToTableExternalDataConfigurationCsvOptionsArgsPtrOutput() TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return o.ToTableExternalDataConfigurationCsvOptionsArgsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationCsvOptionsArgsOutput) ToTableExternalDataConfigurationCsvOptionsArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *TableExternalDataConfigurationCsvOptionsArgs {
		return &v
	}).(TableExternalDataConfigurationCsvOptionsArgsPtrOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationCsvOptionsArgsOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationCsvOptionsArgsOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationCsvOptionsArgsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationCsvOptionsArgsOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The value that is used to quote data sections in a
// CSV file. If your data does not contain quoted sections, set the
// property value to an empty string. If your data contains quoted newline
// characters, you must also set the `allowQuotedNewlines` property to true.
// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
// limitations with default values, this value is required to be
// explicitly set.
func (o TableExternalDataConfigurationCsvOptionsArgsOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) string { return v.Quote }).(pulumi.StringOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationCsvOptionsArgsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationCsvOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationCsvOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationCsvOptionsArgs)(nil)).Elem()
}

func (o TableExternalDataConfigurationCsvOptionsArgsPtrOutput) ToTableExternalDataConfigurationCsvOptionsArgsPtrOutput() TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsArgsPtrOutput) ToTableExternalDataConfigurationCsvOptionsArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsArgsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsArgsPtrOutput) Elem() TableExternalDataConfigurationCsvOptionsArgsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptionsArgs) TableExternalDataConfigurationCsvOptionsArgs {
		return *v
	}).(TableExternalDataConfigurationCsvOptionsArgsOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationCsvOptionsArgsPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationCsvOptionsArgsPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationCsvOptionsArgsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationCsvOptionsArgsPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The value that is used to quote data sections in a
// CSV file. If your data does not contain quoted sections, set the
// property value to an empty string. If your data contains quoted newline
// characters, you must also set the `allowQuotedNewlines` property to true.
// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
// limitations with default values, this value is required to be
// explicitly set.
func (o TableExternalDataConfigurationCsvOptionsArgsPtrOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) string { return v.Quote }).(pulumi.StringOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationCsvOptionsArgsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptionsArgs) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptions struct {
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range *string `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

type TableExternalDataConfigurationGoogleSheetsOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationGoogleSheetsOptionsOutput() TableExternalDataConfigurationGoogleSheetsOptionsOutput
	ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(context.Context) TableExternalDataConfigurationGoogleSheetsOptionsOutput
}

type TableExternalDataConfigurationGoogleSheetsOptionsArgs struct {
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range pulumi.StringPtrInput `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationGoogleSheetsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsOutput() TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsOutput)
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsOutput).ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx)
}

type TableExternalDataConfigurationGoogleSheetsOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput
	ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput
}

type tableExternalDataConfigurationGoogleSheetsOptionsPtrType TableExternalDataConfigurationGoogleSheetsOptionsArgs

func TableExternalDataConfigurationGoogleSheetsOptionsPtr(v *TableExternalDataConfigurationGoogleSheetsOptionsArgs) TableExternalDataConfigurationGoogleSheetsOptionsPtrInput {
	return (*tableExternalDataConfigurationGoogleSheetsOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationGoogleSheetsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationGoogleSheetsOptionsPtrType) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationGoogleSheetsOptionsPtrType) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationGoogleSheetsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsOutput() TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *TableExternalDataConfigurationGoogleSheetsOptions {
		return &v
	}).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) Elem() TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationGoogleSheetsOptions) TableExternalDataConfigurationGoogleSheetsOptions {
		return *v
	}).(TableExternalDataConfigurationGoogleSheetsOptionsOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptionsArgs struct {
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range *string `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

type TableExternalDataConfigurationGoogleSheetsOptionsArgsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationGoogleSheetsOptionsArgsOutput() TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput
	ToTableExternalDataConfigurationGoogleSheetsOptionsArgsOutputWithContext(context.Context) TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput
}

type TableExternalDataConfigurationGoogleSheetsOptionsArgsArgs struct {
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range pulumi.StringPtrInput `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationGoogleSheetsOptionsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptionsArgs)(nil)).Elem()
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsOutput() TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsArgsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput)
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput).ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutputWithContext(ctx)
}

type TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput
	ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutputWithContext(context.Context) TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput
}

type tableExternalDataConfigurationGoogleSheetsOptionsArgsPtrType TableExternalDataConfigurationGoogleSheetsOptionsArgsArgs

func TableExternalDataConfigurationGoogleSheetsOptionsArgsPtr(v *TableExternalDataConfigurationGoogleSheetsOptionsArgsArgs) TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrInput {
	return (*tableExternalDataConfigurationGoogleSheetsOptionsArgsPtrType)(v)
}

func (*tableExternalDataConfigurationGoogleSheetsOptionsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationGoogleSheetsOptionsArgs)(nil)).Elem()
}

func (i *tableExternalDataConfigurationGoogleSheetsOptionsArgsPtrType) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationGoogleSheetsOptionsArgsPtrType) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptionsArgs)(nil)).Elem()
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsOutput() TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return o.ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptionsArgs) *TableExternalDataConfigurationGoogleSheetsOptionsArgs {
		return &v
	}).(TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptionsArgs) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptionsArgs) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationGoogleSheetsOptionsArgs)(nil)).Elem()
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput) Elem() TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationGoogleSheetsOptionsArgs) TableExternalDataConfigurationGoogleSheetsOptionsArgs {
		return *v
	}).(TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptionsArgs) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptionsArgs) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationState struct {
	// - Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect bool `pulumi:"autodetect"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression *string `pulumi:"compression"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions *TableExternalDataConfigurationStateCsvOptions `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions *TableExternalDataConfigurationStateGoogleSheetsOptions `pulumi:"googleSheetsOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
	// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat string `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris []string `pulumi:"sourceUris"`
}

type TableExternalDataConfigurationStateInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationStateOutput() TableExternalDataConfigurationStateOutput
	ToTableExternalDataConfigurationStateOutputWithContext(context.Context) TableExternalDataConfigurationStateOutput
}

type TableExternalDataConfigurationStateArgs struct {
	// - Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect pulumi.BoolInput `pulumi:"autodetect"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions TableExternalDataConfigurationStateCsvOptionsPtrInput `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions TableExternalDataConfigurationStateGoogleSheetsOptionsPtrInput `pulumi:"googleSheetsOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
	// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat pulumi.StringInput `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
}

func (TableExternalDataConfigurationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationState)(nil)).Elem()
}

func (i TableExternalDataConfigurationStateArgs) ToTableExternalDataConfigurationStateOutput() TableExternalDataConfigurationStateOutput {
	return i.ToTableExternalDataConfigurationStateOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationStateArgs) ToTableExternalDataConfigurationStateOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationStateOutput)
}

type TableExternalDataConfigurationStateOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationState)(nil)).Elem()
}

func (o TableExternalDataConfigurationStateOutput) ToTableExternalDataConfigurationStateOutput() TableExternalDataConfigurationStateOutput {
	return o
}

func (o TableExternalDataConfigurationStateOutput) ToTableExternalDataConfigurationStateOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateOutput {
	return o
}

// - Let BigQuery try to autodetect the schema
// and format of the table.
func (o TableExternalDataConfigurationStateOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationState) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// The compression type of the data source.
// Valid values are "NONE" or "GZIP".
func (o TableExternalDataConfigurationStateOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationState) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// Additional properties to set if
// `sourceFormat` is set to "CSV". Structure is documented below.
func (o TableExternalDataConfigurationStateOutput) CsvOptions() TableExternalDataConfigurationStateCsvOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationState) *TableExternalDataConfigurationStateCsvOptions {
		return v.CsvOptions
	}).(TableExternalDataConfigurationStateCsvOptionsPtrOutput)
}

// Additional options if
// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
// documented below.
func (o TableExternalDataConfigurationStateOutput) GoogleSheetsOptions() TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationState) *TableExternalDataConfigurationStateGoogleSheetsOptions {
		return v.GoogleSheetsOptions
	}).(TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput)
}

// Indicates if BigQuery should
// allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with
// extra columns are treated as bad records, and if there are too
// many bad records, an invalid error is returned in the job result.
// The default value is false.
func (o TableExternalDataConfigurationStateOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationState) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// The maximum number of bad records that
// BigQuery can ignore when reading data.
func (o TableExternalDataConfigurationStateOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationState) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// The data format. Supported values are:
// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
// the `scopes` must include
// "https://www.googleapis.com/auth/drive.readonly".
func (o TableExternalDataConfigurationStateOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationState) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// A list of the fully-qualified URIs that point to
// your data in Google Cloud.
func (o TableExternalDataConfigurationStateOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationState) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type TableExternalDataConfigurationStateCsvOptions struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding *string `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The value that is used to quote data sections in a
	// CSV file. If your data does not contain quoted sections, set the
	// property value to an empty string. If your data contains quoted newline
	// characters, you must also set the `allowQuotedNewlines` property to true.
	// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
	// limitations with default values, this value is required to be
	// explicitly set.
	Quote string `pulumi:"quote"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

type TableExternalDataConfigurationStateCsvOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationStateCsvOptionsOutput() TableExternalDataConfigurationStateCsvOptionsOutput
	ToTableExternalDataConfigurationStateCsvOptionsOutputWithContext(context.Context) TableExternalDataConfigurationStateCsvOptionsOutput
}

type TableExternalDataConfigurationStateCsvOptionsArgs struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The value that is used to quote data sections in a
	// CSV file. If your data does not contain quoted sections, set the
	// property value to an empty string. If your data contains quoted newline
	// characters, you must also set the `allowQuotedNewlines` property to true.
	// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
	// limitations with default values, this value is required to be
	// explicitly set.
	Quote pulumi.StringInput `pulumi:"quote"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationStateCsvOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationStateCsvOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationStateCsvOptionsArgs) ToTableExternalDataConfigurationStateCsvOptionsOutput() TableExternalDataConfigurationStateCsvOptionsOutput {
	return i.ToTableExternalDataConfigurationStateCsvOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationStateCsvOptionsArgs) ToTableExternalDataConfigurationStateCsvOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateCsvOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationStateCsvOptionsOutput)
}

func (i TableExternalDataConfigurationStateCsvOptionsArgs) ToTableExternalDataConfigurationStateCsvOptionsPtrOutput() TableExternalDataConfigurationStateCsvOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationStateCsvOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationStateCsvOptionsArgs) ToTableExternalDataConfigurationStateCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationStateCsvOptionsOutput).ToTableExternalDataConfigurationStateCsvOptionsPtrOutputWithContext(ctx)
}

type TableExternalDataConfigurationStateCsvOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationStateCsvOptionsPtrOutput() TableExternalDataConfigurationStateCsvOptionsPtrOutput
	ToTableExternalDataConfigurationStateCsvOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationStateCsvOptionsPtrOutput
}

type tableExternalDataConfigurationStateCsvOptionsPtrType TableExternalDataConfigurationStateCsvOptionsArgs

func TableExternalDataConfigurationStateCsvOptionsPtr(v *TableExternalDataConfigurationStateCsvOptionsArgs) TableExternalDataConfigurationStateCsvOptionsPtrInput {
	return (*tableExternalDataConfigurationStateCsvOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationStateCsvOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationStateCsvOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationStateCsvOptionsPtrType) ToTableExternalDataConfigurationStateCsvOptionsPtrOutput() TableExternalDataConfigurationStateCsvOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationStateCsvOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationStateCsvOptionsPtrType) ToTableExternalDataConfigurationStateCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationStateCsvOptionsPtrOutput)
}

type TableExternalDataConfigurationStateCsvOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationStateCsvOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationStateCsvOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationStateCsvOptionsOutput) ToTableExternalDataConfigurationStateCsvOptionsOutput() TableExternalDataConfigurationStateCsvOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationStateCsvOptionsOutput) ToTableExternalDataConfigurationStateCsvOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateCsvOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationStateCsvOptionsOutput) ToTableExternalDataConfigurationStateCsvOptionsPtrOutput() TableExternalDataConfigurationStateCsvOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationStateCsvOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationStateCsvOptionsOutput) ToTableExternalDataConfigurationStateCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateCsvOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *TableExternalDataConfigurationStateCsvOptions {
		return &v
	}).(TableExternalDataConfigurationStateCsvOptionsPtrOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationStateCsvOptionsOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationStateCsvOptionsOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationStateCsvOptionsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationStateCsvOptionsOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The value that is used to quote data sections in a
// CSV file. If your data does not contain quoted sections, set the
// property value to an empty string. If your data contains quoted newline
// characters, you must also set the `allowQuotedNewlines` property to true.
// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
// limitations with default values, this value is required to be
// explicitly set.
func (o TableExternalDataConfigurationStateCsvOptionsOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) string { return v.Quote }).(pulumi.StringOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationStateCsvOptionsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationStateCsvOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationStateCsvOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationStateCsvOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationStateCsvOptionsPtrOutput) ToTableExternalDataConfigurationStateCsvOptionsPtrOutput() TableExternalDataConfigurationStateCsvOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationStateCsvOptionsPtrOutput) ToTableExternalDataConfigurationStateCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateCsvOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationStateCsvOptionsPtrOutput) Elem() TableExternalDataConfigurationStateCsvOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationStateCsvOptions) TableExternalDataConfigurationStateCsvOptions {
		return *v
	}).(TableExternalDataConfigurationStateCsvOptionsOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationStateCsvOptionsPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationStateCsvOptionsPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationStateCsvOptionsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationStateCsvOptionsPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The value that is used to quote data sections in a
// CSV file. If your data does not contain quoted sections, set the
// property value to an empty string. If your data contains quoted newline
// characters, you must also set the `allowQuotedNewlines` property to true.
// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
// limitations with default values, this value is required to be
// explicitly set.
func (o TableExternalDataConfigurationStateCsvOptionsPtrOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) string { return v.Quote }).(pulumi.StringOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationStateCsvOptionsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateCsvOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationStateGoogleSheetsOptions struct {
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range *string `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

type TableExternalDataConfigurationStateGoogleSheetsOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationStateGoogleSheetsOptionsOutput() TableExternalDataConfigurationStateGoogleSheetsOptionsOutput
	ToTableExternalDataConfigurationStateGoogleSheetsOptionsOutputWithContext(context.Context) TableExternalDataConfigurationStateGoogleSheetsOptionsOutput
}

type TableExternalDataConfigurationStateGoogleSheetsOptionsArgs struct {
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range pulumi.StringPtrInput `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationStateGoogleSheetsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationStateGoogleSheetsOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationStateGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationStateGoogleSheetsOptionsOutput() TableExternalDataConfigurationStateGoogleSheetsOptionsOutput {
	return i.ToTableExternalDataConfigurationStateGoogleSheetsOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationStateGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationStateGoogleSheetsOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateGoogleSheetsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationStateGoogleSheetsOptionsOutput)
}

func (i TableExternalDataConfigurationStateGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationStateGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationStateGoogleSheetsOptionsOutput).ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutputWithContext(ctx)
}

type TableExternalDataConfigurationStateGoogleSheetsOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput
	ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput
}

type tableExternalDataConfigurationStateGoogleSheetsOptionsPtrType TableExternalDataConfigurationStateGoogleSheetsOptionsArgs

func TableExternalDataConfigurationStateGoogleSheetsOptionsPtr(v *TableExternalDataConfigurationStateGoogleSheetsOptionsArgs) TableExternalDataConfigurationStateGoogleSheetsOptionsPtrInput {
	return (*tableExternalDataConfigurationStateGoogleSheetsOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationStateGoogleSheetsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationStateGoogleSheetsOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationStateGoogleSheetsOptionsPtrType) ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationStateGoogleSheetsOptionsPtrType) ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput)
}

type TableExternalDataConfigurationStateGoogleSheetsOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationStateGoogleSheetsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationStateGoogleSheetsOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationStateGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationStateGoogleSheetsOptionsOutput() TableExternalDataConfigurationStateGoogleSheetsOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationStateGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationStateGoogleSheetsOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateGoogleSheetsOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationStateGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationStateGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateGoogleSheetsOptions) *TableExternalDataConfigurationStateGoogleSheetsOptions {
		return &v
	}).(TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableExternalDataConfigurationStateGoogleSheetsOptionsOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateGoogleSheetsOptions) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationStateGoogleSheetsOptionsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateGoogleSheetsOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationStateGoogleSheetsOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput) ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput) ToTableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput) Elem() TableExternalDataConfigurationStateGoogleSheetsOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationStateGoogleSheetsOptions) TableExternalDataConfigurationStateGoogleSheetsOptions {
		return *v
	}).(TableExternalDataConfigurationStateGoogleSheetsOptionsOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateGoogleSheetsOptions) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationStateGoogleSheetsOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableRangePartitioning struct {
	// The field used to determine how to create a range-based
	// partition.
	Field string `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningRange `pulumi:"range"`
}

type TableRangePartitioningInput interface {
	pulumi.Input

	ToTableRangePartitioningOutput() TableRangePartitioningOutput
	ToTableRangePartitioningOutputWithContext(context.Context) TableRangePartitioningOutput
}

type TableRangePartitioningArgs struct {
	// The field used to determine how to create a range-based
	// partition.
	Field pulumi.StringInput `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningRangeInput `pulumi:"range"`
}

func (TableRangePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioning)(nil)).Elem()
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningOutput() TableRangePartitioningOutput {
	return i.ToTableRangePartitioningOutputWithContext(context.Background())
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningOutputWithContext(ctx context.Context) TableRangePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningOutput)
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return i.ToTableRangePartitioningPtrOutputWithContext(context.Background())
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningOutput).ToTableRangePartitioningPtrOutputWithContext(ctx)
}

type TableRangePartitioningPtrInput interface {
	pulumi.Input

	ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput
	ToTableRangePartitioningPtrOutputWithContext(context.Context) TableRangePartitioningPtrOutput
}

type tableRangePartitioningPtrType TableRangePartitioningArgs

func TableRangePartitioningPtr(v *TableRangePartitioningArgs) TableRangePartitioningPtrInput {
	return (*tableRangePartitioningPtrType)(v)
}

func (*tableRangePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioning)(nil)).Elem()
}

func (i *tableRangePartitioningPtrType) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return i.ToTableRangePartitioningPtrOutputWithContext(context.Background())
}

func (i *tableRangePartitioningPtrType) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningPtrOutput)
}

type TableRangePartitioningOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioning)(nil)).Elem()
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningOutput() TableRangePartitioningOutput {
	return o
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningOutputWithContext(ctx context.Context) TableRangePartitioningOutput {
	return o
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return o.ToTableRangePartitioningPtrOutputWithContext(context.Background())
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return o.ApplyT(func(v TableRangePartitioning) *TableRangePartitioning {
		return &v
	}).(TableRangePartitioningPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableRangePartitioningOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TableRangePartitioning) string { return v.Field }).(pulumi.StringOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableRangePartitioningOutput) Range() TableRangePartitioningRangeOutput {
	return o.ApplyT(func(v TableRangePartitioning) TableRangePartitioningRange { return v.Range }).(TableRangePartitioningRangeOutput)
}

type TableRangePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioning)(nil)).Elem()
}

func (o TableRangePartitioningPtrOutput) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return o
}

func (o TableRangePartitioningPtrOutput) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return o
}

func (o TableRangePartitioningPtrOutput) Elem() TableRangePartitioningOutput {
	return o.ApplyT(func(v *TableRangePartitioning) TableRangePartitioning { return *v }).(TableRangePartitioningOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableRangePartitioningPtrOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TableRangePartitioning) string { return v.Field }).(pulumi.StringOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableRangePartitioningPtrOutput) Range() TableRangePartitioningRangeOutput {
	return o.ApplyT(func(v TableRangePartitioning) TableRangePartitioningRange { return v.Range }).(TableRangePartitioningRangeOutput)
}

type TableRangePartitioningArgs struct {
	// The field used to determine how to create a range-based
	// partition.
	Field string `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningRangeArgs `pulumi:"range"`
}

type TableRangePartitioningArgsInput interface {
	pulumi.Input

	ToTableRangePartitioningArgsOutput() TableRangePartitioningArgsOutput
	ToTableRangePartitioningArgsOutputWithContext(context.Context) TableRangePartitioningArgsOutput
}

type TableRangePartitioningArgsArgs struct {
	// The field used to determine how to create a range-based
	// partition.
	Field pulumi.StringInput `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningRangeArgsInput `pulumi:"range"`
}

func (TableRangePartitioningArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningArgs)(nil)).Elem()
}

func (i TableRangePartitioningArgsArgs) ToTableRangePartitioningArgsOutput() TableRangePartitioningArgsOutput {
	return i.ToTableRangePartitioningArgsOutputWithContext(context.Background())
}

func (i TableRangePartitioningArgsArgs) ToTableRangePartitioningArgsOutputWithContext(ctx context.Context) TableRangePartitioningArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningArgsOutput)
}

func (i TableRangePartitioningArgsArgs) ToTableRangePartitioningArgsPtrOutput() TableRangePartitioningArgsPtrOutput {
	return i.ToTableRangePartitioningArgsPtrOutputWithContext(context.Background())
}

func (i TableRangePartitioningArgsArgs) ToTableRangePartitioningArgsPtrOutputWithContext(ctx context.Context) TableRangePartitioningArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningArgsOutput).ToTableRangePartitioningArgsPtrOutputWithContext(ctx)
}

type TableRangePartitioningArgsPtrInput interface {
	pulumi.Input

	ToTableRangePartitioningArgsPtrOutput() TableRangePartitioningArgsPtrOutput
	ToTableRangePartitioningArgsPtrOutputWithContext(context.Context) TableRangePartitioningArgsPtrOutput
}

type tableRangePartitioningArgsPtrType TableRangePartitioningArgsArgs

func TableRangePartitioningArgsPtr(v *TableRangePartitioningArgsArgs) TableRangePartitioningArgsPtrInput {
	return (*tableRangePartitioningArgsPtrType)(v)
}

func (*tableRangePartitioningArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioningArgs)(nil)).Elem()
}

func (i *tableRangePartitioningArgsPtrType) ToTableRangePartitioningArgsPtrOutput() TableRangePartitioningArgsPtrOutput {
	return i.ToTableRangePartitioningArgsPtrOutputWithContext(context.Background())
}

func (i *tableRangePartitioningArgsPtrType) ToTableRangePartitioningArgsPtrOutputWithContext(ctx context.Context) TableRangePartitioningArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningArgsPtrOutput)
}

type TableRangePartitioningArgsOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningArgs)(nil)).Elem()
}

func (o TableRangePartitioningArgsOutput) ToTableRangePartitioningArgsOutput() TableRangePartitioningArgsOutput {
	return o
}

func (o TableRangePartitioningArgsOutput) ToTableRangePartitioningArgsOutputWithContext(ctx context.Context) TableRangePartitioningArgsOutput {
	return o
}

func (o TableRangePartitioningArgsOutput) ToTableRangePartitioningArgsPtrOutput() TableRangePartitioningArgsPtrOutput {
	return o.ToTableRangePartitioningArgsPtrOutputWithContext(context.Background())
}

func (o TableRangePartitioningArgsOutput) ToTableRangePartitioningArgsPtrOutputWithContext(ctx context.Context) TableRangePartitioningArgsPtrOutput {
	return o.ApplyT(func(v TableRangePartitioningArgs) *TableRangePartitioningArgs {
		return &v
	}).(TableRangePartitioningArgsPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableRangePartitioningArgsOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TableRangePartitioningArgs) string { return v.Field }).(pulumi.StringOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableRangePartitioningArgsOutput) Range() TableRangePartitioningRangeArgsOutput {
	return o.ApplyT(func(v TableRangePartitioningArgs) TableRangePartitioningRangeArgs { return v.Range }).(TableRangePartitioningRangeArgsOutput)
}

type TableRangePartitioningArgsPtrOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioningArgs)(nil)).Elem()
}

func (o TableRangePartitioningArgsPtrOutput) ToTableRangePartitioningArgsPtrOutput() TableRangePartitioningArgsPtrOutput {
	return o
}

func (o TableRangePartitioningArgsPtrOutput) ToTableRangePartitioningArgsPtrOutputWithContext(ctx context.Context) TableRangePartitioningArgsPtrOutput {
	return o
}

func (o TableRangePartitioningArgsPtrOutput) Elem() TableRangePartitioningArgsOutput {
	return o.ApplyT(func(v *TableRangePartitioningArgs) TableRangePartitioningArgs { return *v }).(TableRangePartitioningArgsOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableRangePartitioningArgsPtrOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TableRangePartitioningArgs) string { return v.Field }).(pulumi.StringOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableRangePartitioningArgsPtrOutput) Range() TableRangePartitioningRangeArgsOutput {
	return o.ApplyT(func(v TableRangePartitioningArgs) TableRangePartitioningRangeArgs { return v.Range }).(TableRangePartitioningRangeArgsOutput)
}

type TableRangePartitioningRange struct {
	// End of the range partitioning, exclusive.
	End int `pulumi:"end"`
	// The width of each range within the partition.
	Interval int `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start int `pulumi:"start"`
}

type TableRangePartitioningRangeInput interface {
	pulumi.Input

	ToTableRangePartitioningRangeOutput() TableRangePartitioningRangeOutput
	ToTableRangePartitioningRangeOutputWithContext(context.Context) TableRangePartitioningRangeOutput
}

type TableRangePartitioningRangeArgs struct {
	// End of the range partitioning, exclusive.
	End pulumi.IntInput `pulumi:"end"`
	// The width of each range within the partition.
	Interval pulumi.IntInput `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start pulumi.IntInput `pulumi:"start"`
}

func (TableRangePartitioningRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningRange)(nil)).Elem()
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangeOutput() TableRangePartitioningRangeOutput {
	return i.ToTableRangePartitioningRangeOutputWithContext(context.Background())
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangeOutputWithContext(ctx context.Context) TableRangePartitioningRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningRangeOutput)
}

type TableRangePartitioningRangeOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningRange)(nil)).Elem()
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangeOutput() TableRangePartitioningRangeOutput {
	return o
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangeOutputWithContext(ctx context.Context) TableRangePartitioningRangeOutput {
	return o
}

// End of the range partitioning, exclusive.
func (o TableRangePartitioningRangeOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) int { return v.End }).(pulumi.IntOutput)
}

// The width of each range within the partition.
func (o TableRangePartitioningRangeOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) int { return v.Interval }).(pulumi.IntOutput)
}

// Start of the range partitioning, inclusive.
func (o TableRangePartitioningRangeOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) int { return v.Start }).(pulumi.IntOutput)
}

type TableRangePartitioningRangeArgs struct {
	// End of the range partitioning, exclusive.
	End int `pulumi:"end"`
	// The width of each range within the partition.
	Interval int `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start int `pulumi:"start"`
}

type TableRangePartitioningRangeArgsInput interface {
	pulumi.Input

	ToTableRangePartitioningRangeArgsOutput() TableRangePartitioningRangeArgsOutput
	ToTableRangePartitioningRangeArgsOutputWithContext(context.Context) TableRangePartitioningRangeArgsOutput
}

type TableRangePartitioningRangeArgsArgs struct {
	// End of the range partitioning, exclusive.
	End pulumi.IntInput `pulumi:"end"`
	// The width of each range within the partition.
	Interval pulumi.IntInput `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start pulumi.IntInput `pulumi:"start"`
}

func (TableRangePartitioningRangeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningRangeArgs)(nil)).Elem()
}

func (i TableRangePartitioningRangeArgsArgs) ToTableRangePartitioningRangeArgsOutput() TableRangePartitioningRangeArgsOutput {
	return i.ToTableRangePartitioningRangeArgsOutputWithContext(context.Background())
}

func (i TableRangePartitioningRangeArgsArgs) ToTableRangePartitioningRangeArgsOutputWithContext(ctx context.Context) TableRangePartitioningRangeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningRangeArgsOutput)
}

type TableRangePartitioningRangeArgsOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningRangeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningRangeArgs)(nil)).Elem()
}

func (o TableRangePartitioningRangeArgsOutput) ToTableRangePartitioningRangeArgsOutput() TableRangePartitioningRangeArgsOutput {
	return o
}

func (o TableRangePartitioningRangeArgsOutput) ToTableRangePartitioningRangeArgsOutputWithContext(ctx context.Context) TableRangePartitioningRangeArgsOutput {
	return o
}

// End of the range partitioning, exclusive.
func (o TableRangePartitioningRangeArgsOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRangeArgs) int { return v.End }).(pulumi.IntOutput)
}

// The width of each range within the partition.
func (o TableRangePartitioningRangeArgsOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRangeArgs) int { return v.Interval }).(pulumi.IntOutput)
}

// Start of the range partitioning, inclusive.
func (o TableRangePartitioningRangeArgsOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRangeArgs) int { return v.Start }).(pulumi.IntOutput)
}

type TableRangePartitioningState struct {
	// The field used to determine how to create a range-based
	// partition.
	Field string `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningStateRange `pulumi:"range"`
}

type TableRangePartitioningStateInput interface {
	pulumi.Input

	ToTableRangePartitioningStateOutput() TableRangePartitioningStateOutput
	ToTableRangePartitioningStateOutputWithContext(context.Context) TableRangePartitioningStateOutput
}

type TableRangePartitioningStateArgs struct {
	// The field used to determine how to create a range-based
	// partition.
	Field pulumi.StringInput `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningStateRangeInput `pulumi:"range"`
}

func (TableRangePartitioningStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningState)(nil)).Elem()
}

func (i TableRangePartitioningStateArgs) ToTableRangePartitioningStateOutput() TableRangePartitioningStateOutput {
	return i.ToTableRangePartitioningStateOutputWithContext(context.Background())
}

func (i TableRangePartitioningStateArgs) ToTableRangePartitioningStateOutputWithContext(ctx context.Context) TableRangePartitioningStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningStateOutput)
}

type TableRangePartitioningStateOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningState)(nil)).Elem()
}

func (o TableRangePartitioningStateOutput) ToTableRangePartitioningStateOutput() TableRangePartitioningStateOutput {
	return o
}

func (o TableRangePartitioningStateOutput) ToTableRangePartitioningStateOutputWithContext(ctx context.Context) TableRangePartitioningStateOutput {
	return o
}

// The field used to determine how to create a range-based
// partition.
func (o TableRangePartitioningStateOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TableRangePartitioningState) string { return v.Field }).(pulumi.StringOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableRangePartitioningStateOutput) Range() TableRangePartitioningStateRangeOutput {
	return o.ApplyT(func(v TableRangePartitioningState) TableRangePartitioningStateRange { return v.Range }).(TableRangePartitioningStateRangeOutput)
}

type TableRangePartitioningStateRange struct {
	// End of the range partitioning, exclusive.
	End int `pulumi:"end"`
	// The width of each range within the partition.
	Interval int `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start int `pulumi:"start"`
}

type TableRangePartitioningStateRangeInput interface {
	pulumi.Input

	ToTableRangePartitioningStateRangeOutput() TableRangePartitioningStateRangeOutput
	ToTableRangePartitioningStateRangeOutputWithContext(context.Context) TableRangePartitioningStateRangeOutput
}

type TableRangePartitioningStateRangeArgs struct {
	// End of the range partitioning, exclusive.
	End pulumi.IntInput `pulumi:"end"`
	// The width of each range within the partition.
	Interval pulumi.IntInput `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start pulumi.IntInput `pulumi:"start"`
}

func (TableRangePartitioningStateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningStateRange)(nil)).Elem()
}

func (i TableRangePartitioningStateRangeArgs) ToTableRangePartitioningStateRangeOutput() TableRangePartitioningStateRangeOutput {
	return i.ToTableRangePartitioningStateRangeOutputWithContext(context.Background())
}

func (i TableRangePartitioningStateRangeArgs) ToTableRangePartitioningStateRangeOutputWithContext(ctx context.Context) TableRangePartitioningStateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningStateRangeOutput)
}

type TableRangePartitioningStateRangeOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningStateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningStateRange)(nil)).Elem()
}

func (o TableRangePartitioningStateRangeOutput) ToTableRangePartitioningStateRangeOutput() TableRangePartitioningStateRangeOutput {
	return o
}

func (o TableRangePartitioningStateRangeOutput) ToTableRangePartitioningStateRangeOutputWithContext(ctx context.Context) TableRangePartitioningStateRangeOutput {
	return o
}

// End of the range partitioning, exclusive.
func (o TableRangePartitioningStateRangeOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningStateRange) int { return v.End }).(pulumi.IntOutput)
}

// The width of each range within the partition.
func (o TableRangePartitioningStateRangeOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningStateRange) int { return v.Interval }).(pulumi.IntOutput)
}

// Start of the range partitioning, inclusive.
func (o TableRangePartitioningStateRangeOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningStateRange) int { return v.Start }).(pulumi.IntOutput)
}

type TableTimePartitioning struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs *int `pulumi:"expirationMs"`
	// The field used to determine how to create a range-based
	// partition.
	Field *string `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// The only type supported is DAY, which will generate
	// one partition per day based on data loading time.
	Type string `pulumi:"type"`
}

type TableTimePartitioningInput interface {
	pulumi.Input

	ToTableTimePartitioningOutput() TableTimePartitioningOutput
	ToTableTimePartitioningOutputWithContext(context.Context) TableTimePartitioningOutput
}

type TableTimePartitioningArgs struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs pulumi.IntPtrInput `pulumi:"expirationMs"`
	// The field used to determine how to create a range-based
	// partition.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// The only type supported is DAY, which will generate
	// one partition per day based on data loading time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableTimePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioning)(nil)).Elem()
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningOutput() TableTimePartitioningOutput {
	return i.ToTableTimePartitioningOutputWithContext(context.Background())
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningOutputWithContext(ctx context.Context) TableTimePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningOutput)
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return i.ToTableTimePartitioningPtrOutputWithContext(context.Background())
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningOutput).ToTableTimePartitioningPtrOutputWithContext(ctx)
}

type TableTimePartitioningPtrInput interface {
	pulumi.Input

	ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput
	ToTableTimePartitioningPtrOutputWithContext(context.Context) TableTimePartitioningPtrOutput
}

type tableTimePartitioningPtrType TableTimePartitioningArgs

func TableTimePartitioningPtr(v *TableTimePartitioningArgs) TableTimePartitioningPtrInput {
	return (*tableTimePartitioningPtrType)(v)
}

func (*tableTimePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTimePartitioning)(nil)).Elem()
}

func (i *tableTimePartitioningPtrType) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return i.ToTableTimePartitioningPtrOutputWithContext(context.Background())
}

func (i *tableTimePartitioningPtrType) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningPtrOutput)
}

type TableTimePartitioningOutput struct{ *pulumi.OutputState }

func (TableTimePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioning)(nil)).Elem()
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningOutput() TableTimePartitioningOutput {
	return o
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningOutputWithContext(ctx context.Context) TableTimePartitioningOutput {
	return o
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return o.ToTableTimePartitioningPtrOutputWithContext(context.Background())
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *TableTimePartitioning {
		return &v
	}).(TableTimePartitioningPtrOutput)
}

// Number of milliseconds for which to keep the
// storage for a partition.
func (o TableTimePartitioningOutput) ExpirationMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *int { return v.ExpirationMs }).(pulumi.IntPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableTimePartitioningOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableTimePartitioningOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// The only type supported is DAY, which will generate
// one partition per day based on data loading time.
func (o TableTimePartitioningOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableTimePartitioning) string { return v.Type }).(pulumi.StringOutput)
}

type TableTimePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TableTimePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTimePartitioning)(nil)).Elem()
}

func (o TableTimePartitioningPtrOutput) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return o
}

func (o TableTimePartitioningPtrOutput) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return o
}

func (o TableTimePartitioningPtrOutput) Elem() TableTimePartitioningOutput {
	return o.ApplyT(func(v *TableTimePartitioning) TableTimePartitioning { return *v }).(TableTimePartitioningOutput)
}

// Number of milliseconds for which to keep the
// storage for a partition.
func (o TableTimePartitioningPtrOutput) ExpirationMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *int { return v.ExpirationMs }).(pulumi.IntPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableTimePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableTimePartitioningPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// The only type supported is DAY, which will generate
// one partition per day based on data loading time.
func (o TableTimePartitioningPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableTimePartitioning) string { return v.Type }).(pulumi.StringOutput)
}

type TableTimePartitioningArgs struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs *int `pulumi:"expirationMs"`
	// The field used to determine how to create a range-based
	// partition.
	Field *string `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// The only type supported is DAY, which will generate
	// one partition per day based on data loading time.
	Type string `pulumi:"type"`
}

type TableTimePartitioningArgsInput interface {
	pulumi.Input

	ToTableTimePartitioningArgsOutput() TableTimePartitioningArgsOutput
	ToTableTimePartitioningArgsOutputWithContext(context.Context) TableTimePartitioningArgsOutput
}

type TableTimePartitioningArgsArgs struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs pulumi.IntPtrInput `pulumi:"expirationMs"`
	// The field used to determine how to create a range-based
	// partition.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// The only type supported is DAY, which will generate
	// one partition per day based on data loading time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableTimePartitioningArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioningArgs)(nil)).Elem()
}

func (i TableTimePartitioningArgsArgs) ToTableTimePartitioningArgsOutput() TableTimePartitioningArgsOutput {
	return i.ToTableTimePartitioningArgsOutputWithContext(context.Background())
}

func (i TableTimePartitioningArgsArgs) ToTableTimePartitioningArgsOutputWithContext(ctx context.Context) TableTimePartitioningArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningArgsOutput)
}

func (i TableTimePartitioningArgsArgs) ToTableTimePartitioningArgsPtrOutput() TableTimePartitioningArgsPtrOutput {
	return i.ToTableTimePartitioningArgsPtrOutputWithContext(context.Background())
}

func (i TableTimePartitioningArgsArgs) ToTableTimePartitioningArgsPtrOutputWithContext(ctx context.Context) TableTimePartitioningArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningArgsOutput).ToTableTimePartitioningArgsPtrOutputWithContext(ctx)
}

type TableTimePartitioningArgsPtrInput interface {
	pulumi.Input

	ToTableTimePartitioningArgsPtrOutput() TableTimePartitioningArgsPtrOutput
	ToTableTimePartitioningArgsPtrOutputWithContext(context.Context) TableTimePartitioningArgsPtrOutput
}

type tableTimePartitioningArgsPtrType TableTimePartitioningArgsArgs

func TableTimePartitioningArgsPtr(v *TableTimePartitioningArgsArgs) TableTimePartitioningArgsPtrInput {
	return (*tableTimePartitioningArgsPtrType)(v)
}

func (*tableTimePartitioningArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTimePartitioningArgs)(nil)).Elem()
}

func (i *tableTimePartitioningArgsPtrType) ToTableTimePartitioningArgsPtrOutput() TableTimePartitioningArgsPtrOutput {
	return i.ToTableTimePartitioningArgsPtrOutputWithContext(context.Background())
}

func (i *tableTimePartitioningArgsPtrType) ToTableTimePartitioningArgsPtrOutputWithContext(ctx context.Context) TableTimePartitioningArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningArgsPtrOutput)
}

type TableTimePartitioningArgsOutput struct{ *pulumi.OutputState }

func (TableTimePartitioningArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioningArgs)(nil)).Elem()
}

func (o TableTimePartitioningArgsOutput) ToTableTimePartitioningArgsOutput() TableTimePartitioningArgsOutput {
	return o
}

func (o TableTimePartitioningArgsOutput) ToTableTimePartitioningArgsOutputWithContext(ctx context.Context) TableTimePartitioningArgsOutput {
	return o
}

func (o TableTimePartitioningArgsOutput) ToTableTimePartitioningArgsPtrOutput() TableTimePartitioningArgsPtrOutput {
	return o.ToTableTimePartitioningArgsPtrOutputWithContext(context.Background())
}

func (o TableTimePartitioningArgsOutput) ToTableTimePartitioningArgsPtrOutputWithContext(ctx context.Context) TableTimePartitioningArgsPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningArgs) *TableTimePartitioningArgs {
		return &v
	}).(TableTimePartitioningArgsPtrOutput)
}

// Number of milliseconds for which to keep the
// storage for a partition.
func (o TableTimePartitioningArgsOutput) ExpirationMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningArgs) *int { return v.ExpirationMs }).(pulumi.IntPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableTimePartitioningArgsOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningArgs) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableTimePartitioningArgsOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningArgs) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// The only type supported is DAY, which will generate
// one partition per day based on data loading time.
func (o TableTimePartitioningArgsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableTimePartitioningArgs) string { return v.Type }).(pulumi.StringOutput)
}

type TableTimePartitioningArgsPtrOutput struct{ *pulumi.OutputState }

func (TableTimePartitioningArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTimePartitioningArgs)(nil)).Elem()
}

func (o TableTimePartitioningArgsPtrOutput) ToTableTimePartitioningArgsPtrOutput() TableTimePartitioningArgsPtrOutput {
	return o
}

func (o TableTimePartitioningArgsPtrOutput) ToTableTimePartitioningArgsPtrOutputWithContext(ctx context.Context) TableTimePartitioningArgsPtrOutput {
	return o
}

func (o TableTimePartitioningArgsPtrOutput) Elem() TableTimePartitioningArgsOutput {
	return o.ApplyT(func(v *TableTimePartitioningArgs) TableTimePartitioningArgs { return *v }).(TableTimePartitioningArgsOutput)
}

// Number of milliseconds for which to keep the
// storage for a partition.
func (o TableTimePartitioningArgsPtrOutput) ExpirationMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningArgs) *int { return v.ExpirationMs }).(pulumi.IntPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableTimePartitioningArgsPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningArgs) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableTimePartitioningArgsPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningArgs) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// The only type supported is DAY, which will generate
// one partition per day based on data loading time.
func (o TableTimePartitioningArgsPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableTimePartitioningArgs) string { return v.Type }).(pulumi.StringOutput)
}

type TableTimePartitioningState struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs *int `pulumi:"expirationMs"`
	// The field used to determine how to create a range-based
	// partition.
	Field *string `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// The only type supported is DAY, which will generate
	// one partition per day based on data loading time.
	Type string `pulumi:"type"`
}

type TableTimePartitioningStateInput interface {
	pulumi.Input

	ToTableTimePartitioningStateOutput() TableTimePartitioningStateOutput
	ToTableTimePartitioningStateOutputWithContext(context.Context) TableTimePartitioningStateOutput
}

type TableTimePartitioningStateArgs struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs pulumi.IntPtrInput `pulumi:"expirationMs"`
	// The field used to determine how to create a range-based
	// partition.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// The only type supported is DAY, which will generate
	// one partition per day based on data loading time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableTimePartitioningStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioningState)(nil)).Elem()
}

func (i TableTimePartitioningStateArgs) ToTableTimePartitioningStateOutput() TableTimePartitioningStateOutput {
	return i.ToTableTimePartitioningStateOutputWithContext(context.Background())
}

func (i TableTimePartitioningStateArgs) ToTableTimePartitioningStateOutputWithContext(ctx context.Context) TableTimePartitioningStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningStateOutput)
}

type TableTimePartitioningStateOutput struct{ *pulumi.OutputState }

func (TableTimePartitioningStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioningState)(nil)).Elem()
}

func (o TableTimePartitioningStateOutput) ToTableTimePartitioningStateOutput() TableTimePartitioningStateOutput {
	return o
}

func (o TableTimePartitioningStateOutput) ToTableTimePartitioningStateOutputWithContext(ctx context.Context) TableTimePartitioningStateOutput {
	return o
}

// Number of milliseconds for which to keep the
// storage for a partition.
func (o TableTimePartitioningStateOutput) ExpirationMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningState) *int { return v.ExpirationMs }).(pulumi.IntPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableTimePartitioningStateOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningState) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableTimePartitioningStateOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTimePartitioningState) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// The only type supported is DAY, which will generate
// one partition per day based on data loading time.
func (o TableTimePartitioningStateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableTimePartitioningState) string { return v.Type }).(pulumi.StringOutput)
}

type TableView struct {
	// A query that BigQuery executes when the view is referenced.
	Query string `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql *bool `pulumi:"useLegacySql"`
}

type TableViewInput interface {
	pulumi.Input

	ToTableViewOutput() TableViewOutput
	ToTableViewOutputWithContext(context.Context) TableViewOutput
}

type TableViewArgs struct {
	// A query that BigQuery executes when the view is referenced.
	Query pulumi.StringInput `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
}

func (TableViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableView)(nil)).Elem()
}

func (i TableViewArgs) ToTableViewOutput() TableViewOutput {
	return i.ToTableViewOutputWithContext(context.Background())
}

func (i TableViewArgs) ToTableViewOutputWithContext(ctx context.Context) TableViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewOutput)
}

func (i TableViewArgs) ToTableViewPtrOutput() TableViewPtrOutput {
	return i.ToTableViewPtrOutputWithContext(context.Background())
}

func (i TableViewArgs) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewOutput).ToTableViewPtrOutputWithContext(ctx)
}

type TableViewPtrInput interface {
	pulumi.Input

	ToTableViewPtrOutput() TableViewPtrOutput
	ToTableViewPtrOutputWithContext(context.Context) TableViewPtrOutput
}

type tableViewPtrType TableViewArgs

func TableViewPtr(v *TableViewArgs) TableViewPtrInput {
	return (*tableViewPtrType)(v)
}

func (*tableViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableView)(nil)).Elem()
}

func (i *tableViewPtrType) ToTableViewPtrOutput() TableViewPtrOutput {
	return i.ToTableViewPtrOutputWithContext(context.Background())
}

func (i *tableViewPtrType) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewPtrOutput)
}

type TableViewOutput struct{ *pulumi.OutputState }

func (TableViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableView)(nil)).Elem()
}

func (o TableViewOutput) ToTableViewOutput() TableViewOutput {
	return o
}

func (o TableViewOutput) ToTableViewOutputWithContext(ctx context.Context) TableViewOutput {
	return o
}

func (o TableViewOutput) ToTableViewPtrOutput() TableViewPtrOutput {
	return o.ToTableViewPtrOutputWithContext(context.Background())
}

func (o TableViewOutput) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return o.ApplyT(func(v TableView) *TableView {
		return &v
	}).(TableViewPtrOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o TableViewOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v TableView) string { return v.Query }).(pulumi.StringOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view.
// The default value is true. If set to false, the view will use BigQuery's standard SQL.
func (o TableViewOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableView) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

type TableViewPtrOutput struct{ *pulumi.OutputState }

func (TableViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableView)(nil)).Elem()
}

func (o TableViewPtrOutput) ToTableViewPtrOutput() TableViewPtrOutput {
	return o
}

func (o TableViewPtrOutput) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return o
}

func (o TableViewPtrOutput) Elem() TableViewOutput {
	return o.ApplyT(func(v *TableView) TableView { return *v }).(TableViewOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o TableViewPtrOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v TableView) string { return v.Query }).(pulumi.StringOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view.
// The default value is true. If set to false, the view will use BigQuery's standard SQL.
func (o TableViewPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableView) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

type TableViewArgs struct {
	// A query that BigQuery executes when the view is referenced.
	Query string `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql *bool `pulumi:"useLegacySql"`
}

type TableViewArgsInput interface {
	pulumi.Input

	ToTableViewArgsOutput() TableViewArgsOutput
	ToTableViewArgsOutputWithContext(context.Context) TableViewArgsOutput
}

type TableViewArgsArgs struct {
	// A query that BigQuery executes when the view is referenced.
	Query pulumi.StringInput `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
}

func (TableViewArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableViewArgs)(nil)).Elem()
}

func (i TableViewArgsArgs) ToTableViewArgsOutput() TableViewArgsOutput {
	return i.ToTableViewArgsOutputWithContext(context.Background())
}

func (i TableViewArgsArgs) ToTableViewArgsOutputWithContext(ctx context.Context) TableViewArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewArgsOutput)
}

func (i TableViewArgsArgs) ToTableViewArgsPtrOutput() TableViewArgsPtrOutput {
	return i.ToTableViewArgsPtrOutputWithContext(context.Background())
}

func (i TableViewArgsArgs) ToTableViewArgsPtrOutputWithContext(ctx context.Context) TableViewArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewArgsOutput).ToTableViewArgsPtrOutputWithContext(ctx)
}

type TableViewArgsPtrInput interface {
	pulumi.Input

	ToTableViewArgsPtrOutput() TableViewArgsPtrOutput
	ToTableViewArgsPtrOutputWithContext(context.Context) TableViewArgsPtrOutput
}

type tableViewArgsPtrType TableViewArgsArgs

func TableViewArgsPtr(v *TableViewArgsArgs) TableViewArgsPtrInput {
	return (*tableViewArgsPtrType)(v)
}

func (*tableViewArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableViewArgs)(nil)).Elem()
}

func (i *tableViewArgsPtrType) ToTableViewArgsPtrOutput() TableViewArgsPtrOutput {
	return i.ToTableViewArgsPtrOutputWithContext(context.Background())
}

func (i *tableViewArgsPtrType) ToTableViewArgsPtrOutputWithContext(ctx context.Context) TableViewArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewArgsPtrOutput)
}

type TableViewArgsOutput struct{ *pulumi.OutputState }

func (TableViewArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableViewArgs)(nil)).Elem()
}

func (o TableViewArgsOutput) ToTableViewArgsOutput() TableViewArgsOutput {
	return o
}

func (o TableViewArgsOutput) ToTableViewArgsOutputWithContext(ctx context.Context) TableViewArgsOutput {
	return o
}

func (o TableViewArgsOutput) ToTableViewArgsPtrOutput() TableViewArgsPtrOutput {
	return o.ToTableViewArgsPtrOutputWithContext(context.Background())
}

func (o TableViewArgsOutput) ToTableViewArgsPtrOutputWithContext(ctx context.Context) TableViewArgsPtrOutput {
	return o.ApplyT(func(v TableViewArgs) *TableViewArgs {
		return &v
	}).(TableViewArgsPtrOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o TableViewArgsOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v TableViewArgs) string { return v.Query }).(pulumi.StringOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view.
// The default value is true. If set to false, the view will use BigQuery's standard SQL.
func (o TableViewArgsOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableViewArgs) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

type TableViewArgsPtrOutput struct{ *pulumi.OutputState }

func (TableViewArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableViewArgs)(nil)).Elem()
}

func (o TableViewArgsPtrOutput) ToTableViewArgsPtrOutput() TableViewArgsPtrOutput {
	return o
}

func (o TableViewArgsPtrOutput) ToTableViewArgsPtrOutputWithContext(ctx context.Context) TableViewArgsPtrOutput {
	return o
}

func (o TableViewArgsPtrOutput) Elem() TableViewArgsOutput {
	return o.ApplyT(func(v *TableViewArgs) TableViewArgs { return *v }).(TableViewArgsOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o TableViewArgsPtrOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v TableViewArgs) string { return v.Query }).(pulumi.StringOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view.
// The default value is true. If set to false, the view will use BigQuery's standard SQL.
func (o TableViewArgsPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableViewArgs) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

type TableViewState struct {
	// A query that BigQuery executes when the view is referenced.
	Query string `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql *bool `pulumi:"useLegacySql"`
}

type TableViewStateInput interface {
	pulumi.Input

	ToTableViewStateOutput() TableViewStateOutput
	ToTableViewStateOutputWithContext(context.Context) TableViewStateOutput
}

type TableViewStateArgs struct {
	// A query that BigQuery executes when the view is referenced.
	Query pulumi.StringInput `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
}

func (TableViewStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableViewState)(nil)).Elem()
}

func (i TableViewStateArgs) ToTableViewStateOutput() TableViewStateOutput {
	return i.ToTableViewStateOutputWithContext(context.Background())
}

func (i TableViewStateArgs) ToTableViewStateOutputWithContext(ctx context.Context) TableViewStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewStateOutput)
}

type TableViewStateOutput struct{ *pulumi.OutputState }

func (TableViewStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableViewState)(nil)).Elem()
}

func (o TableViewStateOutput) ToTableViewStateOutput() TableViewStateOutput {
	return o
}

func (o TableViewStateOutput) ToTableViewStateOutputWithContext(ctx context.Context) TableViewStateOutput {
	return o
}

// A query that BigQuery executes when the view is referenced.
func (o TableViewStateOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v TableViewState) string { return v.Query }).(pulumi.StringOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view.
// The default value is true. If set to false, the view will use BigQuery's standard SQL.
func (o TableViewStateOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableViewState) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AppProfileSingleClusterRoutingOutput{})
	pulumi.RegisterOutputType(AppProfileSingleClusterRoutingPtrOutput{})
	pulumi.RegisterOutputType(AppProfileSingleClusterRoutingArgsOutput{})
	pulumi.RegisterOutputType(AppProfileSingleClusterRoutingArgsPtrOutput{})
	pulumi.RegisterOutputType(AppProfileSingleClusterRoutingStateOutput{})
	pulumi.RegisterOutputType(DatasetAccessOutput{})
	pulumi.RegisterOutputType(DatasetAccessArrayOutput{})
	pulumi.RegisterOutputType(DatasetAccessArgsOutput{})
	pulumi.RegisterOutputType(DatasetAccessArgsArrayOutput{})
	pulumi.RegisterOutputType(DatasetAccessStateOutput{})
	pulumi.RegisterOutputType(DatasetAccessStateArrayOutput{})
	pulumi.RegisterOutputType(DatasetAccessStateViewOutput{})
	pulumi.RegisterOutputType(DatasetAccessStateViewPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessViewOutput{})
	pulumi.RegisterOutputType(DatasetAccessViewPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessViewArgsOutput{})
	pulumi.RegisterOutputType(DatasetAccessViewArgsPtrOutput{})
	pulumi.RegisterOutputType(DatasetDefaultEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(DatasetDefaultEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DatasetDefaultEncryptionConfigurationArgsOutput{})
	pulumi.RegisterOutputType(DatasetDefaultEncryptionConfigurationArgsPtrOutput{})
	pulumi.RegisterOutputType(DatasetDefaultEncryptionConfigurationStateOutput{})
	pulumi.RegisterOutputType(TableEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(TableEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TableEncryptionConfigurationArgsOutput{})
	pulumi.RegisterOutputType(TableEncryptionConfigurationArgsPtrOutput{})
	pulumi.RegisterOutputType(TableEncryptionConfigurationStateOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationArgsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationArgsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationCsvOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationCsvOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationCsvOptionsArgsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationCsvOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationGoogleSheetsOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationGoogleSheetsOptionsArgsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationGoogleSheetsOptionsArgsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationStateOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationStateCsvOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationStateCsvOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationStateGoogleSheetsOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationStateGoogleSheetsOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningArgsOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningArgsPtrOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningRangeOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningRangeArgsOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningStateOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningStateRangeOutput{})
	pulumi.RegisterOutputType(TableTimePartitioningOutput{})
	pulumi.RegisterOutputType(TableTimePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TableTimePartitioningArgsOutput{})
	pulumi.RegisterOutputType(TableTimePartitioningArgsPtrOutput{})
	pulumi.RegisterOutputType(TableTimePartitioningStateOutput{})
	pulumi.RegisterOutputType(TableViewOutput{})
	pulumi.RegisterOutputType(TableViewPtrOutput{})
	pulumi.RegisterOutputType(TableViewArgsOutput{})
	pulumi.RegisterOutputType(TableViewArgsPtrOutput{})
	pulumi.RegisterOutputType(TableViewStateOutput{})
}
