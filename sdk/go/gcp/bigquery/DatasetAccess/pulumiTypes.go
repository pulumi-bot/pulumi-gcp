// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package DatasetAccess

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-gcp/bigquery/DatasetAccessView"
)

type DatasetAccess struct {
	Domain *string `pulumi:"domain"`
	GroupByEmail *string `pulumi:"groupByEmail"`
	Role *string `pulumi:"role"`
	SpecialGroup *string `pulumi:"specialGroup"`
	UserByEmail *string `pulumi:"userByEmail"`
	View *bigqueryDatasetAccessView.DatasetAccessView `pulumi:"view"`
}

type DatasetAccessInput interface {
	pulumi.Input

	ToDatasetAccessOutput() DatasetAccessOutput
	ToDatasetAccessOutputWithContext(context.Context) DatasetAccessOutput
}

type DatasetAccessArgs struct {
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	GroupByEmail pulumi.StringPtrInput `pulumi:"groupByEmail"`
	Role pulumi.StringPtrInput `pulumi:"role"`
	SpecialGroup pulumi.StringPtrInput `pulumi:"specialGroup"`
	UserByEmail pulumi.StringPtrInput `pulumi:"userByEmail"`
	View bigqueryDatasetAccessView.DatasetAccessViewPtrInput `pulumi:"view"`
}

func (DatasetAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccess)(nil)).Elem()
}

func (i DatasetAccessArgs) ToDatasetAccessOutput() DatasetAccessOutput {
	return i.ToDatasetAccessOutputWithContext(context.Background())
}

func (i DatasetAccessArgs) ToDatasetAccessOutputWithContext(ctx context.Context) DatasetAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessOutput)
}

type DatasetAccessArrayInput interface {
	pulumi.Input

	ToDatasetAccessArrayOutput() DatasetAccessArrayOutput
	ToDatasetAccessArrayOutputWithContext(context.Context) DatasetAccessArrayOutput
}

type DatasetAccessArray []DatasetAccessInput

func (DatasetAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccess)(nil)).Elem()
}

func (i DatasetAccessArray) ToDatasetAccessArrayOutput() DatasetAccessArrayOutput {
	return i.ToDatasetAccessArrayOutputWithContext(context.Background())
}

func (i DatasetAccessArray) ToDatasetAccessArrayOutputWithContext(ctx context.Context) DatasetAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessArrayOutput)
}

type DatasetAccessOutput struct { *pulumi.OutputState }

func (DatasetAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccess)(nil)).Elem()
}

func (o DatasetAccessOutput) ToDatasetAccessOutput() DatasetAccessOutput {
	return o
}

func (o DatasetAccessOutput) ToDatasetAccessOutputWithContext(ctx context.Context) DatasetAccessOutput {
	return o
}

func (o DatasetAccessOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DatasetAccess) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) GroupByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DatasetAccess) *string { return v.GroupByEmail }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DatasetAccess) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) SpecialGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DatasetAccess) *string { return v.SpecialGroup }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) UserByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func (v DatasetAccess) *string { return v.UserByEmail }).(pulumi.StringPtrOutput)
}

func (o DatasetAccessOutput) View() bigqueryDatasetAccessView.DatasetAccessViewPtrOutput {
	return o.ApplyT(func (v DatasetAccess) *bigqueryDatasetAccessView.DatasetAccessView { return v.View }).(bigqueryDatasetAccessView.DatasetAccessViewPtrOutput)
}

type DatasetAccessArrayOutput struct { *pulumi.OutputState}

func (DatasetAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccess)(nil)).Elem()
}

func (o DatasetAccessArrayOutput) ToDatasetAccessArrayOutput() DatasetAccessArrayOutput {
	return o
}

func (o DatasetAccessArrayOutput) ToDatasetAccessArrayOutputWithContext(ctx context.Context) DatasetAccessArrayOutput {
	return o
}

func (o DatasetAccessArrayOutput) Index(i pulumi.IntInput) DatasetAccessOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) DatasetAccess {
		return vs[0].([]DatasetAccess)[vs[1].(int)]
	}).(DatasetAccessOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasetAccessOutput{})
	pulumi.RegisterOutputType(DatasetAccessArrayOutput{})
}
