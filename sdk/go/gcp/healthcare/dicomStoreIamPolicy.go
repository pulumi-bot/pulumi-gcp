// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/healthcare_dicom_store_iam_policy.html.markdown.
type DicomStoreIamPolicy struct {
	s *pulumi.ResourceState
}

// NewDicomStoreIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewDicomStoreIamPolicy(ctx *pulumi.Context,
	name string, args *DicomStoreIamPolicyArgs, opts ...pulumi.ResourceOpt) (*DicomStoreIamPolicy, error) {
	if args == nil || args.DicomStoreId == nil {
		return nil, errors.New("missing required argument 'DicomStoreId'")
	}
	if args == nil || args.PolicyData == nil {
		return nil, errors.New("missing required argument 'PolicyData'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dicomStoreId"] = nil
		inputs["policyData"] = nil
	} else {
		inputs["dicomStoreId"] = args.DicomStoreId
		inputs["policyData"] = args.PolicyData
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DicomStoreIamPolicy{s: s}, nil
}

// GetDicomStoreIamPolicy gets an existing DicomStoreIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDicomStoreIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DicomStoreIamPolicyState, opts ...pulumi.ResourceOpt) (*DicomStoreIamPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dicomStoreId"] = state.DicomStoreId
		inputs["etag"] = state.Etag
		inputs["policyData"] = state.PolicyData
	}
	s, err := ctx.ReadResource("gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DicomStoreIamPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DicomStoreIamPolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DicomStoreIamPolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The DICOM store ID, in the form
// `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
// `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider's
// project setting will be used as a fallback.
func (r *DicomStoreIamPolicy) DicomStoreId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dicomStoreId"])
}

// (Computed) The etag of the DICOM store's IAM policy.
func (r *DicomStoreIamPolicy) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// The policy data generated by
// a `googleIamPolicy` data source.
func (r *DicomStoreIamPolicy) PolicyData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyData"])
}

// Input properties used for looking up and filtering DicomStoreIamPolicy resources.
type DicomStoreIamPolicyState struct {
	// The DICOM store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
	// `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	DicomStoreId interface{}
	// (Computed) The etag of the DICOM store's IAM policy.
	Etag interface{}
	// The policy data generated by
	// a `googleIamPolicy` data source.
	PolicyData interface{}
}

// The set of arguments for constructing a DicomStoreIamPolicy resource.
type DicomStoreIamPolicyArgs struct {
	// The DICOM store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
	// `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	DicomStoreId interface{}
	// The policy data generated by
	// a `googleIamPolicy` data source.
	PolicyData interface{}
}
