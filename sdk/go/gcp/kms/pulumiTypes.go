// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type CryptoKeyIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type CryptoKeyIAMBindingConditionInput interface {
	pulumi.Input

	ToCryptoKeyIAMBindingConditionOutput() CryptoKeyIAMBindingConditionOutput
	ToCryptoKeyIAMBindingConditionOutputWithContext(context.Context) CryptoKeyIAMBindingConditionOutput
}

type CryptoKeyIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionOutput() CryptoKeyIAMBindingConditionOutput {
	return i.ToCryptoKeyIAMBindingConditionOutputWithContext(context.Background())
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionOutput)
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return i.ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIAMBindingConditionArgs) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionOutput).ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx)
}

type CryptoKeyIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput
	ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Context) CryptoKeyIAMBindingConditionPtrOutput
}

type cryptoKeyIAMBindingConditionPtrType CryptoKeyIAMBindingConditionArgs

func CryptoKeyIAMBindingConditionPtr(v *CryptoKeyIAMBindingConditionArgs) CryptoKeyIAMBindingConditionPtrInput {
	return (*cryptoKeyIAMBindingConditionPtrType)(v)
}

func (*cryptoKeyIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (i *cryptoKeyIAMBindingConditionPtrType) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return i.ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIAMBindingConditionPtrType) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionPtrOutput)
}

type CryptoKeyIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionOutput() CryptoKeyIAMBindingConditionOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return o.ToCryptoKeyIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIAMBindingConditionOutput) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) *CryptoKeyIAMBindingCondition {
		return &v
	}).(CryptoKeyIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMBindingCondition)(nil)).Elem()
}

func (o CryptoKeyIAMBindingConditionPtrOutput) ToCryptoKeyIAMBindingConditionPtrOutput() CryptoKeyIAMBindingConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionPtrOutput) ToCryptoKeyIAMBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionPtrOutput) Elem() CryptoKeyIAMBindingConditionOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingCondition) CryptoKeyIAMBindingCondition { return *v }).(CryptoKeyIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type CryptoKeyIAMBindingConditionArgsInput interface {
	pulumi.Input

	ToCryptoKeyIAMBindingConditionArgsOutput() CryptoKeyIAMBindingConditionArgsOutput
	ToCryptoKeyIAMBindingConditionArgsOutputWithContext(context.Context) CryptoKeyIAMBindingConditionArgsOutput
}

type CryptoKeyIAMBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingConditionArgs)(nil)).Elem()
}

func (i CryptoKeyIAMBindingConditionArgsArgs) ToCryptoKeyIAMBindingConditionArgsOutput() CryptoKeyIAMBindingConditionArgsOutput {
	return i.ToCryptoKeyIAMBindingConditionArgsOutputWithContext(context.Background())
}

func (i CryptoKeyIAMBindingConditionArgsArgs) ToCryptoKeyIAMBindingConditionArgsOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionArgsOutput)
}

func (i CryptoKeyIAMBindingConditionArgsArgs) ToCryptoKeyIAMBindingConditionArgsPtrOutput() CryptoKeyIAMBindingConditionArgsPtrOutput {
	return i.ToCryptoKeyIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIAMBindingConditionArgsArgs) ToCryptoKeyIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionArgsOutput).ToCryptoKeyIAMBindingConditionArgsPtrOutputWithContext(ctx)
}

type CryptoKeyIAMBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToCryptoKeyIAMBindingConditionArgsPtrOutput() CryptoKeyIAMBindingConditionArgsPtrOutput
	ToCryptoKeyIAMBindingConditionArgsPtrOutputWithContext(context.Context) CryptoKeyIAMBindingConditionArgsPtrOutput
}

type cryptoKeyIAMBindingConditionArgsPtrType CryptoKeyIAMBindingConditionArgsArgs

func CryptoKeyIAMBindingConditionArgsPtr(v *CryptoKeyIAMBindingConditionArgsArgs) CryptoKeyIAMBindingConditionArgsPtrInput {
	return (*cryptoKeyIAMBindingConditionArgsPtrType)(v)
}

func (*cryptoKeyIAMBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMBindingConditionArgs)(nil)).Elem()
}

func (i *cryptoKeyIAMBindingConditionArgsPtrType) ToCryptoKeyIAMBindingConditionArgsPtrOutput() CryptoKeyIAMBindingConditionArgsPtrOutput {
	return i.ToCryptoKeyIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIAMBindingConditionArgsPtrType) ToCryptoKeyIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionArgsPtrOutput)
}

type CryptoKeyIAMBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingConditionArgs)(nil)).Elem()
}

func (o CryptoKeyIAMBindingConditionArgsOutput) ToCryptoKeyIAMBindingConditionArgsOutput() CryptoKeyIAMBindingConditionArgsOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionArgsOutput) ToCryptoKeyIAMBindingConditionArgsOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionArgsOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionArgsOutput) ToCryptoKeyIAMBindingConditionArgsPtrOutput() CryptoKeyIAMBindingConditionArgsPtrOutput {
	return o.ToCryptoKeyIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIAMBindingConditionArgsOutput) ToCryptoKeyIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionArgs) *CryptoKeyIAMBindingConditionArgs {
		return &v
	}).(CryptoKeyIAMBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMBindingConditionArgs)(nil)).Elem()
}

func (o CryptoKeyIAMBindingConditionArgsPtrOutput) ToCryptoKeyIAMBindingConditionArgsPtrOutput() CryptoKeyIAMBindingConditionArgsPtrOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionArgsPtrOutput) ToCryptoKeyIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionArgsPtrOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionArgsPtrOutput) Elem() CryptoKeyIAMBindingConditionArgsOutput {
	return o.ApplyT(func(v *CryptoKeyIAMBindingConditionArgs) CryptoKeyIAMBindingConditionArgs { return *v }).(CryptoKeyIAMBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type CryptoKeyIAMBindingConditionStateInput interface {
	pulumi.Input

	ToCryptoKeyIAMBindingConditionStateOutput() CryptoKeyIAMBindingConditionStateOutput
	ToCryptoKeyIAMBindingConditionStateOutputWithContext(context.Context) CryptoKeyIAMBindingConditionStateOutput
}

type CryptoKeyIAMBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingConditionState)(nil)).Elem()
}

func (i CryptoKeyIAMBindingConditionStateArgs) ToCryptoKeyIAMBindingConditionStateOutput() CryptoKeyIAMBindingConditionStateOutput {
	return i.ToCryptoKeyIAMBindingConditionStateOutputWithContext(context.Background())
}

func (i CryptoKeyIAMBindingConditionStateArgs) ToCryptoKeyIAMBindingConditionStateOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMBindingConditionStateOutput)
}

type CryptoKeyIAMBindingConditionStateOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMBindingConditionState)(nil)).Elem()
}

func (o CryptoKeyIAMBindingConditionStateOutput) ToCryptoKeyIAMBindingConditionStateOutput() CryptoKeyIAMBindingConditionStateOutput {
	return o
}

func (o CryptoKeyIAMBindingConditionStateOutput) ToCryptoKeyIAMBindingConditionStateOutputWithContext(ctx context.Context) CryptoKeyIAMBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type CryptoKeyIAMMemberConditionInput interface {
	pulumi.Input

	ToCryptoKeyIAMMemberConditionOutput() CryptoKeyIAMMemberConditionOutput
	ToCryptoKeyIAMMemberConditionOutputWithContext(context.Context) CryptoKeyIAMMemberConditionOutput
}

type CryptoKeyIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionOutput() CryptoKeyIAMMemberConditionOutput {
	return i.ToCryptoKeyIAMMemberConditionOutputWithContext(context.Background())
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionOutput)
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return i.ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIAMMemberConditionArgs) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionOutput).ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx)
}

type CryptoKeyIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput
	ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Context) CryptoKeyIAMMemberConditionPtrOutput
}

type cryptoKeyIAMMemberConditionPtrType CryptoKeyIAMMemberConditionArgs

func CryptoKeyIAMMemberConditionPtr(v *CryptoKeyIAMMemberConditionArgs) CryptoKeyIAMMemberConditionPtrInput {
	return (*cryptoKeyIAMMemberConditionPtrType)(v)
}

func (*cryptoKeyIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (i *cryptoKeyIAMMemberConditionPtrType) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return i.ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIAMMemberConditionPtrType) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionPtrOutput)
}

type CryptoKeyIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionOutput() CryptoKeyIAMMemberConditionOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return o.ToCryptoKeyIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIAMMemberConditionOutput) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) *CryptoKeyIAMMemberCondition {
		return &v
	}).(CryptoKeyIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMMemberCondition)(nil)).Elem()
}

func (o CryptoKeyIAMMemberConditionPtrOutput) ToCryptoKeyIAMMemberConditionPtrOutput() CryptoKeyIAMMemberConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionPtrOutput) ToCryptoKeyIAMMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionPtrOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionPtrOutput) Elem() CryptoKeyIAMMemberConditionOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberCondition) CryptoKeyIAMMemberCondition { return *v }).(CryptoKeyIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type CryptoKeyIAMMemberConditionArgsInput interface {
	pulumi.Input

	ToCryptoKeyIAMMemberConditionArgsOutput() CryptoKeyIAMMemberConditionArgsOutput
	ToCryptoKeyIAMMemberConditionArgsOutputWithContext(context.Context) CryptoKeyIAMMemberConditionArgsOutput
}

type CryptoKeyIAMMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberConditionArgs)(nil)).Elem()
}

func (i CryptoKeyIAMMemberConditionArgsArgs) ToCryptoKeyIAMMemberConditionArgsOutput() CryptoKeyIAMMemberConditionArgsOutput {
	return i.ToCryptoKeyIAMMemberConditionArgsOutputWithContext(context.Background())
}

func (i CryptoKeyIAMMemberConditionArgsArgs) ToCryptoKeyIAMMemberConditionArgsOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionArgsOutput)
}

func (i CryptoKeyIAMMemberConditionArgsArgs) ToCryptoKeyIAMMemberConditionArgsPtrOutput() CryptoKeyIAMMemberConditionArgsPtrOutput {
	return i.ToCryptoKeyIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIAMMemberConditionArgsArgs) ToCryptoKeyIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionArgsOutput).ToCryptoKeyIAMMemberConditionArgsPtrOutputWithContext(ctx)
}

type CryptoKeyIAMMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToCryptoKeyIAMMemberConditionArgsPtrOutput() CryptoKeyIAMMemberConditionArgsPtrOutput
	ToCryptoKeyIAMMemberConditionArgsPtrOutputWithContext(context.Context) CryptoKeyIAMMemberConditionArgsPtrOutput
}

type cryptoKeyIAMMemberConditionArgsPtrType CryptoKeyIAMMemberConditionArgsArgs

func CryptoKeyIAMMemberConditionArgsPtr(v *CryptoKeyIAMMemberConditionArgsArgs) CryptoKeyIAMMemberConditionArgsPtrInput {
	return (*cryptoKeyIAMMemberConditionArgsPtrType)(v)
}

func (*cryptoKeyIAMMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMMemberConditionArgs)(nil)).Elem()
}

func (i *cryptoKeyIAMMemberConditionArgsPtrType) ToCryptoKeyIAMMemberConditionArgsPtrOutput() CryptoKeyIAMMemberConditionArgsPtrOutput {
	return i.ToCryptoKeyIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIAMMemberConditionArgsPtrType) ToCryptoKeyIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionArgsPtrOutput)
}

type CryptoKeyIAMMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberConditionArgs)(nil)).Elem()
}

func (o CryptoKeyIAMMemberConditionArgsOutput) ToCryptoKeyIAMMemberConditionArgsOutput() CryptoKeyIAMMemberConditionArgsOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionArgsOutput) ToCryptoKeyIAMMemberConditionArgsOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionArgsOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionArgsOutput) ToCryptoKeyIAMMemberConditionArgsPtrOutput() CryptoKeyIAMMemberConditionArgsPtrOutput {
	return o.ToCryptoKeyIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIAMMemberConditionArgsOutput) ToCryptoKeyIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionArgs) *CryptoKeyIAMMemberConditionArgs {
		return &v
	}).(CryptoKeyIAMMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIAMMemberConditionArgs)(nil)).Elem()
}

func (o CryptoKeyIAMMemberConditionArgsPtrOutput) ToCryptoKeyIAMMemberConditionArgsPtrOutput() CryptoKeyIAMMemberConditionArgsPtrOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionArgsPtrOutput) ToCryptoKeyIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionArgsPtrOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionArgsPtrOutput) Elem() CryptoKeyIAMMemberConditionArgsOutput {
	return o.ApplyT(func(v *CryptoKeyIAMMemberConditionArgs) CryptoKeyIAMMemberConditionArgs { return *v }).(CryptoKeyIAMMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIAMMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type CryptoKeyIAMMemberConditionStateInput interface {
	pulumi.Input

	ToCryptoKeyIAMMemberConditionStateOutput() CryptoKeyIAMMemberConditionStateOutput
	ToCryptoKeyIAMMemberConditionStateOutputWithContext(context.Context) CryptoKeyIAMMemberConditionStateOutput
}

type CryptoKeyIAMMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIAMMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberConditionState)(nil)).Elem()
}

func (i CryptoKeyIAMMemberConditionStateArgs) ToCryptoKeyIAMMemberConditionStateOutput() CryptoKeyIAMMemberConditionStateOutput {
	return i.ToCryptoKeyIAMMemberConditionStateOutputWithContext(context.Background())
}

func (i CryptoKeyIAMMemberConditionStateArgs) ToCryptoKeyIAMMemberConditionStateOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIAMMemberConditionStateOutput)
}

type CryptoKeyIAMMemberConditionStateOutput struct{ *pulumi.OutputState }

func (CryptoKeyIAMMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIAMMemberConditionState)(nil)).Elem()
}

func (o CryptoKeyIAMMemberConditionStateOutput) ToCryptoKeyIAMMemberConditionStateOutput() CryptoKeyIAMMemberConditionStateOutput {
	return o
}

func (o CryptoKeyIAMMemberConditionStateOutput) ToCryptoKeyIAMMemberConditionStateOutputWithContext(ctx context.Context) CryptoKeyIAMMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o CryptoKeyIAMMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIAMMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIAMMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIAMMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyVersionTemplate struct {
	Algorithm       string  `pulumi:"algorithm"`
	ProtectionLevel *string `pulumi:"protectionLevel"`
}

type CryptoKeyVersionTemplateInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput
	ToCryptoKeyVersionTemplateOutputWithContext(context.Context) CryptoKeyVersionTemplateOutput
}

type CryptoKeyVersionTemplateArgs struct {
	Algorithm       pulumi.StringInput    `pulumi:"algorithm"`
	ProtectionLevel pulumi.StringPtrInput `pulumi:"protectionLevel"`
}

func (CryptoKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return i.ToCryptoKeyVersionTemplateOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput)
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput).ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx)
}

type CryptoKeyVersionTemplatePtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput
	ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Context) CryptoKeyVersionTemplatePtrOutput
}

type cryptoKeyVersionTemplatePtrType CryptoKeyVersionTemplateArgs

func CryptoKeyVersionTemplatePtr(v *CryptoKeyVersionTemplateArgs) CryptoKeyVersionTemplatePtrInput {
	return (*cryptoKeyVersionTemplatePtrType)(v)
}

func (*cryptoKeyVersionTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplatePtrOutput)
}

type CryptoKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *CryptoKeyVersionTemplate {
		return &v
	}).(CryptoKeyVersionTemplatePtrOutput)
}
func (o CryptoKeyVersionTemplateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o CryptoKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplatePtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) Elem() CryptoKeyVersionTemplateOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) CryptoKeyVersionTemplate { return *v }).(CryptoKeyVersionTemplateOutput)
}

func (o CryptoKeyVersionTemplatePtrOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o CryptoKeyVersionTemplatePtrOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplateArgs struct {
	Algorithm       string  `pulumi:"algorithm"`
	ProtectionLevel *string `pulumi:"protectionLevel"`
}

type CryptoKeyVersionTemplateArgsInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateArgsOutput() CryptoKeyVersionTemplateArgsOutput
	ToCryptoKeyVersionTemplateArgsOutputWithContext(context.Context) CryptoKeyVersionTemplateArgsOutput
}

type CryptoKeyVersionTemplateArgsArgs struct {
	Algorithm       pulumi.StringInput    `pulumi:"algorithm"`
	ProtectionLevel pulumi.StringPtrInput `pulumi:"protectionLevel"`
}

func (CryptoKeyVersionTemplateArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplateArgs)(nil)).Elem()
}

func (i CryptoKeyVersionTemplateArgsArgs) ToCryptoKeyVersionTemplateArgsOutput() CryptoKeyVersionTemplateArgsOutput {
	return i.ToCryptoKeyVersionTemplateArgsOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgsArgs) ToCryptoKeyVersionTemplateArgsOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateArgsOutput)
}

func (i CryptoKeyVersionTemplateArgsArgs) ToCryptoKeyVersionTemplateArgsPtrOutput() CryptoKeyVersionTemplateArgsPtrOutput {
	return i.ToCryptoKeyVersionTemplateArgsPtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgsArgs) ToCryptoKeyVersionTemplateArgsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateArgsOutput).ToCryptoKeyVersionTemplateArgsPtrOutputWithContext(ctx)
}

type CryptoKeyVersionTemplateArgsPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateArgsPtrOutput() CryptoKeyVersionTemplateArgsPtrOutput
	ToCryptoKeyVersionTemplateArgsPtrOutputWithContext(context.Context) CryptoKeyVersionTemplateArgsPtrOutput
}

type cryptoKeyVersionTemplateArgsPtrType CryptoKeyVersionTemplateArgsArgs

func CryptoKeyVersionTemplateArgsPtr(v *CryptoKeyVersionTemplateArgsArgs) CryptoKeyVersionTemplateArgsPtrInput {
	return (*cryptoKeyVersionTemplateArgsPtrType)(v)
}

func (*cryptoKeyVersionTemplateArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplateArgs)(nil)).Elem()
}

func (i *cryptoKeyVersionTemplateArgsPtrType) ToCryptoKeyVersionTemplateArgsPtrOutput() CryptoKeyVersionTemplateArgsPtrOutput {
	return i.ToCryptoKeyVersionTemplateArgsPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionTemplateArgsPtrType) ToCryptoKeyVersionTemplateArgsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateArgsPtrOutput)
}

type CryptoKeyVersionTemplateArgsOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplateArgs)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateArgsOutput) ToCryptoKeyVersionTemplateArgsOutput() CryptoKeyVersionTemplateArgsOutput {
	return o
}

func (o CryptoKeyVersionTemplateArgsOutput) ToCryptoKeyVersionTemplateArgsOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateArgsOutput {
	return o
}

func (o CryptoKeyVersionTemplateArgsOutput) ToCryptoKeyVersionTemplateArgsPtrOutput() CryptoKeyVersionTemplateArgsPtrOutput {
	return o.ToCryptoKeyVersionTemplateArgsPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateArgsOutput) ToCryptoKeyVersionTemplateArgsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateArgsPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplateArgs) *CryptoKeyVersionTemplateArgs {
		return &v
	}).(CryptoKeyVersionTemplateArgsPtrOutput)
}
func (o CryptoKeyVersionTemplateArgsOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplateArgs) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o CryptoKeyVersionTemplateArgsOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplateArgs) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplateArgsPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplateArgs)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateArgsPtrOutput) ToCryptoKeyVersionTemplateArgsPtrOutput() CryptoKeyVersionTemplateArgsPtrOutput {
	return o
}

func (o CryptoKeyVersionTemplateArgsPtrOutput) ToCryptoKeyVersionTemplateArgsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateArgsPtrOutput {
	return o
}

func (o CryptoKeyVersionTemplateArgsPtrOutput) Elem() CryptoKeyVersionTemplateArgsOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplateArgs) CryptoKeyVersionTemplateArgs { return *v }).(CryptoKeyVersionTemplateArgsOutput)
}

func (o CryptoKeyVersionTemplateArgsPtrOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplateArgs) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o CryptoKeyVersionTemplateArgsPtrOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplateArgs) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplateState struct {
	Algorithm       string  `pulumi:"algorithm"`
	ProtectionLevel *string `pulumi:"protectionLevel"`
}

type CryptoKeyVersionTemplateStateInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateStateOutput() CryptoKeyVersionTemplateStateOutput
	ToCryptoKeyVersionTemplateStateOutputWithContext(context.Context) CryptoKeyVersionTemplateStateOutput
}

type CryptoKeyVersionTemplateStateArgs struct {
	Algorithm       pulumi.StringInput    `pulumi:"algorithm"`
	ProtectionLevel pulumi.StringPtrInput `pulumi:"protectionLevel"`
}

func (CryptoKeyVersionTemplateStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplateState)(nil)).Elem()
}

func (i CryptoKeyVersionTemplateStateArgs) ToCryptoKeyVersionTemplateStateOutput() CryptoKeyVersionTemplateStateOutput {
	return i.ToCryptoKeyVersionTemplateStateOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateStateArgs) ToCryptoKeyVersionTemplateStateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateStateOutput)
}

type CryptoKeyVersionTemplateStateOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplateState)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateStateOutput) ToCryptoKeyVersionTemplateStateOutput() CryptoKeyVersionTemplateStateOutput {
	return o
}

func (o CryptoKeyVersionTemplateStateOutput) ToCryptoKeyVersionTemplateStateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateStateOutput {
	return o
}

func (o CryptoKeyVersionTemplateStateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplateState) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o CryptoKeyVersionTemplateStateOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplateState) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

type KeyRingIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type KeyRingIAMBindingConditionInput interface {
	pulumi.Input

	ToKeyRingIAMBindingConditionOutput() KeyRingIAMBindingConditionOutput
	ToKeyRingIAMBindingConditionOutputWithContext(context.Context) KeyRingIAMBindingConditionOutput
}

type KeyRingIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingCondition)(nil)).Elem()
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionOutput() KeyRingIAMBindingConditionOutput {
	return i.ToKeyRingIAMBindingConditionOutputWithContext(context.Background())
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionOutput)
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return i.ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i KeyRingIAMBindingConditionArgs) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionOutput).ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx)
}

type KeyRingIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput
	ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Context) KeyRingIAMBindingConditionPtrOutput
}

type keyRingIAMBindingConditionPtrType KeyRingIAMBindingConditionArgs

func KeyRingIAMBindingConditionPtr(v *KeyRingIAMBindingConditionArgs) KeyRingIAMBindingConditionPtrInput {
	return (*keyRingIAMBindingConditionPtrType)(v)
}

func (*keyRingIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMBindingCondition)(nil)).Elem()
}

func (i *keyRingIAMBindingConditionPtrType) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return i.ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *keyRingIAMBindingConditionPtrType) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionPtrOutput)
}

type KeyRingIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (KeyRingIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingCondition)(nil)).Elem()
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionOutput() KeyRingIAMBindingConditionOutput {
	return o
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionOutput {
	return o
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return o.ToKeyRingIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o KeyRingIAMBindingConditionOutput) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) *KeyRingIAMBindingCondition {
		return &v
	}).(KeyRingIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMBindingCondition)(nil)).Elem()
}

func (o KeyRingIAMBindingConditionPtrOutput) ToKeyRingIAMBindingConditionPtrOutput() KeyRingIAMBindingConditionPtrOutput {
	return o
}

func (o KeyRingIAMBindingConditionPtrOutput) ToKeyRingIAMBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionPtrOutput {
	return o
}

func (o KeyRingIAMBindingConditionPtrOutput) Elem() KeyRingIAMBindingConditionOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingCondition) KeyRingIAMBindingCondition { return *v }).(KeyRingIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type KeyRingIAMBindingConditionArgsInput interface {
	pulumi.Input

	ToKeyRingIAMBindingConditionArgsOutput() KeyRingIAMBindingConditionArgsOutput
	ToKeyRingIAMBindingConditionArgsOutputWithContext(context.Context) KeyRingIAMBindingConditionArgsOutput
}

type KeyRingIAMBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingConditionArgs)(nil)).Elem()
}

func (i KeyRingIAMBindingConditionArgsArgs) ToKeyRingIAMBindingConditionArgsOutput() KeyRingIAMBindingConditionArgsOutput {
	return i.ToKeyRingIAMBindingConditionArgsOutputWithContext(context.Background())
}

func (i KeyRingIAMBindingConditionArgsArgs) ToKeyRingIAMBindingConditionArgsOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionArgsOutput)
}

func (i KeyRingIAMBindingConditionArgsArgs) ToKeyRingIAMBindingConditionArgsPtrOutput() KeyRingIAMBindingConditionArgsPtrOutput {
	return i.ToKeyRingIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i KeyRingIAMBindingConditionArgsArgs) ToKeyRingIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionArgsOutput).ToKeyRingIAMBindingConditionArgsPtrOutputWithContext(ctx)
}

type KeyRingIAMBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToKeyRingIAMBindingConditionArgsPtrOutput() KeyRingIAMBindingConditionArgsPtrOutput
	ToKeyRingIAMBindingConditionArgsPtrOutputWithContext(context.Context) KeyRingIAMBindingConditionArgsPtrOutput
}

type keyRingIAMBindingConditionArgsPtrType KeyRingIAMBindingConditionArgsArgs

func KeyRingIAMBindingConditionArgsPtr(v *KeyRingIAMBindingConditionArgsArgs) KeyRingIAMBindingConditionArgsPtrInput {
	return (*keyRingIAMBindingConditionArgsPtrType)(v)
}

func (*keyRingIAMBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMBindingConditionArgs)(nil)).Elem()
}

func (i *keyRingIAMBindingConditionArgsPtrType) ToKeyRingIAMBindingConditionArgsPtrOutput() KeyRingIAMBindingConditionArgsPtrOutput {
	return i.ToKeyRingIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *keyRingIAMBindingConditionArgsPtrType) ToKeyRingIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionArgsPtrOutput)
}

type KeyRingIAMBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (KeyRingIAMBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingConditionArgs)(nil)).Elem()
}

func (o KeyRingIAMBindingConditionArgsOutput) ToKeyRingIAMBindingConditionArgsOutput() KeyRingIAMBindingConditionArgsOutput {
	return o
}

func (o KeyRingIAMBindingConditionArgsOutput) ToKeyRingIAMBindingConditionArgsOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionArgsOutput {
	return o
}

func (o KeyRingIAMBindingConditionArgsOutput) ToKeyRingIAMBindingConditionArgsPtrOutput() KeyRingIAMBindingConditionArgsPtrOutput {
	return o.ToKeyRingIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o KeyRingIAMBindingConditionArgsOutput) ToKeyRingIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionArgs) *KeyRingIAMBindingConditionArgs {
		return &v
	}).(KeyRingIAMBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIAMBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMBindingConditionArgs)(nil)).Elem()
}

func (o KeyRingIAMBindingConditionArgsPtrOutput) ToKeyRingIAMBindingConditionArgsPtrOutput() KeyRingIAMBindingConditionArgsPtrOutput {
	return o
}

func (o KeyRingIAMBindingConditionArgsPtrOutput) ToKeyRingIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionArgsPtrOutput {
	return o
}

func (o KeyRingIAMBindingConditionArgsPtrOutput) Elem() KeyRingIAMBindingConditionArgsOutput {
	return o.ApplyT(func(v *KeyRingIAMBindingConditionArgs) KeyRingIAMBindingConditionArgs { return *v }).(KeyRingIAMBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type KeyRingIAMBindingConditionStateInput interface {
	pulumi.Input

	ToKeyRingIAMBindingConditionStateOutput() KeyRingIAMBindingConditionStateOutput
	ToKeyRingIAMBindingConditionStateOutputWithContext(context.Context) KeyRingIAMBindingConditionStateOutput
}

type KeyRingIAMBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingConditionState)(nil)).Elem()
}

func (i KeyRingIAMBindingConditionStateArgs) ToKeyRingIAMBindingConditionStateOutput() KeyRingIAMBindingConditionStateOutput {
	return i.ToKeyRingIAMBindingConditionStateOutputWithContext(context.Background())
}

func (i KeyRingIAMBindingConditionStateArgs) ToKeyRingIAMBindingConditionStateOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMBindingConditionStateOutput)
}

type KeyRingIAMBindingConditionStateOutput struct{ *pulumi.OutputState }

func (KeyRingIAMBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMBindingConditionState)(nil)).Elem()
}

func (o KeyRingIAMBindingConditionStateOutput) ToKeyRingIAMBindingConditionStateOutput() KeyRingIAMBindingConditionStateOutput {
	return o
}

func (o KeyRingIAMBindingConditionStateOutput) ToKeyRingIAMBindingConditionStateOutputWithContext(ctx context.Context) KeyRingIAMBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type KeyRingIAMMemberConditionInput interface {
	pulumi.Input

	ToKeyRingIAMMemberConditionOutput() KeyRingIAMMemberConditionOutput
	ToKeyRingIAMMemberConditionOutputWithContext(context.Context) KeyRingIAMMemberConditionOutput
}

type KeyRingIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberCondition)(nil)).Elem()
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionOutput() KeyRingIAMMemberConditionOutput {
	return i.ToKeyRingIAMMemberConditionOutputWithContext(context.Background())
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionOutput)
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return i.ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i KeyRingIAMMemberConditionArgs) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionOutput).ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx)
}

type KeyRingIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput
	ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Context) KeyRingIAMMemberConditionPtrOutput
}

type keyRingIAMMemberConditionPtrType KeyRingIAMMemberConditionArgs

func KeyRingIAMMemberConditionPtr(v *KeyRingIAMMemberConditionArgs) KeyRingIAMMemberConditionPtrInput {
	return (*keyRingIAMMemberConditionPtrType)(v)
}

func (*keyRingIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMMemberCondition)(nil)).Elem()
}

func (i *keyRingIAMMemberConditionPtrType) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return i.ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *keyRingIAMMemberConditionPtrType) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionPtrOutput)
}

type KeyRingIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (KeyRingIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberCondition)(nil)).Elem()
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionOutput() KeyRingIAMMemberConditionOutput {
	return o
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionOutput {
	return o
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return o.ToKeyRingIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o KeyRingIAMMemberConditionOutput) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) *KeyRingIAMMemberCondition {
		return &v
	}).(KeyRingIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMMemberCondition)(nil)).Elem()
}

func (o KeyRingIAMMemberConditionPtrOutput) ToKeyRingIAMMemberConditionPtrOutput() KeyRingIAMMemberConditionPtrOutput {
	return o
}

func (o KeyRingIAMMemberConditionPtrOutput) ToKeyRingIAMMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionPtrOutput {
	return o
}

func (o KeyRingIAMMemberConditionPtrOutput) Elem() KeyRingIAMMemberConditionOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberCondition) KeyRingIAMMemberCondition { return *v }).(KeyRingIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type KeyRingIAMMemberConditionArgsInput interface {
	pulumi.Input

	ToKeyRingIAMMemberConditionArgsOutput() KeyRingIAMMemberConditionArgsOutput
	ToKeyRingIAMMemberConditionArgsOutputWithContext(context.Context) KeyRingIAMMemberConditionArgsOutput
}

type KeyRingIAMMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberConditionArgs)(nil)).Elem()
}

func (i KeyRingIAMMemberConditionArgsArgs) ToKeyRingIAMMemberConditionArgsOutput() KeyRingIAMMemberConditionArgsOutput {
	return i.ToKeyRingIAMMemberConditionArgsOutputWithContext(context.Background())
}

func (i KeyRingIAMMemberConditionArgsArgs) ToKeyRingIAMMemberConditionArgsOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionArgsOutput)
}

func (i KeyRingIAMMemberConditionArgsArgs) ToKeyRingIAMMemberConditionArgsPtrOutput() KeyRingIAMMemberConditionArgsPtrOutput {
	return i.ToKeyRingIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i KeyRingIAMMemberConditionArgsArgs) ToKeyRingIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionArgsOutput).ToKeyRingIAMMemberConditionArgsPtrOutputWithContext(ctx)
}

type KeyRingIAMMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToKeyRingIAMMemberConditionArgsPtrOutput() KeyRingIAMMemberConditionArgsPtrOutput
	ToKeyRingIAMMemberConditionArgsPtrOutputWithContext(context.Context) KeyRingIAMMemberConditionArgsPtrOutput
}

type keyRingIAMMemberConditionArgsPtrType KeyRingIAMMemberConditionArgsArgs

func KeyRingIAMMemberConditionArgsPtr(v *KeyRingIAMMemberConditionArgsArgs) KeyRingIAMMemberConditionArgsPtrInput {
	return (*keyRingIAMMemberConditionArgsPtrType)(v)
}

func (*keyRingIAMMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMMemberConditionArgs)(nil)).Elem()
}

func (i *keyRingIAMMemberConditionArgsPtrType) ToKeyRingIAMMemberConditionArgsPtrOutput() KeyRingIAMMemberConditionArgsPtrOutput {
	return i.ToKeyRingIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *keyRingIAMMemberConditionArgsPtrType) ToKeyRingIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionArgsPtrOutput)
}

type KeyRingIAMMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (KeyRingIAMMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberConditionArgs)(nil)).Elem()
}

func (o KeyRingIAMMemberConditionArgsOutput) ToKeyRingIAMMemberConditionArgsOutput() KeyRingIAMMemberConditionArgsOutput {
	return o
}

func (o KeyRingIAMMemberConditionArgsOutput) ToKeyRingIAMMemberConditionArgsOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionArgsOutput {
	return o
}

func (o KeyRingIAMMemberConditionArgsOutput) ToKeyRingIAMMemberConditionArgsPtrOutput() KeyRingIAMMemberConditionArgsPtrOutput {
	return o.ToKeyRingIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o KeyRingIAMMemberConditionArgsOutput) ToKeyRingIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionArgs) *KeyRingIAMMemberConditionArgs {
		return &v
	}).(KeyRingIAMMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIAMMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIAMMemberConditionArgs)(nil)).Elem()
}

func (o KeyRingIAMMemberConditionArgsPtrOutput) ToKeyRingIAMMemberConditionArgsPtrOutput() KeyRingIAMMemberConditionArgsPtrOutput {
	return o
}

func (o KeyRingIAMMemberConditionArgsPtrOutput) ToKeyRingIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionArgsPtrOutput {
	return o
}

func (o KeyRingIAMMemberConditionArgsPtrOutput) Elem() KeyRingIAMMemberConditionArgsOutput {
	return o.ApplyT(func(v *KeyRingIAMMemberConditionArgs) KeyRingIAMMemberConditionArgs { return *v }).(KeyRingIAMMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIAMMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type KeyRingIAMMemberConditionStateInput interface {
	pulumi.Input

	ToKeyRingIAMMemberConditionStateOutput() KeyRingIAMMemberConditionStateOutput
	ToKeyRingIAMMemberConditionStateOutputWithContext(context.Context) KeyRingIAMMemberConditionStateOutput
}

type KeyRingIAMMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIAMMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberConditionState)(nil)).Elem()
}

func (i KeyRingIAMMemberConditionStateArgs) ToKeyRingIAMMemberConditionStateOutput() KeyRingIAMMemberConditionStateOutput {
	return i.ToKeyRingIAMMemberConditionStateOutputWithContext(context.Background())
}

func (i KeyRingIAMMemberConditionStateArgs) ToKeyRingIAMMemberConditionStateOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIAMMemberConditionStateOutput)
}

type KeyRingIAMMemberConditionStateOutput struct{ *pulumi.OutputState }

func (KeyRingIAMMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIAMMemberConditionState)(nil)).Elem()
}

func (o KeyRingIAMMemberConditionStateOutput) ToKeyRingIAMMemberConditionStateOutput() KeyRingIAMMemberConditionStateOutput {
	return o
}

func (o KeyRingIAMMemberConditionStateOutput) ToKeyRingIAMMemberConditionStateOutputWithContext(ctx context.Context) KeyRingIAMMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o KeyRingIAMMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIAMMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIAMMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIAMMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type RegistryCredential struct {
	// The certificate format and data.
	PublicKeyCertificate RegistryCredentialPublicKeyCertificate `pulumi:"publicKeyCertificate"`
}

type RegistryCredentialInput interface {
	pulumi.Input

	ToRegistryCredentialOutput() RegistryCredentialOutput
	ToRegistryCredentialOutputWithContext(context.Context) RegistryCredentialOutput
}

type RegistryCredentialArgs struct {
	// The certificate format and data.
	PublicKeyCertificate RegistryCredentialPublicKeyCertificateInput `pulumi:"publicKeyCertificate"`
}

func (RegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return i.ToRegistryCredentialOutputWithContext(context.Background())
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialOutput)
}

type RegistryCredentialArrayInput interface {
	pulumi.Input

	ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput
	ToRegistryCredentialArrayOutputWithContext(context.Context) RegistryCredentialArrayOutput
}

type RegistryCredentialArray []RegistryCredentialInput

func (RegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return i.ToRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialArrayOutput)
}

type RegistryCredentialOutput struct{ *pulumi.OutputState }

func (RegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return o
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return o
}

// The certificate format and data.
func (o RegistryCredentialOutput) PublicKeyCertificate() RegistryCredentialPublicKeyCertificateOutput {
	return o.ApplyT(func(v RegistryCredential) RegistryCredentialPublicKeyCertificate { return v.PublicKeyCertificate }).(RegistryCredentialPublicKeyCertificateOutput)
}

type RegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) Index(i pulumi.IntInput) RegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredential {
		return vs[0].([]RegistryCredential)[vs[1].(int)]
	}).(RegistryCredentialOutput)
}

type RegistryCredentialArgs struct {
	// The certificate format and data.
	PublicKeyCertificate RegistryCredentialPublicKeyCertificateArgs `pulumi:"publicKeyCertificate"`
}

type RegistryCredentialArgsInput interface {
	pulumi.Input

	ToRegistryCredentialArgsOutput() RegistryCredentialArgsOutput
	ToRegistryCredentialArgsOutputWithContext(context.Context) RegistryCredentialArgsOutput
}

type RegistryCredentialArgsArgs struct {
	// The certificate format and data.
	PublicKeyCertificate RegistryCredentialPublicKeyCertificateArgsInput `pulumi:"publicKeyCertificate"`
}

func (RegistryCredentialArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialArgs)(nil)).Elem()
}

func (i RegistryCredentialArgsArgs) ToRegistryCredentialArgsOutput() RegistryCredentialArgsOutput {
	return i.ToRegistryCredentialArgsOutputWithContext(context.Background())
}

func (i RegistryCredentialArgsArgs) ToRegistryCredentialArgsOutputWithContext(ctx context.Context) RegistryCredentialArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialArgsOutput)
}

type RegistryCredentialArgsArrayInput interface {
	pulumi.Input

	ToRegistryCredentialArgsArrayOutput() RegistryCredentialArgsArrayOutput
	ToRegistryCredentialArgsArrayOutputWithContext(context.Context) RegistryCredentialArgsArrayOutput
}

type RegistryCredentialArgsArray []RegistryCredentialArgsInput

func (RegistryCredentialArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredentialArgs)(nil)).Elem()
}

func (i RegistryCredentialArgsArray) ToRegistryCredentialArgsArrayOutput() RegistryCredentialArgsArrayOutput {
	return i.ToRegistryCredentialArgsArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialArgsArray) ToRegistryCredentialArgsArrayOutputWithContext(ctx context.Context) RegistryCredentialArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialArgsArrayOutput)
}

type RegistryCredentialArgsOutput struct{ *pulumi.OutputState }

func (RegistryCredentialArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialArgs)(nil)).Elem()
}

func (o RegistryCredentialArgsOutput) ToRegistryCredentialArgsOutput() RegistryCredentialArgsOutput {
	return o
}

func (o RegistryCredentialArgsOutput) ToRegistryCredentialArgsOutputWithContext(ctx context.Context) RegistryCredentialArgsOutput {
	return o
}

// The certificate format and data.
func (o RegistryCredentialArgsOutput) PublicKeyCertificate() RegistryCredentialPublicKeyCertificateArgsOutput {
	return o.ApplyT(func(v RegistryCredentialArgs) RegistryCredentialPublicKeyCertificateArgs {
		return v.PublicKeyCertificate
	}).(RegistryCredentialPublicKeyCertificateArgsOutput)
}

type RegistryCredentialArgsArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredentialArgs)(nil)).Elem()
}

func (o RegistryCredentialArgsArrayOutput) ToRegistryCredentialArgsArrayOutput() RegistryCredentialArgsArrayOutput {
	return o
}

func (o RegistryCredentialArgsArrayOutput) ToRegistryCredentialArgsArrayOutputWithContext(ctx context.Context) RegistryCredentialArgsArrayOutput {
	return o
}

func (o RegistryCredentialArgsArrayOutput) Index(i pulumi.IntInput) RegistryCredentialArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredentialArgs {
		return vs[0].([]RegistryCredentialArgs)[vs[1].(int)]
	}).(RegistryCredentialArgsOutput)
}

type RegistryCredentialPublicKeyCertificate struct {
	// The certificate data.
	Certificate string `pulumi:"certificate"`
	// The field allows only  `X509_CERTIFICATE_PEM`.
	Format string `pulumi:"format"`
}

type RegistryCredentialPublicKeyCertificateInput interface {
	pulumi.Input

	ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput
	ToRegistryCredentialPublicKeyCertificateOutputWithContext(context.Context) RegistryCredentialPublicKeyCertificateOutput
}

type RegistryCredentialPublicKeyCertificateArgs struct {
	// The certificate data.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// The field allows only  `X509_CERTIFICATE_PEM`.
	Format pulumi.StringInput `pulumi:"format"`
}

func (RegistryCredentialPublicKeyCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificate)(nil)).Elem()
}

func (i RegistryCredentialPublicKeyCertificateArgs) ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput {
	return i.ToRegistryCredentialPublicKeyCertificateOutputWithContext(context.Background())
}

func (i RegistryCredentialPublicKeyCertificateArgs) ToRegistryCredentialPublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialPublicKeyCertificateOutput)
}

type RegistryCredentialPublicKeyCertificateOutput struct{ *pulumi.OutputState }

func (RegistryCredentialPublicKeyCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificate)(nil)).Elem()
}

func (o RegistryCredentialPublicKeyCertificateOutput) ToRegistryCredentialPublicKeyCertificateOutput() RegistryCredentialPublicKeyCertificateOutput {
	return o
}

func (o RegistryCredentialPublicKeyCertificateOutput) ToRegistryCredentialPublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateOutput {
	return o
}

// The certificate data.
func (o RegistryCredentialPublicKeyCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificate) string { return v.Certificate }).(pulumi.StringOutput)
}

// The field allows only  `X509_CERTIFICATE_PEM`.
func (o RegistryCredentialPublicKeyCertificateOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificate) string { return v.Format }).(pulumi.StringOutput)
}

type RegistryCredentialPublicKeyCertificateArgs struct {
	// The certificate data.
	Certificate string `pulumi:"certificate"`
	// The field allows only  `X509_CERTIFICATE_PEM`.
	Format string `pulumi:"format"`
}

type RegistryCredentialPublicKeyCertificateArgsInput interface {
	pulumi.Input

	ToRegistryCredentialPublicKeyCertificateArgsOutput() RegistryCredentialPublicKeyCertificateArgsOutput
	ToRegistryCredentialPublicKeyCertificateArgsOutputWithContext(context.Context) RegistryCredentialPublicKeyCertificateArgsOutput
}

type RegistryCredentialPublicKeyCertificateArgsArgs struct {
	// The certificate data.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// The field allows only  `X509_CERTIFICATE_PEM`.
	Format pulumi.StringInput `pulumi:"format"`
}

func (RegistryCredentialPublicKeyCertificateArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificateArgs)(nil)).Elem()
}

func (i RegistryCredentialPublicKeyCertificateArgsArgs) ToRegistryCredentialPublicKeyCertificateArgsOutput() RegistryCredentialPublicKeyCertificateArgsOutput {
	return i.ToRegistryCredentialPublicKeyCertificateArgsOutputWithContext(context.Background())
}

func (i RegistryCredentialPublicKeyCertificateArgsArgs) ToRegistryCredentialPublicKeyCertificateArgsOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialPublicKeyCertificateArgsOutput)
}

type RegistryCredentialPublicKeyCertificateArgsOutput struct{ *pulumi.OutputState }

func (RegistryCredentialPublicKeyCertificateArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialPublicKeyCertificateArgs)(nil)).Elem()
}

func (o RegistryCredentialPublicKeyCertificateArgsOutput) ToRegistryCredentialPublicKeyCertificateArgsOutput() RegistryCredentialPublicKeyCertificateArgsOutput {
	return o
}

func (o RegistryCredentialPublicKeyCertificateArgsOutput) ToRegistryCredentialPublicKeyCertificateArgsOutputWithContext(ctx context.Context) RegistryCredentialPublicKeyCertificateArgsOutput {
	return o
}

// The certificate data.
func (o RegistryCredentialPublicKeyCertificateArgsOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificateArgs) string { return v.Certificate }).(pulumi.StringOutput)
}

// The field allows only  `X509_CERTIFICATE_PEM`.
func (o RegistryCredentialPublicKeyCertificateArgsOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialPublicKeyCertificateArgs) string { return v.Format }).(pulumi.StringOutput)
}

type RegistryCredentialState struct {
	// The certificate format and data.
	PublicKeyCertificate RegistryCredentialStatePublicKeyCertificate `pulumi:"publicKeyCertificate"`
}

type RegistryCredentialStateInput interface {
	pulumi.Input

	ToRegistryCredentialStateOutput() RegistryCredentialStateOutput
	ToRegistryCredentialStateOutputWithContext(context.Context) RegistryCredentialStateOutput
}

type RegistryCredentialStateArgs struct {
	// The certificate format and data.
	PublicKeyCertificate RegistryCredentialStatePublicKeyCertificateInput `pulumi:"publicKeyCertificate"`
}

func (RegistryCredentialStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialState)(nil)).Elem()
}

func (i RegistryCredentialStateArgs) ToRegistryCredentialStateOutput() RegistryCredentialStateOutput {
	return i.ToRegistryCredentialStateOutputWithContext(context.Background())
}

func (i RegistryCredentialStateArgs) ToRegistryCredentialStateOutputWithContext(ctx context.Context) RegistryCredentialStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialStateOutput)
}

type RegistryCredentialStateArrayInput interface {
	pulumi.Input

	ToRegistryCredentialStateArrayOutput() RegistryCredentialStateArrayOutput
	ToRegistryCredentialStateArrayOutputWithContext(context.Context) RegistryCredentialStateArrayOutput
}

type RegistryCredentialStateArray []RegistryCredentialStateInput

func (RegistryCredentialStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredentialState)(nil)).Elem()
}

func (i RegistryCredentialStateArray) ToRegistryCredentialStateArrayOutput() RegistryCredentialStateArrayOutput {
	return i.ToRegistryCredentialStateArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialStateArray) ToRegistryCredentialStateArrayOutputWithContext(ctx context.Context) RegistryCredentialStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialStateArrayOutput)
}

type RegistryCredentialStateOutput struct{ *pulumi.OutputState }

func (RegistryCredentialStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialState)(nil)).Elem()
}

func (o RegistryCredentialStateOutput) ToRegistryCredentialStateOutput() RegistryCredentialStateOutput {
	return o
}

func (o RegistryCredentialStateOutput) ToRegistryCredentialStateOutputWithContext(ctx context.Context) RegistryCredentialStateOutput {
	return o
}

// The certificate format and data.
func (o RegistryCredentialStateOutput) PublicKeyCertificate() RegistryCredentialStatePublicKeyCertificateOutput {
	return o.ApplyT(func(v RegistryCredentialState) RegistryCredentialStatePublicKeyCertificate {
		return v.PublicKeyCertificate
	}).(RegistryCredentialStatePublicKeyCertificateOutput)
}

type RegistryCredentialStateArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredentialState)(nil)).Elem()
}

func (o RegistryCredentialStateArrayOutput) ToRegistryCredentialStateArrayOutput() RegistryCredentialStateArrayOutput {
	return o
}

func (o RegistryCredentialStateArrayOutput) ToRegistryCredentialStateArrayOutputWithContext(ctx context.Context) RegistryCredentialStateArrayOutput {
	return o
}

func (o RegistryCredentialStateArrayOutput) Index(i pulumi.IntInput) RegistryCredentialStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredentialState {
		return vs[0].([]RegistryCredentialState)[vs[1].(int)]
	}).(RegistryCredentialStateOutput)
}

type RegistryCredentialStatePublicKeyCertificate struct {
	// The certificate data.
	Certificate string `pulumi:"certificate"`
	// The field allows only  `X509_CERTIFICATE_PEM`.
	Format string `pulumi:"format"`
}

type RegistryCredentialStatePublicKeyCertificateInput interface {
	pulumi.Input

	ToRegistryCredentialStatePublicKeyCertificateOutput() RegistryCredentialStatePublicKeyCertificateOutput
	ToRegistryCredentialStatePublicKeyCertificateOutputWithContext(context.Context) RegistryCredentialStatePublicKeyCertificateOutput
}

type RegistryCredentialStatePublicKeyCertificateArgs struct {
	// The certificate data.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// The field allows only  `X509_CERTIFICATE_PEM`.
	Format pulumi.StringInput `pulumi:"format"`
}

func (RegistryCredentialStatePublicKeyCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialStatePublicKeyCertificate)(nil)).Elem()
}

func (i RegistryCredentialStatePublicKeyCertificateArgs) ToRegistryCredentialStatePublicKeyCertificateOutput() RegistryCredentialStatePublicKeyCertificateOutput {
	return i.ToRegistryCredentialStatePublicKeyCertificateOutputWithContext(context.Background())
}

func (i RegistryCredentialStatePublicKeyCertificateArgs) ToRegistryCredentialStatePublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialStatePublicKeyCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialStatePublicKeyCertificateOutput)
}

type RegistryCredentialStatePublicKeyCertificateOutput struct{ *pulumi.OutputState }

func (RegistryCredentialStatePublicKeyCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialStatePublicKeyCertificate)(nil)).Elem()
}

func (o RegistryCredentialStatePublicKeyCertificateOutput) ToRegistryCredentialStatePublicKeyCertificateOutput() RegistryCredentialStatePublicKeyCertificateOutput {
	return o
}

func (o RegistryCredentialStatePublicKeyCertificateOutput) ToRegistryCredentialStatePublicKeyCertificateOutputWithContext(ctx context.Context) RegistryCredentialStatePublicKeyCertificateOutput {
	return o
}

// The certificate data.
func (o RegistryCredentialStatePublicKeyCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialStatePublicKeyCertificate) string { return v.Certificate }).(pulumi.StringOutput)
}

// The field allows only  `X509_CERTIFICATE_PEM`.
func (o RegistryCredentialStatePublicKeyCertificateOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialStatePublicKeyCertificate) string { return v.Format }).(pulumi.StringOutput)
}

type RegistryEventNotificationConfigItem struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string
	// exactly, this configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty value can
	// only be used for the last `eventNotificationConfigs` item.
	SubfolderMatches *string `pulumi:"subfolderMatches"`
}

type RegistryEventNotificationConfigItemInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput
	ToRegistryEventNotificationConfigItemOutputWithContext(context.Context) RegistryEventNotificationConfigItemOutput
}

type RegistryEventNotificationConfigItemArgs struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string
	// exactly, this configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty value can
	// only be used for the last `eventNotificationConfigs` item.
	SubfolderMatches pulumi.StringPtrInput `pulumi:"subfolderMatches"`
}

func (RegistryEventNotificationConfigItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return i.ToRegistryEventNotificationConfigItemOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemOutput)
}

type RegistryEventNotificationConfigItemArrayInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput
	ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Context) RegistryEventNotificationConfigItemArrayOutput
}

type RegistryEventNotificationConfigItemArray []RegistryEventNotificationConfigItemInput

func (RegistryEventNotificationConfigItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return i.ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemArrayOutput)
}

type RegistryEventNotificationConfigItemOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return o
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return o
}

// PubSub topic name to publish device state updates.
func (o RegistryEventNotificationConfigItemOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

// If the subfolder name matches this string
// exactly, this configuration will be used. The string must not include the
// leading '/' character. If empty, all strings are matched. Empty value can
// only be used for the last `eventNotificationConfigs` item.
func (o RegistryEventNotificationConfigItemOutput) SubfolderMatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) *string { return v.SubfolderMatches }).(pulumi.StringPtrOutput)
}

type RegistryEventNotificationConfigItemArrayOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) Index(i pulumi.IntInput) RegistryEventNotificationConfigItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryEventNotificationConfigItem {
		return vs[0].([]RegistryEventNotificationConfigItem)[vs[1].(int)]
	}).(RegistryEventNotificationConfigItemOutput)
}

type RegistryHttpConfig struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState string `pulumi:"httpEnabledState"`
}

type RegistryHttpConfigInput interface {
	pulumi.Input

	ToRegistryHttpConfigOutput() RegistryHttpConfigOutput
	ToRegistryHttpConfigOutputWithContext(context.Context) RegistryHttpConfigOutput
}

type RegistryHttpConfigArgs struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState pulumi.StringInput `pulumi:"httpEnabledState"`
}

func (RegistryHttpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfig)(nil)).Elem()
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigOutput() RegistryHttpConfigOutput {
	return i.ToRegistryHttpConfigOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigOutputWithContext(ctx context.Context) RegistryHttpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigOutput)
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return i.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgs) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigOutput).ToRegistryHttpConfigPtrOutputWithContext(ctx)
}

type RegistryHttpConfigPtrInput interface {
	pulumi.Input

	ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput
	ToRegistryHttpConfigPtrOutputWithContext(context.Context) RegistryHttpConfigPtrOutput
}

type registryHttpConfigPtrType RegistryHttpConfigArgs

func RegistryHttpConfigPtr(v *RegistryHttpConfigArgs) RegistryHttpConfigPtrInput {
	return (*registryHttpConfigPtrType)(v)
}

func (*registryHttpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfig)(nil)).Elem()
}

func (i *registryHttpConfigPtrType) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return i.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (i *registryHttpConfigPtrType) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigPtrOutput)
}

type RegistryHttpConfigOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfig)(nil)).Elem()
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigOutput() RegistryHttpConfigOutput {
	return o
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigOutputWithContext(ctx context.Context) RegistryHttpConfigOutput {
	return o
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return o.ToRegistryHttpConfigPtrOutputWithContext(context.Background())
}

func (o RegistryHttpConfigOutput) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return o.ApplyT(func(v RegistryHttpConfig) *RegistryHttpConfig {
		return &v
	}).(RegistryHttpConfigPtrOutput)
}

// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
func (o RegistryHttpConfigOutput) HttpEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryHttpConfig) string { return v.HttpEnabledState }).(pulumi.StringOutput)
}

type RegistryHttpConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfig)(nil)).Elem()
}

func (o RegistryHttpConfigPtrOutput) ToRegistryHttpConfigPtrOutput() RegistryHttpConfigPtrOutput {
	return o
}

func (o RegistryHttpConfigPtrOutput) ToRegistryHttpConfigPtrOutputWithContext(ctx context.Context) RegistryHttpConfigPtrOutput {
	return o
}

func (o RegistryHttpConfigPtrOutput) Elem() RegistryHttpConfigOutput {
	return o.ApplyT(func(v *RegistryHttpConfig) RegistryHttpConfig { return *v }).(RegistryHttpConfigOutput)
}

// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
func (o RegistryHttpConfigPtrOutput) HttpEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryHttpConfig) string { return v.HttpEnabledState }).(pulumi.StringOutput)
}

type RegistryHttpConfigArgs struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState string `pulumi:"httpEnabledState"`
}

type RegistryHttpConfigArgsInput interface {
	pulumi.Input

	ToRegistryHttpConfigArgsOutput() RegistryHttpConfigArgsOutput
	ToRegistryHttpConfigArgsOutputWithContext(context.Context) RegistryHttpConfigArgsOutput
}

type RegistryHttpConfigArgsArgs struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState pulumi.StringInput `pulumi:"httpEnabledState"`
}

func (RegistryHttpConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfigArgs)(nil)).Elem()
}

func (i RegistryHttpConfigArgsArgs) ToRegistryHttpConfigArgsOutput() RegistryHttpConfigArgsOutput {
	return i.ToRegistryHttpConfigArgsOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgsArgs) ToRegistryHttpConfigArgsOutputWithContext(ctx context.Context) RegistryHttpConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigArgsOutput)
}

func (i RegistryHttpConfigArgsArgs) ToRegistryHttpConfigArgsPtrOutput() RegistryHttpConfigArgsPtrOutput {
	return i.ToRegistryHttpConfigArgsPtrOutputWithContext(context.Background())
}

func (i RegistryHttpConfigArgsArgs) ToRegistryHttpConfigArgsPtrOutputWithContext(ctx context.Context) RegistryHttpConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigArgsOutput).ToRegistryHttpConfigArgsPtrOutputWithContext(ctx)
}

type RegistryHttpConfigArgsPtrInput interface {
	pulumi.Input

	ToRegistryHttpConfigArgsPtrOutput() RegistryHttpConfigArgsPtrOutput
	ToRegistryHttpConfigArgsPtrOutputWithContext(context.Context) RegistryHttpConfigArgsPtrOutput
}

type registryHttpConfigArgsPtrType RegistryHttpConfigArgsArgs

func RegistryHttpConfigArgsPtr(v *RegistryHttpConfigArgsArgs) RegistryHttpConfigArgsPtrInput {
	return (*registryHttpConfigArgsPtrType)(v)
}

func (*registryHttpConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfigArgs)(nil)).Elem()
}

func (i *registryHttpConfigArgsPtrType) ToRegistryHttpConfigArgsPtrOutput() RegistryHttpConfigArgsPtrOutput {
	return i.ToRegistryHttpConfigArgsPtrOutputWithContext(context.Background())
}

func (i *registryHttpConfigArgsPtrType) ToRegistryHttpConfigArgsPtrOutputWithContext(ctx context.Context) RegistryHttpConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigArgsPtrOutput)
}

type RegistryHttpConfigArgsOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfigArgs)(nil)).Elem()
}

func (o RegistryHttpConfigArgsOutput) ToRegistryHttpConfigArgsOutput() RegistryHttpConfigArgsOutput {
	return o
}

func (o RegistryHttpConfigArgsOutput) ToRegistryHttpConfigArgsOutputWithContext(ctx context.Context) RegistryHttpConfigArgsOutput {
	return o
}

func (o RegistryHttpConfigArgsOutput) ToRegistryHttpConfigArgsPtrOutput() RegistryHttpConfigArgsPtrOutput {
	return o.ToRegistryHttpConfigArgsPtrOutputWithContext(context.Background())
}

func (o RegistryHttpConfigArgsOutput) ToRegistryHttpConfigArgsPtrOutputWithContext(ctx context.Context) RegistryHttpConfigArgsPtrOutput {
	return o.ApplyT(func(v RegistryHttpConfigArgs) *RegistryHttpConfigArgs {
		return &v
	}).(RegistryHttpConfigArgsPtrOutput)
}

// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
func (o RegistryHttpConfigArgsOutput) HttpEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryHttpConfigArgs) string { return v.HttpEnabledState }).(pulumi.StringOutput)
}

type RegistryHttpConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryHttpConfigArgs)(nil)).Elem()
}

func (o RegistryHttpConfigArgsPtrOutput) ToRegistryHttpConfigArgsPtrOutput() RegistryHttpConfigArgsPtrOutput {
	return o
}

func (o RegistryHttpConfigArgsPtrOutput) ToRegistryHttpConfigArgsPtrOutputWithContext(ctx context.Context) RegistryHttpConfigArgsPtrOutput {
	return o
}

func (o RegistryHttpConfigArgsPtrOutput) Elem() RegistryHttpConfigArgsOutput {
	return o.ApplyT(func(v *RegistryHttpConfigArgs) RegistryHttpConfigArgs { return *v }).(RegistryHttpConfigArgsOutput)
}

// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
func (o RegistryHttpConfigArgsPtrOutput) HttpEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryHttpConfigArgs) string { return v.HttpEnabledState }).(pulumi.StringOutput)
}

type RegistryHttpConfigState struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState string `pulumi:"httpEnabledState"`
}

type RegistryHttpConfigStateInput interface {
	pulumi.Input

	ToRegistryHttpConfigStateOutput() RegistryHttpConfigStateOutput
	ToRegistryHttpConfigStateOutputWithContext(context.Context) RegistryHttpConfigStateOutput
}

type RegistryHttpConfigStateArgs struct {
	// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
	HttpEnabledState pulumi.StringInput `pulumi:"httpEnabledState"`
}

func (RegistryHttpConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfigState)(nil)).Elem()
}

func (i RegistryHttpConfigStateArgs) ToRegistryHttpConfigStateOutput() RegistryHttpConfigStateOutput {
	return i.ToRegistryHttpConfigStateOutputWithContext(context.Background())
}

func (i RegistryHttpConfigStateArgs) ToRegistryHttpConfigStateOutputWithContext(ctx context.Context) RegistryHttpConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryHttpConfigStateOutput)
}

type RegistryHttpConfigStateOutput struct{ *pulumi.OutputState }

func (RegistryHttpConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryHttpConfigState)(nil)).Elem()
}

func (o RegistryHttpConfigStateOutput) ToRegistryHttpConfigStateOutput() RegistryHttpConfigStateOutput {
	return o
}

func (o RegistryHttpConfigStateOutput) ToRegistryHttpConfigStateOutputWithContext(ctx context.Context) RegistryHttpConfigStateOutput {
	return o
}

// The field allows `HTTP_ENABLED` or `HTTP_DISABLED`.
func (o RegistryHttpConfigStateOutput) HttpEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryHttpConfigState) string { return v.HttpEnabledState }).(pulumi.StringOutput)
}

type RegistryMqttConfig struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState string `pulumi:"mqttEnabledState"`
}

type RegistryMqttConfigInput interface {
	pulumi.Input

	ToRegistryMqttConfigOutput() RegistryMqttConfigOutput
	ToRegistryMqttConfigOutputWithContext(context.Context) RegistryMqttConfigOutput
}

type RegistryMqttConfigArgs struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState pulumi.StringInput `pulumi:"mqttEnabledState"`
}

func (RegistryMqttConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfig)(nil)).Elem()
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigOutput() RegistryMqttConfigOutput {
	return i.ToRegistryMqttConfigOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigOutputWithContext(ctx context.Context) RegistryMqttConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigOutput)
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return i.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgs) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigOutput).ToRegistryMqttConfigPtrOutputWithContext(ctx)
}

type RegistryMqttConfigPtrInput interface {
	pulumi.Input

	ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput
	ToRegistryMqttConfigPtrOutputWithContext(context.Context) RegistryMqttConfigPtrOutput
}

type registryMqttConfigPtrType RegistryMqttConfigArgs

func RegistryMqttConfigPtr(v *RegistryMqttConfigArgs) RegistryMqttConfigPtrInput {
	return (*registryMqttConfigPtrType)(v)
}

func (*registryMqttConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfig)(nil)).Elem()
}

func (i *registryMqttConfigPtrType) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return i.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (i *registryMqttConfigPtrType) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigPtrOutput)
}

type RegistryMqttConfigOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfig)(nil)).Elem()
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigOutput() RegistryMqttConfigOutput {
	return o
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigOutputWithContext(ctx context.Context) RegistryMqttConfigOutput {
	return o
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return o.ToRegistryMqttConfigPtrOutputWithContext(context.Background())
}

func (o RegistryMqttConfigOutput) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return o.ApplyT(func(v RegistryMqttConfig) *RegistryMqttConfig {
		return &v
	}).(RegistryMqttConfigPtrOutput)
}

// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
func (o RegistryMqttConfigOutput) MqttEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryMqttConfig) string { return v.MqttEnabledState }).(pulumi.StringOutput)
}

type RegistryMqttConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfig)(nil)).Elem()
}

func (o RegistryMqttConfigPtrOutput) ToRegistryMqttConfigPtrOutput() RegistryMqttConfigPtrOutput {
	return o
}

func (o RegistryMqttConfigPtrOutput) ToRegistryMqttConfigPtrOutputWithContext(ctx context.Context) RegistryMqttConfigPtrOutput {
	return o
}

func (o RegistryMqttConfigPtrOutput) Elem() RegistryMqttConfigOutput {
	return o.ApplyT(func(v *RegistryMqttConfig) RegistryMqttConfig { return *v }).(RegistryMqttConfigOutput)
}

// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
func (o RegistryMqttConfigPtrOutput) MqttEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryMqttConfig) string { return v.MqttEnabledState }).(pulumi.StringOutput)
}

type RegistryMqttConfigArgs struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState string `pulumi:"mqttEnabledState"`
}

type RegistryMqttConfigArgsInput interface {
	pulumi.Input

	ToRegistryMqttConfigArgsOutput() RegistryMqttConfigArgsOutput
	ToRegistryMqttConfigArgsOutputWithContext(context.Context) RegistryMqttConfigArgsOutput
}

type RegistryMqttConfigArgsArgs struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState pulumi.StringInput `pulumi:"mqttEnabledState"`
}

func (RegistryMqttConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfigArgs)(nil)).Elem()
}

func (i RegistryMqttConfigArgsArgs) ToRegistryMqttConfigArgsOutput() RegistryMqttConfigArgsOutput {
	return i.ToRegistryMqttConfigArgsOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgsArgs) ToRegistryMqttConfigArgsOutputWithContext(ctx context.Context) RegistryMqttConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigArgsOutput)
}

func (i RegistryMqttConfigArgsArgs) ToRegistryMqttConfigArgsPtrOutput() RegistryMqttConfigArgsPtrOutput {
	return i.ToRegistryMqttConfigArgsPtrOutputWithContext(context.Background())
}

func (i RegistryMqttConfigArgsArgs) ToRegistryMqttConfigArgsPtrOutputWithContext(ctx context.Context) RegistryMqttConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigArgsOutput).ToRegistryMqttConfigArgsPtrOutputWithContext(ctx)
}

type RegistryMqttConfigArgsPtrInput interface {
	pulumi.Input

	ToRegistryMqttConfigArgsPtrOutput() RegistryMqttConfigArgsPtrOutput
	ToRegistryMqttConfigArgsPtrOutputWithContext(context.Context) RegistryMqttConfigArgsPtrOutput
}

type registryMqttConfigArgsPtrType RegistryMqttConfigArgsArgs

func RegistryMqttConfigArgsPtr(v *RegistryMqttConfigArgsArgs) RegistryMqttConfigArgsPtrInput {
	return (*registryMqttConfigArgsPtrType)(v)
}

func (*registryMqttConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfigArgs)(nil)).Elem()
}

func (i *registryMqttConfigArgsPtrType) ToRegistryMqttConfigArgsPtrOutput() RegistryMqttConfigArgsPtrOutput {
	return i.ToRegistryMqttConfigArgsPtrOutputWithContext(context.Background())
}

func (i *registryMqttConfigArgsPtrType) ToRegistryMqttConfigArgsPtrOutputWithContext(ctx context.Context) RegistryMqttConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigArgsPtrOutput)
}

type RegistryMqttConfigArgsOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfigArgs)(nil)).Elem()
}

func (o RegistryMqttConfigArgsOutput) ToRegistryMqttConfigArgsOutput() RegistryMqttConfigArgsOutput {
	return o
}

func (o RegistryMqttConfigArgsOutput) ToRegistryMqttConfigArgsOutputWithContext(ctx context.Context) RegistryMqttConfigArgsOutput {
	return o
}

func (o RegistryMqttConfigArgsOutput) ToRegistryMqttConfigArgsPtrOutput() RegistryMqttConfigArgsPtrOutput {
	return o.ToRegistryMqttConfigArgsPtrOutputWithContext(context.Background())
}

func (o RegistryMqttConfigArgsOutput) ToRegistryMqttConfigArgsPtrOutputWithContext(ctx context.Context) RegistryMqttConfigArgsPtrOutput {
	return o.ApplyT(func(v RegistryMqttConfigArgs) *RegistryMqttConfigArgs {
		return &v
	}).(RegistryMqttConfigArgsPtrOutput)
}

// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
func (o RegistryMqttConfigArgsOutput) MqttEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryMqttConfigArgs) string { return v.MqttEnabledState }).(pulumi.StringOutput)
}

type RegistryMqttConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryMqttConfigArgs)(nil)).Elem()
}

func (o RegistryMqttConfigArgsPtrOutput) ToRegistryMqttConfigArgsPtrOutput() RegistryMqttConfigArgsPtrOutput {
	return o
}

func (o RegistryMqttConfigArgsPtrOutput) ToRegistryMqttConfigArgsPtrOutputWithContext(ctx context.Context) RegistryMqttConfigArgsPtrOutput {
	return o
}

func (o RegistryMqttConfigArgsPtrOutput) Elem() RegistryMqttConfigArgsOutput {
	return o.ApplyT(func(v *RegistryMqttConfigArgs) RegistryMqttConfigArgs { return *v }).(RegistryMqttConfigArgsOutput)
}

// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
func (o RegistryMqttConfigArgsPtrOutput) MqttEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryMqttConfigArgs) string { return v.MqttEnabledState }).(pulumi.StringOutput)
}

type RegistryMqttConfigState struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState string `pulumi:"mqttEnabledState"`
}

type RegistryMqttConfigStateInput interface {
	pulumi.Input

	ToRegistryMqttConfigStateOutput() RegistryMqttConfigStateOutput
	ToRegistryMqttConfigStateOutputWithContext(context.Context) RegistryMqttConfigStateOutput
}

type RegistryMqttConfigStateArgs struct {
	// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
	MqttEnabledState pulumi.StringInput `pulumi:"mqttEnabledState"`
}

func (RegistryMqttConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfigState)(nil)).Elem()
}

func (i RegistryMqttConfigStateArgs) ToRegistryMqttConfigStateOutput() RegistryMqttConfigStateOutput {
	return i.ToRegistryMqttConfigStateOutputWithContext(context.Background())
}

func (i RegistryMqttConfigStateArgs) ToRegistryMqttConfigStateOutputWithContext(ctx context.Context) RegistryMqttConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMqttConfigStateOutput)
}

type RegistryMqttConfigStateOutput struct{ *pulumi.OutputState }

func (RegistryMqttConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryMqttConfigState)(nil)).Elem()
}

func (o RegistryMqttConfigStateOutput) ToRegistryMqttConfigStateOutput() RegistryMqttConfigStateOutput {
	return o
}

func (o RegistryMqttConfigStateOutput) ToRegistryMqttConfigStateOutputWithContext(ctx context.Context) RegistryMqttConfigStateOutput {
	return o
}

// The field allows `MQTT_ENABLED` or `MQTT_DISABLED`.
func (o RegistryMqttConfigStateOutput) MqttEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryMqttConfigState) string { return v.MqttEnabledState }).(pulumi.StringOutput)
}

type RegistryStateNotificationConfig struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
}

type RegistryStateNotificationConfigInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput
	ToRegistryStateNotificationConfigOutputWithContext(context.Context) RegistryStateNotificationConfigOutput
}

type RegistryStateNotificationConfigArgs struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
}

func (RegistryStateNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfig)(nil)).Elem()
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput {
	return i.ToRegistryStateNotificationConfigOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigOutputWithContext(ctx context.Context) RegistryStateNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigOutput)
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return i.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgs) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigOutput).ToRegistryStateNotificationConfigPtrOutputWithContext(ctx)
}

type RegistryStateNotificationConfigPtrInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput
	ToRegistryStateNotificationConfigPtrOutputWithContext(context.Context) RegistryStateNotificationConfigPtrOutput
}

type registryStateNotificationConfigPtrType RegistryStateNotificationConfigArgs

func RegistryStateNotificationConfigPtr(v *RegistryStateNotificationConfigArgs) RegistryStateNotificationConfigPtrInput {
	return (*registryStateNotificationConfigPtrType)(v)
}

func (*registryStateNotificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfig)(nil)).Elem()
}

func (i *registryStateNotificationConfigPtrType) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return i.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *registryStateNotificationConfigPtrType) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigPtrOutput)
}

type RegistryStateNotificationConfigOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfig)(nil)).Elem()
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigOutput() RegistryStateNotificationConfigOutput {
	return o
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigOutputWithContext(ctx context.Context) RegistryStateNotificationConfigOutput {
	return o
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return o.ToRegistryStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (o RegistryStateNotificationConfigOutput) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfig) *RegistryStateNotificationConfig {
		return &v
	}).(RegistryStateNotificationConfigPtrOutput)
}

// PubSub topic name to publish device state updates.
func (o RegistryStateNotificationConfigOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfig) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

type RegistryStateNotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfig)(nil)).Elem()
}

func (o RegistryStateNotificationConfigPtrOutput) ToRegistryStateNotificationConfigPtrOutput() RegistryStateNotificationConfigPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigPtrOutput) ToRegistryStateNotificationConfigPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigPtrOutput) Elem() RegistryStateNotificationConfigOutput {
	return o.ApplyT(func(v *RegistryStateNotificationConfig) RegistryStateNotificationConfig { return *v }).(RegistryStateNotificationConfigOutput)
}

// PubSub topic name to publish device state updates.
func (o RegistryStateNotificationConfigPtrOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfig) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

type RegistryStateNotificationConfigArgs struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
}

type RegistryStateNotificationConfigArgsInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigArgsOutput() RegistryStateNotificationConfigArgsOutput
	ToRegistryStateNotificationConfigArgsOutputWithContext(context.Context) RegistryStateNotificationConfigArgsOutput
}

type RegistryStateNotificationConfigArgsArgs struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
}

func (RegistryStateNotificationConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfigArgs)(nil)).Elem()
}

func (i RegistryStateNotificationConfigArgsArgs) ToRegistryStateNotificationConfigArgsOutput() RegistryStateNotificationConfigArgsOutput {
	return i.ToRegistryStateNotificationConfigArgsOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgsArgs) ToRegistryStateNotificationConfigArgsOutputWithContext(ctx context.Context) RegistryStateNotificationConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigArgsOutput)
}

func (i RegistryStateNotificationConfigArgsArgs) ToRegistryStateNotificationConfigArgsPtrOutput() RegistryStateNotificationConfigArgsPtrOutput {
	return i.ToRegistryStateNotificationConfigArgsPtrOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigArgsArgs) ToRegistryStateNotificationConfigArgsPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigArgsOutput).ToRegistryStateNotificationConfigArgsPtrOutputWithContext(ctx)
}

type RegistryStateNotificationConfigArgsPtrInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigArgsPtrOutput() RegistryStateNotificationConfigArgsPtrOutput
	ToRegistryStateNotificationConfigArgsPtrOutputWithContext(context.Context) RegistryStateNotificationConfigArgsPtrOutput
}

type registryStateNotificationConfigArgsPtrType RegistryStateNotificationConfigArgsArgs

func RegistryStateNotificationConfigArgsPtr(v *RegistryStateNotificationConfigArgsArgs) RegistryStateNotificationConfigArgsPtrInput {
	return (*registryStateNotificationConfigArgsPtrType)(v)
}

func (*registryStateNotificationConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfigArgs)(nil)).Elem()
}

func (i *registryStateNotificationConfigArgsPtrType) ToRegistryStateNotificationConfigArgsPtrOutput() RegistryStateNotificationConfigArgsPtrOutput {
	return i.ToRegistryStateNotificationConfigArgsPtrOutputWithContext(context.Background())
}

func (i *registryStateNotificationConfigArgsPtrType) ToRegistryStateNotificationConfigArgsPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigArgsPtrOutput)
}

type RegistryStateNotificationConfigArgsOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfigArgs)(nil)).Elem()
}

func (o RegistryStateNotificationConfigArgsOutput) ToRegistryStateNotificationConfigArgsOutput() RegistryStateNotificationConfigArgsOutput {
	return o
}

func (o RegistryStateNotificationConfigArgsOutput) ToRegistryStateNotificationConfigArgsOutputWithContext(ctx context.Context) RegistryStateNotificationConfigArgsOutput {
	return o
}

func (o RegistryStateNotificationConfigArgsOutput) ToRegistryStateNotificationConfigArgsPtrOutput() RegistryStateNotificationConfigArgsPtrOutput {
	return o.ToRegistryStateNotificationConfigArgsPtrOutputWithContext(context.Background())
}

func (o RegistryStateNotificationConfigArgsOutput) ToRegistryStateNotificationConfigArgsPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigArgsPtrOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfigArgs) *RegistryStateNotificationConfigArgs {
		return &v
	}).(RegistryStateNotificationConfigArgsPtrOutput)
}

// PubSub topic name to publish device state updates.
func (o RegistryStateNotificationConfigArgsOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfigArgs) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

type RegistryStateNotificationConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryStateNotificationConfigArgs)(nil)).Elem()
}

func (o RegistryStateNotificationConfigArgsPtrOutput) ToRegistryStateNotificationConfigArgsPtrOutput() RegistryStateNotificationConfigArgsPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigArgsPtrOutput) ToRegistryStateNotificationConfigArgsPtrOutputWithContext(ctx context.Context) RegistryStateNotificationConfigArgsPtrOutput {
	return o
}

func (o RegistryStateNotificationConfigArgsPtrOutput) Elem() RegistryStateNotificationConfigArgsOutput {
	return o.ApplyT(func(v *RegistryStateNotificationConfigArgs) RegistryStateNotificationConfigArgs { return *v }).(RegistryStateNotificationConfigArgsOutput)
}

// PubSub topic name to publish device state updates.
func (o RegistryStateNotificationConfigArgsPtrOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfigArgs) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

type RegistryStateNotificationConfigState struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
}

type RegistryStateNotificationConfigStateInput interface {
	pulumi.Input

	ToRegistryStateNotificationConfigStateOutput() RegistryStateNotificationConfigStateOutput
	ToRegistryStateNotificationConfigStateOutputWithContext(context.Context) RegistryStateNotificationConfigStateOutput
}

type RegistryStateNotificationConfigStateArgs struct {
	// PubSub topic name to publish device state updates.
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
}

func (RegistryStateNotificationConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfigState)(nil)).Elem()
}

func (i RegistryStateNotificationConfigStateArgs) ToRegistryStateNotificationConfigStateOutput() RegistryStateNotificationConfigStateOutput {
	return i.ToRegistryStateNotificationConfigStateOutputWithContext(context.Background())
}

func (i RegistryStateNotificationConfigStateArgs) ToRegistryStateNotificationConfigStateOutputWithContext(ctx context.Context) RegistryStateNotificationConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStateNotificationConfigStateOutput)
}

type RegistryStateNotificationConfigStateOutput struct{ *pulumi.OutputState }

func (RegistryStateNotificationConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStateNotificationConfigState)(nil)).Elem()
}

func (o RegistryStateNotificationConfigStateOutput) ToRegistryStateNotificationConfigStateOutput() RegistryStateNotificationConfigStateOutput {
	return o
}

func (o RegistryStateNotificationConfigStateOutput) ToRegistryStateNotificationConfigStateOutputWithContext(ctx context.Context) RegistryStateNotificationConfigStateOutput {
	return o
}

// PubSub topic name to publish device state updates.
func (o RegistryStateNotificationConfigStateOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryStateNotificationConfigState) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyVersionPublicKey struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm string `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem string `pulumi:"pem"`
}

type GetKMSCryptoKeyVersionPublicKeyInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput
	ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(context.Context) GetKMSCryptoKeyVersionPublicKeyOutput
}

type GetKMSCryptoKeyVersionPublicKeyArgs struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem pulumi.StringInput `pulumi:"pem"`
}

func (GetKMSCryptoKeyVersionPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionPublicKeyArgs) ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput {
	return i.ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionPublicKeyArgs) ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionPublicKeyOutput)
}

type GetKMSCryptoKeyVersionPublicKeyOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionPublicKeyOutput) ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput {
	return o
}

func (o GetKMSCryptoKeyVersionPublicKeyOutput) ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyOutput {
	return o
}

// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o GetKMSCryptoKeyVersionPublicKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionPublicKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
func (o GetKMSCryptoKeyVersionPublicKeyOutput) Pem() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionPublicKey) string { return v.Pem }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyVersionTemplate struct {
	Algorithm       string `pulumi:"algorithm"`
	ProtectionLevel string `pulumi:"protectionLevel"`
}

type GetKMSCryptoKeyVersionTemplateInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput
	ToGetKMSCryptoKeyVersionTemplateOutputWithContext(context.Context) GetKMSCryptoKeyVersionTemplateOutput
}

type GetKMSCryptoKeyVersionTemplateArgs struct {
	Algorithm       pulumi.StringInput `pulumi:"algorithm"`
	ProtectionLevel pulumi.StringInput `pulumi:"protectionLevel"`
}

func (GetKMSCryptoKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionTemplateArgs) ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput {
	return i.ToGetKMSCryptoKeyVersionTemplateOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionTemplateArgs) ToGetKMSCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionTemplateOutput)
}

type GetKMSCryptoKeyVersionTemplateArrayInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput
	ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput
}

type GetKMSCryptoKeyVersionTemplateArray []GetKMSCryptoKeyVersionTemplateInput

func (GetKMSCryptoKeyVersionTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionTemplateArray) ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput {
	return i.ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionTemplateArray) ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionTemplateArrayOutput)
}

type GetKMSCryptoKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ToGetKMSCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionTemplate) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyVersionTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) Index(i pulumi.IntInput) GetKMSCryptoKeyVersionTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKMSCryptoKeyVersionTemplate {
		return vs[0].([]GetKMSCryptoKeyVersionTemplate)[vs[1].(int)]
	}).(GetKMSCryptoKeyVersionTemplateOutput)
}

func init() {
	pulumi.RegisterOutputType(CryptoKeyIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMBindingConditionStateOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyIAMMemberConditionStateOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplatePtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateArgsOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateArgsPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateStateOutput{})
	pulumi.RegisterOutputType(KeyRingIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(KeyRingIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(KeyRingIAMBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(KeyRingIAMBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(KeyRingIAMBindingConditionStateOutput{})
	pulumi.RegisterOutputType(KeyRingIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(KeyRingIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(KeyRingIAMMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(KeyRingIAMMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(KeyRingIAMMemberConditionStateOutput{})
	pulumi.RegisterOutputType(RegistryCredentialOutput{})
	pulumi.RegisterOutputType(RegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialArgsOutput{})
	pulumi.RegisterOutputType(RegistryCredentialArgsArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialPublicKeyCertificateOutput{})
	pulumi.RegisterOutputType(RegistryCredentialPublicKeyCertificateArgsOutput{})
	pulumi.RegisterOutputType(RegistryCredentialStateOutput{})
	pulumi.RegisterOutputType(RegistryCredentialStateArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialStatePublicKeyCertificateOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemArrayOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigPtrOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigArgsOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(RegistryHttpConfigStateOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigPtrOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigArgsOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(RegistryMqttConfigStateOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigArgsOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(RegistryStateNotificationConfigStateOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionPublicKeyOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionTemplateArrayOutput{})
}
