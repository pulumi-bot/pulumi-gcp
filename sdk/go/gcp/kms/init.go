// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "gcp:kms/cryptoKey:CryptoKey":
		r, err = NewCryptoKey(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding":
		r, err = NewCryptoKeyIAMBinding(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/cryptoKeyIAMMember:CryptoKeyIAMMember":
		r, err = NewCryptoKeyIAMMember(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy":
		r, err = NewCryptoKeyIAMPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/keyRing:KeyRing":
		r, err = NewKeyRing(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/keyRingIAMBinding:KeyRingIAMBinding":
		r, err = NewKeyRingIAMBinding(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/keyRingIAMMember:KeyRingIAMMember":
		r, err = NewKeyRingIAMMember(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/keyRingIAMPolicy:KeyRingIAMPolicy":
		r, err = NewKeyRingIAMPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/keyRingImportJob:KeyRingImportJob":
		r, err = NewKeyRingImportJob(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/registry:Registry":
		r, err = NewRegistry(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:kms/secretCiphertext:SecretCiphertext":
		r, err = NewSecretCiphertext(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := gcp.PkgVersion()
	if err != nil {
		panic(fmt.Errorf("failed to determine package version: %v", err))
	}
	pulumi.RegisterResourceModule(
		"gcp",
		"kms/cryptoKey",
		&module{version},
	)
}
