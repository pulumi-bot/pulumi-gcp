// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sourcerepo

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Three different resources help you manage your IAM policy for Pubsub Topic. Each of these resources serves a different use case:
// 
// * `pubsub.TopicIAMPolicy`: Authoritative. Sets the IAM policy for the topic and replaces any existing policy already attached.
// * `pubsub.TopicIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the topic are preserved.
// * `pubsub.TopicIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the topic are preserved.
// 
// > **Note:** `pubsub.TopicIAMPolicy` **cannot** be used in conjunction with `pubsub.TopicIAMBinding` and `pubsub.TopicIAMMember` or they will fight over what your policy should be.
// 
// > **Note:** `pubsub.TopicIAMBinding` resources **can be** used in conjunction with `pubsub.TopicIAMMember` resources **only if** they do not grant privilege to the same role.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/sourcerepo_repository_iam_policy.html.markdown.
type RepositoryIamPolicy struct {
	s *pulumi.ResourceState
}

// NewRepositoryIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRepositoryIamPolicy(ctx *pulumi.Context,
	name string, args *RepositoryIamPolicyArgs, opts ...pulumi.ResourceOpt) (*RepositoryIamPolicy, error) {
	if args == nil || args.PolicyData == nil {
		return nil, errors.New("missing required argument 'PolicyData'")
	}
	if args == nil || args.Repository == nil {
		return nil, errors.New("missing required argument 'Repository'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["policyData"] = nil
		inputs["project"] = nil
		inputs["repository"] = nil
	} else {
		inputs["policyData"] = args.PolicyData
		inputs["project"] = args.Project
		inputs["repository"] = args.Repository
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RepositoryIamPolicy{s: s}, nil
}

// GetRepositoryIamPolicy gets an existing RepositoryIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RepositoryIamPolicyState, opts ...pulumi.ResourceOpt) (*RepositoryIamPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["etag"] = state.Etag
		inputs["policyData"] = state.PolicyData
		inputs["project"] = state.Project
		inputs["repository"] = state.Repository
	}
	s, err := ctx.ReadResource("gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RepositoryIamPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RepositoryIamPolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RepositoryIamPolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// (Computed) The etag of the topic's IAM policy.
func (r *RepositoryIamPolicy) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// The policy data generated by
// a `googleIamPolicy` data source.
func (r *RepositoryIamPolicy) PolicyData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyData"])
}

// The project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *RepositoryIamPolicy) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *RepositoryIamPolicy) Repository() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["repository"])
}

// Input properties used for looking up and filtering RepositoryIamPolicy resources.
type RepositoryIamPolicyState struct {
	// (Computed) The etag of the topic's IAM policy.
	Etag interface{}
	// The policy data generated by
	// a `googleIamPolicy` data source.
	PolicyData interface{}
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	Repository interface{}
}

// The set of arguments for constructing a RepositoryIamPolicy resource.
type RepositoryIamPolicyArgs struct {
	// The policy data generated by
	// a `googleIamPolicy` data source.
	PolicyData interface{}
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	Repository interface{}
}
