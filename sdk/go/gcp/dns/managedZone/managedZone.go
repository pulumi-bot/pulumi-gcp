// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package managedZone

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-gcp/dns/ManagedZoneDnssecConfig"
	"https:/github.com/pulumi/pulumi-gcp/dns/ManagedZoneDnssecConfigDefaultKeySpec"
	"https:/github.com/pulumi/pulumi-gcp/dns/ManagedZoneForwardingConfig"
	"https:/github.com/pulumi/pulumi-gcp/dns/ManagedZoneForwardingConfigTargetNameServer"
	"https:/github.com/pulumi/pulumi-gcp/dns/ManagedZonePeeringConfig"
	"https:/github.com/pulumi/pulumi-gcp/dns/ManagedZonePeeringConfigTargetNetwork"
	"https:/github.com/pulumi/pulumi-gcp/dns/ManagedZonePrivateVisibilityConfig"
	"https:/github.com/pulumi/pulumi-gcp/dns/ManagedZonePrivateVisibilityConfigNetwork"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/dns_managed_zone.html.markdown.
type ManagedZone struct {
	pulumi.CustomResourceState

	// A textual description field. Defaults to 'Managed by Terraform'.
	Description pulumi.StringOutput `pulumi:"description"`
	// The DNS name of this managed zone, for instance "example.com.".
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// DNSSEC configuration
	DnssecConfig dnsManagedZoneDnssecConfig.ManagedZoneDnssecConfigPtrOutput `pulumi:"dnssecConfig"`
	// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field
	// contains the set of destinations to forward to.
	ForwardingConfig dnsManagedZoneForwardingConfig.ManagedZoneForwardingConfigPtrOutput `pulumi:"forwardingConfig"`
	// A set of key/value label pairs to assign to this ManagedZone.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// User assigned name for this resource. Must be unique within the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// Delegate your managed_zone to these virtual name servers; defined by the server
	NameServers pulumi.StringArrayOutput `pulumi:"nameServers"`
	// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the
	// network to peer with.
	PeeringConfig dnsManagedZonePeeringConfig.ManagedZonePeeringConfigPtrOutput `pulumi:"peeringConfig"`
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateVisibilityConfig dnsManagedZonePrivateVisibilityConfig.ManagedZonePrivateVisibilityConfigPtrOutput `pulumi:"privateVisibilityConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private
	// Cloud resources. Must be one of: 'public', 'private'.
	Visibility pulumi.StringPtrOutput `pulumi:"visibility"`
}

// NewManagedZone registers a new resource with the given unique name, arguments, and options.
func NewManagedZone(ctx *pulumi.Context,
	name string, args *ManagedZoneArgs, opts ...pulumi.ResourceOption) (*ManagedZone, error) {
	if args == nil || args.DnsName == nil {
		return nil, errors.New("missing required argument 'DnsName'")
	}
	if args == nil {
		args = &ManagedZoneArgs{}
	}
	if args.Description == nil {
		args.Description = pulumi.StringPtr("Managed by Pulumi")
	}
	var resource ManagedZone
	err := ctx.RegisterResource("gcp:dns/managedZone:ManagedZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedZone gets an existing ManagedZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedZoneState, opts ...pulumi.ResourceOption) (*ManagedZone, error) {
	var resource ManagedZone
	err := ctx.ReadResource("gcp:dns/managedZone:ManagedZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedZone resources.
type managedZoneState struct {
	// A textual description field. Defaults to 'Managed by Terraform'.
	Description *string `pulumi:"description"`
	// The DNS name of this managed zone, for instance "example.com.".
	DnsName *string `pulumi:"dnsName"`
	// DNSSEC configuration
	DnssecConfig *dnsManagedZoneDnssecConfig.ManagedZoneDnssecConfig `pulumi:"dnssecConfig"`
	// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field
	// contains the set of destinations to forward to.
	ForwardingConfig *dnsManagedZoneForwardingConfig.ManagedZoneForwardingConfig `pulumi:"forwardingConfig"`
	// A set of key/value label pairs to assign to this ManagedZone.
	Labels map[string]string `pulumi:"labels"`
	// User assigned name for this resource. Must be unique within the project.
	Name *string `pulumi:"name"`
	// Delegate your managed_zone to these virtual name servers; defined by the server
	NameServers []string `pulumi:"nameServers"`
	// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the
	// network to peer with.
	PeeringConfig *dnsManagedZonePeeringConfig.ManagedZonePeeringConfig `pulumi:"peeringConfig"`
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateVisibilityConfig *dnsManagedZonePrivateVisibilityConfig.ManagedZonePrivateVisibilityConfig `pulumi:"privateVisibilityConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private
	// Cloud resources. Must be one of: 'public', 'private'.
	Visibility *string `pulumi:"visibility"`
}

type ManagedZoneState struct {
	// A textual description field. Defaults to 'Managed by Terraform'.
	Description pulumi.StringPtrInput
	// The DNS name of this managed zone, for instance "example.com.".
	DnsName pulumi.StringPtrInput
	// DNSSEC configuration
	DnssecConfig dnsManagedZoneDnssecConfig.ManagedZoneDnssecConfigPtrInput
	// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field
	// contains the set of destinations to forward to.
	ForwardingConfig dnsManagedZoneForwardingConfig.ManagedZoneForwardingConfigPtrInput
	// A set of key/value label pairs to assign to this ManagedZone.
	Labels pulumi.StringMapInput
	// User assigned name for this resource. Must be unique within the project.
	Name pulumi.StringPtrInput
	// Delegate your managed_zone to these virtual name servers; defined by the server
	NameServers pulumi.StringArrayInput
	// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the
	// network to peer with.
	PeeringConfig dnsManagedZonePeeringConfig.ManagedZonePeeringConfigPtrInput
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateVisibilityConfig dnsManagedZonePrivateVisibilityConfig.ManagedZonePrivateVisibilityConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private
	// Cloud resources. Must be one of: 'public', 'private'.
	Visibility pulumi.StringPtrInput
}

func (ManagedZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedZoneState)(nil)).Elem()
}

type managedZoneArgs struct {
	// A textual description field. Defaults to 'Managed by Terraform'.
	Description *string `pulumi:"description"`
	// The DNS name of this managed zone, for instance "example.com.".
	DnsName string `pulumi:"dnsName"`
	// DNSSEC configuration
	DnssecConfig *dnsManagedZoneDnssecConfig.ManagedZoneDnssecConfig `pulumi:"dnssecConfig"`
	// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field
	// contains the set of destinations to forward to.
	ForwardingConfig *dnsManagedZoneForwardingConfig.ManagedZoneForwardingConfig `pulumi:"forwardingConfig"`
	// A set of key/value label pairs to assign to this ManagedZone.
	Labels map[string]string `pulumi:"labels"`
	// User assigned name for this resource. Must be unique within the project.
	Name *string `pulumi:"name"`
	// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the
	// network to peer with.
	PeeringConfig *dnsManagedZonePeeringConfig.ManagedZonePeeringConfig `pulumi:"peeringConfig"`
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateVisibilityConfig *dnsManagedZonePrivateVisibilityConfig.ManagedZonePrivateVisibilityConfig `pulumi:"privateVisibilityConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private
	// Cloud resources. Must be one of: 'public', 'private'.
	Visibility *string `pulumi:"visibility"`
}

// The set of arguments for constructing a ManagedZone resource.
type ManagedZoneArgs struct {
	// A textual description field. Defaults to 'Managed by Terraform'.
	Description pulumi.StringPtrInput
	// The DNS name of this managed zone, for instance "example.com.".
	DnsName pulumi.StringInput
	// DNSSEC configuration
	DnssecConfig dnsManagedZoneDnssecConfig.ManagedZoneDnssecConfigPtrInput
	// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field
	// contains the set of destinations to forward to.
	ForwardingConfig dnsManagedZoneForwardingConfig.ManagedZoneForwardingConfigPtrInput
	// A set of key/value label pairs to assign to this ManagedZone.
	Labels pulumi.StringMapInput
	// User assigned name for this resource. Must be unique within the project.
	Name pulumi.StringPtrInput
	// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the
	// network to peer with.
	PeeringConfig dnsManagedZonePeeringConfig.ManagedZonePeeringConfigPtrInput
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateVisibilityConfig dnsManagedZonePrivateVisibilityConfig.ManagedZonePrivateVisibilityConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private
	// Cloud resources. Must be one of: 'public', 'private'.
	Visibility pulumi.StringPtrInput
}

func (ManagedZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedZoneArgs)(nil)).Elem()
}

