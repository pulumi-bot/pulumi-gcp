// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AttachedDisk struct {
	s *pulumi.ResourceState
}

// NewAttachedDisk registers a new resource with the given unique name, arguments, and options.
func NewAttachedDisk(ctx *pulumi.Context,
	name string, args *AttachedDiskArgs, opts ...pulumi.ResourceOpt) (*AttachedDisk, error) {
	if args == nil || args.Disk == nil {
		return nil, errors.New("missing required argument 'Disk'")
	}
	if args == nil || args.Instance == nil {
		return nil, errors.New("missing required argument 'Instance'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["deviceName"] = nil
		inputs["disk"] = nil
		inputs["instance"] = nil
		inputs["mode"] = nil
		inputs["project"] = nil
		inputs["zone"] = nil
	} else {
		inputs["deviceName"] = args.DeviceName
		inputs["disk"] = args.Disk
		inputs["instance"] = args.Instance
		inputs["mode"] = args.Mode
		inputs["project"] = args.Project
		inputs["zone"] = args.Zone
	}
	s, err := ctx.RegisterResource("gcp:compute/attachedDisk:AttachedDisk", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AttachedDisk{s: s}, nil
}

// GetAttachedDisk gets an existing AttachedDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachedDisk(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AttachedDiskState, opts ...pulumi.ResourceOpt) (*AttachedDisk, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["deviceName"] = state.DeviceName
		inputs["disk"] = state.Disk
		inputs["instance"] = state.Instance
		inputs["mode"] = state.Mode
		inputs["project"] = state.Project
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:compute/attachedDisk:AttachedDisk", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AttachedDisk{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AttachedDisk) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AttachedDisk) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *AttachedDisk) DeviceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deviceName"])
}

func (r *AttachedDisk) Disk() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["disk"])
}

func (r *AttachedDisk) Instance() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instance"])
}

func (r *AttachedDisk) Mode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mode"])
}

func (r *AttachedDisk) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *AttachedDisk) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering AttachedDisk resources.
type AttachedDiskState struct {
	DeviceName interface{}
	Disk interface{}
	Instance interface{}
	Mode interface{}
	Project interface{}
	Zone interface{}
}

// The set of arguments for constructing a AttachedDisk resource.
type AttachedDiskArgs struct {
	DeviceName interface{}
	Disk interface{}
	Instance interface{}
	Mode interface{}
	Project interface{}
	Zone interface{}
}
