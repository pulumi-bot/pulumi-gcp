// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_subnetwork.html.markdown.
type Subnetwork struct {
	s *pulumi.ResourceState
}

// NewSubnetwork registers a new resource with the given unique name, arguments, and options.
func NewSubnetwork(ctx *pulumi.Context,
	name string, args *SubnetworkArgs, opts ...pulumi.ResourceOpt) (*Subnetwork, error) {
	if args == nil || args.IpCidrRange == nil {
		return nil, errors.New("missing required argument 'IpCidrRange'")
	}
	if args == nil || args.Network == nil {
		return nil, errors.New("missing required argument 'Network'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["ipCidrRange"] = nil
		inputs["logConfig"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["privateIpGoogleAccess"] = nil
		inputs["project"] = nil
		inputs["purpose"] = nil
		inputs["region"] = nil
		inputs["role"] = nil
		inputs["secondaryIpRanges"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["ipCidrRange"] = args.IpCidrRange
		inputs["logConfig"] = args.LogConfig
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["privateIpGoogleAccess"] = args.PrivateIpGoogleAccess
		inputs["project"] = args.Project
		inputs["purpose"] = args.Purpose
		inputs["region"] = args.Region
		inputs["role"] = args.Role
		inputs["secondaryIpRanges"] = args.SecondaryIpRanges
	}
	inputs["creationTimestamp"] = nil
	inputs["fingerprint"] = nil
	inputs["gatewayAddress"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/subnetwork:Subnetwork", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnetwork{s: s}, nil
}

// GetSubnetwork gets an existing Subnetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetwork(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetworkState, opts ...pulumi.ResourceOpt) (*Subnetwork, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["fingerprint"] = state.Fingerprint
		inputs["gatewayAddress"] = state.GatewayAddress
		inputs["ipCidrRange"] = state.IpCidrRange
		inputs["logConfig"] = state.LogConfig
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["privateIpGoogleAccess"] = state.PrivateIpGoogleAccess
		inputs["project"] = state.Project
		inputs["purpose"] = state.Purpose
		inputs["region"] = state.Region
		inputs["role"] = state.Role
		inputs["secondaryIpRanges"] = state.SecondaryIpRanges
		inputs["selfLink"] = state.SelfLink
	}
	s, err := ctx.ReadResource("gcp:compute/subnetwork:Subnetwork", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnetwork{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subnetwork) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subnetwork) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Creation timestamp in RFC3339 text format.
func (r *Subnetwork) CreationTimestamp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

// An optional description of this resource. Provide this property when you create the resource. This field can be set only
// at resource creation time.
func (r *Subnetwork) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Fingerprint of this resource. This field is used internally during updates of this resource.
func (r *Subnetwork) Fingerprint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["fingerprint"])
}

// The gateway address for default routes to reach destination addresses outside this subnetwork.
func (r *Subnetwork) GatewayAddress() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["gatewayAddress"])
}

// The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork.
// For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only IPv4 is
// supported.
func (r *Subnetwork) IpCidrRange() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ipCidrRange"])
}

// Denotes the logging options for the subnetwork flow logs. If logging is enabled logs will be exported to Stackdriver.
// This field cannot be set if the 'purpose' of this subnetwork is 'INTERNAL_HTTPS_LOAD_BALANCER'
func (r *Subnetwork) LogConfig() pulumi.Output {
	return r.s.State["logConfig"]
}

// The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters
// long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (r *Subnetwork) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The network this subnet belongs to. Only networks that are in the distributed mode can have subnetworks.
func (r *Subnetwork) Network() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["network"])
}

// When enabled, VMs in this subnetwork without external IP addresses can access Google APIs and services by using Private
// Google Access.
func (r *Subnetwork) PrivateIpGoogleAccess() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["privateIpGoogleAccess"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Subnetwork) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// The purpose of the resource. This field can be either PRIVATE or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose
// set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing.
// If unspecified, the purpose defaults to PRIVATE. If set to INTERNAL_HTTPS_LOAD_BALANCER you must also set the role.
func (r *Subnetwork) Purpose() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["purpose"])
}

// URL of the GCP region for this subnetwork.
func (r *Subnetwork) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be
// set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A
// BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining.
func (r *Subnetwork) Role() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["role"])
}

// An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such
// VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary
// ranges. This field uses attr-as-block mode to avoid breaking users during the 0.12 upgrade. See [the Attr-as-Block
// page](https://www.terraform.io/docs/configuration/attr-as-blocks.html) for more details.
func (r *Subnetwork) SecondaryIpRanges() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["secondaryIpRanges"])
}

// The URI of the created resource.
func (r *Subnetwork) SelfLink() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["selfLink"])
}

// Input properties used for looking up and filtering Subnetwork resources.
type SubnetworkState struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp interface{}
	// An optional description of this resource. Provide this property when you create the resource. This field can be set
	// only at resource creation time.
	Description interface{}
	// Fingerprint of this resource. This field is used internally during updates of this resource.
	// DeprecationMessage: This field is not useful for users, and has been removed as an output.
	Fingerprint interface{}
	// The gateway address for default routes to reach destination addresses outside this subnetwork.
	GatewayAddress interface{}
	// The range of internal addresses that are owned by this subnetwork. Provide this property when you create the
	// subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only
	// IPv4 is supported.
	IpCidrRange interface{}
	// Denotes the logging options for the subnetwork flow logs. If logging is enabled logs will be exported to Stackdriver.
	// This field cannot be set if the 'purpose' of this subnetwork is 'INTERNAL_HTTPS_LOAD_BALANCER'
	LogConfig interface{}
	// The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters
	// long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The network this subnet belongs to. Only networks that are in the distributed mode can have subnetworks.
	Network interface{}
	// When enabled, VMs in this subnetwork without external IP addresses can access Google APIs and services by using Private
	// Google Access.
	PrivateIpGoogleAccess interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The purpose of the resource. This field can be either PRIVATE or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with
	// purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load
	// Balancing. If unspecified, the purpose defaults to PRIVATE. If set to INTERNAL_HTTPS_LOAD_BALANCER you must also set
	// the role.
	Purpose interface{}
	// URL of the GCP region for this subnetwork.
	Region interface{}
	// The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can
	// be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load
	// Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining.
	Role interface{}
	// An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of
	// such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or
	// secondary ranges. This field uses attr-as-block mode to avoid breaking users during the 0.12 upgrade. See [the
	// Attr-as-Block page](https://www.terraform.io/docs/configuration/attr-as-blocks.html) for more details.
	SecondaryIpRanges interface{}
	// The URI of the created resource.
	SelfLink interface{}
}

// The set of arguments for constructing a Subnetwork resource.
type SubnetworkArgs struct {
	// An optional description of this resource. Provide this property when you create the resource. This field can be set
	// only at resource creation time.
	Description interface{}
	// The range of internal addresses that are owned by this subnetwork. Provide this property when you create the
	// subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only
	// IPv4 is supported.
	IpCidrRange interface{}
	// Denotes the logging options for the subnetwork flow logs. If logging is enabled logs will be exported to Stackdriver.
	// This field cannot be set if the 'purpose' of this subnetwork is 'INTERNAL_HTTPS_LOAD_BALANCER'
	LogConfig interface{}
	// The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters
	// long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The network this subnet belongs to. Only networks that are in the distributed mode can have subnetworks.
	Network interface{}
	// When enabled, VMs in this subnetwork without external IP addresses can access Google APIs and services by using Private
	// Google Access.
	PrivateIpGoogleAccess interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The purpose of the resource. This field can be either PRIVATE or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with
	// purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load
	// Balancing. If unspecified, the purpose defaults to PRIVATE. If set to INTERNAL_HTTPS_LOAD_BALANCER you must also set
	// the role.
	Purpose interface{}
	// URL of the GCP region for this subnetwork.
	Region interface{}
	// The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can
	// be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load
	// Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining.
	Role interface{}
	// An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of
	// such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or
	// secondary ranges. This field uses attr-as-block mode to avoid breaking users during the 0.12 upgrade. See [the
	// Attr-as-Block page](https://www.terraform.io/docs/configuration/attr-as-blocks.html) for more details.
	SecondaryIpRanges interface{}
}
