// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Represents a GlobalForwardingRule resource. Global forwarding rules are
// used to forward traffic to the correct load balancer for HTTP load
// balancing. Global forwarding rules can only be used for HTTP load
// balancing.
// 
// For more information, see
// https://cloud.google.com/compute/docs/load-balancing/http/
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_global_forwarding_rule.html.markdown.
type GlobalForwardingRule struct {
	s *pulumi.ResourceState
}

// NewGlobalForwardingRule registers a new resource with the given unique name, arguments, and options.
func NewGlobalForwardingRule(ctx *pulumi.Context,
	name string, args *GlobalForwardingRuleArgs, opts ...pulumi.ResourceOpt) (*GlobalForwardingRule, error) {
	if args == nil || args.Target == nil {
		return nil, errors.New("missing required argument 'Target'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["ipAddress"] = nil
		inputs["ipProtocol"] = nil
		inputs["ipVersion"] = nil
		inputs["labels"] = nil
		inputs["loadBalancingScheme"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["portRange"] = nil
		inputs["project"] = nil
		inputs["target"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["ipAddress"] = args.IpAddress
		inputs["ipProtocol"] = args.IpProtocol
		inputs["ipVersion"] = args.IpVersion
		inputs["labels"] = args.Labels
		inputs["loadBalancingScheme"] = args.LoadBalancingScheme
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["portRange"] = args.PortRange
		inputs["project"] = args.Project
		inputs["target"] = args.Target
	}
	inputs["labelFingerprint"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/globalForwardingRule:GlobalForwardingRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GlobalForwardingRule{s: s}, nil
}

// GetGlobalForwardingRule gets an existing GlobalForwardingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalForwardingRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GlobalForwardingRuleState, opts ...pulumi.ResourceOpt) (*GlobalForwardingRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["ipAddress"] = state.IpAddress
		inputs["ipProtocol"] = state.IpProtocol
		inputs["ipVersion"] = state.IpVersion
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["loadBalancingScheme"] = state.LoadBalancingScheme
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["portRange"] = state.PortRange
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["target"] = state.Target
	}
	s, err := ctx.ReadResource("gcp:compute/globalForwardingRule:GlobalForwardingRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GlobalForwardingRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GlobalForwardingRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GlobalForwardingRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *GlobalForwardingRule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *GlobalForwardingRule) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

func (r *GlobalForwardingRule) IpProtocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipProtocol"])
}

func (r *GlobalForwardingRule) IpVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipVersion"])
}

func (r *GlobalForwardingRule) LabelFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

func (r *GlobalForwardingRule) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *GlobalForwardingRule) LoadBalancingScheme() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancingScheme"])
}

func (r *GlobalForwardingRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *GlobalForwardingRule) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

func (r *GlobalForwardingRule) PortRange() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["portRange"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *GlobalForwardingRule) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *GlobalForwardingRule) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

func (r *GlobalForwardingRule) Target() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["target"])
}

// Input properties used for looking up and filtering GlobalForwardingRule resources.
type GlobalForwardingRuleState struct {
	Description interface{}
	IpAddress interface{}
	IpProtocol interface{}
	IpVersion interface{}
	LabelFingerprint interface{}
	Labels interface{}
	LoadBalancingScheme interface{}
	Name interface{}
	Network interface{}
	PortRange interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	Target interface{}
}

// The set of arguments for constructing a GlobalForwardingRule resource.
type GlobalForwardingRuleArgs struct {
	Description interface{}
	IpAddress interface{}
	IpProtocol interface{}
	IpVersion interface{}
	Labels interface{}
	LoadBalancingScheme interface{}
	Name interface{}
	Network interface{}
	PortRange interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Target interface{}
}
