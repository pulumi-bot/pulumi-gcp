// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A Region Backend Service defines a regionally-scoped group of virtual
// machines that will serve traffic for load balancing.
// 
// Region backend services can only be used when using internal load balancing.
// For external load balancing, use a global backend service instead.
// 
// 
// To get more information about RegionBackendService, see:
// 
// * [API documentation](https://cloud.google.com/compute/docs/reference/latest/regionBackendServices)
// * How-to Guides
//     * [Internal TCP/UDP Load Balancing](https://cloud.google.com/compute/docs/load-balancing/internal/)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_region_backend_service.html.markdown.
type RegionBackendService struct {
	s *pulumi.ResourceState
}

// NewRegionBackendService registers a new resource with the given unique name, arguments, and options.
func NewRegionBackendService(ctx *pulumi.Context,
	name string, args *RegionBackendServiceArgs, opts ...pulumi.ResourceOpt) (*RegionBackendService, error) {
	if args == nil || args.HealthChecks == nil {
		return nil, errors.New("missing required argument 'HealthChecks'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backends"] = nil
		inputs["connectionDrainingTimeoutSec"] = nil
		inputs["description"] = nil
		inputs["failoverPolicy"] = nil
		inputs["healthChecks"] = nil
		inputs["loadBalancingScheme"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["protocol"] = nil
		inputs["region"] = nil
		inputs["sessionAffinity"] = nil
		inputs["timeoutSec"] = nil
	} else {
		inputs["backends"] = args.Backends
		inputs["connectionDrainingTimeoutSec"] = args.ConnectionDrainingTimeoutSec
		inputs["description"] = args.Description
		inputs["failoverPolicy"] = args.FailoverPolicy
		inputs["healthChecks"] = args.HealthChecks
		inputs["loadBalancingScheme"] = args.LoadBalancingScheme
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["protocol"] = args.Protocol
		inputs["region"] = args.Region
		inputs["sessionAffinity"] = args.SessionAffinity
		inputs["timeoutSec"] = args.TimeoutSec
	}
	inputs["fingerprint"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/regionBackendService:RegionBackendService", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RegionBackendService{s: s}, nil
}

// GetRegionBackendService gets an existing RegionBackendService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionBackendService(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RegionBackendServiceState, opts ...pulumi.ResourceOpt) (*RegionBackendService, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backends"] = state.Backends
		inputs["connectionDrainingTimeoutSec"] = state.ConnectionDrainingTimeoutSec
		inputs["description"] = state.Description
		inputs["failoverPolicy"] = state.FailoverPolicy
		inputs["fingerprint"] = state.Fingerprint
		inputs["healthChecks"] = state.HealthChecks
		inputs["loadBalancingScheme"] = state.LoadBalancingScheme
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["protocol"] = state.Protocol
		inputs["region"] = state.Region
		inputs["selfLink"] = state.SelfLink
		inputs["sessionAffinity"] = state.SessionAffinity
		inputs["timeoutSec"] = state.TimeoutSec
	}
	s, err := ctx.ReadResource("gcp:compute/regionBackendService:RegionBackendService", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RegionBackendService{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RegionBackendService) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RegionBackendService) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *RegionBackendService) Backends() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["backends"])
}

func (r *RegionBackendService) ConnectionDrainingTimeoutSec() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["connectionDrainingTimeoutSec"])
}

func (r *RegionBackendService) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *RegionBackendService) FailoverPolicy() *pulumi.Output {
	return r.s.State["failoverPolicy"]
}

func (r *RegionBackendService) Fingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fingerprint"])
}

func (r *RegionBackendService) HealthChecks() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["healthChecks"])
}

func (r *RegionBackendService) LoadBalancingScheme() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancingScheme"])
}

func (r *RegionBackendService) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *RegionBackendService) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *RegionBackendService) Protocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocol"])
}

func (r *RegionBackendService) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The URI of the created resource.
func (r *RegionBackendService) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

func (r *RegionBackendService) SessionAffinity() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sessionAffinity"])
}

func (r *RegionBackendService) TimeoutSec() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeoutSec"])
}

// Input properties used for looking up and filtering RegionBackendService resources.
type RegionBackendServiceState struct {
	Backends interface{}
	ConnectionDrainingTimeoutSec interface{}
	Description interface{}
	FailoverPolicy interface{}
	Fingerprint interface{}
	HealthChecks interface{}
	LoadBalancingScheme interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Protocol interface{}
	Region interface{}
	// The URI of the created resource.
	SelfLink interface{}
	SessionAffinity interface{}
	TimeoutSec interface{}
}

// The set of arguments for constructing a RegionBackendService resource.
type RegionBackendServiceArgs struct {
	Backends interface{}
	ConnectionDrainingTimeoutSec interface{}
	Description interface{}
	FailoverPolicy interface{}
	HealthChecks interface{}
	LoadBalancingScheme interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Protocol interface{}
	Region interface{}
	SessionAffinity interface{}
	TimeoutSec interface{}
}
