// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Project struct {
	s *pulumi.ResourceState
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOpt) (*Project, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoCreateNetwork"] = nil
		inputs["billingAccount"] = nil
		inputs["folderId"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["orgId"] = nil
		inputs["projectId"] = nil
		inputs["skipDelete"] = nil
	} else {
		inputs["autoCreateNetwork"] = args.AutoCreateNetwork
		inputs["billingAccount"] = args.BillingAccount
		inputs["folderId"] = args.FolderId
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["orgId"] = args.OrgId
		inputs["projectId"] = args.ProjectId
		inputs["skipDelete"] = args.SkipDelete
	}
	inputs["number"] = nil
	s, err := ctx.RegisterResource("gcp:organizations/project:Project", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectState, opts ...pulumi.ResourceOpt) (*Project, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoCreateNetwork"] = state.AutoCreateNetwork
		inputs["billingAccount"] = state.BillingAccount
		inputs["folderId"] = state.FolderId
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["number"] = state.Number
		inputs["orgId"] = state.OrgId
		inputs["projectId"] = state.ProjectId
		inputs["skipDelete"] = state.SkipDelete
	}
	s, err := ctx.ReadResource("gcp:organizations/project:Project", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Project) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Project) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Create the 'default' network automatically.  Default `true`.
// If set to `false`, the default network will be deleted.  Note that, for quota purposes, you
// will still need to have 1 network slot available to create the project succesfully, even if
// you set `auto_create_network` to `false`, since the network will exist momentarily.
func (r *Project) AutoCreateNetwork() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["autoCreateNetwork"])
}

func (r *Project) BillingAccount() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["billingAccount"])
}

// The numeric ID of the folder this project should be
// created under. Only one of `org_id` or `folder_id` may be
// specified. If the `folder_id` is specified, then the project is
// created under the specified folder. Changing this forces the
// project to be migrated to the newly specified folder.
func (r *Project) FolderId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["folderId"])
}

// A set of key/value label pairs to assign to the project.
func (r *Project) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// The display name of the project.
func (r *Project) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The numeric identifier of the project.
func (r *Project) Number() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["number"])
}

// The numeric ID of the organization this project belongs to.
// Changing this forces a new project to be created.  Only one of
// `org_id` or `folder_id` may be specified. If the `org_id` is
// specified then the project is created at the top level. Changing
// this forces the project to be migrated to the newly specified
// organization.
func (r *Project) OrgId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["orgId"])
}

// The project ID. Changing this forces a new project to be created.
func (r *Project) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

func (r *Project) SkipDelete() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["skipDelete"])
}

// Input properties used for looking up and filtering Project resources.
type ProjectState struct {
	// Create the 'default' network automatically.  Default `true`.
	// If set to `false`, the default network will be deleted.  Note that, for quota purposes, you
	// will still need to have 1 network slot available to create the project succesfully, even if
	// you set `auto_create_network` to `false`, since the network will exist momentarily.
	AutoCreateNetwork interface{}
	BillingAccount interface{}
	// The numeric ID of the folder this project should be
	// created under. Only one of `org_id` or `folder_id` may be
	// specified. If the `folder_id` is specified, then the project is
	// created under the specified folder. Changing this forces the
	// project to be migrated to the newly specified folder.
	FolderId interface{}
	// A set of key/value label pairs to assign to the project.
	Labels interface{}
	// The display name of the project.
	Name interface{}
	// The numeric identifier of the project.
	Number interface{}
	// The numeric ID of the organization this project belongs to.
	// Changing this forces a new project to be created.  Only one of
	// `org_id` or `folder_id` may be specified. If the `org_id` is
	// specified then the project is created at the top level. Changing
	// this forces the project to be migrated to the newly specified
	// organization.
	OrgId interface{}
	// The project ID. Changing this forces a new project to be created.
	ProjectId interface{}
	SkipDelete interface{}
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Create the 'default' network automatically.  Default `true`.
	// If set to `false`, the default network will be deleted.  Note that, for quota purposes, you
	// will still need to have 1 network slot available to create the project succesfully, even if
	// you set `auto_create_network` to `false`, since the network will exist momentarily.
	AutoCreateNetwork interface{}
	BillingAccount interface{}
	// The numeric ID of the folder this project should be
	// created under. Only one of `org_id` or `folder_id` may be
	// specified. If the `folder_id` is specified, then the project is
	// created under the specified folder. Changing this forces the
	// project to be migrated to the newly specified folder.
	FolderId interface{}
	// A set of key/value label pairs to assign to the project.
	Labels interface{}
	// The display name of the project.
	Name interface{}
	// The numeric ID of the organization this project belongs to.
	// Changing this forces a new project to be created.  Only one of
	// `org_id` or `folder_id` may be specified. If the `org_id` is
	// specified then the project is created at the top level. Changing
	// this forces the project to be migrated to the newly specified
	// organization.
	OrgId interface{}
	// The project ID. Changing this forces a new project to be created.
	ProjectId interface{}
	SkipDelete interface{}
}
