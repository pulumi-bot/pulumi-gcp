// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gameservices

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A game server config resource. Configs are global and immutable.
//
// To get more information about GameServerConfig, see:
//
// * [API documentation](https://cloud.google.com/game-servers/docs/reference/rest/v1beta/projects.locations.gameServerDeployments.configs)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/game-servers/docs)
type GameServerConfig struct {
	pulumi.CustomResourceState

	// -
	// (Required)
	// A unique id for the deployment config.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// -
	// (Required)
	// A unique id for the deployment.
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// -
	// (Optional)
	// The description of the game server config.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// -
	// (Required)
	// The fleet config contains list of fleet specs. In the Single Cloud, there
	// will be only one.  Structure is documented below.
	FleetConfigs GameServerConfigFleetConfigArrayOutput `pulumi:"fleetConfigs"`
	// -
	// (Optional)
	// Set of labels to group by.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// -
	// (Optional)
	// Location of the Deployment.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// -
	// (Required)
	// The name of the ScalingConfig
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// -
	// (Optional)
	// Optional. This contains the autoscaling settings.  Structure is documented below.
	ScalingConfigs GameServerConfigScalingConfigArrayOutput `pulumi:"scalingConfigs"`
}

// NewGameServerConfig registers a new resource with the given unique name, arguments, and options.
func NewGameServerConfig(ctx *pulumi.Context,
	name string, args *GameServerConfigArgs, opts ...pulumi.ResourceOption) (*GameServerConfig, error) {
	if args == nil || args.ConfigId == nil {
		return nil, errors.New("missing required argument 'ConfigId'")
	}
	if args == nil || args.DeploymentId == nil {
		return nil, errors.New("missing required argument 'DeploymentId'")
	}
	if args == nil || args.FleetConfigs == nil {
		return nil, errors.New("missing required argument 'FleetConfigs'")
	}
	if args == nil {
		args = &GameServerConfigArgs{}
	}
	var resource GameServerConfig
	err := ctx.RegisterResource("gcp:gameservices/gameServerConfig:GameServerConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameServerConfig gets an existing GameServerConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameServerConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameServerConfigState, opts ...pulumi.ResourceOption) (*GameServerConfig, error) {
	var resource GameServerConfig
	err := ctx.ReadResource("gcp:gameservices/gameServerConfig:GameServerConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameServerConfig resources.
type gameServerConfigState struct {
	// -
	// (Required)
	// A unique id for the deployment config.
	ConfigId *string `pulumi:"configId"`
	// -
	// (Required)
	// A unique id for the deployment.
	DeploymentId *string `pulumi:"deploymentId"`
	// -
	// (Optional)
	// The description of the game server config.
	Description *string `pulumi:"description"`
	// -
	// (Required)
	// The fleet config contains list of fleet specs. In the Single Cloud, there
	// will be only one.  Structure is documented below.
	FleetConfigs []GameServerConfigFleetConfig `pulumi:"fleetConfigs"`
	// -
	// (Optional)
	// Set of labels to group by.
	Labels map[string]string `pulumi:"labels"`
	// -
	// (Optional)
	// Location of the Deployment.
	Location *string `pulumi:"location"`
	// -
	// (Required)
	// The name of the ScalingConfig
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// -
	// (Optional)
	// Optional. This contains the autoscaling settings.  Structure is documented below.
	ScalingConfigs []GameServerConfigScalingConfig `pulumi:"scalingConfigs"`
}

type GameServerConfigState struct {
	// -
	// (Required)
	// A unique id for the deployment config.
	ConfigId pulumi.StringPtrInput
	// -
	// (Required)
	// A unique id for the deployment.
	DeploymentId pulumi.StringPtrInput
	// -
	// (Optional)
	// The description of the game server config.
	Description pulumi.StringPtrInput
	// -
	// (Required)
	// The fleet config contains list of fleet specs. In the Single Cloud, there
	// will be only one.  Structure is documented below.
	FleetConfigs GameServerConfigFleetConfigArrayInput
	// -
	// (Optional)
	// Set of labels to group by.
	Labels pulumi.StringMapInput
	// -
	// (Optional)
	// Location of the Deployment.
	Location pulumi.StringPtrInput
	// -
	// (Required)
	// The name of the ScalingConfig
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// -
	// (Optional)
	// Optional. This contains the autoscaling settings.  Structure is documented below.
	ScalingConfigs GameServerConfigScalingConfigArrayInput
}

func (GameServerConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerConfigState)(nil)).Elem()
}

type gameServerConfigArgs struct {
	// -
	// (Required)
	// A unique id for the deployment config.
	ConfigId string `pulumi:"configId"`
	// -
	// (Required)
	// A unique id for the deployment.
	DeploymentId string `pulumi:"deploymentId"`
	// -
	// (Optional)
	// The description of the game server config.
	Description *string `pulumi:"description"`
	// -
	// (Required)
	// The fleet config contains list of fleet specs. In the Single Cloud, there
	// will be only one.  Structure is documented below.
	FleetConfigs []GameServerConfigFleetConfig `pulumi:"fleetConfigs"`
	// -
	// (Optional)
	// Set of labels to group by.
	Labels map[string]string `pulumi:"labels"`
	// -
	// (Optional)
	// Location of the Deployment.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// -
	// (Optional)
	// Optional. This contains the autoscaling settings.  Structure is documented below.
	ScalingConfigs []GameServerConfigScalingConfig `pulumi:"scalingConfigs"`
}

// The set of arguments for constructing a GameServerConfig resource.
type GameServerConfigArgs struct {
	// -
	// (Required)
	// A unique id for the deployment config.
	ConfigId pulumi.StringInput
	// -
	// (Required)
	// A unique id for the deployment.
	DeploymentId pulumi.StringInput
	// -
	// (Optional)
	// The description of the game server config.
	Description pulumi.StringPtrInput
	// -
	// (Required)
	// The fleet config contains list of fleet specs. In the Single Cloud, there
	// will be only one.  Structure is documented below.
	FleetConfigs GameServerConfigFleetConfigArrayInput
	// -
	// (Optional)
	// Set of labels to group by.
	Labels pulumi.StringMapInput
	// -
	// (Optional)
	// Location of the Deployment.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// -
	// (Optional)
	// Optional. This contains the autoscaling settings.  Structure is documented below.
	ScalingConfigs GameServerConfigScalingConfigArrayInput
}

func (GameServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerConfigArgs)(nil)).Elem()
}
