// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package serviceAccount

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type IAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type IAMBindingConditionInput interface {
	pulumi.Input

	ToIAMBindingConditionOutput() IAMBindingConditionOutput
	ToIAMBindingConditionOutputWithContext(context.Context) IAMBindingConditionOutput
}

type IAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMBindingCondition)(nil)).Elem()
}

func (i IAMBindingConditionArgs) ToIAMBindingConditionOutput() IAMBindingConditionOutput {
	return i.ToIAMBindingConditionOutputWithContext(context.Background())
}

func (i IAMBindingConditionArgs) ToIAMBindingConditionOutputWithContext(ctx context.Context) IAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionOutput)
}

func (i IAMBindingConditionArgs) ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput {
	return i.ToIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i IAMBindingConditionArgs) ToIAMBindingConditionPtrOutputWithContext(ctx context.Context) IAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionOutput).ToIAMBindingConditionPtrOutputWithContext(ctx)
}

type IAMBindingConditionPtrInput interface {
	pulumi.Input

	ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput
	ToIAMBindingConditionPtrOutputWithContext(context.Context) IAMBindingConditionPtrOutput
}

type iambindingConditionPtrType IAMBindingConditionArgs

func IAMBindingConditionPtr(v *IAMBindingConditionArgs) IAMBindingConditionPtrInput {
	return (*iambindingConditionPtrType)(v)
}

func (*iambindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMBindingCondition)(nil)).Elem()
}

func (i *iambindingConditionPtrType) ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput {
	return i.ToIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *iambindingConditionPtrType) ToIAMBindingConditionPtrOutputWithContext(ctx context.Context) IAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionPtrOutput)
}

type IAMBindingConditionOutput struct{ *pulumi.OutputState }

func (IAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMBindingCondition)(nil)).Elem()
}

func (o IAMBindingConditionOutput) ToIAMBindingConditionOutput() IAMBindingConditionOutput {
	return o
}

func (o IAMBindingConditionOutput) ToIAMBindingConditionOutputWithContext(ctx context.Context) IAMBindingConditionOutput {
	return o
}

func (o IAMBindingConditionOutput) ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput {
	return o.ToIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o IAMBindingConditionOutput) ToIAMBindingConditionPtrOutputWithContext(ctx context.Context) IAMBindingConditionPtrOutput {
	return o.ApplyT(func(v IAMBindingCondition) *IAMBindingCondition {
		return &v
	}).(IAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type IAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (IAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMBindingCondition)(nil)).Elem()
}

func (o IAMBindingConditionPtrOutput) ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput {
	return o
}

func (o IAMBindingConditionPtrOutput) ToIAMBindingConditionPtrOutputWithContext(ctx context.Context) IAMBindingConditionPtrOutput {
	return o
}

func (o IAMBindingConditionPtrOutput) Elem() IAMBindingConditionOutput {
	return o.ApplyT(func(v *IAMBindingCondition) IAMBindingCondition { return *v }).(IAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type IAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type IAMBindingConditionArgsInput interface {
	pulumi.Input

	ToIAMBindingConditionArgsOutput() IAMBindingConditionArgsOutput
	ToIAMBindingConditionArgsOutputWithContext(context.Context) IAMBindingConditionArgsOutput
}

type IAMBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IAMBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMBindingConditionArgs)(nil)).Elem()
}

func (i IAMBindingConditionArgsArgs) ToIAMBindingConditionArgsOutput() IAMBindingConditionArgsOutput {
	return i.ToIAMBindingConditionArgsOutputWithContext(context.Background())
}

func (i IAMBindingConditionArgsArgs) ToIAMBindingConditionArgsOutputWithContext(ctx context.Context) IAMBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionArgsOutput)
}

func (i IAMBindingConditionArgsArgs) ToIAMBindingConditionArgsPtrOutput() IAMBindingConditionArgsPtrOutput {
	return i.ToIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i IAMBindingConditionArgsArgs) ToIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) IAMBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionArgsOutput).ToIAMBindingConditionArgsPtrOutputWithContext(ctx)
}

type IAMBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToIAMBindingConditionArgsPtrOutput() IAMBindingConditionArgsPtrOutput
	ToIAMBindingConditionArgsPtrOutputWithContext(context.Context) IAMBindingConditionArgsPtrOutput
}

type iambindingConditionArgsPtrType IAMBindingConditionArgsArgs

func IAMBindingConditionArgsPtr(v *IAMBindingConditionArgsArgs) IAMBindingConditionArgsPtrInput {
	return (*iambindingConditionArgsPtrType)(v)
}

func (*iambindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMBindingConditionArgs)(nil)).Elem()
}

func (i *iambindingConditionArgsPtrType) ToIAMBindingConditionArgsPtrOutput() IAMBindingConditionArgsPtrOutput {
	return i.ToIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *iambindingConditionArgsPtrType) ToIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) IAMBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionArgsPtrOutput)
}

type IAMBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (IAMBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMBindingConditionArgs)(nil)).Elem()
}

func (o IAMBindingConditionArgsOutput) ToIAMBindingConditionArgsOutput() IAMBindingConditionArgsOutput {
	return o
}

func (o IAMBindingConditionArgsOutput) ToIAMBindingConditionArgsOutputWithContext(ctx context.Context) IAMBindingConditionArgsOutput {
	return o
}

func (o IAMBindingConditionArgsOutput) ToIAMBindingConditionArgsPtrOutput() IAMBindingConditionArgsPtrOutput {
	return o.ToIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o IAMBindingConditionArgsOutput) ToIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) IAMBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v IAMBindingConditionArgs) *IAMBindingConditionArgs {
		return &v
	}).(IAMBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type IAMBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (IAMBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMBindingConditionArgs)(nil)).Elem()
}

func (o IAMBindingConditionArgsPtrOutput) ToIAMBindingConditionArgsPtrOutput() IAMBindingConditionArgsPtrOutput {
	return o
}

func (o IAMBindingConditionArgsPtrOutput) ToIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) IAMBindingConditionArgsPtrOutput {
	return o
}

func (o IAMBindingConditionArgsPtrOutput) Elem() IAMBindingConditionArgsOutput {
	return o.ApplyT(func(v *IAMBindingConditionArgs) IAMBindingConditionArgs { return *v }).(IAMBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type IAMBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type IAMBindingConditionStateInput interface {
	pulumi.Input

	ToIAMBindingConditionStateOutput() IAMBindingConditionStateOutput
	ToIAMBindingConditionStateOutputWithContext(context.Context) IAMBindingConditionStateOutput
}

type IAMBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IAMBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMBindingConditionState)(nil)).Elem()
}

func (i IAMBindingConditionStateArgs) ToIAMBindingConditionStateOutput() IAMBindingConditionStateOutput {
	return i.ToIAMBindingConditionStateOutputWithContext(context.Background())
}

func (i IAMBindingConditionStateArgs) ToIAMBindingConditionStateOutputWithContext(ctx context.Context) IAMBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionStateOutput)
}

type IAMBindingConditionStateOutput struct{ *pulumi.OutputState }

func (IAMBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMBindingConditionState)(nil)).Elem()
}

func (o IAMBindingConditionStateOutput) ToIAMBindingConditionStateOutput() IAMBindingConditionStateOutput {
	return o
}

func (o IAMBindingConditionStateOutput) ToIAMBindingConditionStateOutputWithContext(ctx context.Context) IAMBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type IAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type IAMMemberConditionInput interface {
	pulumi.Input

	ToIAMMemberConditionOutput() IAMMemberConditionOutput
	ToIAMMemberConditionOutputWithContext(context.Context) IAMMemberConditionOutput
}

type IAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMMemberCondition)(nil)).Elem()
}

func (i IAMMemberConditionArgs) ToIAMMemberConditionOutput() IAMMemberConditionOutput {
	return i.ToIAMMemberConditionOutputWithContext(context.Background())
}

func (i IAMMemberConditionArgs) ToIAMMemberConditionOutputWithContext(ctx context.Context) IAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionOutput)
}

func (i IAMMemberConditionArgs) ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput {
	return i.ToIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i IAMMemberConditionArgs) ToIAMMemberConditionPtrOutputWithContext(ctx context.Context) IAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionOutput).ToIAMMemberConditionPtrOutputWithContext(ctx)
}

type IAMMemberConditionPtrInput interface {
	pulumi.Input

	ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput
	ToIAMMemberConditionPtrOutputWithContext(context.Context) IAMMemberConditionPtrOutput
}

type iammemberConditionPtrType IAMMemberConditionArgs

func IAMMemberConditionPtr(v *IAMMemberConditionArgs) IAMMemberConditionPtrInput {
	return (*iammemberConditionPtrType)(v)
}

func (*iammemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMMemberCondition)(nil)).Elem()
}

func (i *iammemberConditionPtrType) ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput {
	return i.ToIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *iammemberConditionPtrType) ToIAMMemberConditionPtrOutputWithContext(ctx context.Context) IAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionPtrOutput)
}

type IAMMemberConditionOutput struct{ *pulumi.OutputState }

func (IAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMMemberCondition)(nil)).Elem()
}

func (o IAMMemberConditionOutput) ToIAMMemberConditionOutput() IAMMemberConditionOutput {
	return o
}

func (o IAMMemberConditionOutput) ToIAMMemberConditionOutputWithContext(ctx context.Context) IAMMemberConditionOutput {
	return o
}

func (o IAMMemberConditionOutput) ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput {
	return o.ToIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o IAMMemberConditionOutput) ToIAMMemberConditionPtrOutputWithContext(ctx context.Context) IAMMemberConditionPtrOutput {
	return o.ApplyT(func(v IAMMemberCondition) *IAMMemberCondition {
		return &v
	}).(IAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type IAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (IAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMMemberCondition)(nil)).Elem()
}

func (o IAMMemberConditionPtrOutput) ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput {
	return o
}

func (o IAMMemberConditionPtrOutput) ToIAMMemberConditionPtrOutputWithContext(ctx context.Context) IAMMemberConditionPtrOutput {
	return o
}

func (o IAMMemberConditionPtrOutput) Elem() IAMMemberConditionOutput {
	return o.ApplyT(func(v *IAMMemberCondition) IAMMemberCondition { return *v }).(IAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type IAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type IAMMemberConditionArgsInput interface {
	pulumi.Input

	ToIAMMemberConditionArgsOutput() IAMMemberConditionArgsOutput
	ToIAMMemberConditionArgsOutputWithContext(context.Context) IAMMemberConditionArgsOutput
}

type IAMMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IAMMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMMemberConditionArgs)(nil)).Elem()
}

func (i IAMMemberConditionArgsArgs) ToIAMMemberConditionArgsOutput() IAMMemberConditionArgsOutput {
	return i.ToIAMMemberConditionArgsOutputWithContext(context.Background())
}

func (i IAMMemberConditionArgsArgs) ToIAMMemberConditionArgsOutputWithContext(ctx context.Context) IAMMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionArgsOutput)
}

func (i IAMMemberConditionArgsArgs) ToIAMMemberConditionArgsPtrOutput() IAMMemberConditionArgsPtrOutput {
	return i.ToIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i IAMMemberConditionArgsArgs) ToIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) IAMMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionArgsOutput).ToIAMMemberConditionArgsPtrOutputWithContext(ctx)
}

type IAMMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToIAMMemberConditionArgsPtrOutput() IAMMemberConditionArgsPtrOutput
	ToIAMMemberConditionArgsPtrOutputWithContext(context.Context) IAMMemberConditionArgsPtrOutput
}

type iammemberConditionArgsPtrType IAMMemberConditionArgsArgs

func IAMMemberConditionArgsPtr(v *IAMMemberConditionArgsArgs) IAMMemberConditionArgsPtrInput {
	return (*iammemberConditionArgsPtrType)(v)
}

func (*iammemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMMemberConditionArgs)(nil)).Elem()
}

func (i *iammemberConditionArgsPtrType) ToIAMMemberConditionArgsPtrOutput() IAMMemberConditionArgsPtrOutput {
	return i.ToIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *iammemberConditionArgsPtrType) ToIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) IAMMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionArgsPtrOutput)
}

type IAMMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (IAMMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMMemberConditionArgs)(nil)).Elem()
}

func (o IAMMemberConditionArgsOutput) ToIAMMemberConditionArgsOutput() IAMMemberConditionArgsOutput {
	return o
}

func (o IAMMemberConditionArgsOutput) ToIAMMemberConditionArgsOutputWithContext(ctx context.Context) IAMMemberConditionArgsOutput {
	return o
}

func (o IAMMemberConditionArgsOutput) ToIAMMemberConditionArgsPtrOutput() IAMMemberConditionArgsPtrOutput {
	return o.ToIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o IAMMemberConditionArgsOutput) ToIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) IAMMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v IAMMemberConditionArgs) *IAMMemberConditionArgs {
		return &v
	}).(IAMMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type IAMMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (IAMMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMMemberConditionArgs)(nil)).Elem()
}

func (o IAMMemberConditionArgsPtrOutput) ToIAMMemberConditionArgsPtrOutput() IAMMemberConditionArgsPtrOutput {
	return o
}

func (o IAMMemberConditionArgsPtrOutput) ToIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) IAMMemberConditionArgsPtrOutput {
	return o
}

func (o IAMMemberConditionArgsPtrOutput) Elem() IAMMemberConditionArgsOutput {
	return o.ApplyT(func(v *IAMMemberConditionArgs) IAMMemberConditionArgs { return *v }).(IAMMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type IAMMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type IAMMemberConditionStateInput interface {
	pulumi.Input

	ToIAMMemberConditionStateOutput() IAMMemberConditionStateOutput
	ToIAMMemberConditionStateOutputWithContext(context.Context) IAMMemberConditionStateOutput
}

type IAMMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IAMMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMMemberConditionState)(nil)).Elem()
}

func (i IAMMemberConditionStateArgs) ToIAMMemberConditionStateOutput() IAMMemberConditionStateOutput {
	return i.ToIAMMemberConditionStateOutputWithContext(context.Background())
}

func (i IAMMemberConditionStateArgs) ToIAMMemberConditionStateOutputWithContext(ctx context.Context) IAMMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionStateOutput)
}

type IAMMemberConditionStateOutput struct{ *pulumi.OutputState }

func (IAMMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMMemberConditionState)(nil)).Elem()
}

func (o IAMMemberConditionStateOutput) ToIAMMemberConditionStateOutput() IAMMemberConditionStateOutput {
	return o
}

func (o IAMMemberConditionStateOutput) ToIAMMemberConditionStateOutputWithContext(ctx context.Context) IAMMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IAMMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(IAMBindingConditionOutput{})
	pulumi.RegisterOutputType(IAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(IAMBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(IAMBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(IAMBindingConditionStateOutput{})
	pulumi.RegisterOutputType(IAMMemberConditionOutput{})
	pulumi.RegisterOutputType(IAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(IAMMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(IAMMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(IAMMemberConditionStateOutput{})
}
