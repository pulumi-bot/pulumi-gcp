// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package TopicIAMMemberCondition

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type TopicIAMMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression string `pulumi:"expression"`
	Title string `pulumi:"title"`
}

type TopicIAMMemberConditionInput interface {
	pulumi.Input

	ToTopicIAMMemberConditionOutput() TopicIAMMemberConditionOutput
	ToTopicIAMMemberConditionOutputWithContext(context.Context) TopicIAMMemberConditionOutput
}

type TopicIAMMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression pulumi.StringInput `pulumi:"expression"`
	Title pulumi.StringInput `pulumi:"title"`
}

func (TopicIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMMemberCondition)(nil)).Elem()
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionOutput() TopicIAMMemberConditionOutput {
	return i.ToTopicIAMMemberConditionOutputWithContext(context.Background())
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionOutputWithContext(ctx context.Context) TopicIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMMemberConditionOutput)
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return i.ToTopicIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMMemberConditionOutput).ToTopicIAMMemberConditionPtrOutputWithContext(ctx)
}

type TopicIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput
	ToTopicIAMMemberConditionPtrOutputWithContext(context.Context) TopicIAMMemberConditionPtrOutput
}

type topicIAMMemberConditionPtrType TopicIAMMemberConditionArgs

func TopicIAMMemberConditionPtr(v *TopicIAMMemberConditionArgs) TopicIAMMemberConditionPtrInput {	return (*topicIAMMemberConditionPtrType)(v)
}

func (*topicIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMMemberCondition)(nil)).Elem()
}

func (i *topicIAMMemberConditionPtrType) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return i.ToTopicIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *topicIAMMemberConditionPtrType) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMMemberConditionPtrOutput)
}

type TopicIAMMemberConditionOutput struct { *pulumi.OutputState }

func (TopicIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMMemberCondition)(nil)).Elem()
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionOutput() TopicIAMMemberConditionOutput {
	return o
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionOutputWithContext(ctx context.Context) TopicIAMMemberConditionOutput {
	return o
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return o.ToTopicIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v TopicIAMMemberCondition) *TopicIAMMemberCondition {
		return &v
	}).(TopicIAMMemberConditionPtrOutput)
}
func (o TopicIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TopicIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func (v TopicIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o TopicIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func (v TopicIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TopicIAMMemberConditionPtrOutput struct { *pulumi.OutputState}

func (TopicIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMMemberCondition)(nil)).Elem()
}

func (o TopicIAMMemberConditionPtrOutput) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return o
}

func (o TopicIAMMemberConditionPtrOutput) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return o
}

func (o TopicIAMMemberConditionPtrOutput) Elem() TopicIAMMemberConditionOutput {
	return o.ApplyT(func (v *TopicIAMMemberCondition) TopicIAMMemberCondition { return *v }).(TopicIAMMemberConditionOutput)
}

func (o TopicIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TopicIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicIAMMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func (v TopicIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o TopicIAMMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func (v TopicIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TopicIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(TopicIAMMemberConditionPtrOutput{})
}
