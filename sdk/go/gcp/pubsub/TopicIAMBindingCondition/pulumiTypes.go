// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package TopicIAMBindingCondition

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type TopicIAMBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression string `pulumi:"expression"`
	Title string `pulumi:"title"`
}

type TopicIAMBindingConditionInput interface {
	pulumi.Input

	ToTopicIAMBindingConditionOutput() TopicIAMBindingConditionOutput
	ToTopicIAMBindingConditionOutputWithContext(context.Context) TopicIAMBindingConditionOutput
}

type TopicIAMBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression pulumi.StringInput `pulumi:"expression"`
	Title pulumi.StringInput `pulumi:"title"`
}

func (TopicIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMBindingCondition)(nil)).Elem()
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionOutput() TopicIAMBindingConditionOutput {
	return i.ToTopicIAMBindingConditionOutputWithContext(context.Background())
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionOutputWithContext(ctx context.Context) TopicIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMBindingConditionOutput)
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return i.ToTopicIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMBindingConditionOutput).ToTopicIAMBindingConditionPtrOutputWithContext(ctx)
}

type TopicIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput
	ToTopicIAMBindingConditionPtrOutputWithContext(context.Context) TopicIAMBindingConditionPtrOutput
}

type topicIAMBindingConditionPtrType TopicIAMBindingConditionArgs

func TopicIAMBindingConditionPtr(v *TopicIAMBindingConditionArgs) TopicIAMBindingConditionPtrInput {	return (*topicIAMBindingConditionPtrType)(v)
}

func (*topicIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMBindingCondition)(nil)).Elem()
}

func (i *topicIAMBindingConditionPtrType) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return i.ToTopicIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *topicIAMBindingConditionPtrType) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMBindingConditionPtrOutput)
}

type TopicIAMBindingConditionOutput struct { *pulumi.OutputState }

func (TopicIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMBindingCondition)(nil)).Elem()
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionOutput() TopicIAMBindingConditionOutput {
	return o
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionOutputWithContext(ctx context.Context) TopicIAMBindingConditionOutput {
	return o
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return o.ToTopicIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v TopicIAMBindingCondition) *TopicIAMBindingCondition {
		return &v
	}).(TopicIAMBindingConditionPtrOutput)
}
func (o TopicIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TopicIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func (v TopicIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o TopicIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func (v TopicIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TopicIAMBindingConditionPtrOutput struct { *pulumi.OutputState}

func (TopicIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMBindingCondition)(nil)).Elem()
}

func (o TopicIAMBindingConditionPtrOutput) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return o
}

func (o TopicIAMBindingConditionPtrOutput) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return o
}

func (o TopicIAMBindingConditionPtrOutput) Elem() TopicIAMBindingConditionOutput {
	return o.ApplyT(func (v *TopicIAMBindingCondition) TopicIAMBindingCondition { return *v }).(TopicIAMBindingConditionOutput)
}

func (o TopicIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func (v TopicIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicIAMBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func (v TopicIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o TopicIAMBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func (v TopicIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TopicIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(TopicIAMBindingConditionPtrOutput{})
}
