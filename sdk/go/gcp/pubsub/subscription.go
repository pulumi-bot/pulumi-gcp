// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A named resource representing the stream of messages from a single,
// specific topic, to be delivered to the subscribing application.
// 
// 
// To get more information about Subscription, see:
// 
// * [API documentation](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions)
// * How-to Guides
//     * [Managing Subscriptions](https://cloud.google.com/pubsub/docs/admin#managing_subscriptions)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/pubsub_subscription.html.markdown.
type Subscription struct {
	s *pulumi.ResourceState
}

// NewSubscription registers a new resource with the given unique name, arguments, and options.
func NewSubscription(ctx *pulumi.Context,
	name string, args *SubscriptionArgs, opts ...pulumi.ResourceOpt) (*Subscription, error) {
	if args == nil || args.Topic == nil {
		return nil, errors.New("missing required argument 'Topic'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["ackDeadlineSeconds"] = nil
		inputs["expirationPolicy"] = nil
		inputs["labels"] = nil
		inputs["messageRetentionDuration"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["pushConfig"] = nil
		inputs["retainAckedMessages"] = nil
		inputs["topic"] = nil
	} else {
		inputs["ackDeadlineSeconds"] = args.AckDeadlineSeconds
		inputs["expirationPolicy"] = args.ExpirationPolicy
		inputs["labels"] = args.Labels
		inputs["messageRetentionDuration"] = args.MessageRetentionDuration
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["pushConfig"] = args.PushConfig
		inputs["retainAckedMessages"] = args.RetainAckedMessages
		inputs["topic"] = args.Topic
	}
	inputs["path"] = nil
	s, err := ctx.RegisterResource("gcp:pubsub/subscription:Subscription", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subscription{s: s}, nil
}

// GetSubscription gets an existing Subscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscription(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubscriptionState, opts ...pulumi.ResourceOpt) (*Subscription, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["ackDeadlineSeconds"] = state.AckDeadlineSeconds
		inputs["expirationPolicy"] = state.ExpirationPolicy
		inputs["labels"] = state.Labels
		inputs["messageRetentionDuration"] = state.MessageRetentionDuration
		inputs["name"] = state.Name
		inputs["path"] = state.Path
		inputs["project"] = state.Project
		inputs["pushConfig"] = state.PushConfig
		inputs["retainAckedMessages"] = state.RetainAckedMessages
		inputs["topic"] = state.Topic
	}
	s, err := ctx.ReadResource("gcp:pubsub/subscription:Subscription", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subscription{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subscription) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subscription) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Subscription) AckDeadlineSeconds() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ackDeadlineSeconds"])
}

func (r *Subscription) ExpirationPolicy() *pulumi.Output {
	return r.s.State["expirationPolicy"]
}

func (r *Subscription) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Subscription) MessageRetentionDuration() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["messageRetentionDuration"])
}

func (r *Subscription) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Subscription) Path() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["path"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Subscription) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *Subscription) PushConfig() *pulumi.Output {
	return r.s.State["pushConfig"]
}

func (r *Subscription) RetainAckedMessages() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["retainAckedMessages"])
}

func (r *Subscription) Topic() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["topic"])
}

// Input properties used for looking up and filtering Subscription resources.
type SubscriptionState struct {
	AckDeadlineSeconds interface{}
	ExpirationPolicy interface{}
	Labels interface{}
	MessageRetentionDuration interface{}
	Name interface{}
	Path interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	PushConfig interface{}
	RetainAckedMessages interface{}
	Topic interface{}
}

// The set of arguments for constructing a Subscription resource.
type SubscriptionArgs struct {
	AckDeadlineSeconds interface{}
	ExpirationPolicy interface{}
	Labels interface{}
	MessageRetentionDuration interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	PushConfig interface{}
	RetainAckedMessages interface{}
	Topic interface{}
}
