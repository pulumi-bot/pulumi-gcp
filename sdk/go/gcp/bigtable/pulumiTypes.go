// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bigtable

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type GCPolicyMaxAge struct {
	// Number of days before applying GC policy.
	Days int `pulumi:"days"`
}

type GCPolicyMaxAgeInput interface {
	pulumi.Input

	ToGCPolicyMaxAgeOutput() GCPolicyMaxAgeOutput
	ToGCPolicyMaxAgeOutputWithContext(context.Context) GCPolicyMaxAgeOutput
}

type GCPolicyMaxAgeArgs struct {
	// Number of days before applying GC policy.
	Days pulumi.IntInput `pulumi:"days"`
}

func (GCPolicyMaxAgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxAge)(nil)).Elem()
}

func (i GCPolicyMaxAgeArgs) ToGCPolicyMaxAgeOutput() GCPolicyMaxAgeOutput {
	return i.ToGCPolicyMaxAgeOutputWithContext(context.Background())
}

func (i GCPolicyMaxAgeArgs) ToGCPolicyMaxAgeOutputWithContext(ctx context.Context) GCPolicyMaxAgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxAgeOutput)
}

type GCPolicyMaxAgeArrayInput interface {
	pulumi.Input

	ToGCPolicyMaxAgeArrayOutput() GCPolicyMaxAgeArrayOutput
	ToGCPolicyMaxAgeArrayOutputWithContext(context.Context) GCPolicyMaxAgeArrayOutput
}

type GCPolicyMaxAgeArray []GCPolicyMaxAgeInput

func (GCPolicyMaxAgeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxAge)(nil)).Elem()
}

func (i GCPolicyMaxAgeArray) ToGCPolicyMaxAgeArrayOutput() GCPolicyMaxAgeArrayOutput {
	return i.ToGCPolicyMaxAgeArrayOutputWithContext(context.Background())
}

func (i GCPolicyMaxAgeArray) ToGCPolicyMaxAgeArrayOutputWithContext(ctx context.Context) GCPolicyMaxAgeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxAgeArrayOutput)
}

type GCPolicyMaxAgeOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxAgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxAge)(nil)).Elem()
}

func (o GCPolicyMaxAgeOutput) ToGCPolicyMaxAgeOutput() GCPolicyMaxAgeOutput {
	return o
}

func (o GCPolicyMaxAgeOutput) ToGCPolicyMaxAgeOutputWithContext(ctx context.Context) GCPolicyMaxAgeOutput {
	return o
}

// Number of days before applying GC policy.
func (o GCPolicyMaxAgeOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v GCPolicyMaxAge) int { return v.Days }).(pulumi.IntOutput)
}

type GCPolicyMaxAgeArrayOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxAgeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxAge)(nil)).Elem()
}

func (o GCPolicyMaxAgeArrayOutput) ToGCPolicyMaxAgeArrayOutput() GCPolicyMaxAgeArrayOutput {
	return o
}

func (o GCPolicyMaxAgeArrayOutput) ToGCPolicyMaxAgeArrayOutputWithContext(ctx context.Context) GCPolicyMaxAgeArrayOutput {
	return o
}

func (o GCPolicyMaxAgeArrayOutput) Index(i pulumi.IntInput) GCPolicyMaxAgeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GCPolicyMaxAge {
		return vs[0].([]GCPolicyMaxAge)[vs[1].(int)]
	}).(GCPolicyMaxAgeOutput)
}

type GCPolicyMaxAgeArgs struct {
	// Number of days before applying GC policy.
	Days int `pulumi:"days"`
}

type GCPolicyMaxAgeArgsInput interface {
	pulumi.Input

	ToGCPolicyMaxAgeArgsOutput() GCPolicyMaxAgeArgsOutput
	ToGCPolicyMaxAgeArgsOutputWithContext(context.Context) GCPolicyMaxAgeArgsOutput
}

type GCPolicyMaxAgeArgsArgs struct {
	// Number of days before applying GC policy.
	Days pulumi.IntInput `pulumi:"days"`
}

func (GCPolicyMaxAgeArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxAgeArgs)(nil)).Elem()
}

func (i GCPolicyMaxAgeArgsArgs) ToGCPolicyMaxAgeArgsOutput() GCPolicyMaxAgeArgsOutput {
	return i.ToGCPolicyMaxAgeArgsOutputWithContext(context.Background())
}

func (i GCPolicyMaxAgeArgsArgs) ToGCPolicyMaxAgeArgsOutputWithContext(ctx context.Context) GCPolicyMaxAgeArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxAgeArgsOutput)
}

type GCPolicyMaxAgeArgsArrayInput interface {
	pulumi.Input

	ToGCPolicyMaxAgeArgsArrayOutput() GCPolicyMaxAgeArgsArrayOutput
	ToGCPolicyMaxAgeArgsArrayOutputWithContext(context.Context) GCPolicyMaxAgeArgsArrayOutput
}

type GCPolicyMaxAgeArgsArray []GCPolicyMaxAgeArgsInput

func (GCPolicyMaxAgeArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxAgeArgs)(nil)).Elem()
}

func (i GCPolicyMaxAgeArgsArray) ToGCPolicyMaxAgeArgsArrayOutput() GCPolicyMaxAgeArgsArrayOutput {
	return i.ToGCPolicyMaxAgeArgsArrayOutputWithContext(context.Background())
}

func (i GCPolicyMaxAgeArgsArray) ToGCPolicyMaxAgeArgsArrayOutputWithContext(ctx context.Context) GCPolicyMaxAgeArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxAgeArgsArrayOutput)
}

type GCPolicyMaxAgeArgsOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxAgeArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxAgeArgs)(nil)).Elem()
}

func (o GCPolicyMaxAgeArgsOutput) ToGCPolicyMaxAgeArgsOutput() GCPolicyMaxAgeArgsOutput {
	return o
}

func (o GCPolicyMaxAgeArgsOutput) ToGCPolicyMaxAgeArgsOutputWithContext(ctx context.Context) GCPolicyMaxAgeArgsOutput {
	return o
}

// Number of days before applying GC policy.
func (o GCPolicyMaxAgeArgsOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v GCPolicyMaxAgeArgs) int { return v.Days }).(pulumi.IntOutput)
}

type GCPolicyMaxAgeArgsArrayOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxAgeArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxAgeArgs)(nil)).Elem()
}

func (o GCPolicyMaxAgeArgsArrayOutput) ToGCPolicyMaxAgeArgsArrayOutput() GCPolicyMaxAgeArgsArrayOutput {
	return o
}

func (o GCPolicyMaxAgeArgsArrayOutput) ToGCPolicyMaxAgeArgsArrayOutputWithContext(ctx context.Context) GCPolicyMaxAgeArgsArrayOutput {
	return o
}

func (o GCPolicyMaxAgeArgsArrayOutput) Index(i pulumi.IntInput) GCPolicyMaxAgeArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GCPolicyMaxAgeArgs {
		return vs[0].([]GCPolicyMaxAgeArgs)[vs[1].(int)]
	}).(GCPolicyMaxAgeArgsOutput)
}

type GCPolicyMaxAgeState struct {
	// Number of days before applying GC policy.
	Days int `pulumi:"days"`
}

type GCPolicyMaxAgeStateInput interface {
	pulumi.Input

	ToGCPolicyMaxAgeStateOutput() GCPolicyMaxAgeStateOutput
	ToGCPolicyMaxAgeStateOutputWithContext(context.Context) GCPolicyMaxAgeStateOutput
}

type GCPolicyMaxAgeStateArgs struct {
	// Number of days before applying GC policy.
	Days pulumi.IntInput `pulumi:"days"`
}

func (GCPolicyMaxAgeStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxAgeState)(nil)).Elem()
}

func (i GCPolicyMaxAgeStateArgs) ToGCPolicyMaxAgeStateOutput() GCPolicyMaxAgeStateOutput {
	return i.ToGCPolicyMaxAgeStateOutputWithContext(context.Background())
}

func (i GCPolicyMaxAgeStateArgs) ToGCPolicyMaxAgeStateOutputWithContext(ctx context.Context) GCPolicyMaxAgeStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxAgeStateOutput)
}

type GCPolicyMaxAgeStateArrayInput interface {
	pulumi.Input

	ToGCPolicyMaxAgeStateArrayOutput() GCPolicyMaxAgeStateArrayOutput
	ToGCPolicyMaxAgeStateArrayOutputWithContext(context.Context) GCPolicyMaxAgeStateArrayOutput
}

type GCPolicyMaxAgeStateArray []GCPolicyMaxAgeStateInput

func (GCPolicyMaxAgeStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxAgeState)(nil)).Elem()
}

func (i GCPolicyMaxAgeStateArray) ToGCPolicyMaxAgeStateArrayOutput() GCPolicyMaxAgeStateArrayOutput {
	return i.ToGCPolicyMaxAgeStateArrayOutputWithContext(context.Background())
}

func (i GCPolicyMaxAgeStateArray) ToGCPolicyMaxAgeStateArrayOutputWithContext(ctx context.Context) GCPolicyMaxAgeStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxAgeStateArrayOutput)
}

type GCPolicyMaxAgeStateOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxAgeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxAgeState)(nil)).Elem()
}

func (o GCPolicyMaxAgeStateOutput) ToGCPolicyMaxAgeStateOutput() GCPolicyMaxAgeStateOutput {
	return o
}

func (o GCPolicyMaxAgeStateOutput) ToGCPolicyMaxAgeStateOutputWithContext(ctx context.Context) GCPolicyMaxAgeStateOutput {
	return o
}

// Number of days before applying GC policy.
func (o GCPolicyMaxAgeStateOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v GCPolicyMaxAgeState) int { return v.Days }).(pulumi.IntOutput)
}

type GCPolicyMaxAgeStateArrayOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxAgeStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxAgeState)(nil)).Elem()
}

func (o GCPolicyMaxAgeStateArrayOutput) ToGCPolicyMaxAgeStateArrayOutput() GCPolicyMaxAgeStateArrayOutput {
	return o
}

func (o GCPolicyMaxAgeStateArrayOutput) ToGCPolicyMaxAgeStateArrayOutputWithContext(ctx context.Context) GCPolicyMaxAgeStateArrayOutput {
	return o
}

func (o GCPolicyMaxAgeStateArrayOutput) Index(i pulumi.IntInput) GCPolicyMaxAgeStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GCPolicyMaxAgeState {
		return vs[0].([]GCPolicyMaxAgeState)[vs[1].(int)]
	}).(GCPolicyMaxAgeStateOutput)
}

type GCPolicyMaxVersion struct {
	// Number of version before applying the GC policy.
	Number int `pulumi:"number"`
}

type GCPolicyMaxVersionInput interface {
	pulumi.Input

	ToGCPolicyMaxVersionOutput() GCPolicyMaxVersionOutput
	ToGCPolicyMaxVersionOutputWithContext(context.Context) GCPolicyMaxVersionOutput
}

type GCPolicyMaxVersionArgs struct {
	// Number of version before applying the GC policy.
	Number pulumi.IntInput `pulumi:"number"`
}

func (GCPolicyMaxVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxVersion)(nil)).Elem()
}

func (i GCPolicyMaxVersionArgs) ToGCPolicyMaxVersionOutput() GCPolicyMaxVersionOutput {
	return i.ToGCPolicyMaxVersionOutputWithContext(context.Background())
}

func (i GCPolicyMaxVersionArgs) ToGCPolicyMaxVersionOutputWithContext(ctx context.Context) GCPolicyMaxVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxVersionOutput)
}

type GCPolicyMaxVersionArrayInput interface {
	pulumi.Input

	ToGCPolicyMaxVersionArrayOutput() GCPolicyMaxVersionArrayOutput
	ToGCPolicyMaxVersionArrayOutputWithContext(context.Context) GCPolicyMaxVersionArrayOutput
}

type GCPolicyMaxVersionArray []GCPolicyMaxVersionInput

func (GCPolicyMaxVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxVersion)(nil)).Elem()
}

func (i GCPolicyMaxVersionArray) ToGCPolicyMaxVersionArrayOutput() GCPolicyMaxVersionArrayOutput {
	return i.ToGCPolicyMaxVersionArrayOutputWithContext(context.Background())
}

func (i GCPolicyMaxVersionArray) ToGCPolicyMaxVersionArrayOutputWithContext(ctx context.Context) GCPolicyMaxVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxVersionArrayOutput)
}

type GCPolicyMaxVersionOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxVersion)(nil)).Elem()
}

func (o GCPolicyMaxVersionOutput) ToGCPolicyMaxVersionOutput() GCPolicyMaxVersionOutput {
	return o
}

func (o GCPolicyMaxVersionOutput) ToGCPolicyMaxVersionOutputWithContext(ctx context.Context) GCPolicyMaxVersionOutput {
	return o
}

// Number of version before applying the GC policy.
func (o GCPolicyMaxVersionOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GCPolicyMaxVersion) int { return v.Number }).(pulumi.IntOutput)
}

type GCPolicyMaxVersionArrayOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxVersion)(nil)).Elem()
}

func (o GCPolicyMaxVersionArrayOutput) ToGCPolicyMaxVersionArrayOutput() GCPolicyMaxVersionArrayOutput {
	return o
}

func (o GCPolicyMaxVersionArrayOutput) ToGCPolicyMaxVersionArrayOutputWithContext(ctx context.Context) GCPolicyMaxVersionArrayOutput {
	return o
}

func (o GCPolicyMaxVersionArrayOutput) Index(i pulumi.IntInput) GCPolicyMaxVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GCPolicyMaxVersion {
		return vs[0].([]GCPolicyMaxVersion)[vs[1].(int)]
	}).(GCPolicyMaxVersionOutput)
}

type GCPolicyMaxVersionArgs struct {
	// Number of version before applying the GC policy.
	Number int `pulumi:"number"`
}

type GCPolicyMaxVersionArgsInput interface {
	pulumi.Input

	ToGCPolicyMaxVersionArgsOutput() GCPolicyMaxVersionArgsOutput
	ToGCPolicyMaxVersionArgsOutputWithContext(context.Context) GCPolicyMaxVersionArgsOutput
}

type GCPolicyMaxVersionArgsArgs struct {
	// Number of version before applying the GC policy.
	Number pulumi.IntInput `pulumi:"number"`
}

func (GCPolicyMaxVersionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxVersionArgs)(nil)).Elem()
}

func (i GCPolicyMaxVersionArgsArgs) ToGCPolicyMaxVersionArgsOutput() GCPolicyMaxVersionArgsOutput {
	return i.ToGCPolicyMaxVersionArgsOutputWithContext(context.Background())
}

func (i GCPolicyMaxVersionArgsArgs) ToGCPolicyMaxVersionArgsOutputWithContext(ctx context.Context) GCPolicyMaxVersionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxVersionArgsOutput)
}

type GCPolicyMaxVersionArgsArrayInput interface {
	pulumi.Input

	ToGCPolicyMaxVersionArgsArrayOutput() GCPolicyMaxVersionArgsArrayOutput
	ToGCPolicyMaxVersionArgsArrayOutputWithContext(context.Context) GCPolicyMaxVersionArgsArrayOutput
}

type GCPolicyMaxVersionArgsArray []GCPolicyMaxVersionArgsInput

func (GCPolicyMaxVersionArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxVersionArgs)(nil)).Elem()
}

func (i GCPolicyMaxVersionArgsArray) ToGCPolicyMaxVersionArgsArrayOutput() GCPolicyMaxVersionArgsArrayOutput {
	return i.ToGCPolicyMaxVersionArgsArrayOutputWithContext(context.Background())
}

func (i GCPolicyMaxVersionArgsArray) ToGCPolicyMaxVersionArgsArrayOutputWithContext(ctx context.Context) GCPolicyMaxVersionArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxVersionArgsArrayOutput)
}

type GCPolicyMaxVersionArgsOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxVersionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxVersionArgs)(nil)).Elem()
}

func (o GCPolicyMaxVersionArgsOutput) ToGCPolicyMaxVersionArgsOutput() GCPolicyMaxVersionArgsOutput {
	return o
}

func (o GCPolicyMaxVersionArgsOutput) ToGCPolicyMaxVersionArgsOutputWithContext(ctx context.Context) GCPolicyMaxVersionArgsOutput {
	return o
}

// Number of version before applying the GC policy.
func (o GCPolicyMaxVersionArgsOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GCPolicyMaxVersionArgs) int { return v.Number }).(pulumi.IntOutput)
}

type GCPolicyMaxVersionArgsArrayOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxVersionArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxVersionArgs)(nil)).Elem()
}

func (o GCPolicyMaxVersionArgsArrayOutput) ToGCPolicyMaxVersionArgsArrayOutput() GCPolicyMaxVersionArgsArrayOutput {
	return o
}

func (o GCPolicyMaxVersionArgsArrayOutput) ToGCPolicyMaxVersionArgsArrayOutputWithContext(ctx context.Context) GCPolicyMaxVersionArgsArrayOutput {
	return o
}

func (o GCPolicyMaxVersionArgsArrayOutput) Index(i pulumi.IntInput) GCPolicyMaxVersionArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GCPolicyMaxVersionArgs {
		return vs[0].([]GCPolicyMaxVersionArgs)[vs[1].(int)]
	}).(GCPolicyMaxVersionArgsOutput)
}

type GCPolicyMaxVersionState struct {
	// Number of version before applying the GC policy.
	Number int `pulumi:"number"`
}

type GCPolicyMaxVersionStateInput interface {
	pulumi.Input

	ToGCPolicyMaxVersionStateOutput() GCPolicyMaxVersionStateOutput
	ToGCPolicyMaxVersionStateOutputWithContext(context.Context) GCPolicyMaxVersionStateOutput
}

type GCPolicyMaxVersionStateArgs struct {
	// Number of version before applying the GC policy.
	Number pulumi.IntInput `pulumi:"number"`
}

func (GCPolicyMaxVersionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxVersionState)(nil)).Elem()
}

func (i GCPolicyMaxVersionStateArgs) ToGCPolicyMaxVersionStateOutput() GCPolicyMaxVersionStateOutput {
	return i.ToGCPolicyMaxVersionStateOutputWithContext(context.Background())
}

func (i GCPolicyMaxVersionStateArgs) ToGCPolicyMaxVersionStateOutputWithContext(ctx context.Context) GCPolicyMaxVersionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxVersionStateOutput)
}

type GCPolicyMaxVersionStateArrayInput interface {
	pulumi.Input

	ToGCPolicyMaxVersionStateArrayOutput() GCPolicyMaxVersionStateArrayOutput
	ToGCPolicyMaxVersionStateArrayOutputWithContext(context.Context) GCPolicyMaxVersionStateArrayOutput
}

type GCPolicyMaxVersionStateArray []GCPolicyMaxVersionStateInput

func (GCPolicyMaxVersionStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxVersionState)(nil)).Elem()
}

func (i GCPolicyMaxVersionStateArray) ToGCPolicyMaxVersionStateArrayOutput() GCPolicyMaxVersionStateArrayOutput {
	return i.ToGCPolicyMaxVersionStateArrayOutputWithContext(context.Background())
}

func (i GCPolicyMaxVersionStateArray) ToGCPolicyMaxVersionStateArrayOutputWithContext(ctx context.Context) GCPolicyMaxVersionStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPolicyMaxVersionStateArrayOutput)
}

type GCPolicyMaxVersionStateOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxVersionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPolicyMaxVersionState)(nil)).Elem()
}

func (o GCPolicyMaxVersionStateOutput) ToGCPolicyMaxVersionStateOutput() GCPolicyMaxVersionStateOutput {
	return o
}

func (o GCPolicyMaxVersionStateOutput) ToGCPolicyMaxVersionStateOutputWithContext(ctx context.Context) GCPolicyMaxVersionStateOutput {
	return o
}

// Number of version before applying the GC policy.
func (o GCPolicyMaxVersionStateOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GCPolicyMaxVersionState) int { return v.Number }).(pulumi.IntOutput)
}

type GCPolicyMaxVersionStateArrayOutput struct{ *pulumi.OutputState }

func (GCPolicyMaxVersionStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCPolicyMaxVersionState)(nil)).Elem()
}

func (o GCPolicyMaxVersionStateArrayOutput) ToGCPolicyMaxVersionStateArrayOutput() GCPolicyMaxVersionStateArrayOutput {
	return o
}

func (o GCPolicyMaxVersionStateArrayOutput) ToGCPolicyMaxVersionStateArrayOutputWithContext(ctx context.Context) GCPolicyMaxVersionStateArrayOutput {
	return o
}

func (o GCPolicyMaxVersionStateArrayOutput) Index(i pulumi.IntInput) GCPolicyMaxVersionStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GCPolicyMaxVersionState {
		return vs[0].([]GCPolicyMaxVersionState)[vs[1].(int)]
	}).(GCPolicyMaxVersionStateOutput)
}

type InstanceCluster struct {
	// The ID of the Cloud Bigtable cluster.
	ClusterId string `pulumi:"clusterId"`
	// The number of nodes in your Cloud Bigtable cluster.
	// Required, with a minimum of `3` for a `PRODUCTION` instance. Must be left unset
	// for a `DEVELOPMENT` instance.
	NumNodes int `pulumi:"numNodes"`
	// The storage type to use. One of `"SSD"` or
	// `"HDD"`. Defaults to `"SSD"`.
	StorageType *string `pulumi:"storageType"`
	// The zone to create the Cloud Bigtable cluster in. Each
	// cluster must have a different zone in the same region. Zones that support
	// Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
	Zone string `pulumi:"zone"`
}

type InstanceClusterInput interface {
	pulumi.Input

	ToInstanceClusterOutput() InstanceClusterOutput
	ToInstanceClusterOutputWithContext(context.Context) InstanceClusterOutput
}

type InstanceClusterArgs struct {
	// The ID of the Cloud Bigtable cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The number of nodes in your Cloud Bigtable cluster.
	// Required, with a minimum of `3` for a `PRODUCTION` instance. Must be left unset
	// for a `DEVELOPMENT` instance.
	NumNodes pulumi.IntInput `pulumi:"numNodes"`
	// The storage type to use. One of `"SSD"` or
	// `"HDD"`. Defaults to `"SSD"`.
	StorageType pulumi.StringPtrInput `pulumi:"storageType"`
	// The zone to create the Cloud Bigtable cluster in. Each
	// cluster must have a different zone in the same region. Zones that support
	// Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (InstanceClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCluster)(nil)).Elem()
}

func (i InstanceClusterArgs) ToInstanceClusterOutput() InstanceClusterOutput {
	return i.ToInstanceClusterOutputWithContext(context.Background())
}

func (i InstanceClusterArgs) ToInstanceClusterOutputWithContext(ctx context.Context) InstanceClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterOutput)
}

type InstanceClusterArrayInput interface {
	pulumi.Input

	ToInstanceClusterArrayOutput() InstanceClusterArrayOutput
	ToInstanceClusterArrayOutputWithContext(context.Context) InstanceClusterArrayOutput
}

type InstanceClusterArray []InstanceClusterInput

func (InstanceClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceCluster)(nil)).Elem()
}

func (i InstanceClusterArray) ToInstanceClusterArrayOutput() InstanceClusterArrayOutput {
	return i.ToInstanceClusterArrayOutputWithContext(context.Background())
}

func (i InstanceClusterArray) ToInstanceClusterArrayOutputWithContext(ctx context.Context) InstanceClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterArrayOutput)
}

type InstanceClusterOutput struct{ *pulumi.OutputState }

func (InstanceClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCluster)(nil)).Elem()
}

func (o InstanceClusterOutput) ToInstanceClusterOutput() InstanceClusterOutput {
	return o
}

func (o InstanceClusterOutput) ToInstanceClusterOutputWithContext(ctx context.Context) InstanceClusterOutput {
	return o
}

// The ID of the Cloud Bigtable cluster.
func (o InstanceClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceCluster) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The number of nodes in your Cloud Bigtable cluster.
// Required, with a minimum of `3` for a `PRODUCTION` instance. Must be left unset
// for a `DEVELOPMENT` instance.
func (o InstanceClusterOutput) NumNodes() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceCluster) int { return v.NumNodes }).(pulumi.IntOutput)
}

// The storage type to use. One of `"SSD"` or
// `"HDD"`. Defaults to `"SSD"`.
func (o InstanceClusterOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceCluster) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

// The zone to create the Cloud Bigtable cluster in. Each
// cluster must have a different zone in the same region. Zones that support
// Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
func (o InstanceClusterOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceCluster) string { return v.Zone }).(pulumi.StringOutput)
}

type InstanceClusterArrayOutput struct{ *pulumi.OutputState }

func (InstanceClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceCluster)(nil)).Elem()
}

func (o InstanceClusterArrayOutput) ToInstanceClusterArrayOutput() InstanceClusterArrayOutput {
	return o
}

func (o InstanceClusterArrayOutput) ToInstanceClusterArrayOutputWithContext(ctx context.Context) InstanceClusterArrayOutput {
	return o
}

func (o InstanceClusterArrayOutput) Index(i pulumi.IntInput) InstanceClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceCluster {
		return vs[0].([]InstanceCluster)[vs[1].(int)]
	}).(InstanceClusterOutput)
}

type InstanceClusterArgs struct {
	// The ID of the Cloud Bigtable cluster.
	ClusterId string `pulumi:"clusterId"`
	// The number of nodes in your Cloud Bigtable cluster.
	// Required, with a minimum of `3` for a `PRODUCTION` instance. Must be left unset
	// for a `DEVELOPMENT` instance.
	NumNodes *int `pulumi:"numNodes"`
	// The storage type to use. One of `"SSD"` or
	// `"HDD"`. Defaults to `"SSD"`.
	StorageType *string `pulumi:"storageType"`
	// The zone to create the Cloud Bigtable cluster in. Each
	// cluster must have a different zone in the same region. Zones that support
	// Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
	Zone string `pulumi:"zone"`
}

type InstanceClusterArgsInput interface {
	pulumi.Input

	ToInstanceClusterArgsOutput() InstanceClusterArgsOutput
	ToInstanceClusterArgsOutputWithContext(context.Context) InstanceClusterArgsOutput
}

type InstanceClusterArgsArgs struct {
	// The ID of the Cloud Bigtable cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The number of nodes in your Cloud Bigtable cluster.
	// Required, with a minimum of `3` for a `PRODUCTION` instance. Must be left unset
	// for a `DEVELOPMENT` instance.
	NumNodes pulumi.IntPtrInput `pulumi:"numNodes"`
	// The storage type to use. One of `"SSD"` or
	// `"HDD"`. Defaults to `"SSD"`.
	StorageType pulumi.StringPtrInput `pulumi:"storageType"`
	// The zone to create the Cloud Bigtable cluster in. Each
	// cluster must have a different zone in the same region. Zones that support
	// Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (InstanceClusterArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceClusterArgs)(nil)).Elem()
}

func (i InstanceClusterArgsArgs) ToInstanceClusterArgsOutput() InstanceClusterArgsOutput {
	return i.ToInstanceClusterArgsOutputWithContext(context.Background())
}

func (i InstanceClusterArgsArgs) ToInstanceClusterArgsOutputWithContext(ctx context.Context) InstanceClusterArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterArgsOutput)
}

type InstanceClusterArgsArrayInput interface {
	pulumi.Input

	ToInstanceClusterArgsArrayOutput() InstanceClusterArgsArrayOutput
	ToInstanceClusterArgsArrayOutputWithContext(context.Context) InstanceClusterArgsArrayOutput
}

type InstanceClusterArgsArray []InstanceClusterArgsInput

func (InstanceClusterArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceClusterArgs)(nil)).Elem()
}

func (i InstanceClusterArgsArray) ToInstanceClusterArgsArrayOutput() InstanceClusterArgsArrayOutput {
	return i.ToInstanceClusterArgsArrayOutputWithContext(context.Background())
}

func (i InstanceClusterArgsArray) ToInstanceClusterArgsArrayOutputWithContext(ctx context.Context) InstanceClusterArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterArgsArrayOutput)
}

type InstanceClusterArgsOutput struct{ *pulumi.OutputState }

func (InstanceClusterArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceClusterArgs)(nil)).Elem()
}

func (o InstanceClusterArgsOutput) ToInstanceClusterArgsOutput() InstanceClusterArgsOutput {
	return o
}

func (o InstanceClusterArgsOutput) ToInstanceClusterArgsOutputWithContext(ctx context.Context) InstanceClusterArgsOutput {
	return o
}

// The ID of the Cloud Bigtable cluster.
func (o InstanceClusterArgsOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceClusterArgs) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The number of nodes in your Cloud Bigtable cluster.
// Required, with a minimum of `3` for a `PRODUCTION` instance. Must be left unset
// for a `DEVELOPMENT` instance.
func (o InstanceClusterArgsOutput) NumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceClusterArgs) *int { return v.NumNodes }).(pulumi.IntPtrOutput)
}

// The storage type to use. One of `"SSD"` or
// `"HDD"`. Defaults to `"SSD"`.
func (o InstanceClusterArgsOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceClusterArgs) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

// The zone to create the Cloud Bigtable cluster in. Each
// cluster must have a different zone in the same region. Zones that support
// Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
func (o InstanceClusterArgsOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceClusterArgs) string { return v.Zone }).(pulumi.StringOutput)
}

type InstanceClusterArgsArrayOutput struct{ *pulumi.OutputState }

func (InstanceClusterArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceClusterArgs)(nil)).Elem()
}

func (o InstanceClusterArgsArrayOutput) ToInstanceClusterArgsArrayOutput() InstanceClusterArgsArrayOutput {
	return o
}

func (o InstanceClusterArgsArrayOutput) ToInstanceClusterArgsArrayOutputWithContext(ctx context.Context) InstanceClusterArgsArrayOutput {
	return o
}

func (o InstanceClusterArgsArrayOutput) Index(i pulumi.IntInput) InstanceClusterArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceClusterArgs {
		return vs[0].([]InstanceClusterArgs)[vs[1].(int)]
	}).(InstanceClusterArgsOutput)
}

type InstanceClusterState struct {
	// The ID of the Cloud Bigtable cluster.
	ClusterId string `pulumi:"clusterId"`
	// The number of nodes in your Cloud Bigtable cluster.
	// Required, with a minimum of `3` for a `PRODUCTION` instance. Must be left unset
	// for a `DEVELOPMENT` instance.
	NumNodes *int `pulumi:"numNodes"`
	// The storage type to use. One of `"SSD"` or
	// `"HDD"`. Defaults to `"SSD"`.
	StorageType *string `pulumi:"storageType"`
	// The zone to create the Cloud Bigtable cluster in. Each
	// cluster must have a different zone in the same region. Zones that support
	// Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
	Zone string `pulumi:"zone"`
}

type InstanceClusterStateInput interface {
	pulumi.Input

	ToInstanceClusterStateOutput() InstanceClusterStateOutput
	ToInstanceClusterStateOutputWithContext(context.Context) InstanceClusterStateOutput
}

type InstanceClusterStateArgs struct {
	// The ID of the Cloud Bigtable cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The number of nodes in your Cloud Bigtable cluster.
	// Required, with a minimum of `3` for a `PRODUCTION` instance. Must be left unset
	// for a `DEVELOPMENT` instance.
	NumNodes pulumi.IntPtrInput `pulumi:"numNodes"`
	// The storage type to use. One of `"SSD"` or
	// `"HDD"`. Defaults to `"SSD"`.
	StorageType pulumi.StringPtrInput `pulumi:"storageType"`
	// The zone to create the Cloud Bigtable cluster in. Each
	// cluster must have a different zone in the same region. Zones that support
	// Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (InstanceClusterStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceClusterState)(nil)).Elem()
}

func (i InstanceClusterStateArgs) ToInstanceClusterStateOutput() InstanceClusterStateOutput {
	return i.ToInstanceClusterStateOutputWithContext(context.Background())
}

func (i InstanceClusterStateArgs) ToInstanceClusterStateOutputWithContext(ctx context.Context) InstanceClusterStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterStateOutput)
}

type InstanceClusterStateArrayInput interface {
	pulumi.Input

	ToInstanceClusterStateArrayOutput() InstanceClusterStateArrayOutput
	ToInstanceClusterStateArrayOutputWithContext(context.Context) InstanceClusterStateArrayOutput
}

type InstanceClusterStateArray []InstanceClusterStateInput

func (InstanceClusterStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceClusterState)(nil)).Elem()
}

func (i InstanceClusterStateArray) ToInstanceClusterStateArrayOutput() InstanceClusterStateArrayOutput {
	return i.ToInstanceClusterStateArrayOutputWithContext(context.Background())
}

func (i InstanceClusterStateArray) ToInstanceClusterStateArrayOutputWithContext(ctx context.Context) InstanceClusterStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterStateArrayOutput)
}

type InstanceClusterStateOutput struct{ *pulumi.OutputState }

func (InstanceClusterStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceClusterState)(nil)).Elem()
}

func (o InstanceClusterStateOutput) ToInstanceClusterStateOutput() InstanceClusterStateOutput {
	return o
}

func (o InstanceClusterStateOutput) ToInstanceClusterStateOutputWithContext(ctx context.Context) InstanceClusterStateOutput {
	return o
}

// The ID of the Cloud Bigtable cluster.
func (o InstanceClusterStateOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceClusterState) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The number of nodes in your Cloud Bigtable cluster.
// Required, with a minimum of `3` for a `PRODUCTION` instance. Must be left unset
// for a `DEVELOPMENT` instance.
func (o InstanceClusterStateOutput) NumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceClusterState) *int { return v.NumNodes }).(pulumi.IntPtrOutput)
}

// The storage type to use. One of `"SSD"` or
// `"HDD"`. Defaults to `"SSD"`.
func (o InstanceClusterStateOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceClusterState) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

// The zone to create the Cloud Bigtable cluster in. Each
// cluster must have a different zone in the same region. Zones that support
// Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
func (o InstanceClusterStateOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceClusterState) string { return v.Zone }).(pulumi.StringOutput)
}

type InstanceClusterStateArrayOutput struct{ *pulumi.OutputState }

func (InstanceClusterStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceClusterState)(nil)).Elem()
}

func (o InstanceClusterStateArrayOutput) ToInstanceClusterStateArrayOutput() InstanceClusterStateArrayOutput {
	return o
}

func (o InstanceClusterStateArrayOutput) ToInstanceClusterStateArrayOutputWithContext(ctx context.Context) InstanceClusterStateArrayOutput {
	return o
}

func (o InstanceClusterStateArrayOutput) Index(i pulumi.IntInput) InstanceClusterStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceClusterState {
		return vs[0].([]InstanceClusterState)[vs[1].(int)]
	}).(InstanceClusterStateOutput)
}

type InstanceIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

type InstanceIamBindingConditionInput interface {
	pulumi.Input

	ToInstanceIamBindingConditionOutput() InstanceIamBindingConditionOutput
	ToInstanceIamBindingConditionOutputWithContext(context.Context) InstanceIamBindingConditionOutput
}

type InstanceIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingCondition)(nil)).Elem()
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionOutput() InstanceIamBindingConditionOutput {
	return i.ToInstanceIamBindingConditionOutputWithContext(context.Background())
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionOutputWithContext(ctx context.Context) InstanceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionOutput)
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return i.ToInstanceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionOutput).ToInstanceIamBindingConditionPtrOutputWithContext(ctx)
}

type InstanceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput
	ToInstanceIamBindingConditionPtrOutputWithContext(context.Context) InstanceIamBindingConditionPtrOutput
}

type instanceIamBindingConditionPtrType InstanceIamBindingConditionArgs

func InstanceIamBindingConditionPtr(v *InstanceIamBindingConditionArgs) InstanceIamBindingConditionPtrInput {
	return (*instanceIamBindingConditionPtrType)(v)
}

func (*instanceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBindingCondition)(nil)).Elem()
}

func (i *instanceIamBindingConditionPtrType) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return i.ToInstanceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIamBindingConditionPtrType) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionPtrOutput)
}

type InstanceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingCondition)(nil)).Elem()
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionOutput() InstanceIamBindingConditionOutput {
	return o
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionOutputWithContext(ctx context.Context) InstanceIamBindingConditionOutput {
	return o
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return o.ToInstanceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) *InstanceIamBindingCondition {
		return &v
	}).(InstanceIamBindingConditionPtrOutput)
}
func (o InstanceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBindingCondition)(nil)).Elem()
}

func (o InstanceIamBindingConditionPtrOutput) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return o
}

func (o InstanceIamBindingConditionPtrOutput) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return o
}

func (o InstanceIamBindingConditionPtrOutput) Elem() InstanceIamBindingConditionOutput {
	return o.ApplyT(func(v *InstanceIamBindingCondition) InstanceIamBindingCondition { return *v }).(InstanceIamBindingConditionOutput)
}

func (o InstanceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamBindingConditionArgs struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

type InstanceIamBindingConditionArgsInput interface {
	pulumi.Input

	ToInstanceIamBindingConditionArgsOutput() InstanceIamBindingConditionArgsOutput
	ToInstanceIamBindingConditionArgsOutputWithContext(context.Context) InstanceIamBindingConditionArgsOutput
}

type InstanceIamBindingConditionArgsArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingConditionArgs)(nil)).Elem()
}

func (i InstanceIamBindingConditionArgsArgs) ToInstanceIamBindingConditionArgsOutput() InstanceIamBindingConditionArgsOutput {
	return i.ToInstanceIamBindingConditionArgsOutputWithContext(context.Background())
}

func (i InstanceIamBindingConditionArgsArgs) ToInstanceIamBindingConditionArgsOutputWithContext(ctx context.Context) InstanceIamBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionArgsOutput)
}

func (i InstanceIamBindingConditionArgsArgs) ToInstanceIamBindingConditionArgsPtrOutput() InstanceIamBindingConditionArgsPtrOutput {
	return i.ToInstanceIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i InstanceIamBindingConditionArgsArgs) ToInstanceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionArgsOutput).ToInstanceIamBindingConditionArgsPtrOutputWithContext(ctx)
}

type InstanceIamBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToInstanceIamBindingConditionArgsPtrOutput() InstanceIamBindingConditionArgsPtrOutput
	ToInstanceIamBindingConditionArgsPtrOutputWithContext(context.Context) InstanceIamBindingConditionArgsPtrOutput
}

type instanceIamBindingConditionArgsPtrType InstanceIamBindingConditionArgsArgs

func InstanceIamBindingConditionArgsPtr(v *InstanceIamBindingConditionArgsArgs) InstanceIamBindingConditionArgsPtrInput {
	return (*instanceIamBindingConditionArgsPtrType)(v)
}

func (*instanceIamBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBindingConditionArgs)(nil)).Elem()
}

func (i *instanceIamBindingConditionArgsPtrType) ToInstanceIamBindingConditionArgsPtrOutput() InstanceIamBindingConditionArgsPtrOutput {
	return i.ToInstanceIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *instanceIamBindingConditionArgsPtrType) ToInstanceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionArgsPtrOutput)
}

type InstanceIamBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingConditionArgs)(nil)).Elem()
}

func (o InstanceIamBindingConditionArgsOutput) ToInstanceIamBindingConditionArgsOutput() InstanceIamBindingConditionArgsOutput {
	return o
}

func (o InstanceIamBindingConditionArgsOutput) ToInstanceIamBindingConditionArgsOutputWithContext(ctx context.Context) InstanceIamBindingConditionArgsOutput {
	return o
}

func (o InstanceIamBindingConditionArgsOutput) ToInstanceIamBindingConditionArgsPtrOutput() InstanceIamBindingConditionArgsPtrOutput {
	return o.ToInstanceIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o InstanceIamBindingConditionArgsOutput) ToInstanceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionArgs) *InstanceIamBindingConditionArgs {
		return &v
	}).(InstanceIamBindingConditionArgsPtrOutput)
}
func (o InstanceIamBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBindingConditionArgs)(nil)).Elem()
}

func (o InstanceIamBindingConditionArgsPtrOutput) ToInstanceIamBindingConditionArgsPtrOutput() InstanceIamBindingConditionArgsPtrOutput {
	return o
}

func (o InstanceIamBindingConditionArgsPtrOutput) ToInstanceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionArgsPtrOutput {
	return o
}

func (o InstanceIamBindingConditionArgsPtrOutput) Elem() InstanceIamBindingConditionArgsOutput {
	return o.ApplyT(func(v *InstanceIamBindingConditionArgs) InstanceIamBindingConditionArgs { return *v }).(InstanceIamBindingConditionArgsOutput)
}

func (o InstanceIamBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamBindingConditionState struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

type InstanceIamBindingConditionStateInput interface {
	pulumi.Input

	ToInstanceIamBindingConditionStateOutput() InstanceIamBindingConditionStateOutput
	ToInstanceIamBindingConditionStateOutputWithContext(context.Context) InstanceIamBindingConditionStateOutput
}

type InstanceIamBindingConditionStateArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingConditionState)(nil)).Elem()
}

func (i InstanceIamBindingConditionStateArgs) ToInstanceIamBindingConditionStateOutput() InstanceIamBindingConditionStateOutput {
	return i.ToInstanceIamBindingConditionStateOutputWithContext(context.Background())
}

func (i InstanceIamBindingConditionStateArgs) ToInstanceIamBindingConditionStateOutputWithContext(ctx context.Context) InstanceIamBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionStateOutput)
}

type InstanceIamBindingConditionStateOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingConditionState)(nil)).Elem()
}

func (o InstanceIamBindingConditionStateOutput) ToInstanceIamBindingConditionStateOutput() InstanceIamBindingConditionStateOutput {
	return o
}

func (o InstanceIamBindingConditionStateOutput) ToInstanceIamBindingConditionStateOutputWithContext(ctx context.Context) InstanceIamBindingConditionStateOutput {
	return o
}

func (o InstanceIamBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

type InstanceIamMemberConditionInput interface {
	pulumi.Input

	ToInstanceIamMemberConditionOutput() InstanceIamMemberConditionOutput
	ToInstanceIamMemberConditionOutputWithContext(context.Context) InstanceIamMemberConditionOutput
}

type InstanceIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberCondition)(nil)).Elem()
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionOutput() InstanceIamMemberConditionOutput {
	return i.ToInstanceIamMemberConditionOutputWithContext(context.Background())
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionOutputWithContext(ctx context.Context) InstanceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionOutput)
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return i.ToInstanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionOutput).ToInstanceIamMemberConditionPtrOutputWithContext(ctx)
}

type InstanceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput
	ToInstanceIamMemberConditionPtrOutputWithContext(context.Context) InstanceIamMemberConditionPtrOutput
}

type instanceIamMemberConditionPtrType InstanceIamMemberConditionArgs

func InstanceIamMemberConditionPtr(v *InstanceIamMemberConditionArgs) InstanceIamMemberConditionPtrInput {
	return (*instanceIamMemberConditionPtrType)(v)
}

func (*instanceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamMemberCondition)(nil)).Elem()
}

func (i *instanceIamMemberConditionPtrType) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return i.ToInstanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIamMemberConditionPtrType) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionPtrOutput)
}

type InstanceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (InstanceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberCondition)(nil)).Elem()
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionOutput() InstanceIamMemberConditionOutput {
	return o
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionOutputWithContext(ctx context.Context) InstanceIamMemberConditionOutput {
	return o
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return o.ToInstanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) *InstanceIamMemberCondition {
		return &v
	}).(InstanceIamMemberConditionPtrOutput)
}
func (o InstanceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamMemberCondition)(nil)).Elem()
}

func (o InstanceIamMemberConditionPtrOutput) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return o
}

func (o InstanceIamMemberConditionPtrOutput) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return o
}

func (o InstanceIamMemberConditionPtrOutput) Elem() InstanceIamMemberConditionOutput {
	return o.ApplyT(func(v *InstanceIamMemberCondition) InstanceIamMemberCondition { return *v }).(InstanceIamMemberConditionOutput)
}

func (o InstanceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamMemberConditionArgs struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

type InstanceIamMemberConditionArgsInput interface {
	pulumi.Input

	ToInstanceIamMemberConditionArgsOutput() InstanceIamMemberConditionArgsOutput
	ToInstanceIamMemberConditionArgsOutputWithContext(context.Context) InstanceIamMemberConditionArgsOutput
}

type InstanceIamMemberConditionArgsArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberConditionArgs)(nil)).Elem()
}

func (i InstanceIamMemberConditionArgsArgs) ToInstanceIamMemberConditionArgsOutput() InstanceIamMemberConditionArgsOutput {
	return i.ToInstanceIamMemberConditionArgsOutputWithContext(context.Background())
}

func (i InstanceIamMemberConditionArgsArgs) ToInstanceIamMemberConditionArgsOutputWithContext(ctx context.Context) InstanceIamMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionArgsOutput)
}

func (i InstanceIamMemberConditionArgsArgs) ToInstanceIamMemberConditionArgsPtrOutput() InstanceIamMemberConditionArgsPtrOutput {
	return i.ToInstanceIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i InstanceIamMemberConditionArgsArgs) ToInstanceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionArgsOutput).ToInstanceIamMemberConditionArgsPtrOutputWithContext(ctx)
}

type InstanceIamMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToInstanceIamMemberConditionArgsPtrOutput() InstanceIamMemberConditionArgsPtrOutput
	ToInstanceIamMemberConditionArgsPtrOutputWithContext(context.Context) InstanceIamMemberConditionArgsPtrOutput
}

type instanceIamMemberConditionArgsPtrType InstanceIamMemberConditionArgsArgs

func InstanceIamMemberConditionArgsPtr(v *InstanceIamMemberConditionArgsArgs) InstanceIamMemberConditionArgsPtrInput {
	return (*instanceIamMemberConditionArgsPtrType)(v)
}

func (*instanceIamMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamMemberConditionArgs)(nil)).Elem()
}

func (i *instanceIamMemberConditionArgsPtrType) ToInstanceIamMemberConditionArgsPtrOutput() InstanceIamMemberConditionArgsPtrOutput {
	return i.ToInstanceIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *instanceIamMemberConditionArgsPtrType) ToInstanceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionArgsPtrOutput)
}

type InstanceIamMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (InstanceIamMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberConditionArgs)(nil)).Elem()
}

func (o InstanceIamMemberConditionArgsOutput) ToInstanceIamMemberConditionArgsOutput() InstanceIamMemberConditionArgsOutput {
	return o
}

func (o InstanceIamMemberConditionArgsOutput) ToInstanceIamMemberConditionArgsOutputWithContext(ctx context.Context) InstanceIamMemberConditionArgsOutput {
	return o
}

func (o InstanceIamMemberConditionArgsOutput) ToInstanceIamMemberConditionArgsPtrOutput() InstanceIamMemberConditionArgsPtrOutput {
	return o.ToInstanceIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o InstanceIamMemberConditionArgsOutput) ToInstanceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionArgs) *InstanceIamMemberConditionArgs {
		return &v
	}).(InstanceIamMemberConditionArgsPtrOutput)
}
func (o InstanceIamMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (InstanceIamMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamMemberConditionArgs)(nil)).Elem()
}

func (o InstanceIamMemberConditionArgsPtrOutput) ToInstanceIamMemberConditionArgsPtrOutput() InstanceIamMemberConditionArgsPtrOutput {
	return o
}

func (o InstanceIamMemberConditionArgsPtrOutput) ToInstanceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionArgsPtrOutput {
	return o
}

func (o InstanceIamMemberConditionArgsPtrOutput) Elem() InstanceIamMemberConditionArgsOutput {
	return o.ApplyT(func(v *InstanceIamMemberConditionArgs) InstanceIamMemberConditionArgs { return *v }).(InstanceIamMemberConditionArgsOutput)
}

func (o InstanceIamMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamMemberConditionState struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

type InstanceIamMemberConditionStateInput interface {
	pulumi.Input

	ToInstanceIamMemberConditionStateOutput() InstanceIamMemberConditionStateOutput
	ToInstanceIamMemberConditionStateOutputWithContext(context.Context) InstanceIamMemberConditionStateOutput
}

type InstanceIamMemberConditionStateArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberConditionState)(nil)).Elem()
}

func (i InstanceIamMemberConditionStateArgs) ToInstanceIamMemberConditionStateOutput() InstanceIamMemberConditionStateOutput {
	return i.ToInstanceIamMemberConditionStateOutputWithContext(context.Background())
}

func (i InstanceIamMemberConditionStateArgs) ToInstanceIamMemberConditionStateOutputWithContext(ctx context.Context) InstanceIamMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionStateOutput)
}

type InstanceIamMemberConditionStateOutput struct{ *pulumi.OutputState }

func (InstanceIamMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberConditionState)(nil)).Elem()
}

func (o InstanceIamMemberConditionStateOutput) ToInstanceIamMemberConditionStateOutput() InstanceIamMemberConditionStateOutput {
	return o
}

func (o InstanceIamMemberConditionStateOutput) ToInstanceIamMemberConditionStateOutputWithContext(ctx context.Context) InstanceIamMemberConditionStateOutput {
	return o
}

func (o InstanceIamMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type TableColumnFamily struct {
	// The name of the column family.
	Family string `pulumi:"family"`
}

type TableColumnFamilyInput interface {
	pulumi.Input

	ToTableColumnFamilyOutput() TableColumnFamilyOutput
	ToTableColumnFamilyOutputWithContext(context.Context) TableColumnFamilyOutput
}

type TableColumnFamilyArgs struct {
	// The name of the column family.
	Family pulumi.StringInput `pulumi:"family"`
}

func (TableColumnFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnFamily)(nil)).Elem()
}

func (i TableColumnFamilyArgs) ToTableColumnFamilyOutput() TableColumnFamilyOutput {
	return i.ToTableColumnFamilyOutputWithContext(context.Background())
}

func (i TableColumnFamilyArgs) ToTableColumnFamilyOutputWithContext(ctx context.Context) TableColumnFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnFamilyOutput)
}

type TableColumnFamilyArrayInput interface {
	pulumi.Input

	ToTableColumnFamilyArrayOutput() TableColumnFamilyArrayOutput
	ToTableColumnFamilyArrayOutputWithContext(context.Context) TableColumnFamilyArrayOutput
}

type TableColumnFamilyArray []TableColumnFamilyInput

func (TableColumnFamilyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumnFamily)(nil)).Elem()
}

func (i TableColumnFamilyArray) ToTableColumnFamilyArrayOutput() TableColumnFamilyArrayOutput {
	return i.ToTableColumnFamilyArrayOutputWithContext(context.Background())
}

func (i TableColumnFamilyArray) ToTableColumnFamilyArrayOutputWithContext(ctx context.Context) TableColumnFamilyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnFamilyArrayOutput)
}

type TableColumnFamilyOutput struct{ *pulumi.OutputState }

func (TableColumnFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnFamily)(nil)).Elem()
}

func (o TableColumnFamilyOutput) ToTableColumnFamilyOutput() TableColumnFamilyOutput {
	return o
}

func (o TableColumnFamilyOutput) ToTableColumnFamilyOutputWithContext(ctx context.Context) TableColumnFamilyOutput {
	return o
}

// The name of the column family.
func (o TableColumnFamilyOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumnFamily) string { return v.Family }).(pulumi.StringOutput)
}

type TableColumnFamilyArrayOutput struct{ *pulumi.OutputState }

func (TableColumnFamilyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumnFamily)(nil)).Elem()
}

func (o TableColumnFamilyArrayOutput) ToTableColumnFamilyArrayOutput() TableColumnFamilyArrayOutput {
	return o
}

func (o TableColumnFamilyArrayOutput) ToTableColumnFamilyArrayOutputWithContext(ctx context.Context) TableColumnFamilyArrayOutput {
	return o
}

func (o TableColumnFamilyArrayOutput) Index(i pulumi.IntInput) TableColumnFamilyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumnFamily {
		return vs[0].([]TableColumnFamily)[vs[1].(int)]
	}).(TableColumnFamilyOutput)
}

type TableColumnFamilyArgs struct {
	// The name of the column family.
	Family string `pulumi:"family"`
}

type TableColumnFamilyArgsInput interface {
	pulumi.Input

	ToTableColumnFamilyArgsOutput() TableColumnFamilyArgsOutput
	ToTableColumnFamilyArgsOutputWithContext(context.Context) TableColumnFamilyArgsOutput
}

type TableColumnFamilyArgsArgs struct {
	// The name of the column family.
	Family pulumi.StringInput `pulumi:"family"`
}

func (TableColumnFamilyArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnFamilyArgs)(nil)).Elem()
}

func (i TableColumnFamilyArgsArgs) ToTableColumnFamilyArgsOutput() TableColumnFamilyArgsOutput {
	return i.ToTableColumnFamilyArgsOutputWithContext(context.Background())
}

func (i TableColumnFamilyArgsArgs) ToTableColumnFamilyArgsOutputWithContext(ctx context.Context) TableColumnFamilyArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnFamilyArgsOutput)
}

type TableColumnFamilyArgsArrayInput interface {
	pulumi.Input

	ToTableColumnFamilyArgsArrayOutput() TableColumnFamilyArgsArrayOutput
	ToTableColumnFamilyArgsArrayOutputWithContext(context.Context) TableColumnFamilyArgsArrayOutput
}

type TableColumnFamilyArgsArray []TableColumnFamilyArgsInput

func (TableColumnFamilyArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumnFamilyArgs)(nil)).Elem()
}

func (i TableColumnFamilyArgsArray) ToTableColumnFamilyArgsArrayOutput() TableColumnFamilyArgsArrayOutput {
	return i.ToTableColumnFamilyArgsArrayOutputWithContext(context.Background())
}

func (i TableColumnFamilyArgsArray) ToTableColumnFamilyArgsArrayOutputWithContext(ctx context.Context) TableColumnFamilyArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnFamilyArgsArrayOutput)
}

type TableColumnFamilyArgsOutput struct{ *pulumi.OutputState }

func (TableColumnFamilyArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnFamilyArgs)(nil)).Elem()
}

func (o TableColumnFamilyArgsOutput) ToTableColumnFamilyArgsOutput() TableColumnFamilyArgsOutput {
	return o
}

func (o TableColumnFamilyArgsOutput) ToTableColumnFamilyArgsOutputWithContext(ctx context.Context) TableColumnFamilyArgsOutput {
	return o
}

// The name of the column family.
func (o TableColumnFamilyArgsOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumnFamilyArgs) string { return v.Family }).(pulumi.StringOutput)
}

type TableColumnFamilyArgsArrayOutput struct{ *pulumi.OutputState }

func (TableColumnFamilyArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumnFamilyArgs)(nil)).Elem()
}

func (o TableColumnFamilyArgsArrayOutput) ToTableColumnFamilyArgsArrayOutput() TableColumnFamilyArgsArrayOutput {
	return o
}

func (o TableColumnFamilyArgsArrayOutput) ToTableColumnFamilyArgsArrayOutputWithContext(ctx context.Context) TableColumnFamilyArgsArrayOutput {
	return o
}

func (o TableColumnFamilyArgsArrayOutput) Index(i pulumi.IntInput) TableColumnFamilyArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumnFamilyArgs {
		return vs[0].([]TableColumnFamilyArgs)[vs[1].(int)]
	}).(TableColumnFamilyArgsOutput)
}

type TableColumnFamilyState struct {
	// The name of the column family.
	Family string `pulumi:"family"`
}

type TableColumnFamilyStateInput interface {
	pulumi.Input

	ToTableColumnFamilyStateOutput() TableColumnFamilyStateOutput
	ToTableColumnFamilyStateOutputWithContext(context.Context) TableColumnFamilyStateOutput
}

type TableColumnFamilyStateArgs struct {
	// The name of the column family.
	Family pulumi.StringInput `pulumi:"family"`
}

func (TableColumnFamilyStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnFamilyState)(nil)).Elem()
}

func (i TableColumnFamilyStateArgs) ToTableColumnFamilyStateOutput() TableColumnFamilyStateOutput {
	return i.ToTableColumnFamilyStateOutputWithContext(context.Background())
}

func (i TableColumnFamilyStateArgs) ToTableColumnFamilyStateOutputWithContext(ctx context.Context) TableColumnFamilyStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnFamilyStateOutput)
}

type TableColumnFamilyStateArrayInput interface {
	pulumi.Input

	ToTableColumnFamilyStateArrayOutput() TableColumnFamilyStateArrayOutput
	ToTableColumnFamilyStateArrayOutputWithContext(context.Context) TableColumnFamilyStateArrayOutput
}

type TableColumnFamilyStateArray []TableColumnFamilyStateInput

func (TableColumnFamilyStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumnFamilyState)(nil)).Elem()
}

func (i TableColumnFamilyStateArray) ToTableColumnFamilyStateArrayOutput() TableColumnFamilyStateArrayOutput {
	return i.ToTableColumnFamilyStateArrayOutputWithContext(context.Background())
}

func (i TableColumnFamilyStateArray) ToTableColumnFamilyStateArrayOutputWithContext(ctx context.Context) TableColumnFamilyStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnFamilyStateArrayOutput)
}

type TableColumnFamilyStateOutput struct{ *pulumi.OutputState }

func (TableColumnFamilyStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnFamilyState)(nil)).Elem()
}

func (o TableColumnFamilyStateOutput) ToTableColumnFamilyStateOutput() TableColumnFamilyStateOutput {
	return o
}

func (o TableColumnFamilyStateOutput) ToTableColumnFamilyStateOutputWithContext(ctx context.Context) TableColumnFamilyStateOutput {
	return o
}

// The name of the column family.
func (o TableColumnFamilyStateOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumnFamilyState) string { return v.Family }).(pulumi.StringOutput)
}

type TableColumnFamilyStateArrayOutput struct{ *pulumi.OutputState }

func (TableColumnFamilyStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumnFamilyState)(nil)).Elem()
}

func (o TableColumnFamilyStateArrayOutput) ToTableColumnFamilyStateArrayOutput() TableColumnFamilyStateArrayOutput {
	return o
}

func (o TableColumnFamilyStateArrayOutput) ToTableColumnFamilyStateArrayOutputWithContext(ctx context.Context) TableColumnFamilyStateArrayOutput {
	return o
}

func (o TableColumnFamilyStateArrayOutput) Index(i pulumi.IntInput) TableColumnFamilyStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumnFamilyState {
		return vs[0].([]TableColumnFamilyState)[vs[1].(int)]
	}).(TableColumnFamilyStateOutput)
}

func init() {
	pulumi.RegisterOutputType(GCPolicyMaxAgeOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxAgeArrayOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxAgeArgsOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxAgeArgsArrayOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxAgeStateOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxAgeStateArrayOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxVersionOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxVersionArrayOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxVersionArgsOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxVersionArgsArrayOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxVersionStateOutput{})
	pulumi.RegisterOutputType(GCPolicyMaxVersionStateArrayOutput{})
	pulumi.RegisterOutputType(InstanceClusterOutput{})
	pulumi.RegisterOutputType(InstanceClusterArrayOutput{})
	pulumi.RegisterOutputType(InstanceClusterArgsOutput{})
	pulumi.RegisterOutputType(InstanceClusterArgsArrayOutput{})
	pulumi.RegisterOutputType(InstanceClusterStateOutput{})
	pulumi.RegisterOutputType(InstanceClusterStateArrayOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingConditionStateOutput{})
	pulumi.RegisterOutputType(InstanceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(InstanceIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(InstanceIamMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(InstanceIamMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(InstanceIamMemberConditionStateOutput{})
	pulumi.RegisterOutputType(TableColumnFamilyOutput{})
	pulumi.RegisterOutputType(TableColumnFamilyArrayOutput{})
	pulumi.RegisterOutputType(TableColumnFamilyArgsOutput{})
	pulumi.RegisterOutputType(TableColumnFamilyArgsArrayOutput{})
	pulumi.RegisterOutputType(TableColumnFamilyStateOutput{})
	pulumi.RegisterOutputType(TableColumnFamilyStateArrayOutput{})
}
