// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package service

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceMetadata"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceStatus"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceStatusCondition"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplate"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateMetadata"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateSpec"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateSpecContainer"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateSpecContainerEnv"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateSpecContainerEnvFrom"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateSpecContainerEnvFromConfigMapRef"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateSpecContainerEnvFromConfigMapRefLocalObjectReference"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateSpecContainerEnvFromSecretRef"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateSpecContainerEnvFromSecretRefLocalObjectReference"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTemplateSpecContainerResources"
	"https:/github.com/pulumi/pulumi-gcp/cloudrun/ServiceTraffic"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/cloud_run_service.html.markdown.
type Service struct {
	pulumi.CustomResourceState

	// The location of the cloud run instance. eg us-central1
	Location pulumi.StringOutput `pulumi:"location"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata cloudrunServiceMetadata.ServiceMetadataOutput `pulumi:"metadata"`
	// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources. Name is
	// primarily intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The current status of the Service.
	Status cloudrunServiceStatus.ServiceStatusOutput `pulumi:"status"`
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/master/docs/client-conventions.md#associate-modifications-with-revisions Cloud
	// Run does not currently support referencing a build that is responsible for materializing the container image from
	// source.
	Template cloudrunServiceTemplate.ServiceTemplatePtrOutput `pulumi:"template"`
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics cloudrunServiceTraffic.ServiceTrafficArrayOutput `pulumi:"traffics"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil {
		args = &ServiceArgs{}
	}
	var resource Service
	err := ctx.RegisterResource("gcp:cloudrun/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("gcp:cloudrun/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// The location of the cloud run instance. eg us-central1
	Location *string `pulumi:"location"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata *cloudrunServiceMetadata.ServiceMetadata `pulumi:"metadata"`
	// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources. Name is
	// primarily intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// http://kubernetes.io/docs/user-guide/identifiers#names
	Name *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The current status of the Service.
	Status *cloudrunServiceStatus.ServiceStatus `pulumi:"status"`
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/master/docs/client-conventions.md#associate-modifications-with-revisions Cloud
	// Run does not currently support referencing a build that is responsible for materializing the container image from
	// source.
	Template *cloudrunServiceTemplate.ServiceTemplate `pulumi:"template"`
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics []cloudrunServiceTraffic.ServiceTraffic `pulumi:"traffics"`
}

type ServiceState struct {
	// The location of the cloud run instance. eg us-central1
	Location pulumi.StringPtrInput
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata cloudrunServiceMetadata.ServiceMetadataPtrInput
	// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources. Name is
	// primarily intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The current status of the Service.
	Status cloudrunServiceStatus.ServiceStatusPtrInput
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/master/docs/client-conventions.md#associate-modifications-with-revisions Cloud
	// Run does not currently support referencing a build that is responsible for materializing the container image from
	// source.
	Template cloudrunServiceTemplate.ServiceTemplatePtrInput
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics cloudrunServiceTraffic.ServiceTrafficArrayInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The location of the cloud run instance. eg us-central1
	Location string `pulumi:"location"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata *cloudrunServiceMetadata.ServiceMetadata `pulumi:"metadata"`
	// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources. Name is
	// primarily intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// http://kubernetes.io/docs/user-guide/identifiers#names
	Name *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/master/docs/client-conventions.md#associate-modifications-with-revisions Cloud
	// Run does not currently support referencing a build that is responsible for materializing the container image from
	// source.
	Template *cloudrunServiceTemplate.ServiceTemplate `pulumi:"template"`
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics []cloudrunServiceTraffic.ServiceTraffic `pulumi:"traffics"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The location of the cloud run instance. eg us-central1
	Location pulumi.StringInput
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata cloudrunServiceMetadata.ServiceMetadataPtrInput
	// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources. Name is
	// primarily intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/master/docs/client-conventions.md#associate-modifications-with-revisions Cloud
	// Run does not currently support referencing a build that is responsible for materializing the container image from
	// source.
	Template cloudrunServiceTemplate.ServiceTemplatePtrInput
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics cloudrunServiceTraffic.ServiceTrafficArrayInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

