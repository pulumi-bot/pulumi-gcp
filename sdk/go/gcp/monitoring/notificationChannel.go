// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type NotificationChannel struct {
	s *pulumi.ResourceState
}

// NewNotificationChannel registers a new resource with the given unique name, arguments, and options.
func NewNotificationChannel(ctx *pulumi.Context,
	name string, args *NotificationChannelArgs, opts ...pulumi.ResourceOpt) (*NotificationChannel, error) {
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["displayName"] = nil
		inputs["enabled"] = nil
		inputs["labels"] = nil
		inputs["project"] = nil
		inputs["type"] = nil
		inputs["userLabels"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["displayName"] = args.DisplayName
		inputs["enabled"] = args.Enabled
		inputs["labels"] = args.Labels
		inputs["project"] = args.Project
		inputs["type"] = args.Type
		inputs["userLabels"] = args.UserLabels
	}
	inputs["name"] = nil
	inputs["verificationStatus"] = nil
	s, err := ctx.RegisterResource("gcp:monitoring/notificationChannel:NotificationChannel", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NotificationChannel{s: s}, nil
}

// GetNotificationChannel gets an existing NotificationChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationChannel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NotificationChannelState, opts ...pulumi.ResourceOpt) (*NotificationChannel, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["displayName"] = state.DisplayName
		inputs["enabled"] = state.Enabled
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["type"] = state.Type
		inputs["userLabels"] = state.UserLabels
		inputs["verificationStatus"] = state.VerificationStatus
	}
	s, err := ctx.ReadResource("gcp:monitoring/notificationChannel:NotificationChannel", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NotificationChannel{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NotificationChannel) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NotificationChannel) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *NotificationChannel) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *NotificationChannel) DisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayName"])
}

func (r *NotificationChannel) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

func (r *NotificationChannel) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *NotificationChannel) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *NotificationChannel) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *NotificationChannel) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

func (r *NotificationChannel) UserLabels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["userLabels"])
}

func (r *NotificationChannel) VerificationStatus() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["verificationStatus"])
}

// Input properties used for looking up and filtering NotificationChannel resources.
type NotificationChannelState struct {
	Description interface{}
	DisplayName interface{}
	Enabled interface{}
	Labels interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Type interface{}
	UserLabels interface{}
	VerificationStatus interface{}
}

// The set of arguments for constructing a NotificationChannel resource.
type NotificationChannelArgs struct {
	Description interface{}
	DisplayName interface{}
	Enabled interface{}
	Labels interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Type interface{}
	UserLabels interface{}
}
