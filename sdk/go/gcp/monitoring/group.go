// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The description of a dynamic collection of monitored resources. Each group
// has a filter that is matched against monitored resources and their
// associated metadata. If a group's filter matches an available monitored
// resource, then that resource is a member of that group.
// 
// 
// To get more information about Group, see:
// 
// * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.groups)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/monitoring/groups/)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/monitoring_group.html.markdown.
type Group struct {
	s *pulumi.ResourceState
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOpt) (*Group, error) {
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.Filter == nil {
		return nil, errors.New("missing required argument 'Filter'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["displayName"] = nil
		inputs["filter"] = nil
		inputs["isCluster"] = nil
		inputs["parentName"] = nil
		inputs["project"] = nil
	} else {
		inputs["displayName"] = args.DisplayName
		inputs["filter"] = args.Filter
		inputs["isCluster"] = args.IsCluster
		inputs["parentName"] = args.ParentName
		inputs["project"] = args.Project
	}
	inputs["name"] = nil
	s, err := ctx.RegisterResource("gcp:monitoring/group:Group", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupState, opts ...pulumi.ResourceOpt) (*Group, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["displayName"] = state.DisplayName
		inputs["filter"] = state.Filter
		inputs["isCluster"] = state.IsCluster
		inputs["name"] = state.Name
		inputs["parentName"] = state.ParentName
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gcp:monitoring/group:Group", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Group) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Group) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Group) DisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayName"])
}

func (r *Group) Filter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["filter"])
}

func (r *Group) IsCluster() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isCluster"])
}

func (r *Group) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Group) ParentName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["parentName"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Group) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering Group resources.
type GroupState struct {
	DisplayName interface{}
	Filter interface{}
	IsCluster interface{}
	Name interface{}
	ParentName interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	DisplayName interface{}
	Filter interface{}
	IsCluster interface{}
	ParentName interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
