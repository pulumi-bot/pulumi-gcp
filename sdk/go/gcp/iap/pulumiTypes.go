// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AppEngineServiceIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineServiceIamBindingConditionInput interface {
	pulumi.Input

	ToAppEngineServiceIamBindingConditionOutput() AppEngineServiceIamBindingConditionOutput
	ToAppEngineServiceIamBindingConditionOutputWithContext(context.Context) AppEngineServiceIamBindingConditionOutput
}

type AppEngineServiceIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineServiceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamBindingCondition)(nil)).Elem()
}

func (i AppEngineServiceIamBindingConditionArgs) ToAppEngineServiceIamBindingConditionOutput() AppEngineServiceIamBindingConditionOutput {
	return i.ToAppEngineServiceIamBindingConditionOutputWithContext(context.Background())
}

func (i AppEngineServiceIamBindingConditionArgs) ToAppEngineServiceIamBindingConditionOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionOutput)
}

func (i AppEngineServiceIamBindingConditionArgs) ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput {
	return i.ToAppEngineServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i AppEngineServiceIamBindingConditionArgs) ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionOutput).ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx)
}

type AppEngineServiceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput
	ToAppEngineServiceIamBindingConditionPtrOutputWithContext(context.Context) AppEngineServiceIamBindingConditionPtrOutput
}

type appEngineServiceIamBindingConditionPtrType AppEngineServiceIamBindingConditionArgs

func AppEngineServiceIamBindingConditionPtr(v *AppEngineServiceIamBindingConditionArgs) AppEngineServiceIamBindingConditionPtrInput {
	return (*appEngineServiceIamBindingConditionPtrType)(v)
}

func (*appEngineServiceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamBindingCondition)(nil)).Elem()
}

func (i *appEngineServiceIamBindingConditionPtrType) ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput {
	return i.ToAppEngineServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *appEngineServiceIamBindingConditionPtrType) ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionPtrOutput)
}

type AppEngineServiceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamBindingCondition)(nil)).Elem()
}

func (o AppEngineServiceIamBindingConditionOutput) ToAppEngineServiceIamBindingConditionOutput() AppEngineServiceIamBindingConditionOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionOutput) ToAppEngineServiceIamBindingConditionOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionOutput) ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput {
	return o.ToAppEngineServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o AppEngineServiceIamBindingConditionOutput) ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) *AppEngineServiceIamBindingCondition {
		return &v
	}).(AppEngineServiceIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamBindingCondition)(nil)).Elem()
}

func (o AppEngineServiceIamBindingConditionPtrOutput) ToAppEngineServiceIamBindingConditionPtrOutput() AppEngineServiceIamBindingConditionPtrOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionPtrOutput) ToAppEngineServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionPtrOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionPtrOutput) Elem() AppEngineServiceIamBindingConditionOutput {
	return o.ApplyT(func(v *AppEngineServiceIamBindingCondition) AppEngineServiceIamBindingCondition { return *v }).(AppEngineServiceIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineServiceIamBindingConditionArgsInput interface {
	pulumi.Input

	ToAppEngineServiceIamBindingConditionArgsOutput() AppEngineServiceIamBindingConditionArgsOutput
	ToAppEngineServiceIamBindingConditionArgsOutputWithContext(context.Context) AppEngineServiceIamBindingConditionArgsOutput
}

type AppEngineServiceIamBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineServiceIamBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamBindingConditionArgs)(nil)).Elem()
}

func (i AppEngineServiceIamBindingConditionArgsArgs) ToAppEngineServiceIamBindingConditionArgsOutput() AppEngineServiceIamBindingConditionArgsOutput {
	return i.ToAppEngineServiceIamBindingConditionArgsOutputWithContext(context.Background())
}

func (i AppEngineServiceIamBindingConditionArgsArgs) ToAppEngineServiceIamBindingConditionArgsOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionArgsOutput)
}

func (i AppEngineServiceIamBindingConditionArgsArgs) ToAppEngineServiceIamBindingConditionArgsPtrOutput() AppEngineServiceIamBindingConditionArgsPtrOutput {
	return i.ToAppEngineServiceIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i AppEngineServiceIamBindingConditionArgsArgs) ToAppEngineServiceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionArgsOutput).ToAppEngineServiceIamBindingConditionArgsPtrOutputWithContext(ctx)
}

type AppEngineServiceIamBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToAppEngineServiceIamBindingConditionArgsPtrOutput() AppEngineServiceIamBindingConditionArgsPtrOutput
	ToAppEngineServiceIamBindingConditionArgsPtrOutputWithContext(context.Context) AppEngineServiceIamBindingConditionArgsPtrOutput
}

type appEngineServiceIamBindingConditionArgsPtrType AppEngineServiceIamBindingConditionArgsArgs

func AppEngineServiceIamBindingConditionArgsPtr(v *AppEngineServiceIamBindingConditionArgsArgs) AppEngineServiceIamBindingConditionArgsPtrInput {
	return (*appEngineServiceIamBindingConditionArgsPtrType)(v)
}

func (*appEngineServiceIamBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamBindingConditionArgs)(nil)).Elem()
}

func (i *appEngineServiceIamBindingConditionArgsPtrType) ToAppEngineServiceIamBindingConditionArgsPtrOutput() AppEngineServiceIamBindingConditionArgsPtrOutput {
	return i.ToAppEngineServiceIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *appEngineServiceIamBindingConditionArgsPtrType) ToAppEngineServiceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionArgsPtrOutput)
}

type AppEngineServiceIamBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamBindingConditionArgs)(nil)).Elem()
}

func (o AppEngineServiceIamBindingConditionArgsOutput) ToAppEngineServiceIamBindingConditionArgsOutput() AppEngineServiceIamBindingConditionArgsOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionArgsOutput) ToAppEngineServiceIamBindingConditionArgsOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionArgsOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionArgsOutput) ToAppEngineServiceIamBindingConditionArgsPtrOutput() AppEngineServiceIamBindingConditionArgsPtrOutput {
	return o.ToAppEngineServiceIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o AppEngineServiceIamBindingConditionArgsOutput) ToAppEngineServiceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionArgs) *AppEngineServiceIamBindingConditionArgs {
		return &v
	}).(AppEngineServiceIamBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamBindingConditionArgs)(nil)).Elem()
}

func (o AppEngineServiceIamBindingConditionArgsPtrOutput) ToAppEngineServiceIamBindingConditionArgsPtrOutput() AppEngineServiceIamBindingConditionArgsPtrOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionArgsPtrOutput) ToAppEngineServiceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionArgsPtrOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionArgsPtrOutput) Elem() AppEngineServiceIamBindingConditionArgsOutput {
	return o.ApplyT(func(v *AppEngineServiceIamBindingConditionArgs) AppEngineServiceIamBindingConditionArgs { return *v }).(AppEngineServiceIamBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineServiceIamBindingConditionStateInput interface {
	pulumi.Input

	ToAppEngineServiceIamBindingConditionStateOutput() AppEngineServiceIamBindingConditionStateOutput
	ToAppEngineServiceIamBindingConditionStateOutputWithContext(context.Context) AppEngineServiceIamBindingConditionStateOutput
}

type AppEngineServiceIamBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineServiceIamBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamBindingConditionState)(nil)).Elem()
}

func (i AppEngineServiceIamBindingConditionStateArgs) ToAppEngineServiceIamBindingConditionStateOutput() AppEngineServiceIamBindingConditionStateOutput {
	return i.ToAppEngineServiceIamBindingConditionStateOutputWithContext(context.Background())
}

func (i AppEngineServiceIamBindingConditionStateArgs) ToAppEngineServiceIamBindingConditionStateOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamBindingConditionStateOutput)
}

type AppEngineServiceIamBindingConditionStateOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamBindingConditionState)(nil)).Elem()
}

func (o AppEngineServiceIamBindingConditionStateOutput) ToAppEngineServiceIamBindingConditionStateOutput() AppEngineServiceIamBindingConditionStateOutput {
	return o
}

func (o AppEngineServiceIamBindingConditionStateOutput) ToAppEngineServiceIamBindingConditionStateOutputWithContext(ctx context.Context) AppEngineServiceIamBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineServiceIamMemberConditionInput interface {
	pulumi.Input

	ToAppEngineServiceIamMemberConditionOutput() AppEngineServiceIamMemberConditionOutput
	ToAppEngineServiceIamMemberConditionOutputWithContext(context.Context) AppEngineServiceIamMemberConditionOutput
}

type AppEngineServiceIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineServiceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamMemberCondition)(nil)).Elem()
}

func (i AppEngineServiceIamMemberConditionArgs) ToAppEngineServiceIamMemberConditionOutput() AppEngineServiceIamMemberConditionOutput {
	return i.ToAppEngineServiceIamMemberConditionOutputWithContext(context.Background())
}

func (i AppEngineServiceIamMemberConditionArgs) ToAppEngineServiceIamMemberConditionOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionOutput)
}

func (i AppEngineServiceIamMemberConditionArgs) ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput {
	return i.ToAppEngineServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i AppEngineServiceIamMemberConditionArgs) ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionOutput).ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx)
}

type AppEngineServiceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput
	ToAppEngineServiceIamMemberConditionPtrOutputWithContext(context.Context) AppEngineServiceIamMemberConditionPtrOutput
}

type appEngineServiceIamMemberConditionPtrType AppEngineServiceIamMemberConditionArgs

func AppEngineServiceIamMemberConditionPtr(v *AppEngineServiceIamMemberConditionArgs) AppEngineServiceIamMemberConditionPtrInput {
	return (*appEngineServiceIamMemberConditionPtrType)(v)
}

func (*appEngineServiceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamMemberCondition)(nil)).Elem()
}

func (i *appEngineServiceIamMemberConditionPtrType) ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput {
	return i.ToAppEngineServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *appEngineServiceIamMemberConditionPtrType) ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionPtrOutput)
}

type AppEngineServiceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamMemberCondition)(nil)).Elem()
}

func (o AppEngineServiceIamMemberConditionOutput) ToAppEngineServiceIamMemberConditionOutput() AppEngineServiceIamMemberConditionOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionOutput) ToAppEngineServiceIamMemberConditionOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionOutput) ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput {
	return o.ToAppEngineServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o AppEngineServiceIamMemberConditionOutput) ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) *AppEngineServiceIamMemberCondition {
		return &v
	}).(AppEngineServiceIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamMemberCondition)(nil)).Elem()
}

func (o AppEngineServiceIamMemberConditionPtrOutput) ToAppEngineServiceIamMemberConditionPtrOutput() AppEngineServiceIamMemberConditionPtrOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionPtrOutput) ToAppEngineServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionPtrOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionPtrOutput) Elem() AppEngineServiceIamMemberConditionOutput {
	return o.ApplyT(func(v *AppEngineServiceIamMemberCondition) AppEngineServiceIamMemberCondition { return *v }).(AppEngineServiceIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineServiceIamMemberConditionArgsInput interface {
	pulumi.Input

	ToAppEngineServiceIamMemberConditionArgsOutput() AppEngineServiceIamMemberConditionArgsOutput
	ToAppEngineServiceIamMemberConditionArgsOutputWithContext(context.Context) AppEngineServiceIamMemberConditionArgsOutput
}

type AppEngineServiceIamMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineServiceIamMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamMemberConditionArgs)(nil)).Elem()
}

func (i AppEngineServiceIamMemberConditionArgsArgs) ToAppEngineServiceIamMemberConditionArgsOutput() AppEngineServiceIamMemberConditionArgsOutput {
	return i.ToAppEngineServiceIamMemberConditionArgsOutputWithContext(context.Background())
}

func (i AppEngineServiceIamMemberConditionArgsArgs) ToAppEngineServiceIamMemberConditionArgsOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionArgsOutput)
}

func (i AppEngineServiceIamMemberConditionArgsArgs) ToAppEngineServiceIamMemberConditionArgsPtrOutput() AppEngineServiceIamMemberConditionArgsPtrOutput {
	return i.ToAppEngineServiceIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i AppEngineServiceIamMemberConditionArgsArgs) ToAppEngineServiceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionArgsOutput).ToAppEngineServiceIamMemberConditionArgsPtrOutputWithContext(ctx)
}

type AppEngineServiceIamMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToAppEngineServiceIamMemberConditionArgsPtrOutput() AppEngineServiceIamMemberConditionArgsPtrOutput
	ToAppEngineServiceIamMemberConditionArgsPtrOutputWithContext(context.Context) AppEngineServiceIamMemberConditionArgsPtrOutput
}

type appEngineServiceIamMemberConditionArgsPtrType AppEngineServiceIamMemberConditionArgsArgs

func AppEngineServiceIamMemberConditionArgsPtr(v *AppEngineServiceIamMemberConditionArgsArgs) AppEngineServiceIamMemberConditionArgsPtrInput {
	return (*appEngineServiceIamMemberConditionArgsPtrType)(v)
}

func (*appEngineServiceIamMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamMemberConditionArgs)(nil)).Elem()
}

func (i *appEngineServiceIamMemberConditionArgsPtrType) ToAppEngineServiceIamMemberConditionArgsPtrOutput() AppEngineServiceIamMemberConditionArgsPtrOutput {
	return i.ToAppEngineServiceIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *appEngineServiceIamMemberConditionArgsPtrType) ToAppEngineServiceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionArgsPtrOutput)
}

type AppEngineServiceIamMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamMemberConditionArgs)(nil)).Elem()
}

func (o AppEngineServiceIamMemberConditionArgsOutput) ToAppEngineServiceIamMemberConditionArgsOutput() AppEngineServiceIamMemberConditionArgsOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionArgsOutput) ToAppEngineServiceIamMemberConditionArgsOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionArgsOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionArgsOutput) ToAppEngineServiceIamMemberConditionArgsPtrOutput() AppEngineServiceIamMemberConditionArgsPtrOutput {
	return o.ToAppEngineServiceIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o AppEngineServiceIamMemberConditionArgsOutput) ToAppEngineServiceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionArgs) *AppEngineServiceIamMemberConditionArgs {
		return &v
	}).(AppEngineServiceIamMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceIamMemberConditionArgs)(nil)).Elem()
}

func (o AppEngineServiceIamMemberConditionArgsPtrOutput) ToAppEngineServiceIamMemberConditionArgsPtrOutput() AppEngineServiceIamMemberConditionArgsPtrOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionArgsPtrOutput) ToAppEngineServiceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionArgsPtrOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionArgsPtrOutput) Elem() AppEngineServiceIamMemberConditionArgsOutput {
	return o.ApplyT(func(v *AppEngineServiceIamMemberConditionArgs) AppEngineServiceIamMemberConditionArgs { return *v }).(AppEngineServiceIamMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineServiceIamMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineServiceIamMemberConditionStateInput interface {
	pulumi.Input

	ToAppEngineServiceIamMemberConditionStateOutput() AppEngineServiceIamMemberConditionStateOutput
	ToAppEngineServiceIamMemberConditionStateOutputWithContext(context.Context) AppEngineServiceIamMemberConditionStateOutput
}

type AppEngineServiceIamMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineServiceIamMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamMemberConditionState)(nil)).Elem()
}

func (i AppEngineServiceIamMemberConditionStateArgs) ToAppEngineServiceIamMemberConditionStateOutput() AppEngineServiceIamMemberConditionStateOutput {
	return i.ToAppEngineServiceIamMemberConditionStateOutputWithContext(context.Background())
}

func (i AppEngineServiceIamMemberConditionStateArgs) ToAppEngineServiceIamMemberConditionStateOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceIamMemberConditionStateOutput)
}

type AppEngineServiceIamMemberConditionStateOutput struct{ *pulumi.OutputState }

func (AppEngineServiceIamMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineServiceIamMemberConditionState)(nil)).Elem()
}

func (o AppEngineServiceIamMemberConditionStateOutput) ToAppEngineServiceIamMemberConditionStateOutput() AppEngineServiceIamMemberConditionStateOutput {
	return o
}

func (o AppEngineServiceIamMemberConditionStateOutput) ToAppEngineServiceIamMemberConditionStateOutputWithContext(ctx context.Context) AppEngineServiceIamMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineServiceIamMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineServiceIamMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineServiceIamMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineServiceIamMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineVersionIamBindingConditionInput interface {
	pulumi.Input

	ToAppEngineVersionIamBindingConditionOutput() AppEngineVersionIamBindingConditionOutput
	ToAppEngineVersionIamBindingConditionOutputWithContext(context.Context) AppEngineVersionIamBindingConditionOutput
}

type AppEngineVersionIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineVersionIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamBindingCondition)(nil)).Elem()
}

func (i AppEngineVersionIamBindingConditionArgs) ToAppEngineVersionIamBindingConditionOutput() AppEngineVersionIamBindingConditionOutput {
	return i.ToAppEngineVersionIamBindingConditionOutputWithContext(context.Background())
}

func (i AppEngineVersionIamBindingConditionArgs) ToAppEngineVersionIamBindingConditionOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionOutput)
}

func (i AppEngineVersionIamBindingConditionArgs) ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput {
	return i.ToAppEngineVersionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i AppEngineVersionIamBindingConditionArgs) ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionOutput).ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx)
}

type AppEngineVersionIamBindingConditionPtrInput interface {
	pulumi.Input

	ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput
	ToAppEngineVersionIamBindingConditionPtrOutputWithContext(context.Context) AppEngineVersionIamBindingConditionPtrOutput
}

type appEngineVersionIamBindingConditionPtrType AppEngineVersionIamBindingConditionArgs

func AppEngineVersionIamBindingConditionPtr(v *AppEngineVersionIamBindingConditionArgs) AppEngineVersionIamBindingConditionPtrInput {
	return (*appEngineVersionIamBindingConditionPtrType)(v)
}

func (*appEngineVersionIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamBindingCondition)(nil)).Elem()
}

func (i *appEngineVersionIamBindingConditionPtrType) ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput {
	return i.ToAppEngineVersionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *appEngineVersionIamBindingConditionPtrType) ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionPtrOutput)
}

type AppEngineVersionIamBindingConditionOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamBindingCondition)(nil)).Elem()
}

func (o AppEngineVersionIamBindingConditionOutput) ToAppEngineVersionIamBindingConditionOutput() AppEngineVersionIamBindingConditionOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionOutput) ToAppEngineVersionIamBindingConditionOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionOutput) ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput {
	return o.ToAppEngineVersionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o AppEngineVersionIamBindingConditionOutput) ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) *AppEngineVersionIamBindingCondition {
		return &v
	}).(AppEngineVersionIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamBindingCondition)(nil)).Elem()
}

func (o AppEngineVersionIamBindingConditionPtrOutput) ToAppEngineVersionIamBindingConditionPtrOutput() AppEngineVersionIamBindingConditionPtrOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionPtrOutput) ToAppEngineVersionIamBindingConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionPtrOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionPtrOutput) Elem() AppEngineVersionIamBindingConditionOutput {
	return o.ApplyT(func(v *AppEngineVersionIamBindingCondition) AppEngineVersionIamBindingCondition { return *v }).(AppEngineVersionIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineVersionIamBindingConditionArgsInput interface {
	pulumi.Input

	ToAppEngineVersionIamBindingConditionArgsOutput() AppEngineVersionIamBindingConditionArgsOutput
	ToAppEngineVersionIamBindingConditionArgsOutputWithContext(context.Context) AppEngineVersionIamBindingConditionArgsOutput
}

type AppEngineVersionIamBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineVersionIamBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamBindingConditionArgs)(nil)).Elem()
}

func (i AppEngineVersionIamBindingConditionArgsArgs) ToAppEngineVersionIamBindingConditionArgsOutput() AppEngineVersionIamBindingConditionArgsOutput {
	return i.ToAppEngineVersionIamBindingConditionArgsOutputWithContext(context.Background())
}

func (i AppEngineVersionIamBindingConditionArgsArgs) ToAppEngineVersionIamBindingConditionArgsOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionArgsOutput)
}

func (i AppEngineVersionIamBindingConditionArgsArgs) ToAppEngineVersionIamBindingConditionArgsPtrOutput() AppEngineVersionIamBindingConditionArgsPtrOutput {
	return i.ToAppEngineVersionIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i AppEngineVersionIamBindingConditionArgsArgs) ToAppEngineVersionIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionArgsOutput).ToAppEngineVersionIamBindingConditionArgsPtrOutputWithContext(ctx)
}

type AppEngineVersionIamBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToAppEngineVersionIamBindingConditionArgsPtrOutput() AppEngineVersionIamBindingConditionArgsPtrOutput
	ToAppEngineVersionIamBindingConditionArgsPtrOutputWithContext(context.Context) AppEngineVersionIamBindingConditionArgsPtrOutput
}

type appEngineVersionIamBindingConditionArgsPtrType AppEngineVersionIamBindingConditionArgsArgs

func AppEngineVersionIamBindingConditionArgsPtr(v *AppEngineVersionIamBindingConditionArgsArgs) AppEngineVersionIamBindingConditionArgsPtrInput {
	return (*appEngineVersionIamBindingConditionArgsPtrType)(v)
}

func (*appEngineVersionIamBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamBindingConditionArgs)(nil)).Elem()
}

func (i *appEngineVersionIamBindingConditionArgsPtrType) ToAppEngineVersionIamBindingConditionArgsPtrOutput() AppEngineVersionIamBindingConditionArgsPtrOutput {
	return i.ToAppEngineVersionIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *appEngineVersionIamBindingConditionArgsPtrType) ToAppEngineVersionIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionArgsPtrOutput)
}

type AppEngineVersionIamBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamBindingConditionArgs)(nil)).Elem()
}

func (o AppEngineVersionIamBindingConditionArgsOutput) ToAppEngineVersionIamBindingConditionArgsOutput() AppEngineVersionIamBindingConditionArgsOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionArgsOutput) ToAppEngineVersionIamBindingConditionArgsOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionArgsOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionArgsOutput) ToAppEngineVersionIamBindingConditionArgsPtrOutput() AppEngineVersionIamBindingConditionArgsPtrOutput {
	return o.ToAppEngineVersionIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o AppEngineVersionIamBindingConditionArgsOutput) ToAppEngineVersionIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionArgs) *AppEngineVersionIamBindingConditionArgs {
		return &v
	}).(AppEngineVersionIamBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamBindingConditionArgs)(nil)).Elem()
}

func (o AppEngineVersionIamBindingConditionArgsPtrOutput) ToAppEngineVersionIamBindingConditionArgsPtrOutput() AppEngineVersionIamBindingConditionArgsPtrOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionArgsPtrOutput) ToAppEngineVersionIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionArgsPtrOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionArgsPtrOutput) Elem() AppEngineVersionIamBindingConditionArgsOutput {
	return o.ApplyT(func(v *AppEngineVersionIamBindingConditionArgs) AppEngineVersionIamBindingConditionArgs { return *v }).(AppEngineVersionIamBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineVersionIamBindingConditionStateInput interface {
	pulumi.Input

	ToAppEngineVersionIamBindingConditionStateOutput() AppEngineVersionIamBindingConditionStateOutput
	ToAppEngineVersionIamBindingConditionStateOutputWithContext(context.Context) AppEngineVersionIamBindingConditionStateOutput
}

type AppEngineVersionIamBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineVersionIamBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamBindingConditionState)(nil)).Elem()
}

func (i AppEngineVersionIamBindingConditionStateArgs) ToAppEngineVersionIamBindingConditionStateOutput() AppEngineVersionIamBindingConditionStateOutput {
	return i.ToAppEngineVersionIamBindingConditionStateOutputWithContext(context.Background())
}

func (i AppEngineVersionIamBindingConditionStateArgs) ToAppEngineVersionIamBindingConditionStateOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamBindingConditionStateOutput)
}

type AppEngineVersionIamBindingConditionStateOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamBindingConditionState)(nil)).Elem()
}

func (o AppEngineVersionIamBindingConditionStateOutput) ToAppEngineVersionIamBindingConditionStateOutput() AppEngineVersionIamBindingConditionStateOutput {
	return o
}

func (o AppEngineVersionIamBindingConditionStateOutput) ToAppEngineVersionIamBindingConditionStateOutputWithContext(ctx context.Context) AppEngineVersionIamBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineVersionIamMemberConditionInput interface {
	pulumi.Input

	ToAppEngineVersionIamMemberConditionOutput() AppEngineVersionIamMemberConditionOutput
	ToAppEngineVersionIamMemberConditionOutputWithContext(context.Context) AppEngineVersionIamMemberConditionOutput
}

type AppEngineVersionIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineVersionIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamMemberCondition)(nil)).Elem()
}

func (i AppEngineVersionIamMemberConditionArgs) ToAppEngineVersionIamMemberConditionOutput() AppEngineVersionIamMemberConditionOutput {
	return i.ToAppEngineVersionIamMemberConditionOutputWithContext(context.Background())
}

func (i AppEngineVersionIamMemberConditionArgs) ToAppEngineVersionIamMemberConditionOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionOutput)
}

func (i AppEngineVersionIamMemberConditionArgs) ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput {
	return i.ToAppEngineVersionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i AppEngineVersionIamMemberConditionArgs) ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionOutput).ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx)
}

type AppEngineVersionIamMemberConditionPtrInput interface {
	pulumi.Input

	ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput
	ToAppEngineVersionIamMemberConditionPtrOutputWithContext(context.Context) AppEngineVersionIamMemberConditionPtrOutput
}

type appEngineVersionIamMemberConditionPtrType AppEngineVersionIamMemberConditionArgs

func AppEngineVersionIamMemberConditionPtr(v *AppEngineVersionIamMemberConditionArgs) AppEngineVersionIamMemberConditionPtrInput {
	return (*appEngineVersionIamMemberConditionPtrType)(v)
}

func (*appEngineVersionIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamMemberCondition)(nil)).Elem()
}

func (i *appEngineVersionIamMemberConditionPtrType) ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput {
	return i.ToAppEngineVersionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *appEngineVersionIamMemberConditionPtrType) ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionPtrOutput)
}

type AppEngineVersionIamMemberConditionOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamMemberCondition)(nil)).Elem()
}

func (o AppEngineVersionIamMemberConditionOutput) ToAppEngineVersionIamMemberConditionOutput() AppEngineVersionIamMemberConditionOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionOutput) ToAppEngineVersionIamMemberConditionOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionOutput) ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput {
	return o.ToAppEngineVersionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o AppEngineVersionIamMemberConditionOutput) ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) *AppEngineVersionIamMemberCondition {
		return &v
	}).(AppEngineVersionIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamMemberCondition)(nil)).Elem()
}

func (o AppEngineVersionIamMemberConditionPtrOutput) ToAppEngineVersionIamMemberConditionPtrOutput() AppEngineVersionIamMemberConditionPtrOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionPtrOutput) ToAppEngineVersionIamMemberConditionPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionPtrOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionPtrOutput) Elem() AppEngineVersionIamMemberConditionOutput {
	return o.ApplyT(func(v *AppEngineVersionIamMemberCondition) AppEngineVersionIamMemberCondition { return *v }).(AppEngineVersionIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineVersionIamMemberConditionArgsInput interface {
	pulumi.Input

	ToAppEngineVersionIamMemberConditionArgsOutput() AppEngineVersionIamMemberConditionArgsOutput
	ToAppEngineVersionIamMemberConditionArgsOutputWithContext(context.Context) AppEngineVersionIamMemberConditionArgsOutput
}

type AppEngineVersionIamMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineVersionIamMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamMemberConditionArgs)(nil)).Elem()
}

func (i AppEngineVersionIamMemberConditionArgsArgs) ToAppEngineVersionIamMemberConditionArgsOutput() AppEngineVersionIamMemberConditionArgsOutput {
	return i.ToAppEngineVersionIamMemberConditionArgsOutputWithContext(context.Background())
}

func (i AppEngineVersionIamMemberConditionArgsArgs) ToAppEngineVersionIamMemberConditionArgsOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionArgsOutput)
}

func (i AppEngineVersionIamMemberConditionArgsArgs) ToAppEngineVersionIamMemberConditionArgsPtrOutput() AppEngineVersionIamMemberConditionArgsPtrOutput {
	return i.ToAppEngineVersionIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i AppEngineVersionIamMemberConditionArgsArgs) ToAppEngineVersionIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionArgsOutput).ToAppEngineVersionIamMemberConditionArgsPtrOutputWithContext(ctx)
}

type AppEngineVersionIamMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToAppEngineVersionIamMemberConditionArgsPtrOutput() AppEngineVersionIamMemberConditionArgsPtrOutput
	ToAppEngineVersionIamMemberConditionArgsPtrOutputWithContext(context.Context) AppEngineVersionIamMemberConditionArgsPtrOutput
}

type appEngineVersionIamMemberConditionArgsPtrType AppEngineVersionIamMemberConditionArgsArgs

func AppEngineVersionIamMemberConditionArgsPtr(v *AppEngineVersionIamMemberConditionArgsArgs) AppEngineVersionIamMemberConditionArgsPtrInput {
	return (*appEngineVersionIamMemberConditionArgsPtrType)(v)
}

func (*appEngineVersionIamMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamMemberConditionArgs)(nil)).Elem()
}

func (i *appEngineVersionIamMemberConditionArgsPtrType) ToAppEngineVersionIamMemberConditionArgsPtrOutput() AppEngineVersionIamMemberConditionArgsPtrOutput {
	return i.ToAppEngineVersionIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *appEngineVersionIamMemberConditionArgsPtrType) ToAppEngineVersionIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionArgsPtrOutput)
}

type AppEngineVersionIamMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamMemberConditionArgs)(nil)).Elem()
}

func (o AppEngineVersionIamMemberConditionArgsOutput) ToAppEngineVersionIamMemberConditionArgsOutput() AppEngineVersionIamMemberConditionArgsOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionArgsOutput) ToAppEngineVersionIamMemberConditionArgsOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionArgsOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionArgsOutput) ToAppEngineVersionIamMemberConditionArgsPtrOutput() AppEngineVersionIamMemberConditionArgsPtrOutput {
	return o.ToAppEngineVersionIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o AppEngineVersionIamMemberConditionArgsOutput) ToAppEngineVersionIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionArgs) *AppEngineVersionIamMemberConditionArgs {
		return &v
	}).(AppEngineVersionIamMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineVersionIamMemberConditionArgs)(nil)).Elem()
}

func (o AppEngineVersionIamMemberConditionArgsPtrOutput) ToAppEngineVersionIamMemberConditionArgsPtrOutput() AppEngineVersionIamMemberConditionArgsPtrOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionArgsPtrOutput) ToAppEngineVersionIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionArgsPtrOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionArgsPtrOutput) Elem() AppEngineVersionIamMemberConditionArgsOutput {
	return o.ApplyT(func(v *AppEngineVersionIamMemberConditionArgs) AppEngineVersionIamMemberConditionArgs { return *v }).(AppEngineVersionIamMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type AppEngineVersionIamMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type AppEngineVersionIamMemberConditionStateInput interface {
	pulumi.Input

	ToAppEngineVersionIamMemberConditionStateOutput() AppEngineVersionIamMemberConditionStateOutput
	ToAppEngineVersionIamMemberConditionStateOutputWithContext(context.Context) AppEngineVersionIamMemberConditionStateOutput
}

type AppEngineVersionIamMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AppEngineVersionIamMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamMemberConditionState)(nil)).Elem()
}

func (i AppEngineVersionIamMemberConditionStateArgs) ToAppEngineVersionIamMemberConditionStateOutput() AppEngineVersionIamMemberConditionStateOutput {
	return i.ToAppEngineVersionIamMemberConditionStateOutputWithContext(context.Background())
}

func (i AppEngineVersionIamMemberConditionStateArgs) ToAppEngineVersionIamMemberConditionStateOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineVersionIamMemberConditionStateOutput)
}

type AppEngineVersionIamMemberConditionStateOutput struct{ *pulumi.OutputState }

func (AppEngineVersionIamMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineVersionIamMemberConditionState)(nil)).Elem()
}

func (o AppEngineVersionIamMemberConditionStateOutput) ToAppEngineVersionIamMemberConditionStateOutput() AppEngineVersionIamMemberConditionStateOutput {
	return o
}

func (o AppEngineVersionIamMemberConditionStateOutput) ToAppEngineVersionIamMemberConditionStateOutputWithContext(ctx context.Context) AppEngineVersionIamMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o AppEngineVersionIamMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o AppEngineVersionIamMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o AppEngineVersionIamMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineVersionIamMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type TunnelInstanceIAMBindingConditionInput interface {
	pulumi.Input

	ToTunnelInstanceIAMBindingConditionOutput() TunnelInstanceIAMBindingConditionOutput
	ToTunnelInstanceIAMBindingConditionOutputWithContext(context.Context) TunnelInstanceIAMBindingConditionOutput
}

type TunnelInstanceIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (TunnelInstanceIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMBindingCondition)(nil)).Elem()
}

func (i TunnelInstanceIAMBindingConditionArgs) ToTunnelInstanceIAMBindingConditionOutput() TunnelInstanceIAMBindingConditionOutput {
	return i.ToTunnelInstanceIAMBindingConditionOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMBindingConditionArgs) ToTunnelInstanceIAMBindingConditionOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionOutput)
}

func (i TunnelInstanceIAMBindingConditionArgs) ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput {
	return i.ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMBindingConditionArgs) ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionOutput).ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx)
}

type TunnelInstanceIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput
	ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(context.Context) TunnelInstanceIAMBindingConditionPtrOutput
}

type tunnelInstanceIAMBindingConditionPtrType TunnelInstanceIAMBindingConditionArgs

func TunnelInstanceIAMBindingConditionPtr(v *TunnelInstanceIAMBindingConditionArgs) TunnelInstanceIAMBindingConditionPtrInput {
	return (*tunnelInstanceIAMBindingConditionPtrType)(v)
}

func (*tunnelInstanceIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMBindingCondition)(nil)).Elem()
}

func (i *tunnelInstanceIAMBindingConditionPtrType) ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput {
	return i.ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *tunnelInstanceIAMBindingConditionPtrType) ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionPtrOutput)
}

type TunnelInstanceIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMBindingCondition)(nil)).Elem()
}

func (o TunnelInstanceIAMBindingConditionOutput) ToTunnelInstanceIAMBindingConditionOutput() TunnelInstanceIAMBindingConditionOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionOutput) ToTunnelInstanceIAMBindingConditionOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionOutput) ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput {
	return o.ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o TunnelInstanceIAMBindingConditionOutput) ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) *TunnelInstanceIAMBindingCondition {
		return &v
	}).(TunnelInstanceIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMBindingCondition)(nil)).Elem()
}

func (o TunnelInstanceIAMBindingConditionPtrOutput) ToTunnelInstanceIAMBindingConditionPtrOutput() TunnelInstanceIAMBindingConditionPtrOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionPtrOutput) ToTunnelInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionPtrOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionPtrOutput) Elem() TunnelInstanceIAMBindingConditionOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMBindingCondition) TunnelInstanceIAMBindingCondition { return *v }).(TunnelInstanceIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type TunnelInstanceIAMBindingConditionArgsInput interface {
	pulumi.Input

	ToTunnelInstanceIAMBindingConditionArgsOutput() TunnelInstanceIAMBindingConditionArgsOutput
	ToTunnelInstanceIAMBindingConditionArgsOutputWithContext(context.Context) TunnelInstanceIAMBindingConditionArgsOutput
}

type TunnelInstanceIAMBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (TunnelInstanceIAMBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMBindingConditionArgs)(nil)).Elem()
}

func (i TunnelInstanceIAMBindingConditionArgsArgs) ToTunnelInstanceIAMBindingConditionArgsOutput() TunnelInstanceIAMBindingConditionArgsOutput {
	return i.ToTunnelInstanceIAMBindingConditionArgsOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMBindingConditionArgsArgs) ToTunnelInstanceIAMBindingConditionArgsOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionArgsOutput)
}

func (i TunnelInstanceIAMBindingConditionArgsArgs) ToTunnelInstanceIAMBindingConditionArgsPtrOutput() TunnelInstanceIAMBindingConditionArgsPtrOutput {
	return i.ToTunnelInstanceIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMBindingConditionArgsArgs) ToTunnelInstanceIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionArgsOutput).ToTunnelInstanceIAMBindingConditionArgsPtrOutputWithContext(ctx)
}

type TunnelInstanceIAMBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToTunnelInstanceIAMBindingConditionArgsPtrOutput() TunnelInstanceIAMBindingConditionArgsPtrOutput
	ToTunnelInstanceIAMBindingConditionArgsPtrOutputWithContext(context.Context) TunnelInstanceIAMBindingConditionArgsPtrOutput
}

type tunnelInstanceIAMBindingConditionArgsPtrType TunnelInstanceIAMBindingConditionArgsArgs

func TunnelInstanceIAMBindingConditionArgsPtr(v *TunnelInstanceIAMBindingConditionArgsArgs) TunnelInstanceIAMBindingConditionArgsPtrInput {
	return (*tunnelInstanceIAMBindingConditionArgsPtrType)(v)
}

func (*tunnelInstanceIAMBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMBindingConditionArgs)(nil)).Elem()
}

func (i *tunnelInstanceIAMBindingConditionArgsPtrType) ToTunnelInstanceIAMBindingConditionArgsPtrOutput() TunnelInstanceIAMBindingConditionArgsPtrOutput {
	return i.ToTunnelInstanceIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *tunnelInstanceIAMBindingConditionArgsPtrType) ToTunnelInstanceIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionArgsPtrOutput)
}

type TunnelInstanceIAMBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMBindingConditionArgs)(nil)).Elem()
}

func (o TunnelInstanceIAMBindingConditionArgsOutput) ToTunnelInstanceIAMBindingConditionArgsOutput() TunnelInstanceIAMBindingConditionArgsOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionArgsOutput) ToTunnelInstanceIAMBindingConditionArgsOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionArgsOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionArgsOutput) ToTunnelInstanceIAMBindingConditionArgsPtrOutput() TunnelInstanceIAMBindingConditionArgsPtrOutput {
	return o.ToTunnelInstanceIAMBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o TunnelInstanceIAMBindingConditionArgsOutput) ToTunnelInstanceIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionArgs) *TunnelInstanceIAMBindingConditionArgs {
		return &v
	}).(TunnelInstanceIAMBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMBindingConditionArgs)(nil)).Elem()
}

func (o TunnelInstanceIAMBindingConditionArgsPtrOutput) ToTunnelInstanceIAMBindingConditionArgsPtrOutput() TunnelInstanceIAMBindingConditionArgsPtrOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionArgsPtrOutput) ToTunnelInstanceIAMBindingConditionArgsPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionArgsPtrOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionArgsPtrOutput) Elem() TunnelInstanceIAMBindingConditionArgsOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMBindingConditionArgs) TunnelInstanceIAMBindingConditionArgs { return *v }).(TunnelInstanceIAMBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type TunnelInstanceIAMBindingConditionStateInput interface {
	pulumi.Input

	ToTunnelInstanceIAMBindingConditionStateOutput() TunnelInstanceIAMBindingConditionStateOutput
	ToTunnelInstanceIAMBindingConditionStateOutputWithContext(context.Context) TunnelInstanceIAMBindingConditionStateOutput
}

type TunnelInstanceIAMBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (TunnelInstanceIAMBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMBindingConditionState)(nil)).Elem()
}

func (i TunnelInstanceIAMBindingConditionStateArgs) ToTunnelInstanceIAMBindingConditionStateOutput() TunnelInstanceIAMBindingConditionStateOutput {
	return i.ToTunnelInstanceIAMBindingConditionStateOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMBindingConditionStateArgs) ToTunnelInstanceIAMBindingConditionStateOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMBindingConditionStateOutput)
}

type TunnelInstanceIAMBindingConditionStateOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMBindingConditionState)(nil)).Elem()
}

func (o TunnelInstanceIAMBindingConditionStateOutput) ToTunnelInstanceIAMBindingConditionStateOutput() TunnelInstanceIAMBindingConditionStateOutput {
	return o
}

func (o TunnelInstanceIAMBindingConditionStateOutput) ToTunnelInstanceIAMBindingConditionStateOutputWithContext(ctx context.Context) TunnelInstanceIAMBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type TunnelInstanceIAMMemberConditionInput interface {
	pulumi.Input

	ToTunnelInstanceIAMMemberConditionOutput() TunnelInstanceIAMMemberConditionOutput
	ToTunnelInstanceIAMMemberConditionOutputWithContext(context.Context) TunnelInstanceIAMMemberConditionOutput
}

type TunnelInstanceIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (TunnelInstanceIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMMemberCondition)(nil)).Elem()
}

func (i TunnelInstanceIAMMemberConditionArgs) ToTunnelInstanceIAMMemberConditionOutput() TunnelInstanceIAMMemberConditionOutput {
	return i.ToTunnelInstanceIAMMemberConditionOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMMemberConditionArgs) ToTunnelInstanceIAMMemberConditionOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionOutput)
}

func (i TunnelInstanceIAMMemberConditionArgs) ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput {
	return i.ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMMemberConditionArgs) ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionOutput).ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx)
}

type TunnelInstanceIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput
	ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(context.Context) TunnelInstanceIAMMemberConditionPtrOutput
}

type tunnelInstanceIAMMemberConditionPtrType TunnelInstanceIAMMemberConditionArgs

func TunnelInstanceIAMMemberConditionPtr(v *TunnelInstanceIAMMemberConditionArgs) TunnelInstanceIAMMemberConditionPtrInput {
	return (*tunnelInstanceIAMMemberConditionPtrType)(v)
}

func (*tunnelInstanceIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMMemberCondition)(nil)).Elem()
}

func (i *tunnelInstanceIAMMemberConditionPtrType) ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput {
	return i.ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *tunnelInstanceIAMMemberConditionPtrType) ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionPtrOutput)
}

type TunnelInstanceIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMMemberCondition)(nil)).Elem()
}

func (o TunnelInstanceIAMMemberConditionOutput) ToTunnelInstanceIAMMemberConditionOutput() TunnelInstanceIAMMemberConditionOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionOutput) ToTunnelInstanceIAMMemberConditionOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionOutput) ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput {
	return o.ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o TunnelInstanceIAMMemberConditionOutput) ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) *TunnelInstanceIAMMemberCondition {
		return &v
	}).(TunnelInstanceIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMMemberCondition)(nil)).Elem()
}

func (o TunnelInstanceIAMMemberConditionPtrOutput) ToTunnelInstanceIAMMemberConditionPtrOutput() TunnelInstanceIAMMemberConditionPtrOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionPtrOutput) ToTunnelInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionPtrOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionPtrOutput) Elem() TunnelInstanceIAMMemberConditionOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMMemberCondition) TunnelInstanceIAMMemberCondition { return *v }).(TunnelInstanceIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type TunnelInstanceIAMMemberConditionArgsInput interface {
	pulumi.Input

	ToTunnelInstanceIAMMemberConditionArgsOutput() TunnelInstanceIAMMemberConditionArgsOutput
	ToTunnelInstanceIAMMemberConditionArgsOutputWithContext(context.Context) TunnelInstanceIAMMemberConditionArgsOutput
}

type TunnelInstanceIAMMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (TunnelInstanceIAMMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMMemberConditionArgs)(nil)).Elem()
}

func (i TunnelInstanceIAMMemberConditionArgsArgs) ToTunnelInstanceIAMMemberConditionArgsOutput() TunnelInstanceIAMMemberConditionArgsOutput {
	return i.ToTunnelInstanceIAMMemberConditionArgsOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMMemberConditionArgsArgs) ToTunnelInstanceIAMMemberConditionArgsOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionArgsOutput)
}

func (i TunnelInstanceIAMMemberConditionArgsArgs) ToTunnelInstanceIAMMemberConditionArgsPtrOutput() TunnelInstanceIAMMemberConditionArgsPtrOutput {
	return i.ToTunnelInstanceIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMMemberConditionArgsArgs) ToTunnelInstanceIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionArgsOutput).ToTunnelInstanceIAMMemberConditionArgsPtrOutputWithContext(ctx)
}

type TunnelInstanceIAMMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToTunnelInstanceIAMMemberConditionArgsPtrOutput() TunnelInstanceIAMMemberConditionArgsPtrOutput
	ToTunnelInstanceIAMMemberConditionArgsPtrOutputWithContext(context.Context) TunnelInstanceIAMMemberConditionArgsPtrOutput
}

type tunnelInstanceIAMMemberConditionArgsPtrType TunnelInstanceIAMMemberConditionArgsArgs

func TunnelInstanceIAMMemberConditionArgsPtr(v *TunnelInstanceIAMMemberConditionArgsArgs) TunnelInstanceIAMMemberConditionArgsPtrInput {
	return (*tunnelInstanceIAMMemberConditionArgsPtrType)(v)
}

func (*tunnelInstanceIAMMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMMemberConditionArgs)(nil)).Elem()
}

func (i *tunnelInstanceIAMMemberConditionArgsPtrType) ToTunnelInstanceIAMMemberConditionArgsPtrOutput() TunnelInstanceIAMMemberConditionArgsPtrOutput {
	return i.ToTunnelInstanceIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *tunnelInstanceIAMMemberConditionArgsPtrType) ToTunnelInstanceIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionArgsPtrOutput)
}

type TunnelInstanceIAMMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMMemberConditionArgs)(nil)).Elem()
}

func (o TunnelInstanceIAMMemberConditionArgsOutput) ToTunnelInstanceIAMMemberConditionArgsOutput() TunnelInstanceIAMMemberConditionArgsOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionArgsOutput) ToTunnelInstanceIAMMemberConditionArgsOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionArgsOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionArgsOutput) ToTunnelInstanceIAMMemberConditionArgsPtrOutput() TunnelInstanceIAMMemberConditionArgsPtrOutput {
	return o.ToTunnelInstanceIAMMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o TunnelInstanceIAMMemberConditionArgsOutput) ToTunnelInstanceIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionArgs) *TunnelInstanceIAMMemberConditionArgs {
		return &v
	}).(TunnelInstanceIAMMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIAMMemberConditionArgs)(nil)).Elem()
}

func (o TunnelInstanceIAMMemberConditionArgsPtrOutput) ToTunnelInstanceIAMMemberConditionArgsPtrOutput() TunnelInstanceIAMMemberConditionArgsPtrOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionArgsPtrOutput) ToTunnelInstanceIAMMemberConditionArgsPtrOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionArgsPtrOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionArgsPtrOutput) Elem() TunnelInstanceIAMMemberConditionArgsOutput {
	return o.ApplyT(func(v *TunnelInstanceIAMMemberConditionArgs) TunnelInstanceIAMMemberConditionArgs { return *v }).(TunnelInstanceIAMMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type TunnelInstanceIAMMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type TunnelInstanceIAMMemberConditionStateInput interface {
	pulumi.Input

	ToTunnelInstanceIAMMemberConditionStateOutput() TunnelInstanceIAMMemberConditionStateOutput
	ToTunnelInstanceIAMMemberConditionStateOutputWithContext(context.Context) TunnelInstanceIAMMemberConditionStateOutput
}

type TunnelInstanceIAMMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (TunnelInstanceIAMMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMMemberConditionState)(nil)).Elem()
}

func (i TunnelInstanceIAMMemberConditionStateArgs) ToTunnelInstanceIAMMemberConditionStateOutput() TunnelInstanceIAMMemberConditionStateOutput {
	return i.ToTunnelInstanceIAMMemberConditionStateOutputWithContext(context.Background())
}

func (i TunnelInstanceIAMMemberConditionStateArgs) ToTunnelInstanceIAMMemberConditionStateOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIAMMemberConditionStateOutput)
}

type TunnelInstanceIAMMemberConditionStateOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIAMMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelInstanceIAMMemberConditionState)(nil)).Elem()
}

func (o TunnelInstanceIAMMemberConditionStateOutput) ToTunnelInstanceIAMMemberConditionStateOutput() TunnelInstanceIAMMemberConditionStateOutput {
	return o
}

func (o TunnelInstanceIAMMemberConditionStateOutput) ToTunnelInstanceIAMMemberConditionStateOutputWithContext(ctx context.Context) TunnelInstanceIAMMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o TunnelInstanceIAMMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o TunnelInstanceIAMMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o TunnelInstanceIAMMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TunnelInstanceIAMMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebBackendServiceIamBindingConditionInput interface {
	pulumi.Input

	ToWebBackendServiceIamBindingConditionOutput() WebBackendServiceIamBindingConditionOutput
	ToWebBackendServiceIamBindingConditionOutputWithContext(context.Context) WebBackendServiceIamBindingConditionOutput
}

type WebBackendServiceIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebBackendServiceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamBindingCondition)(nil)).Elem()
}

func (i WebBackendServiceIamBindingConditionArgs) ToWebBackendServiceIamBindingConditionOutput() WebBackendServiceIamBindingConditionOutput {
	return i.ToWebBackendServiceIamBindingConditionOutputWithContext(context.Background())
}

func (i WebBackendServiceIamBindingConditionArgs) ToWebBackendServiceIamBindingConditionOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionOutput)
}

func (i WebBackendServiceIamBindingConditionArgs) ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput {
	return i.ToWebBackendServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i WebBackendServiceIamBindingConditionArgs) ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionOutput).ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx)
}

type WebBackendServiceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput
	ToWebBackendServiceIamBindingConditionPtrOutputWithContext(context.Context) WebBackendServiceIamBindingConditionPtrOutput
}

type webBackendServiceIamBindingConditionPtrType WebBackendServiceIamBindingConditionArgs

func WebBackendServiceIamBindingConditionPtr(v *WebBackendServiceIamBindingConditionArgs) WebBackendServiceIamBindingConditionPtrInput {
	return (*webBackendServiceIamBindingConditionPtrType)(v)
}

func (*webBackendServiceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamBindingCondition)(nil)).Elem()
}

func (i *webBackendServiceIamBindingConditionPtrType) ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput {
	return i.ToWebBackendServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *webBackendServiceIamBindingConditionPtrType) ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionPtrOutput)
}

type WebBackendServiceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamBindingCondition)(nil)).Elem()
}

func (o WebBackendServiceIamBindingConditionOutput) ToWebBackendServiceIamBindingConditionOutput() WebBackendServiceIamBindingConditionOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionOutput) ToWebBackendServiceIamBindingConditionOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionOutput) ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput {
	return o.ToWebBackendServiceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o WebBackendServiceIamBindingConditionOutput) ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) *WebBackendServiceIamBindingCondition {
		return &v
	}).(WebBackendServiceIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamBindingCondition)(nil)).Elem()
}

func (o WebBackendServiceIamBindingConditionPtrOutput) ToWebBackendServiceIamBindingConditionPtrOutput() WebBackendServiceIamBindingConditionPtrOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionPtrOutput) ToWebBackendServiceIamBindingConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionPtrOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionPtrOutput) Elem() WebBackendServiceIamBindingConditionOutput {
	return o.ApplyT(func(v *WebBackendServiceIamBindingCondition) WebBackendServiceIamBindingCondition { return *v }).(WebBackendServiceIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebBackendServiceIamBindingConditionArgsInput interface {
	pulumi.Input

	ToWebBackendServiceIamBindingConditionArgsOutput() WebBackendServiceIamBindingConditionArgsOutput
	ToWebBackendServiceIamBindingConditionArgsOutputWithContext(context.Context) WebBackendServiceIamBindingConditionArgsOutput
}

type WebBackendServiceIamBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebBackendServiceIamBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamBindingConditionArgs)(nil)).Elem()
}

func (i WebBackendServiceIamBindingConditionArgsArgs) ToWebBackendServiceIamBindingConditionArgsOutput() WebBackendServiceIamBindingConditionArgsOutput {
	return i.ToWebBackendServiceIamBindingConditionArgsOutputWithContext(context.Background())
}

func (i WebBackendServiceIamBindingConditionArgsArgs) ToWebBackendServiceIamBindingConditionArgsOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionArgsOutput)
}

func (i WebBackendServiceIamBindingConditionArgsArgs) ToWebBackendServiceIamBindingConditionArgsPtrOutput() WebBackendServiceIamBindingConditionArgsPtrOutput {
	return i.ToWebBackendServiceIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i WebBackendServiceIamBindingConditionArgsArgs) ToWebBackendServiceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionArgsOutput).ToWebBackendServiceIamBindingConditionArgsPtrOutputWithContext(ctx)
}

type WebBackendServiceIamBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToWebBackendServiceIamBindingConditionArgsPtrOutput() WebBackendServiceIamBindingConditionArgsPtrOutput
	ToWebBackendServiceIamBindingConditionArgsPtrOutputWithContext(context.Context) WebBackendServiceIamBindingConditionArgsPtrOutput
}

type webBackendServiceIamBindingConditionArgsPtrType WebBackendServiceIamBindingConditionArgsArgs

func WebBackendServiceIamBindingConditionArgsPtr(v *WebBackendServiceIamBindingConditionArgsArgs) WebBackendServiceIamBindingConditionArgsPtrInput {
	return (*webBackendServiceIamBindingConditionArgsPtrType)(v)
}

func (*webBackendServiceIamBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamBindingConditionArgs)(nil)).Elem()
}

func (i *webBackendServiceIamBindingConditionArgsPtrType) ToWebBackendServiceIamBindingConditionArgsPtrOutput() WebBackendServiceIamBindingConditionArgsPtrOutput {
	return i.ToWebBackendServiceIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *webBackendServiceIamBindingConditionArgsPtrType) ToWebBackendServiceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionArgsPtrOutput)
}

type WebBackendServiceIamBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamBindingConditionArgs)(nil)).Elem()
}

func (o WebBackendServiceIamBindingConditionArgsOutput) ToWebBackendServiceIamBindingConditionArgsOutput() WebBackendServiceIamBindingConditionArgsOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionArgsOutput) ToWebBackendServiceIamBindingConditionArgsOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionArgsOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionArgsOutput) ToWebBackendServiceIamBindingConditionArgsPtrOutput() WebBackendServiceIamBindingConditionArgsPtrOutput {
	return o.ToWebBackendServiceIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o WebBackendServiceIamBindingConditionArgsOutput) ToWebBackendServiceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionArgs) *WebBackendServiceIamBindingConditionArgs {
		return &v
	}).(WebBackendServiceIamBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamBindingConditionArgs)(nil)).Elem()
}

func (o WebBackendServiceIamBindingConditionArgsPtrOutput) ToWebBackendServiceIamBindingConditionArgsPtrOutput() WebBackendServiceIamBindingConditionArgsPtrOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionArgsPtrOutput) ToWebBackendServiceIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionArgsPtrOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionArgsPtrOutput) Elem() WebBackendServiceIamBindingConditionArgsOutput {
	return o.ApplyT(func(v *WebBackendServiceIamBindingConditionArgs) WebBackendServiceIamBindingConditionArgs { return *v }).(WebBackendServiceIamBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebBackendServiceIamBindingConditionStateInput interface {
	pulumi.Input

	ToWebBackendServiceIamBindingConditionStateOutput() WebBackendServiceIamBindingConditionStateOutput
	ToWebBackendServiceIamBindingConditionStateOutputWithContext(context.Context) WebBackendServiceIamBindingConditionStateOutput
}

type WebBackendServiceIamBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebBackendServiceIamBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamBindingConditionState)(nil)).Elem()
}

func (i WebBackendServiceIamBindingConditionStateArgs) ToWebBackendServiceIamBindingConditionStateOutput() WebBackendServiceIamBindingConditionStateOutput {
	return i.ToWebBackendServiceIamBindingConditionStateOutputWithContext(context.Background())
}

func (i WebBackendServiceIamBindingConditionStateArgs) ToWebBackendServiceIamBindingConditionStateOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamBindingConditionStateOutput)
}

type WebBackendServiceIamBindingConditionStateOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamBindingConditionState)(nil)).Elem()
}

func (o WebBackendServiceIamBindingConditionStateOutput) ToWebBackendServiceIamBindingConditionStateOutput() WebBackendServiceIamBindingConditionStateOutput {
	return o
}

func (o WebBackendServiceIamBindingConditionStateOutput) ToWebBackendServiceIamBindingConditionStateOutputWithContext(ctx context.Context) WebBackendServiceIamBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebBackendServiceIamMemberConditionInput interface {
	pulumi.Input

	ToWebBackendServiceIamMemberConditionOutput() WebBackendServiceIamMemberConditionOutput
	ToWebBackendServiceIamMemberConditionOutputWithContext(context.Context) WebBackendServiceIamMemberConditionOutput
}

type WebBackendServiceIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebBackendServiceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamMemberCondition)(nil)).Elem()
}

func (i WebBackendServiceIamMemberConditionArgs) ToWebBackendServiceIamMemberConditionOutput() WebBackendServiceIamMemberConditionOutput {
	return i.ToWebBackendServiceIamMemberConditionOutputWithContext(context.Background())
}

func (i WebBackendServiceIamMemberConditionArgs) ToWebBackendServiceIamMemberConditionOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionOutput)
}

func (i WebBackendServiceIamMemberConditionArgs) ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput {
	return i.ToWebBackendServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i WebBackendServiceIamMemberConditionArgs) ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionOutput).ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx)
}

type WebBackendServiceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput
	ToWebBackendServiceIamMemberConditionPtrOutputWithContext(context.Context) WebBackendServiceIamMemberConditionPtrOutput
}

type webBackendServiceIamMemberConditionPtrType WebBackendServiceIamMemberConditionArgs

func WebBackendServiceIamMemberConditionPtr(v *WebBackendServiceIamMemberConditionArgs) WebBackendServiceIamMemberConditionPtrInput {
	return (*webBackendServiceIamMemberConditionPtrType)(v)
}

func (*webBackendServiceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamMemberCondition)(nil)).Elem()
}

func (i *webBackendServiceIamMemberConditionPtrType) ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput {
	return i.ToWebBackendServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *webBackendServiceIamMemberConditionPtrType) ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionPtrOutput)
}

type WebBackendServiceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamMemberCondition)(nil)).Elem()
}

func (o WebBackendServiceIamMemberConditionOutput) ToWebBackendServiceIamMemberConditionOutput() WebBackendServiceIamMemberConditionOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionOutput) ToWebBackendServiceIamMemberConditionOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionOutput) ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput {
	return o.ToWebBackendServiceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o WebBackendServiceIamMemberConditionOutput) ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) *WebBackendServiceIamMemberCondition {
		return &v
	}).(WebBackendServiceIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamMemberCondition)(nil)).Elem()
}

func (o WebBackendServiceIamMemberConditionPtrOutput) ToWebBackendServiceIamMemberConditionPtrOutput() WebBackendServiceIamMemberConditionPtrOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionPtrOutput) ToWebBackendServiceIamMemberConditionPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionPtrOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionPtrOutput) Elem() WebBackendServiceIamMemberConditionOutput {
	return o.ApplyT(func(v *WebBackendServiceIamMemberCondition) WebBackendServiceIamMemberCondition { return *v }).(WebBackendServiceIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebBackendServiceIamMemberConditionArgsInput interface {
	pulumi.Input

	ToWebBackendServiceIamMemberConditionArgsOutput() WebBackendServiceIamMemberConditionArgsOutput
	ToWebBackendServiceIamMemberConditionArgsOutputWithContext(context.Context) WebBackendServiceIamMemberConditionArgsOutput
}

type WebBackendServiceIamMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebBackendServiceIamMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamMemberConditionArgs)(nil)).Elem()
}

func (i WebBackendServiceIamMemberConditionArgsArgs) ToWebBackendServiceIamMemberConditionArgsOutput() WebBackendServiceIamMemberConditionArgsOutput {
	return i.ToWebBackendServiceIamMemberConditionArgsOutputWithContext(context.Background())
}

func (i WebBackendServiceIamMemberConditionArgsArgs) ToWebBackendServiceIamMemberConditionArgsOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionArgsOutput)
}

func (i WebBackendServiceIamMemberConditionArgsArgs) ToWebBackendServiceIamMemberConditionArgsPtrOutput() WebBackendServiceIamMemberConditionArgsPtrOutput {
	return i.ToWebBackendServiceIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i WebBackendServiceIamMemberConditionArgsArgs) ToWebBackendServiceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionArgsOutput).ToWebBackendServiceIamMemberConditionArgsPtrOutputWithContext(ctx)
}

type WebBackendServiceIamMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToWebBackendServiceIamMemberConditionArgsPtrOutput() WebBackendServiceIamMemberConditionArgsPtrOutput
	ToWebBackendServiceIamMemberConditionArgsPtrOutputWithContext(context.Context) WebBackendServiceIamMemberConditionArgsPtrOutput
}

type webBackendServiceIamMemberConditionArgsPtrType WebBackendServiceIamMemberConditionArgsArgs

func WebBackendServiceIamMemberConditionArgsPtr(v *WebBackendServiceIamMemberConditionArgsArgs) WebBackendServiceIamMemberConditionArgsPtrInput {
	return (*webBackendServiceIamMemberConditionArgsPtrType)(v)
}

func (*webBackendServiceIamMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamMemberConditionArgs)(nil)).Elem()
}

func (i *webBackendServiceIamMemberConditionArgsPtrType) ToWebBackendServiceIamMemberConditionArgsPtrOutput() WebBackendServiceIamMemberConditionArgsPtrOutput {
	return i.ToWebBackendServiceIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *webBackendServiceIamMemberConditionArgsPtrType) ToWebBackendServiceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionArgsPtrOutput)
}

type WebBackendServiceIamMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamMemberConditionArgs)(nil)).Elem()
}

func (o WebBackendServiceIamMemberConditionArgsOutput) ToWebBackendServiceIamMemberConditionArgsOutput() WebBackendServiceIamMemberConditionArgsOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionArgsOutput) ToWebBackendServiceIamMemberConditionArgsOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionArgsOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionArgsOutput) ToWebBackendServiceIamMemberConditionArgsPtrOutput() WebBackendServiceIamMemberConditionArgsPtrOutput {
	return o.ToWebBackendServiceIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o WebBackendServiceIamMemberConditionArgsOutput) ToWebBackendServiceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionArgs) *WebBackendServiceIamMemberConditionArgs {
		return &v
	}).(WebBackendServiceIamMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebBackendServiceIamMemberConditionArgs)(nil)).Elem()
}

func (o WebBackendServiceIamMemberConditionArgsPtrOutput) ToWebBackendServiceIamMemberConditionArgsPtrOutput() WebBackendServiceIamMemberConditionArgsPtrOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionArgsPtrOutput) ToWebBackendServiceIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionArgsPtrOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionArgsPtrOutput) Elem() WebBackendServiceIamMemberConditionArgsOutput {
	return o.ApplyT(func(v *WebBackendServiceIamMemberConditionArgs) WebBackendServiceIamMemberConditionArgs { return *v }).(WebBackendServiceIamMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebBackendServiceIamMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebBackendServiceIamMemberConditionStateInput interface {
	pulumi.Input

	ToWebBackendServiceIamMemberConditionStateOutput() WebBackendServiceIamMemberConditionStateOutput
	ToWebBackendServiceIamMemberConditionStateOutputWithContext(context.Context) WebBackendServiceIamMemberConditionStateOutput
}

type WebBackendServiceIamMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebBackendServiceIamMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamMemberConditionState)(nil)).Elem()
}

func (i WebBackendServiceIamMemberConditionStateArgs) ToWebBackendServiceIamMemberConditionStateOutput() WebBackendServiceIamMemberConditionStateOutput {
	return i.ToWebBackendServiceIamMemberConditionStateOutputWithContext(context.Background())
}

func (i WebBackendServiceIamMemberConditionStateArgs) ToWebBackendServiceIamMemberConditionStateOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBackendServiceIamMemberConditionStateOutput)
}

type WebBackendServiceIamMemberConditionStateOutput struct{ *pulumi.OutputState }

func (WebBackendServiceIamMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBackendServiceIamMemberConditionState)(nil)).Elem()
}

func (o WebBackendServiceIamMemberConditionStateOutput) ToWebBackendServiceIamMemberConditionStateOutput() WebBackendServiceIamMemberConditionStateOutput {
	return o
}

func (o WebBackendServiceIamMemberConditionStateOutput) ToWebBackendServiceIamMemberConditionStateOutputWithContext(ctx context.Context) WebBackendServiceIamMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebBackendServiceIamMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebBackendServiceIamMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebBackendServiceIamMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebBackendServiceIamMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebIamBindingConditionInput interface {
	pulumi.Input

	ToWebIamBindingConditionOutput() WebIamBindingConditionOutput
	ToWebIamBindingConditionOutputWithContext(context.Context) WebIamBindingConditionOutput
}

type WebIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamBindingCondition)(nil)).Elem()
}

func (i WebIamBindingConditionArgs) ToWebIamBindingConditionOutput() WebIamBindingConditionOutput {
	return i.ToWebIamBindingConditionOutputWithContext(context.Background())
}

func (i WebIamBindingConditionArgs) ToWebIamBindingConditionOutputWithContext(ctx context.Context) WebIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionOutput)
}

func (i WebIamBindingConditionArgs) ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput {
	return i.ToWebIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i WebIamBindingConditionArgs) ToWebIamBindingConditionPtrOutputWithContext(ctx context.Context) WebIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionOutput).ToWebIamBindingConditionPtrOutputWithContext(ctx)
}

type WebIamBindingConditionPtrInput interface {
	pulumi.Input

	ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput
	ToWebIamBindingConditionPtrOutputWithContext(context.Context) WebIamBindingConditionPtrOutput
}

type webIamBindingConditionPtrType WebIamBindingConditionArgs

func WebIamBindingConditionPtr(v *WebIamBindingConditionArgs) WebIamBindingConditionPtrInput {
	return (*webIamBindingConditionPtrType)(v)
}

func (*webIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamBindingCondition)(nil)).Elem()
}

func (i *webIamBindingConditionPtrType) ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput {
	return i.ToWebIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *webIamBindingConditionPtrType) ToWebIamBindingConditionPtrOutputWithContext(ctx context.Context) WebIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionPtrOutput)
}

type WebIamBindingConditionOutput struct{ *pulumi.OutputState }

func (WebIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamBindingCondition)(nil)).Elem()
}

func (o WebIamBindingConditionOutput) ToWebIamBindingConditionOutput() WebIamBindingConditionOutput {
	return o
}

func (o WebIamBindingConditionOutput) ToWebIamBindingConditionOutputWithContext(ctx context.Context) WebIamBindingConditionOutput {
	return o
}

func (o WebIamBindingConditionOutput) ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput {
	return o.ToWebIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o WebIamBindingConditionOutput) ToWebIamBindingConditionPtrOutputWithContext(ctx context.Context) WebIamBindingConditionPtrOutput {
	return o.ApplyT(func(v WebIamBindingCondition) *WebIamBindingCondition {
		return &v
	}).(WebIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (WebIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamBindingCondition)(nil)).Elem()
}

func (o WebIamBindingConditionPtrOutput) ToWebIamBindingConditionPtrOutput() WebIamBindingConditionPtrOutput {
	return o
}

func (o WebIamBindingConditionPtrOutput) ToWebIamBindingConditionPtrOutputWithContext(ctx context.Context) WebIamBindingConditionPtrOutput {
	return o
}

func (o WebIamBindingConditionPtrOutput) Elem() WebIamBindingConditionOutput {
	return o.ApplyT(func(v *WebIamBindingCondition) WebIamBindingCondition { return *v }).(WebIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebIamBindingConditionArgsInput interface {
	pulumi.Input

	ToWebIamBindingConditionArgsOutput() WebIamBindingConditionArgsOutput
	ToWebIamBindingConditionArgsOutputWithContext(context.Context) WebIamBindingConditionArgsOutput
}

type WebIamBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebIamBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamBindingConditionArgs)(nil)).Elem()
}

func (i WebIamBindingConditionArgsArgs) ToWebIamBindingConditionArgsOutput() WebIamBindingConditionArgsOutput {
	return i.ToWebIamBindingConditionArgsOutputWithContext(context.Background())
}

func (i WebIamBindingConditionArgsArgs) ToWebIamBindingConditionArgsOutputWithContext(ctx context.Context) WebIamBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionArgsOutput)
}

func (i WebIamBindingConditionArgsArgs) ToWebIamBindingConditionArgsPtrOutput() WebIamBindingConditionArgsPtrOutput {
	return i.ToWebIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i WebIamBindingConditionArgsArgs) ToWebIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionArgsOutput).ToWebIamBindingConditionArgsPtrOutputWithContext(ctx)
}

type WebIamBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToWebIamBindingConditionArgsPtrOutput() WebIamBindingConditionArgsPtrOutput
	ToWebIamBindingConditionArgsPtrOutputWithContext(context.Context) WebIamBindingConditionArgsPtrOutput
}

type webIamBindingConditionArgsPtrType WebIamBindingConditionArgsArgs

func WebIamBindingConditionArgsPtr(v *WebIamBindingConditionArgsArgs) WebIamBindingConditionArgsPtrInput {
	return (*webIamBindingConditionArgsPtrType)(v)
}

func (*webIamBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamBindingConditionArgs)(nil)).Elem()
}

func (i *webIamBindingConditionArgsPtrType) ToWebIamBindingConditionArgsPtrOutput() WebIamBindingConditionArgsPtrOutput {
	return i.ToWebIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *webIamBindingConditionArgsPtrType) ToWebIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionArgsPtrOutput)
}

type WebIamBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (WebIamBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamBindingConditionArgs)(nil)).Elem()
}

func (o WebIamBindingConditionArgsOutput) ToWebIamBindingConditionArgsOutput() WebIamBindingConditionArgsOutput {
	return o
}

func (o WebIamBindingConditionArgsOutput) ToWebIamBindingConditionArgsOutputWithContext(ctx context.Context) WebIamBindingConditionArgsOutput {
	return o
}

func (o WebIamBindingConditionArgsOutput) ToWebIamBindingConditionArgsPtrOutput() WebIamBindingConditionArgsPtrOutput {
	return o.ToWebIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o WebIamBindingConditionArgsOutput) ToWebIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebIamBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v WebIamBindingConditionArgs) *WebIamBindingConditionArgs {
		return &v
	}).(WebIamBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (WebIamBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamBindingConditionArgs)(nil)).Elem()
}

func (o WebIamBindingConditionArgsPtrOutput) ToWebIamBindingConditionArgsPtrOutput() WebIamBindingConditionArgsPtrOutput {
	return o
}

func (o WebIamBindingConditionArgsPtrOutput) ToWebIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebIamBindingConditionArgsPtrOutput {
	return o
}

func (o WebIamBindingConditionArgsPtrOutput) Elem() WebIamBindingConditionArgsOutput {
	return o.ApplyT(func(v *WebIamBindingConditionArgs) WebIamBindingConditionArgs { return *v }).(WebIamBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebIamBindingConditionStateInput interface {
	pulumi.Input

	ToWebIamBindingConditionStateOutput() WebIamBindingConditionStateOutput
	ToWebIamBindingConditionStateOutputWithContext(context.Context) WebIamBindingConditionStateOutput
}

type WebIamBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebIamBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamBindingConditionState)(nil)).Elem()
}

func (i WebIamBindingConditionStateArgs) ToWebIamBindingConditionStateOutput() WebIamBindingConditionStateOutput {
	return i.ToWebIamBindingConditionStateOutputWithContext(context.Background())
}

func (i WebIamBindingConditionStateArgs) ToWebIamBindingConditionStateOutputWithContext(ctx context.Context) WebIamBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamBindingConditionStateOutput)
}

type WebIamBindingConditionStateOutput struct{ *pulumi.OutputState }

func (WebIamBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamBindingConditionState)(nil)).Elem()
}

func (o WebIamBindingConditionStateOutput) ToWebIamBindingConditionStateOutput() WebIamBindingConditionStateOutput {
	return o
}

func (o WebIamBindingConditionStateOutput) ToWebIamBindingConditionStateOutputWithContext(ctx context.Context) WebIamBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebIamMemberConditionInput interface {
	pulumi.Input

	ToWebIamMemberConditionOutput() WebIamMemberConditionOutput
	ToWebIamMemberConditionOutputWithContext(context.Context) WebIamMemberConditionOutput
}

type WebIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamMemberCondition)(nil)).Elem()
}

func (i WebIamMemberConditionArgs) ToWebIamMemberConditionOutput() WebIamMemberConditionOutput {
	return i.ToWebIamMemberConditionOutputWithContext(context.Background())
}

func (i WebIamMemberConditionArgs) ToWebIamMemberConditionOutputWithContext(ctx context.Context) WebIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionOutput)
}

func (i WebIamMemberConditionArgs) ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput {
	return i.ToWebIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i WebIamMemberConditionArgs) ToWebIamMemberConditionPtrOutputWithContext(ctx context.Context) WebIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionOutput).ToWebIamMemberConditionPtrOutputWithContext(ctx)
}

type WebIamMemberConditionPtrInput interface {
	pulumi.Input

	ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput
	ToWebIamMemberConditionPtrOutputWithContext(context.Context) WebIamMemberConditionPtrOutput
}

type webIamMemberConditionPtrType WebIamMemberConditionArgs

func WebIamMemberConditionPtr(v *WebIamMemberConditionArgs) WebIamMemberConditionPtrInput {
	return (*webIamMemberConditionPtrType)(v)
}

func (*webIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamMemberCondition)(nil)).Elem()
}

func (i *webIamMemberConditionPtrType) ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput {
	return i.ToWebIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *webIamMemberConditionPtrType) ToWebIamMemberConditionPtrOutputWithContext(ctx context.Context) WebIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionPtrOutput)
}

type WebIamMemberConditionOutput struct{ *pulumi.OutputState }

func (WebIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamMemberCondition)(nil)).Elem()
}

func (o WebIamMemberConditionOutput) ToWebIamMemberConditionOutput() WebIamMemberConditionOutput {
	return o
}

func (o WebIamMemberConditionOutput) ToWebIamMemberConditionOutputWithContext(ctx context.Context) WebIamMemberConditionOutput {
	return o
}

func (o WebIamMemberConditionOutput) ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput {
	return o.ToWebIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o WebIamMemberConditionOutput) ToWebIamMemberConditionPtrOutputWithContext(ctx context.Context) WebIamMemberConditionPtrOutput {
	return o.ApplyT(func(v WebIamMemberCondition) *WebIamMemberCondition {
		return &v
	}).(WebIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (WebIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamMemberCondition)(nil)).Elem()
}

func (o WebIamMemberConditionPtrOutput) ToWebIamMemberConditionPtrOutput() WebIamMemberConditionPtrOutput {
	return o
}

func (o WebIamMemberConditionPtrOutput) ToWebIamMemberConditionPtrOutputWithContext(ctx context.Context) WebIamMemberConditionPtrOutput {
	return o
}

func (o WebIamMemberConditionPtrOutput) Elem() WebIamMemberConditionOutput {
	return o.ApplyT(func(v *WebIamMemberCondition) WebIamMemberCondition { return *v }).(WebIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebIamMemberConditionArgsInput interface {
	pulumi.Input

	ToWebIamMemberConditionArgsOutput() WebIamMemberConditionArgsOutput
	ToWebIamMemberConditionArgsOutputWithContext(context.Context) WebIamMemberConditionArgsOutput
}

type WebIamMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebIamMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamMemberConditionArgs)(nil)).Elem()
}

func (i WebIamMemberConditionArgsArgs) ToWebIamMemberConditionArgsOutput() WebIamMemberConditionArgsOutput {
	return i.ToWebIamMemberConditionArgsOutputWithContext(context.Background())
}

func (i WebIamMemberConditionArgsArgs) ToWebIamMemberConditionArgsOutputWithContext(ctx context.Context) WebIamMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionArgsOutput)
}

func (i WebIamMemberConditionArgsArgs) ToWebIamMemberConditionArgsPtrOutput() WebIamMemberConditionArgsPtrOutput {
	return i.ToWebIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i WebIamMemberConditionArgsArgs) ToWebIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionArgsOutput).ToWebIamMemberConditionArgsPtrOutputWithContext(ctx)
}

type WebIamMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToWebIamMemberConditionArgsPtrOutput() WebIamMemberConditionArgsPtrOutput
	ToWebIamMemberConditionArgsPtrOutputWithContext(context.Context) WebIamMemberConditionArgsPtrOutput
}

type webIamMemberConditionArgsPtrType WebIamMemberConditionArgsArgs

func WebIamMemberConditionArgsPtr(v *WebIamMemberConditionArgsArgs) WebIamMemberConditionArgsPtrInput {
	return (*webIamMemberConditionArgsPtrType)(v)
}

func (*webIamMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamMemberConditionArgs)(nil)).Elem()
}

func (i *webIamMemberConditionArgsPtrType) ToWebIamMemberConditionArgsPtrOutput() WebIamMemberConditionArgsPtrOutput {
	return i.ToWebIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *webIamMemberConditionArgsPtrType) ToWebIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionArgsPtrOutput)
}

type WebIamMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (WebIamMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamMemberConditionArgs)(nil)).Elem()
}

func (o WebIamMemberConditionArgsOutput) ToWebIamMemberConditionArgsOutput() WebIamMemberConditionArgsOutput {
	return o
}

func (o WebIamMemberConditionArgsOutput) ToWebIamMemberConditionArgsOutputWithContext(ctx context.Context) WebIamMemberConditionArgsOutput {
	return o
}

func (o WebIamMemberConditionArgsOutput) ToWebIamMemberConditionArgsPtrOutput() WebIamMemberConditionArgsPtrOutput {
	return o.ToWebIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o WebIamMemberConditionArgsOutput) ToWebIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebIamMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v WebIamMemberConditionArgs) *WebIamMemberConditionArgs {
		return &v
	}).(WebIamMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (WebIamMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebIamMemberConditionArgs)(nil)).Elem()
}

func (o WebIamMemberConditionArgsPtrOutput) ToWebIamMemberConditionArgsPtrOutput() WebIamMemberConditionArgsPtrOutput {
	return o
}

func (o WebIamMemberConditionArgsPtrOutput) ToWebIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebIamMemberConditionArgsPtrOutput {
	return o
}

func (o WebIamMemberConditionArgsPtrOutput) Elem() WebIamMemberConditionArgsOutput {
	return o.ApplyT(func(v *WebIamMemberConditionArgs) WebIamMemberConditionArgs { return *v }).(WebIamMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebIamMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebIamMemberConditionStateInput interface {
	pulumi.Input

	ToWebIamMemberConditionStateOutput() WebIamMemberConditionStateOutput
	ToWebIamMemberConditionStateOutputWithContext(context.Context) WebIamMemberConditionStateOutput
}

type WebIamMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebIamMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamMemberConditionState)(nil)).Elem()
}

func (i WebIamMemberConditionStateArgs) ToWebIamMemberConditionStateOutput() WebIamMemberConditionStateOutput {
	return i.ToWebIamMemberConditionStateOutputWithContext(context.Background())
}

func (i WebIamMemberConditionStateArgs) ToWebIamMemberConditionStateOutputWithContext(ctx context.Context) WebIamMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebIamMemberConditionStateOutput)
}

type WebIamMemberConditionStateOutput struct{ *pulumi.OutputState }

func (WebIamMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebIamMemberConditionState)(nil)).Elem()
}

func (o WebIamMemberConditionStateOutput) ToWebIamMemberConditionStateOutput() WebIamMemberConditionStateOutput {
	return o
}

func (o WebIamMemberConditionStateOutput) ToWebIamMemberConditionStateOutputWithContext(ctx context.Context) WebIamMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebIamMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebIamMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebIamMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebIamMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebIamMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeAppEngingIamBindingConditionInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamBindingConditionOutput() WebTypeAppEngingIamBindingConditionOutput
	ToWebTypeAppEngingIamBindingConditionOutputWithContext(context.Context) WebTypeAppEngingIamBindingConditionOutput
}

type WebTypeAppEngingIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeAppEngingIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamBindingCondition)(nil)).Elem()
}

func (i WebTypeAppEngingIamBindingConditionArgs) ToWebTypeAppEngingIamBindingConditionOutput() WebTypeAppEngingIamBindingConditionOutput {
	return i.ToWebTypeAppEngingIamBindingConditionOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamBindingConditionArgs) ToWebTypeAppEngingIamBindingConditionOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionOutput)
}

func (i WebTypeAppEngingIamBindingConditionArgs) ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput {
	return i.ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamBindingConditionArgs) ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionOutput).ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx)
}

type WebTypeAppEngingIamBindingConditionPtrInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput
	ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(context.Context) WebTypeAppEngingIamBindingConditionPtrOutput
}

type webTypeAppEngingIamBindingConditionPtrType WebTypeAppEngingIamBindingConditionArgs

func WebTypeAppEngingIamBindingConditionPtr(v *WebTypeAppEngingIamBindingConditionArgs) WebTypeAppEngingIamBindingConditionPtrInput {
	return (*webTypeAppEngingIamBindingConditionPtrType)(v)
}

func (*webTypeAppEngingIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamBindingCondition)(nil)).Elem()
}

func (i *webTypeAppEngingIamBindingConditionPtrType) ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput {
	return i.ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *webTypeAppEngingIamBindingConditionPtrType) ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionPtrOutput)
}

type WebTypeAppEngingIamBindingConditionOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamBindingCondition)(nil)).Elem()
}

func (o WebTypeAppEngingIamBindingConditionOutput) ToWebTypeAppEngingIamBindingConditionOutput() WebTypeAppEngingIamBindingConditionOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionOutput) ToWebTypeAppEngingIamBindingConditionOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionOutput) ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput {
	return o.ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o WebTypeAppEngingIamBindingConditionOutput) ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) *WebTypeAppEngingIamBindingCondition {
		return &v
	}).(WebTypeAppEngingIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamBindingCondition)(nil)).Elem()
}

func (o WebTypeAppEngingIamBindingConditionPtrOutput) ToWebTypeAppEngingIamBindingConditionPtrOutput() WebTypeAppEngingIamBindingConditionPtrOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionPtrOutput) ToWebTypeAppEngingIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionPtrOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionPtrOutput) Elem() WebTypeAppEngingIamBindingConditionOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamBindingCondition) WebTypeAppEngingIamBindingCondition { return *v }).(WebTypeAppEngingIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeAppEngingIamBindingConditionArgsInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamBindingConditionArgsOutput() WebTypeAppEngingIamBindingConditionArgsOutput
	ToWebTypeAppEngingIamBindingConditionArgsOutputWithContext(context.Context) WebTypeAppEngingIamBindingConditionArgsOutput
}

type WebTypeAppEngingIamBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeAppEngingIamBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamBindingConditionArgs)(nil)).Elem()
}

func (i WebTypeAppEngingIamBindingConditionArgsArgs) ToWebTypeAppEngingIamBindingConditionArgsOutput() WebTypeAppEngingIamBindingConditionArgsOutput {
	return i.ToWebTypeAppEngingIamBindingConditionArgsOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamBindingConditionArgsArgs) ToWebTypeAppEngingIamBindingConditionArgsOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionArgsOutput)
}

func (i WebTypeAppEngingIamBindingConditionArgsArgs) ToWebTypeAppEngingIamBindingConditionArgsPtrOutput() WebTypeAppEngingIamBindingConditionArgsPtrOutput {
	return i.ToWebTypeAppEngingIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamBindingConditionArgsArgs) ToWebTypeAppEngingIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionArgsOutput).ToWebTypeAppEngingIamBindingConditionArgsPtrOutputWithContext(ctx)
}

type WebTypeAppEngingIamBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamBindingConditionArgsPtrOutput() WebTypeAppEngingIamBindingConditionArgsPtrOutput
	ToWebTypeAppEngingIamBindingConditionArgsPtrOutputWithContext(context.Context) WebTypeAppEngingIamBindingConditionArgsPtrOutput
}

type webTypeAppEngingIamBindingConditionArgsPtrType WebTypeAppEngingIamBindingConditionArgsArgs

func WebTypeAppEngingIamBindingConditionArgsPtr(v *WebTypeAppEngingIamBindingConditionArgsArgs) WebTypeAppEngingIamBindingConditionArgsPtrInput {
	return (*webTypeAppEngingIamBindingConditionArgsPtrType)(v)
}

func (*webTypeAppEngingIamBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamBindingConditionArgs)(nil)).Elem()
}

func (i *webTypeAppEngingIamBindingConditionArgsPtrType) ToWebTypeAppEngingIamBindingConditionArgsPtrOutput() WebTypeAppEngingIamBindingConditionArgsPtrOutput {
	return i.ToWebTypeAppEngingIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *webTypeAppEngingIamBindingConditionArgsPtrType) ToWebTypeAppEngingIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionArgsPtrOutput)
}

type WebTypeAppEngingIamBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamBindingConditionArgs)(nil)).Elem()
}

func (o WebTypeAppEngingIamBindingConditionArgsOutput) ToWebTypeAppEngingIamBindingConditionArgsOutput() WebTypeAppEngingIamBindingConditionArgsOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionArgsOutput) ToWebTypeAppEngingIamBindingConditionArgsOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionArgsOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionArgsOutput) ToWebTypeAppEngingIamBindingConditionArgsPtrOutput() WebTypeAppEngingIamBindingConditionArgsPtrOutput {
	return o.ToWebTypeAppEngingIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o WebTypeAppEngingIamBindingConditionArgsOutput) ToWebTypeAppEngingIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionArgs) *WebTypeAppEngingIamBindingConditionArgs {
		return &v
	}).(WebTypeAppEngingIamBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamBindingConditionArgs)(nil)).Elem()
}

func (o WebTypeAppEngingIamBindingConditionArgsPtrOutput) ToWebTypeAppEngingIamBindingConditionArgsPtrOutput() WebTypeAppEngingIamBindingConditionArgsPtrOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionArgsPtrOutput) ToWebTypeAppEngingIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionArgsPtrOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionArgsPtrOutput) Elem() WebTypeAppEngingIamBindingConditionArgsOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamBindingConditionArgs) WebTypeAppEngingIamBindingConditionArgs { return *v }).(WebTypeAppEngingIamBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeAppEngingIamBindingConditionStateInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamBindingConditionStateOutput() WebTypeAppEngingIamBindingConditionStateOutput
	ToWebTypeAppEngingIamBindingConditionStateOutputWithContext(context.Context) WebTypeAppEngingIamBindingConditionStateOutput
}

type WebTypeAppEngingIamBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeAppEngingIamBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamBindingConditionState)(nil)).Elem()
}

func (i WebTypeAppEngingIamBindingConditionStateArgs) ToWebTypeAppEngingIamBindingConditionStateOutput() WebTypeAppEngingIamBindingConditionStateOutput {
	return i.ToWebTypeAppEngingIamBindingConditionStateOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamBindingConditionStateArgs) ToWebTypeAppEngingIamBindingConditionStateOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamBindingConditionStateOutput)
}

type WebTypeAppEngingIamBindingConditionStateOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamBindingConditionState)(nil)).Elem()
}

func (o WebTypeAppEngingIamBindingConditionStateOutput) ToWebTypeAppEngingIamBindingConditionStateOutput() WebTypeAppEngingIamBindingConditionStateOutput {
	return o
}

func (o WebTypeAppEngingIamBindingConditionStateOutput) ToWebTypeAppEngingIamBindingConditionStateOutputWithContext(ctx context.Context) WebTypeAppEngingIamBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeAppEngingIamMemberConditionInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamMemberConditionOutput() WebTypeAppEngingIamMemberConditionOutput
	ToWebTypeAppEngingIamMemberConditionOutputWithContext(context.Context) WebTypeAppEngingIamMemberConditionOutput
}

type WebTypeAppEngingIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeAppEngingIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamMemberCondition)(nil)).Elem()
}

func (i WebTypeAppEngingIamMemberConditionArgs) ToWebTypeAppEngingIamMemberConditionOutput() WebTypeAppEngingIamMemberConditionOutput {
	return i.ToWebTypeAppEngingIamMemberConditionOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamMemberConditionArgs) ToWebTypeAppEngingIamMemberConditionOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionOutput)
}

func (i WebTypeAppEngingIamMemberConditionArgs) ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput {
	return i.ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamMemberConditionArgs) ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionOutput).ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx)
}

type WebTypeAppEngingIamMemberConditionPtrInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput
	ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(context.Context) WebTypeAppEngingIamMemberConditionPtrOutput
}

type webTypeAppEngingIamMemberConditionPtrType WebTypeAppEngingIamMemberConditionArgs

func WebTypeAppEngingIamMemberConditionPtr(v *WebTypeAppEngingIamMemberConditionArgs) WebTypeAppEngingIamMemberConditionPtrInput {
	return (*webTypeAppEngingIamMemberConditionPtrType)(v)
}

func (*webTypeAppEngingIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamMemberCondition)(nil)).Elem()
}

func (i *webTypeAppEngingIamMemberConditionPtrType) ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput {
	return i.ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *webTypeAppEngingIamMemberConditionPtrType) ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionPtrOutput)
}

type WebTypeAppEngingIamMemberConditionOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamMemberCondition)(nil)).Elem()
}

func (o WebTypeAppEngingIamMemberConditionOutput) ToWebTypeAppEngingIamMemberConditionOutput() WebTypeAppEngingIamMemberConditionOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionOutput) ToWebTypeAppEngingIamMemberConditionOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionOutput) ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput {
	return o.ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o WebTypeAppEngingIamMemberConditionOutput) ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) *WebTypeAppEngingIamMemberCondition {
		return &v
	}).(WebTypeAppEngingIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamMemberCondition)(nil)).Elem()
}

func (o WebTypeAppEngingIamMemberConditionPtrOutput) ToWebTypeAppEngingIamMemberConditionPtrOutput() WebTypeAppEngingIamMemberConditionPtrOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionPtrOutput) ToWebTypeAppEngingIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionPtrOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionPtrOutput) Elem() WebTypeAppEngingIamMemberConditionOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamMemberCondition) WebTypeAppEngingIamMemberCondition { return *v }).(WebTypeAppEngingIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeAppEngingIamMemberConditionArgsInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamMemberConditionArgsOutput() WebTypeAppEngingIamMemberConditionArgsOutput
	ToWebTypeAppEngingIamMemberConditionArgsOutputWithContext(context.Context) WebTypeAppEngingIamMemberConditionArgsOutput
}

type WebTypeAppEngingIamMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeAppEngingIamMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamMemberConditionArgs)(nil)).Elem()
}

func (i WebTypeAppEngingIamMemberConditionArgsArgs) ToWebTypeAppEngingIamMemberConditionArgsOutput() WebTypeAppEngingIamMemberConditionArgsOutput {
	return i.ToWebTypeAppEngingIamMemberConditionArgsOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamMemberConditionArgsArgs) ToWebTypeAppEngingIamMemberConditionArgsOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionArgsOutput)
}

func (i WebTypeAppEngingIamMemberConditionArgsArgs) ToWebTypeAppEngingIamMemberConditionArgsPtrOutput() WebTypeAppEngingIamMemberConditionArgsPtrOutput {
	return i.ToWebTypeAppEngingIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamMemberConditionArgsArgs) ToWebTypeAppEngingIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionArgsOutput).ToWebTypeAppEngingIamMemberConditionArgsPtrOutputWithContext(ctx)
}

type WebTypeAppEngingIamMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamMemberConditionArgsPtrOutput() WebTypeAppEngingIamMemberConditionArgsPtrOutput
	ToWebTypeAppEngingIamMemberConditionArgsPtrOutputWithContext(context.Context) WebTypeAppEngingIamMemberConditionArgsPtrOutput
}

type webTypeAppEngingIamMemberConditionArgsPtrType WebTypeAppEngingIamMemberConditionArgsArgs

func WebTypeAppEngingIamMemberConditionArgsPtr(v *WebTypeAppEngingIamMemberConditionArgsArgs) WebTypeAppEngingIamMemberConditionArgsPtrInput {
	return (*webTypeAppEngingIamMemberConditionArgsPtrType)(v)
}

func (*webTypeAppEngingIamMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamMemberConditionArgs)(nil)).Elem()
}

func (i *webTypeAppEngingIamMemberConditionArgsPtrType) ToWebTypeAppEngingIamMemberConditionArgsPtrOutput() WebTypeAppEngingIamMemberConditionArgsPtrOutput {
	return i.ToWebTypeAppEngingIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *webTypeAppEngingIamMemberConditionArgsPtrType) ToWebTypeAppEngingIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionArgsPtrOutput)
}

type WebTypeAppEngingIamMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamMemberConditionArgs)(nil)).Elem()
}

func (o WebTypeAppEngingIamMemberConditionArgsOutput) ToWebTypeAppEngingIamMemberConditionArgsOutput() WebTypeAppEngingIamMemberConditionArgsOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionArgsOutput) ToWebTypeAppEngingIamMemberConditionArgsOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionArgsOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionArgsOutput) ToWebTypeAppEngingIamMemberConditionArgsPtrOutput() WebTypeAppEngingIamMemberConditionArgsPtrOutput {
	return o.ToWebTypeAppEngingIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o WebTypeAppEngingIamMemberConditionArgsOutput) ToWebTypeAppEngingIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionArgs) *WebTypeAppEngingIamMemberConditionArgs {
		return &v
	}).(WebTypeAppEngingIamMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeAppEngingIamMemberConditionArgs)(nil)).Elem()
}

func (o WebTypeAppEngingIamMemberConditionArgsPtrOutput) ToWebTypeAppEngingIamMemberConditionArgsPtrOutput() WebTypeAppEngingIamMemberConditionArgsPtrOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionArgsPtrOutput) ToWebTypeAppEngingIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionArgsPtrOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionArgsPtrOutput) Elem() WebTypeAppEngingIamMemberConditionArgsOutput {
	return o.ApplyT(func(v *WebTypeAppEngingIamMemberConditionArgs) WebTypeAppEngingIamMemberConditionArgs { return *v }).(WebTypeAppEngingIamMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeAppEngingIamMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeAppEngingIamMemberConditionStateInput interface {
	pulumi.Input

	ToWebTypeAppEngingIamMemberConditionStateOutput() WebTypeAppEngingIamMemberConditionStateOutput
	ToWebTypeAppEngingIamMemberConditionStateOutputWithContext(context.Context) WebTypeAppEngingIamMemberConditionStateOutput
}

type WebTypeAppEngingIamMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeAppEngingIamMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamMemberConditionState)(nil)).Elem()
}

func (i WebTypeAppEngingIamMemberConditionStateArgs) ToWebTypeAppEngingIamMemberConditionStateOutput() WebTypeAppEngingIamMemberConditionStateOutput {
	return i.ToWebTypeAppEngingIamMemberConditionStateOutputWithContext(context.Background())
}

func (i WebTypeAppEngingIamMemberConditionStateArgs) ToWebTypeAppEngingIamMemberConditionStateOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeAppEngingIamMemberConditionStateOutput)
}

type WebTypeAppEngingIamMemberConditionStateOutput struct{ *pulumi.OutputState }

func (WebTypeAppEngingIamMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeAppEngingIamMemberConditionState)(nil)).Elem()
}

func (o WebTypeAppEngingIamMemberConditionStateOutput) ToWebTypeAppEngingIamMemberConditionStateOutput() WebTypeAppEngingIamMemberConditionStateOutput {
	return o
}

func (o WebTypeAppEngingIamMemberConditionStateOutput) ToWebTypeAppEngingIamMemberConditionStateOutputWithContext(ctx context.Context) WebTypeAppEngingIamMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeAppEngingIamMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeAppEngingIamMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeAppEngingIamMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeAppEngingIamMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeComputeIamBindingConditionInput interface {
	pulumi.Input

	ToWebTypeComputeIamBindingConditionOutput() WebTypeComputeIamBindingConditionOutput
	ToWebTypeComputeIamBindingConditionOutputWithContext(context.Context) WebTypeComputeIamBindingConditionOutput
}

type WebTypeComputeIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeComputeIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamBindingCondition)(nil)).Elem()
}

func (i WebTypeComputeIamBindingConditionArgs) ToWebTypeComputeIamBindingConditionOutput() WebTypeComputeIamBindingConditionOutput {
	return i.ToWebTypeComputeIamBindingConditionOutputWithContext(context.Background())
}

func (i WebTypeComputeIamBindingConditionArgs) ToWebTypeComputeIamBindingConditionOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionOutput)
}

func (i WebTypeComputeIamBindingConditionArgs) ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput {
	return i.ToWebTypeComputeIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i WebTypeComputeIamBindingConditionArgs) ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionOutput).ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx)
}

type WebTypeComputeIamBindingConditionPtrInput interface {
	pulumi.Input

	ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput
	ToWebTypeComputeIamBindingConditionPtrOutputWithContext(context.Context) WebTypeComputeIamBindingConditionPtrOutput
}

type webTypeComputeIamBindingConditionPtrType WebTypeComputeIamBindingConditionArgs

func WebTypeComputeIamBindingConditionPtr(v *WebTypeComputeIamBindingConditionArgs) WebTypeComputeIamBindingConditionPtrInput {
	return (*webTypeComputeIamBindingConditionPtrType)(v)
}

func (*webTypeComputeIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamBindingCondition)(nil)).Elem()
}

func (i *webTypeComputeIamBindingConditionPtrType) ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput {
	return i.ToWebTypeComputeIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *webTypeComputeIamBindingConditionPtrType) ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionPtrOutput)
}

type WebTypeComputeIamBindingConditionOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamBindingCondition)(nil)).Elem()
}

func (o WebTypeComputeIamBindingConditionOutput) ToWebTypeComputeIamBindingConditionOutput() WebTypeComputeIamBindingConditionOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionOutput) ToWebTypeComputeIamBindingConditionOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionOutput) ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput {
	return o.ToWebTypeComputeIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o WebTypeComputeIamBindingConditionOutput) ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) *WebTypeComputeIamBindingCondition {
		return &v
	}).(WebTypeComputeIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamBindingCondition)(nil)).Elem()
}

func (o WebTypeComputeIamBindingConditionPtrOutput) ToWebTypeComputeIamBindingConditionPtrOutput() WebTypeComputeIamBindingConditionPtrOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionPtrOutput) ToWebTypeComputeIamBindingConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionPtrOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionPtrOutput) Elem() WebTypeComputeIamBindingConditionOutput {
	return o.ApplyT(func(v *WebTypeComputeIamBindingCondition) WebTypeComputeIamBindingCondition { return *v }).(WebTypeComputeIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamBindingConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamBindingConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeComputeIamBindingConditionArgsInput interface {
	pulumi.Input

	ToWebTypeComputeIamBindingConditionArgsOutput() WebTypeComputeIamBindingConditionArgsOutput
	ToWebTypeComputeIamBindingConditionArgsOutputWithContext(context.Context) WebTypeComputeIamBindingConditionArgsOutput
}

type WebTypeComputeIamBindingConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeComputeIamBindingConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamBindingConditionArgs)(nil)).Elem()
}

func (i WebTypeComputeIamBindingConditionArgsArgs) ToWebTypeComputeIamBindingConditionArgsOutput() WebTypeComputeIamBindingConditionArgsOutput {
	return i.ToWebTypeComputeIamBindingConditionArgsOutputWithContext(context.Background())
}

func (i WebTypeComputeIamBindingConditionArgsArgs) ToWebTypeComputeIamBindingConditionArgsOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionArgsOutput)
}

func (i WebTypeComputeIamBindingConditionArgsArgs) ToWebTypeComputeIamBindingConditionArgsPtrOutput() WebTypeComputeIamBindingConditionArgsPtrOutput {
	return i.ToWebTypeComputeIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i WebTypeComputeIamBindingConditionArgsArgs) ToWebTypeComputeIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionArgsOutput).ToWebTypeComputeIamBindingConditionArgsPtrOutputWithContext(ctx)
}

type WebTypeComputeIamBindingConditionArgsPtrInput interface {
	pulumi.Input

	ToWebTypeComputeIamBindingConditionArgsPtrOutput() WebTypeComputeIamBindingConditionArgsPtrOutput
	ToWebTypeComputeIamBindingConditionArgsPtrOutputWithContext(context.Context) WebTypeComputeIamBindingConditionArgsPtrOutput
}

type webTypeComputeIamBindingConditionArgsPtrType WebTypeComputeIamBindingConditionArgsArgs

func WebTypeComputeIamBindingConditionArgsPtr(v *WebTypeComputeIamBindingConditionArgsArgs) WebTypeComputeIamBindingConditionArgsPtrInput {
	return (*webTypeComputeIamBindingConditionArgsPtrType)(v)
}

func (*webTypeComputeIamBindingConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamBindingConditionArgs)(nil)).Elem()
}

func (i *webTypeComputeIamBindingConditionArgsPtrType) ToWebTypeComputeIamBindingConditionArgsPtrOutput() WebTypeComputeIamBindingConditionArgsPtrOutput {
	return i.ToWebTypeComputeIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (i *webTypeComputeIamBindingConditionArgsPtrType) ToWebTypeComputeIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionArgsPtrOutput)
}

type WebTypeComputeIamBindingConditionArgsOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamBindingConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamBindingConditionArgs)(nil)).Elem()
}

func (o WebTypeComputeIamBindingConditionArgsOutput) ToWebTypeComputeIamBindingConditionArgsOutput() WebTypeComputeIamBindingConditionArgsOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionArgsOutput) ToWebTypeComputeIamBindingConditionArgsOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionArgsOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionArgsOutput) ToWebTypeComputeIamBindingConditionArgsPtrOutput() WebTypeComputeIamBindingConditionArgsPtrOutput {
	return o.ToWebTypeComputeIamBindingConditionArgsPtrOutputWithContext(context.Background())
}

func (o WebTypeComputeIamBindingConditionArgsOutput) ToWebTypeComputeIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionArgsPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionArgs) *WebTypeComputeIamBindingConditionArgs {
		return &v
	}).(WebTypeComputeIamBindingConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamBindingConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamBindingConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamBindingConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamBindingConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamBindingConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamBindingConditionArgs)(nil)).Elem()
}

func (o WebTypeComputeIamBindingConditionArgsPtrOutput) ToWebTypeComputeIamBindingConditionArgsPtrOutput() WebTypeComputeIamBindingConditionArgsPtrOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionArgsPtrOutput) ToWebTypeComputeIamBindingConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionArgsPtrOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionArgsPtrOutput) Elem() WebTypeComputeIamBindingConditionArgsOutput {
	return o.ApplyT(func(v *WebTypeComputeIamBindingConditionArgs) WebTypeComputeIamBindingConditionArgs { return *v }).(WebTypeComputeIamBindingConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamBindingConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamBindingConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamBindingConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamBindingConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeComputeIamBindingConditionStateInput interface {
	pulumi.Input

	ToWebTypeComputeIamBindingConditionStateOutput() WebTypeComputeIamBindingConditionStateOutput
	ToWebTypeComputeIamBindingConditionStateOutputWithContext(context.Context) WebTypeComputeIamBindingConditionStateOutput
}

type WebTypeComputeIamBindingConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeComputeIamBindingConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamBindingConditionState)(nil)).Elem()
}

func (i WebTypeComputeIamBindingConditionStateArgs) ToWebTypeComputeIamBindingConditionStateOutput() WebTypeComputeIamBindingConditionStateOutput {
	return i.ToWebTypeComputeIamBindingConditionStateOutputWithContext(context.Background())
}

func (i WebTypeComputeIamBindingConditionStateArgs) ToWebTypeComputeIamBindingConditionStateOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamBindingConditionStateOutput)
}

type WebTypeComputeIamBindingConditionStateOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamBindingConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamBindingConditionState)(nil)).Elem()
}

func (o WebTypeComputeIamBindingConditionStateOutput) ToWebTypeComputeIamBindingConditionStateOutput() WebTypeComputeIamBindingConditionStateOutput {
	return o
}

func (o WebTypeComputeIamBindingConditionStateOutput) ToWebTypeComputeIamBindingConditionStateOutputWithContext(ctx context.Context) WebTypeComputeIamBindingConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamBindingConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamBindingConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamBindingConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamBindingConditionState) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeComputeIamMemberConditionInput interface {
	pulumi.Input

	ToWebTypeComputeIamMemberConditionOutput() WebTypeComputeIamMemberConditionOutput
	ToWebTypeComputeIamMemberConditionOutputWithContext(context.Context) WebTypeComputeIamMemberConditionOutput
}

type WebTypeComputeIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeComputeIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamMemberCondition)(nil)).Elem()
}

func (i WebTypeComputeIamMemberConditionArgs) ToWebTypeComputeIamMemberConditionOutput() WebTypeComputeIamMemberConditionOutput {
	return i.ToWebTypeComputeIamMemberConditionOutputWithContext(context.Background())
}

func (i WebTypeComputeIamMemberConditionArgs) ToWebTypeComputeIamMemberConditionOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionOutput)
}

func (i WebTypeComputeIamMemberConditionArgs) ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput {
	return i.ToWebTypeComputeIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i WebTypeComputeIamMemberConditionArgs) ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionOutput).ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx)
}

type WebTypeComputeIamMemberConditionPtrInput interface {
	pulumi.Input

	ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput
	ToWebTypeComputeIamMemberConditionPtrOutputWithContext(context.Context) WebTypeComputeIamMemberConditionPtrOutput
}

type webTypeComputeIamMemberConditionPtrType WebTypeComputeIamMemberConditionArgs

func WebTypeComputeIamMemberConditionPtr(v *WebTypeComputeIamMemberConditionArgs) WebTypeComputeIamMemberConditionPtrInput {
	return (*webTypeComputeIamMemberConditionPtrType)(v)
}

func (*webTypeComputeIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamMemberCondition)(nil)).Elem()
}

func (i *webTypeComputeIamMemberConditionPtrType) ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput {
	return i.ToWebTypeComputeIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *webTypeComputeIamMemberConditionPtrType) ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionPtrOutput)
}

type WebTypeComputeIamMemberConditionOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamMemberCondition)(nil)).Elem()
}

func (o WebTypeComputeIamMemberConditionOutput) ToWebTypeComputeIamMemberConditionOutput() WebTypeComputeIamMemberConditionOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionOutput) ToWebTypeComputeIamMemberConditionOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionOutput) ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput {
	return o.ToWebTypeComputeIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o WebTypeComputeIamMemberConditionOutput) ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) *WebTypeComputeIamMemberCondition {
		return &v
	}).(WebTypeComputeIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamMemberCondition)(nil)).Elem()
}

func (o WebTypeComputeIamMemberConditionPtrOutput) ToWebTypeComputeIamMemberConditionPtrOutput() WebTypeComputeIamMemberConditionPtrOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionPtrOutput) ToWebTypeComputeIamMemberConditionPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionPtrOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionPtrOutput) Elem() WebTypeComputeIamMemberConditionOutput {
	return o.ApplyT(func(v *WebTypeComputeIamMemberCondition) WebTypeComputeIamMemberCondition { return *v }).(WebTypeComputeIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamMemberConditionPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamMemberConditionPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeComputeIamMemberConditionArgsInput interface {
	pulumi.Input

	ToWebTypeComputeIamMemberConditionArgsOutput() WebTypeComputeIamMemberConditionArgsOutput
	ToWebTypeComputeIamMemberConditionArgsOutputWithContext(context.Context) WebTypeComputeIamMemberConditionArgsOutput
}

type WebTypeComputeIamMemberConditionArgsArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeComputeIamMemberConditionArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamMemberConditionArgs)(nil)).Elem()
}

func (i WebTypeComputeIamMemberConditionArgsArgs) ToWebTypeComputeIamMemberConditionArgsOutput() WebTypeComputeIamMemberConditionArgsOutput {
	return i.ToWebTypeComputeIamMemberConditionArgsOutputWithContext(context.Background())
}

func (i WebTypeComputeIamMemberConditionArgsArgs) ToWebTypeComputeIamMemberConditionArgsOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionArgsOutput)
}

func (i WebTypeComputeIamMemberConditionArgsArgs) ToWebTypeComputeIamMemberConditionArgsPtrOutput() WebTypeComputeIamMemberConditionArgsPtrOutput {
	return i.ToWebTypeComputeIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i WebTypeComputeIamMemberConditionArgsArgs) ToWebTypeComputeIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionArgsOutput).ToWebTypeComputeIamMemberConditionArgsPtrOutputWithContext(ctx)
}

type WebTypeComputeIamMemberConditionArgsPtrInput interface {
	pulumi.Input

	ToWebTypeComputeIamMemberConditionArgsPtrOutput() WebTypeComputeIamMemberConditionArgsPtrOutput
	ToWebTypeComputeIamMemberConditionArgsPtrOutputWithContext(context.Context) WebTypeComputeIamMemberConditionArgsPtrOutput
}

type webTypeComputeIamMemberConditionArgsPtrType WebTypeComputeIamMemberConditionArgsArgs

func WebTypeComputeIamMemberConditionArgsPtr(v *WebTypeComputeIamMemberConditionArgsArgs) WebTypeComputeIamMemberConditionArgsPtrInput {
	return (*webTypeComputeIamMemberConditionArgsPtrType)(v)
}

func (*webTypeComputeIamMemberConditionArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamMemberConditionArgs)(nil)).Elem()
}

func (i *webTypeComputeIamMemberConditionArgsPtrType) ToWebTypeComputeIamMemberConditionArgsPtrOutput() WebTypeComputeIamMemberConditionArgsPtrOutput {
	return i.ToWebTypeComputeIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (i *webTypeComputeIamMemberConditionArgsPtrType) ToWebTypeComputeIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionArgsPtrOutput)
}

type WebTypeComputeIamMemberConditionArgsOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamMemberConditionArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamMemberConditionArgs)(nil)).Elem()
}

func (o WebTypeComputeIamMemberConditionArgsOutput) ToWebTypeComputeIamMemberConditionArgsOutput() WebTypeComputeIamMemberConditionArgsOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionArgsOutput) ToWebTypeComputeIamMemberConditionArgsOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionArgsOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionArgsOutput) ToWebTypeComputeIamMemberConditionArgsPtrOutput() WebTypeComputeIamMemberConditionArgsPtrOutput {
	return o.ToWebTypeComputeIamMemberConditionArgsPtrOutputWithContext(context.Background())
}

func (o WebTypeComputeIamMemberConditionArgsOutput) ToWebTypeComputeIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionArgsPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionArgs) *WebTypeComputeIamMemberConditionArgs {
		return &v
	}).(WebTypeComputeIamMemberConditionArgsPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamMemberConditionArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamMemberConditionArgsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamMemberConditionArgsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamMemberConditionArgsPtrOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamMemberConditionArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTypeComputeIamMemberConditionArgs)(nil)).Elem()
}

func (o WebTypeComputeIamMemberConditionArgsPtrOutput) ToWebTypeComputeIamMemberConditionArgsPtrOutput() WebTypeComputeIamMemberConditionArgsPtrOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionArgsPtrOutput) ToWebTypeComputeIamMemberConditionArgsPtrOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionArgsPtrOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionArgsPtrOutput) Elem() WebTypeComputeIamMemberConditionArgsOutput {
	return o.ApplyT(func(v *WebTypeComputeIamMemberConditionArgs) WebTypeComputeIamMemberConditionArgs { return *v }).(WebTypeComputeIamMemberConditionArgsOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamMemberConditionArgsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamMemberConditionArgsPtrOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionArgs) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamMemberConditionArgsPtrOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionArgs) string { return v.Title }).(pulumi.StringOutput)
}

type WebTypeComputeIamMemberConditionState struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

type WebTypeComputeIamMemberConditionStateInput interface {
	pulumi.Input

	ToWebTypeComputeIamMemberConditionStateOutput() WebTypeComputeIamMemberConditionStateOutput
	ToWebTypeComputeIamMemberConditionStateOutputWithContext(context.Context) WebTypeComputeIamMemberConditionStateOutput
}

type WebTypeComputeIamMemberConditionStateArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (WebTypeComputeIamMemberConditionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamMemberConditionState)(nil)).Elem()
}

func (i WebTypeComputeIamMemberConditionStateArgs) ToWebTypeComputeIamMemberConditionStateOutput() WebTypeComputeIamMemberConditionStateOutput {
	return i.ToWebTypeComputeIamMemberConditionStateOutputWithContext(context.Background())
}

func (i WebTypeComputeIamMemberConditionStateArgs) ToWebTypeComputeIamMemberConditionStateOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTypeComputeIamMemberConditionStateOutput)
}

type WebTypeComputeIamMemberConditionStateOutput struct{ *pulumi.OutputState }

func (WebTypeComputeIamMemberConditionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTypeComputeIamMemberConditionState)(nil)).Elem()
}

func (o WebTypeComputeIamMemberConditionStateOutput) ToWebTypeComputeIamMemberConditionStateOutput() WebTypeComputeIamMemberConditionStateOutput {
	return o
}

func (o WebTypeComputeIamMemberConditionStateOutput) ToWebTypeComputeIamMemberConditionStateOutputWithContext(ctx context.Context) WebTypeComputeIamMemberConditionStateOutput {
	return o
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o WebTypeComputeIamMemberConditionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o WebTypeComputeIamMemberConditionStateOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionState) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o WebTypeComputeIamMemberConditionStateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WebTypeComputeIamMemberConditionState) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AppEngineServiceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamBindingConditionStateOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(AppEngineServiceIamMemberConditionStateOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamBindingConditionOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamBindingConditionStateOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamMemberConditionOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(AppEngineVersionIamMemberConditionStateOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMBindingConditionStateOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIAMMemberConditionStateOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamBindingConditionStateOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(WebBackendServiceIamMemberConditionStateOutput{})
	pulumi.RegisterOutputType(WebIamBindingConditionOutput{})
	pulumi.RegisterOutputType(WebIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(WebIamBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(WebIamBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(WebIamBindingConditionStateOutput{})
	pulumi.RegisterOutputType(WebIamMemberConditionOutput{})
	pulumi.RegisterOutputType(WebIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(WebIamMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(WebIamMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(WebIamMemberConditionStateOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamBindingConditionOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamBindingConditionStateOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamMemberConditionOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(WebTypeAppEngingIamMemberConditionStateOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamBindingConditionOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamBindingConditionArgsOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamBindingConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamBindingConditionStateOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamMemberConditionOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamMemberConditionArgsOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamMemberConditionArgsPtrOutput{})
	pulumi.RegisterOutputType(WebTypeComputeIamMemberConditionStateOutput{})
}
