// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudidentity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GroupGroupKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupGroupKeyInput is an input type that accepts GroupGroupKeyArgs and GroupGroupKeyOutput values.
// You can construct a concrete instance of `GroupGroupKeyInput` via:
//
//          GroupGroupKeyArgs{...}
type GroupGroupKeyInput interface {
	pulumi.Input

	ToGroupGroupKeyOutput() GroupGroupKeyOutput
	ToGroupGroupKeyOutputWithContext(context.Context) GroupGroupKeyOutput
}

type GroupGroupKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupGroupKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupKey)(nil)).Elem()
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyOutput() GroupGroupKeyOutput {
	return i.ToGroupGroupKeyOutputWithContext(context.Background())
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyOutputWithContext(ctx context.Context) GroupGroupKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupKeyOutput)
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return i.ToGroupGroupKeyPtrOutputWithContext(context.Background())
}

func (i GroupGroupKeyArgs) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupKeyOutput).ToGroupGroupKeyPtrOutputWithContext(ctx)
}

// GroupGroupKeyPtrInput is an input type that accepts GroupGroupKeyArgs, GroupGroupKeyPtr and GroupGroupKeyPtrOutput values.
// You can construct a concrete instance of `GroupGroupKeyPtrInput` via:
//
//          GroupGroupKeyArgs{...}
//
//  or:
//
//          nil
type GroupGroupKeyPtrInput interface {
	pulumi.Input

	ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput
	ToGroupGroupKeyPtrOutputWithContext(context.Context) GroupGroupKeyPtrOutput
}

type groupGroupKeyPtrType GroupGroupKeyArgs

func GroupGroupKeyPtr(v *GroupGroupKeyArgs) GroupGroupKeyPtrInput {
	return (*groupGroupKeyPtrType)(v)
}

func (*groupGroupKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupGroupKey)(nil)).Elem()
}

func (i *groupGroupKeyPtrType) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return i.ToGroupGroupKeyPtrOutputWithContext(context.Background())
}

func (i *groupGroupKeyPtrType) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGroupKeyPtrOutput)
}

type GroupGroupKeyOutput struct{ *pulumi.OutputState }

func (GroupGroupKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGroupKey)(nil)).Elem()
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyOutput() GroupGroupKeyOutput {
	return o
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyOutputWithContext(ctx context.Context) GroupGroupKeyOutput {
	return o
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return o.ToGroupGroupKeyPtrOutputWithContext(context.Background())
}

func (o GroupGroupKeyOutput) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return o.ApplyT(func(v GroupGroupKey) *GroupGroupKey {
		return &v
	}).(GroupGroupKeyPtrOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupGroupKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupGroupKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupGroupKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGroupKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupGroupKeyPtrOutput struct{ *pulumi.OutputState }

func (GroupGroupKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupGroupKey)(nil)).Elem()
}

func (o GroupGroupKeyPtrOutput) ToGroupGroupKeyPtrOutput() GroupGroupKeyPtrOutput {
	return o
}

func (o GroupGroupKeyPtrOutput) ToGroupGroupKeyPtrOutputWithContext(ctx context.Context) GroupGroupKeyPtrOutput {
	return o
}

func (o GroupGroupKeyPtrOutput) Elem() GroupGroupKeyOutput {
	return o.ApplyT(func(v *GroupGroupKey) GroupGroupKey { return *v }).(GroupGroupKeyOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupGroupKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupGroupKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupGroupKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupGroupKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GroupMembershipMemberKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupMembershipMemberKeyInput is an input type that accepts GroupMembershipMemberKeyArgs and GroupMembershipMemberKeyOutput values.
// You can construct a concrete instance of `GroupMembershipMemberKeyInput` via:
//
//          GroupMembershipMemberKeyArgs{...}
type GroupMembershipMemberKeyInput interface {
	pulumi.Input

	ToGroupMembershipMemberKeyOutput() GroupMembershipMemberKeyOutput
	ToGroupMembershipMemberKeyOutputWithContext(context.Context) GroupMembershipMemberKeyOutput
}

type GroupMembershipMemberKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupMembershipMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipMemberKey)(nil)).Elem()
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyOutput() GroupMembershipMemberKeyOutput {
	return i.ToGroupMembershipMemberKeyOutputWithContext(context.Background())
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyOutputWithContext(ctx context.Context) GroupMembershipMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMemberKeyOutput)
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return i.ToGroupMembershipMemberKeyPtrOutputWithContext(context.Background())
}

func (i GroupMembershipMemberKeyArgs) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMemberKeyOutput).ToGroupMembershipMemberKeyPtrOutputWithContext(ctx)
}

// GroupMembershipMemberKeyPtrInput is an input type that accepts GroupMembershipMemberKeyArgs, GroupMembershipMemberKeyPtr and GroupMembershipMemberKeyPtrOutput values.
// You can construct a concrete instance of `GroupMembershipMemberKeyPtrInput` via:
//
//          GroupMembershipMemberKeyArgs{...}
//
//  or:
//
//          nil
type GroupMembershipMemberKeyPtrInput interface {
	pulumi.Input

	ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput
	ToGroupMembershipMemberKeyPtrOutputWithContext(context.Context) GroupMembershipMemberKeyPtrOutput
}

type groupMembershipMemberKeyPtrType GroupMembershipMemberKeyArgs

func GroupMembershipMemberKeyPtr(v *GroupMembershipMemberKeyArgs) GroupMembershipMemberKeyPtrInput {
	return (*groupMembershipMemberKeyPtrType)(v)
}

func (*groupMembershipMemberKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipMemberKey)(nil)).Elem()
}

func (i *groupMembershipMemberKeyPtrType) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return i.ToGroupMembershipMemberKeyPtrOutputWithContext(context.Background())
}

func (i *groupMembershipMemberKeyPtrType) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMemberKeyPtrOutput)
}

type GroupMembershipMemberKeyOutput struct{ *pulumi.OutputState }

func (GroupMembershipMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipMemberKey)(nil)).Elem()
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyOutput() GroupMembershipMemberKeyOutput {
	return o
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyOutputWithContext(ctx context.Context) GroupMembershipMemberKeyOutput {
	return o
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return o.ToGroupMembershipMemberKeyPtrOutputWithContext(context.Background())
}

func (o GroupMembershipMemberKeyOutput) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return o.ApplyT(func(v GroupMembershipMemberKey) *GroupMembershipMemberKey {
		return &v
	}).(GroupMembershipMemberKeyPtrOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipMemberKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembershipMemberKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupMembershipMemberKeyPtrOutput struct{ *pulumi.OutputState }

func (GroupMembershipMemberKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipMemberKey)(nil)).Elem()
}

func (o GroupMembershipMemberKeyPtrOutput) ToGroupMembershipMemberKeyPtrOutput() GroupMembershipMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipMemberKeyPtrOutput) ToGroupMembershipMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipMemberKeyPtrOutput) Elem() GroupMembershipMemberKeyOutput {
	return o.ApplyT(func(v *GroupMembershipMemberKey) GroupMembershipMemberKey { return *v }).(GroupMembershipMemberKeyOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipMemberKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipMemberKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipMemberKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipMemberKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GroupMembershipPreferredMemberKey struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// GroupMembershipPreferredMemberKeyInput is an input type that accepts GroupMembershipPreferredMemberKeyArgs and GroupMembershipPreferredMemberKeyOutput values.
// You can construct a concrete instance of `GroupMembershipPreferredMemberKeyInput` via:
//
//          GroupMembershipPreferredMemberKeyArgs{...}
type GroupMembershipPreferredMemberKeyInput interface {
	pulumi.Input

	ToGroupMembershipPreferredMemberKeyOutput() GroupMembershipPreferredMemberKeyOutput
	ToGroupMembershipPreferredMemberKeyOutputWithContext(context.Context) GroupMembershipPreferredMemberKeyOutput
}

type GroupMembershipPreferredMemberKeyArgs struct {
	// The ID of the entity.
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	// Must be unique within a namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GroupMembershipPreferredMemberKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyOutput() GroupMembershipPreferredMemberKeyOutput {
	return i.ToGroupMembershipPreferredMemberKeyOutputWithContext(context.Background())
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipPreferredMemberKeyOutput)
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return i.ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Background())
}

func (i GroupMembershipPreferredMemberKeyArgs) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipPreferredMemberKeyOutput).ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx)
}

// GroupMembershipPreferredMemberKeyPtrInput is an input type that accepts GroupMembershipPreferredMemberKeyArgs, GroupMembershipPreferredMemberKeyPtr and GroupMembershipPreferredMemberKeyPtrOutput values.
// You can construct a concrete instance of `GroupMembershipPreferredMemberKeyPtrInput` via:
//
//          GroupMembershipPreferredMemberKeyArgs{...}
//
//  or:
//
//          nil
type GroupMembershipPreferredMemberKeyPtrInput interface {
	pulumi.Input

	ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput
	ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Context) GroupMembershipPreferredMemberKeyPtrOutput
}

type groupMembershipPreferredMemberKeyPtrType GroupMembershipPreferredMemberKeyArgs

func GroupMembershipPreferredMemberKeyPtr(v *GroupMembershipPreferredMemberKeyArgs) GroupMembershipPreferredMemberKeyPtrInput {
	return (*groupMembershipPreferredMemberKeyPtrType)(v)
}

func (*groupMembershipPreferredMemberKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (i *groupMembershipPreferredMemberKeyPtrType) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return i.ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Background())
}

func (i *groupMembershipPreferredMemberKeyPtrType) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipPreferredMemberKeyPtrOutput)
}

type GroupMembershipPreferredMemberKeyOutput struct{ *pulumi.OutputState }

func (GroupMembershipPreferredMemberKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyOutput() GroupMembershipPreferredMemberKeyOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return o.ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(context.Background())
}

func (o GroupMembershipPreferredMemberKeyOutput) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return o.ApplyT(func(v GroupMembershipPreferredMemberKey) *GroupMembershipPreferredMemberKey {
		return &v
	}).(GroupMembershipPreferredMemberKeyPtrOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipPreferredMemberKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipPreferredMemberKey) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipPreferredMemberKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembershipPreferredMemberKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GroupMembershipPreferredMemberKeyPtrOutput struct{ *pulumi.OutputState }

func (GroupMembershipPreferredMemberKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembershipPreferredMemberKey)(nil)).Elem()
}

func (o GroupMembershipPreferredMemberKeyPtrOutput) ToGroupMembershipPreferredMemberKeyPtrOutput() GroupMembershipPreferredMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyPtrOutput) ToGroupMembershipPreferredMemberKeyPtrOutputWithContext(ctx context.Context) GroupMembershipPreferredMemberKeyPtrOutput {
	return o
}

func (o GroupMembershipPreferredMemberKeyPtrOutput) Elem() GroupMembershipPreferredMemberKeyOutput {
	return o.ApplyT(func(v *GroupMembershipPreferredMemberKey) GroupMembershipPreferredMemberKey { return *v }).(GroupMembershipPreferredMemberKeyOutput)
}

// The ID of the entity.
// For Google-managed entities, the id must be the email address of an existing
// group or user.
// For external-identity-mapped entities, the id must be a string conforming
// to the Identity Source's requirements.
// Must be unique within a namespace.
func (o GroupMembershipPreferredMemberKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipPreferredMemberKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists.
// If not specified, the EntityKey represents a Google-managed entity
// such as a Google user or a Google Group.
// If specified, the EntityKey represents an external-identity-mapped group.
// The namespace must correspond to an identity source created in Admin Console
// and must be in the form of `identitysources/{identity_source_id}`.
func (o GroupMembershipPreferredMemberKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMembershipPreferredMemberKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GroupMembershipRole struct {
	// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
	// Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
	Name string `pulumi:"name"`
}

// GroupMembershipRoleInput is an input type that accepts GroupMembershipRoleArgs and GroupMembershipRoleOutput values.
// You can construct a concrete instance of `GroupMembershipRoleInput` via:
//
//          GroupMembershipRoleArgs{...}
type GroupMembershipRoleInput interface {
	pulumi.Input

	ToGroupMembershipRoleOutput() GroupMembershipRoleOutput
	ToGroupMembershipRoleOutputWithContext(context.Context) GroupMembershipRoleOutput
}

type GroupMembershipRoleArgs struct {
	// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
	// Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GroupMembershipRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipRole)(nil)).Elem()
}

func (i GroupMembershipRoleArgs) ToGroupMembershipRoleOutput() GroupMembershipRoleOutput {
	return i.ToGroupMembershipRoleOutputWithContext(context.Background())
}

func (i GroupMembershipRoleArgs) ToGroupMembershipRoleOutputWithContext(ctx context.Context) GroupMembershipRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipRoleOutput)
}

// GroupMembershipRoleArrayInput is an input type that accepts GroupMembershipRoleArray and GroupMembershipRoleArrayOutput values.
// You can construct a concrete instance of `GroupMembershipRoleArrayInput` via:
//
//          GroupMembershipRoleArray{ GroupMembershipRoleArgs{...} }
type GroupMembershipRoleArrayInput interface {
	pulumi.Input

	ToGroupMembershipRoleArrayOutput() GroupMembershipRoleArrayOutput
	ToGroupMembershipRoleArrayOutputWithContext(context.Context) GroupMembershipRoleArrayOutput
}

type GroupMembershipRoleArray []GroupMembershipRoleInput

func (GroupMembershipRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembershipRole)(nil)).Elem()
}

func (i GroupMembershipRoleArray) ToGroupMembershipRoleArrayOutput() GroupMembershipRoleArrayOutput {
	return i.ToGroupMembershipRoleArrayOutputWithContext(context.Background())
}

func (i GroupMembershipRoleArray) ToGroupMembershipRoleArrayOutputWithContext(ctx context.Context) GroupMembershipRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipRoleArrayOutput)
}

type GroupMembershipRoleOutput struct{ *pulumi.OutputState }

func (GroupMembershipRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipRole)(nil)).Elem()
}

func (o GroupMembershipRoleOutput) ToGroupMembershipRoleOutput() GroupMembershipRoleOutput {
	return o
}

func (o GroupMembershipRoleOutput) ToGroupMembershipRoleOutputWithContext(ctx context.Context) GroupMembershipRoleOutput {
	return o
}

// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
// Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
func (o GroupMembershipRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembershipRole) string { return v.Name }).(pulumi.StringOutput)
}

type GroupMembershipRoleArrayOutput struct{ *pulumi.OutputState }

func (GroupMembershipRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembershipRole)(nil)).Elem()
}

func (o GroupMembershipRoleArrayOutput) ToGroupMembershipRoleArrayOutput() GroupMembershipRoleArrayOutput {
	return o
}

func (o GroupMembershipRoleArrayOutput) ToGroupMembershipRoleArrayOutputWithContext(ctx context.Context) GroupMembershipRoleArrayOutput {
	return o
}

func (o GroupMembershipRoleArrayOutput) Index(i pulumi.IntInput) GroupMembershipRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupMembershipRole {
		return vs[0].([]GroupMembershipRole)[vs[1].(int)]
	}).(GroupMembershipRoleOutput)
}

type GetGroupMembershipsMembership struct {
	CreateTime string `pulumi:"createTime"`
	// The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
	Group      string                                   `pulumi:"group"`
	MemberKeys []GetGroupMembershipsMembershipMemberKey `pulumi:"memberKeys"`
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name                string                                            `pulumi:"name"`
	PreferredMemberKeys []GetGroupMembershipsMembershipPreferredMemberKey `pulumi:"preferredMemberKeys"`
	// The MembershipRoles that apply to the Membership. Structure is documented below.
	Roles      []GetGroupMembershipsMembershipRole `pulumi:"roles"`
	Type       string                              `pulumi:"type"`
	UpdateTime string                              `pulumi:"updateTime"`
}

type GetGroupMembershipsMembershipMemberKey struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace string `pulumi:"namespace"`
}

type GetGroupMembershipsMembershipPreferredMemberKey struct {
	// The ID of the entity. For Google-managed entities, the id is the email address of an existing
	// group or user. For external-identity-mapped entities, the id is a string conforming
	// to the Identity Source's requirements.
	Id string `pulumi:"id"`
	// The namespace in which the entity exists.
	// If not populated, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	// If populated, the EntityKey represents an external-identity-mapped group.
	Namespace string `pulumi:"namespace"`
}

type GetGroupMembershipsMembershipRole struct {
	// The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
	Name string `pulumi:"name"`
}

type GetGroupsGroup struct {
	CreateTime  string                   `pulumi:"createTime"`
	Description string                   `pulumi:"description"`
	DisplayName string                   `pulumi:"displayName"`
	GroupKeys   []GetGroupsGroupGroupKey `pulumi:"groupKeys"`
	Labels      map[string]string        `pulumi:"labels"`
	Name        string                   `pulumi:"name"`
	// The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
	Parent     string `pulumi:"parent"`
	UpdateTime string `pulumi:"updateTime"`
}

type GetGroupsGroupGroupKey struct {
	Id        string `pulumi:"id"`
	Namespace string `pulumi:"namespace"`
}

func init() {
	pulumi.RegisterOutputType(GroupGroupKeyOutput{})
	pulumi.RegisterOutputType(GroupGroupKeyPtrOutput{})
	pulumi.RegisterOutputType(GroupMembershipMemberKeyOutput{})
	pulumi.RegisterOutputType(GroupMembershipMemberKeyPtrOutput{})
	pulumi.RegisterOutputType(GroupMembershipPreferredMemberKeyOutput{})
	pulumi.RegisterOutputType(GroupMembershipPreferredMemberKeyPtrOutput{})
	pulumi.RegisterOutputType(GroupMembershipRoleOutput{})
	pulumi.RegisterOutputType(GroupMembershipRoleArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipMemberKeyOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipMemberKeyArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipPreferredMemberKeyOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipPreferredMemberKeyArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipRoleOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipsMembershipRoleArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupGroupKeyOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupGroupKeyArrayOutput{})
}
