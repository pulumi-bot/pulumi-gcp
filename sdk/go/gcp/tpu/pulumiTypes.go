// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package tpu

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type NodeNetworkEndpoint struct {
	IpAddress string `pulumi:"ipAddress"`
	Port      int    `pulumi:"port"`
}

type NodeNetworkEndpointInput interface {
	pulumi.Input

	ToNodeNetworkEndpointOutput() NodeNetworkEndpointOutput
	ToNodeNetworkEndpointOutputWithContext(context.Context) NodeNetworkEndpointOutput
}

type NodeNetworkEndpointArgs struct {
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	Port      pulumi.IntInput    `pulumi:"port"`
}

func (NodeNetworkEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeNetworkEndpoint)(nil)).Elem()
}

func (i NodeNetworkEndpointArgs) ToNodeNetworkEndpointOutput() NodeNetworkEndpointOutput {
	return i.ToNodeNetworkEndpointOutputWithContext(context.Background())
}

func (i NodeNetworkEndpointArgs) ToNodeNetworkEndpointOutputWithContext(ctx context.Context) NodeNetworkEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeNetworkEndpointOutput)
}

type NodeNetworkEndpointArrayInput interface {
	pulumi.Input

	ToNodeNetworkEndpointArrayOutput() NodeNetworkEndpointArrayOutput
	ToNodeNetworkEndpointArrayOutputWithContext(context.Context) NodeNetworkEndpointArrayOutput
}

type NodeNetworkEndpointArray []NodeNetworkEndpointInput

func (NodeNetworkEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeNetworkEndpoint)(nil)).Elem()
}

func (i NodeNetworkEndpointArray) ToNodeNetworkEndpointArrayOutput() NodeNetworkEndpointArrayOutput {
	return i.ToNodeNetworkEndpointArrayOutputWithContext(context.Background())
}

func (i NodeNetworkEndpointArray) ToNodeNetworkEndpointArrayOutputWithContext(ctx context.Context) NodeNetworkEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeNetworkEndpointArrayOutput)
}

type NodeNetworkEndpointOutput struct{ *pulumi.OutputState }

func (NodeNetworkEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeNetworkEndpoint)(nil)).Elem()
}

func (o NodeNetworkEndpointOutput) ToNodeNetworkEndpointOutput() NodeNetworkEndpointOutput {
	return o
}

func (o NodeNetworkEndpointOutput) ToNodeNetworkEndpointOutputWithContext(ctx context.Context) NodeNetworkEndpointOutput {
	return o
}

func (o NodeNetworkEndpointOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NodeNetworkEndpoint) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o NodeNetworkEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v NodeNetworkEndpoint) int { return v.Port }).(pulumi.IntOutput)
}

type NodeNetworkEndpointArrayOutput struct{ *pulumi.OutputState }

func (NodeNetworkEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeNetworkEndpoint)(nil)).Elem()
}

func (o NodeNetworkEndpointArrayOutput) ToNodeNetworkEndpointArrayOutput() NodeNetworkEndpointArrayOutput {
	return o
}

func (o NodeNetworkEndpointArrayOutput) ToNodeNetworkEndpointArrayOutputWithContext(ctx context.Context) NodeNetworkEndpointArrayOutput {
	return o
}

func (o NodeNetworkEndpointArrayOutput) Index(i pulumi.IntInput) NodeNetworkEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeNetworkEndpoint {
		return vs[0].([]NodeNetworkEndpoint)[vs[1].(int)]
	}).(NodeNetworkEndpointOutput)
}

type NodeNetworkEndpointState struct {
	IpAddress *string `pulumi:"ipAddress"`
	Port      *int    `pulumi:"port"`
}

type NodeNetworkEndpointStateInput interface {
	pulumi.Input

	ToNodeNetworkEndpointStateOutput() NodeNetworkEndpointStateOutput
	ToNodeNetworkEndpointStateOutputWithContext(context.Context) NodeNetworkEndpointStateOutput
}

type NodeNetworkEndpointStateArgs struct {
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	Port      pulumi.IntPtrInput    `pulumi:"port"`
}

func (NodeNetworkEndpointStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeNetworkEndpointState)(nil)).Elem()
}

func (i NodeNetworkEndpointStateArgs) ToNodeNetworkEndpointStateOutput() NodeNetworkEndpointStateOutput {
	return i.ToNodeNetworkEndpointStateOutputWithContext(context.Background())
}

func (i NodeNetworkEndpointStateArgs) ToNodeNetworkEndpointStateOutputWithContext(ctx context.Context) NodeNetworkEndpointStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeNetworkEndpointStateOutput)
}

type NodeNetworkEndpointStateArrayInput interface {
	pulumi.Input

	ToNodeNetworkEndpointStateArrayOutput() NodeNetworkEndpointStateArrayOutput
	ToNodeNetworkEndpointStateArrayOutputWithContext(context.Context) NodeNetworkEndpointStateArrayOutput
}

type NodeNetworkEndpointStateArray []NodeNetworkEndpointStateInput

func (NodeNetworkEndpointStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeNetworkEndpointState)(nil)).Elem()
}

func (i NodeNetworkEndpointStateArray) ToNodeNetworkEndpointStateArrayOutput() NodeNetworkEndpointStateArrayOutput {
	return i.ToNodeNetworkEndpointStateArrayOutputWithContext(context.Background())
}

func (i NodeNetworkEndpointStateArray) ToNodeNetworkEndpointStateArrayOutputWithContext(ctx context.Context) NodeNetworkEndpointStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeNetworkEndpointStateArrayOutput)
}

type NodeNetworkEndpointStateOutput struct{ *pulumi.OutputState }

func (NodeNetworkEndpointStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeNetworkEndpointState)(nil)).Elem()
}

func (o NodeNetworkEndpointStateOutput) ToNodeNetworkEndpointStateOutput() NodeNetworkEndpointStateOutput {
	return o
}

func (o NodeNetworkEndpointStateOutput) ToNodeNetworkEndpointStateOutputWithContext(ctx context.Context) NodeNetworkEndpointStateOutput {
	return o
}

func (o NodeNetworkEndpointStateOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeNetworkEndpointState) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

func (o NodeNetworkEndpointStateOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeNetworkEndpointState) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type NodeNetworkEndpointStateArrayOutput struct{ *pulumi.OutputState }

func (NodeNetworkEndpointStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeNetworkEndpointState)(nil)).Elem()
}

func (o NodeNetworkEndpointStateArrayOutput) ToNodeNetworkEndpointStateArrayOutput() NodeNetworkEndpointStateArrayOutput {
	return o
}

func (o NodeNetworkEndpointStateArrayOutput) ToNodeNetworkEndpointStateArrayOutputWithContext(ctx context.Context) NodeNetworkEndpointStateArrayOutput {
	return o
}

func (o NodeNetworkEndpointStateArrayOutput) Index(i pulumi.IntInput) NodeNetworkEndpointStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeNetworkEndpointState {
		return vs[0].([]NodeNetworkEndpointState)[vs[1].(int)]
	}).(NodeNetworkEndpointStateOutput)
}

type NodeSchedulingConfig struct {
	Preemptible bool `pulumi:"preemptible"`
}

type NodeSchedulingConfigInput interface {
	pulumi.Input

	ToNodeSchedulingConfigOutput() NodeSchedulingConfigOutput
	ToNodeSchedulingConfigOutputWithContext(context.Context) NodeSchedulingConfigOutput
}

type NodeSchedulingConfigArgs struct {
	Preemptible pulumi.BoolInput `pulumi:"preemptible"`
}

func (NodeSchedulingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSchedulingConfig)(nil)).Elem()
}

func (i NodeSchedulingConfigArgs) ToNodeSchedulingConfigOutput() NodeSchedulingConfigOutput {
	return i.ToNodeSchedulingConfigOutputWithContext(context.Background())
}

func (i NodeSchedulingConfigArgs) ToNodeSchedulingConfigOutputWithContext(ctx context.Context) NodeSchedulingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSchedulingConfigOutput)
}

func (i NodeSchedulingConfigArgs) ToNodeSchedulingConfigPtrOutput() NodeSchedulingConfigPtrOutput {
	return i.ToNodeSchedulingConfigPtrOutputWithContext(context.Background())
}

func (i NodeSchedulingConfigArgs) ToNodeSchedulingConfigPtrOutputWithContext(ctx context.Context) NodeSchedulingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSchedulingConfigOutput).ToNodeSchedulingConfigPtrOutputWithContext(ctx)
}

type NodeSchedulingConfigPtrInput interface {
	pulumi.Input

	ToNodeSchedulingConfigPtrOutput() NodeSchedulingConfigPtrOutput
	ToNodeSchedulingConfigPtrOutputWithContext(context.Context) NodeSchedulingConfigPtrOutput
}

type nodeSchedulingConfigPtrType NodeSchedulingConfigArgs

func NodeSchedulingConfigPtr(v *NodeSchedulingConfigArgs) NodeSchedulingConfigPtrInput {
	return (*nodeSchedulingConfigPtrType)(v)
}

func (*nodeSchedulingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSchedulingConfig)(nil)).Elem()
}

func (i *nodeSchedulingConfigPtrType) ToNodeSchedulingConfigPtrOutput() NodeSchedulingConfigPtrOutput {
	return i.ToNodeSchedulingConfigPtrOutputWithContext(context.Background())
}

func (i *nodeSchedulingConfigPtrType) ToNodeSchedulingConfigPtrOutputWithContext(ctx context.Context) NodeSchedulingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSchedulingConfigPtrOutput)
}

type NodeSchedulingConfigOutput struct{ *pulumi.OutputState }

func (NodeSchedulingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSchedulingConfig)(nil)).Elem()
}

func (o NodeSchedulingConfigOutput) ToNodeSchedulingConfigOutput() NodeSchedulingConfigOutput {
	return o
}

func (o NodeSchedulingConfigOutput) ToNodeSchedulingConfigOutputWithContext(ctx context.Context) NodeSchedulingConfigOutput {
	return o
}

func (o NodeSchedulingConfigOutput) ToNodeSchedulingConfigPtrOutput() NodeSchedulingConfigPtrOutput {
	return o.ToNodeSchedulingConfigPtrOutputWithContext(context.Background())
}

func (o NodeSchedulingConfigOutput) ToNodeSchedulingConfigPtrOutputWithContext(ctx context.Context) NodeSchedulingConfigPtrOutput {
	return o.ApplyT(func(v NodeSchedulingConfig) *NodeSchedulingConfig {
		return &v
	}).(NodeSchedulingConfigPtrOutput)
}
func (o NodeSchedulingConfigOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeSchedulingConfig) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

type NodeSchedulingConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeSchedulingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSchedulingConfig)(nil)).Elem()
}

func (o NodeSchedulingConfigPtrOutput) ToNodeSchedulingConfigPtrOutput() NodeSchedulingConfigPtrOutput {
	return o
}

func (o NodeSchedulingConfigPtrOutput) ToNodeSchedulingConfigPtrOutputWithContext(ctx context.Context) NodeSchedulingConfigPtrOutput {
	return o
}

func (o NodeSchedulingConfigPtrOutput) Elem() NodeSchedulingConfigOutput {
	return o.ApplyT(func(v *NodeSchedulingConfig) NodeSchedulingConfig { return *v }).(NodeSchedulingConfigOutput)
}

func (o NodeSchedulingConfigPtrOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeSchedulingConfig) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

type NodeSchedulingConfigArgs struct {
	Preemptible bool `pulumi:"preemptible"`
}

type NodeSchedulingConfigArgsInput interface {
	pulumi.Input

	ToNodeSchedulingConfigArgsOutput() NodeSchedulingConfigArgsOutput
	ToNodeSchedulingConfigArgsOutputWithContext(context.Context) NodeSchedulingConfigArgsOutput
}

type NodeSchedulingConfigArgsArgs struct {
	Preemptible pulumi.BoolInput `pulumi:"preemptible"`
}

func (NodeSchedulingConfigArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSchedulingConfigArgs)(nil)).Elem()
}

func (i NodeSchedulingConfigArgsArgs) ToNodeSchedulingConfigArgsOutput() NodeSchedulingConfigArgsOutput {
	return i.ToNodeSchedulingConfigArgsOutputWithContext(context.Background())
}

func (i NodeSchedulingConfigArgsArgs) ToNodeSchedulingConfigArgsOutputWithContext(ctx context.Context) NodeSchedulingConfigArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSchedulingConfigArgsOutput)
}

func (i NodeSchedulingConfigArgsArgs) ToNodeSchedulingConfigArgsPtrOutput() NodeSchedulingConfigArgsPtrOutput {
	return i.ToNodeSchedulingConfigArgsPtrOutputWithContext(context.Background())
}

func (i NodeSchedulingConfigArgsArgs) ToNodeSchedulingConfigArgsPtrOutputWithContext(ctx context.Context) NodeSchedulingConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSchedulingConfigArgsOutput).ToNodeSchedulingConfigArgsPtrOutputWithContext(ctx)
}

type NodeSchedulingConfigArgsPtrInput interface {
	pulumi.Input

	ToNodeSchedulingConfigArgsPtrOutput() NodeSchedulingConfigArgsPtrOutput
	ToNodeSchedulingConfigArgsPtrOutputWithContext(context.Context) NodeSchedulingConfigArgsPtrOutput
}

type nodeSchedulingConfigArgsPtrType NodeSchedulingConfigArgsArgs

func NodeSchedulingConfigArgsPtr(v *NodeSchedulingConfigArgsArgs) NodeSchedulingConfigArgsPtrInput {
	return (*nodeSchedulingConfigArgsPtrType)(v)
}

func (*nodeSchedulingConfigArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSchedulingConfigArgs)(nil)).Elem()
}

func (i *nodeSchedulingConfigArgsPtrType) ToNodeSchedulingConfigArgsPtrOutput() NodeSchedulingConfigArgsPtrOutput {
	return i.ToNodeSchedulingConfigArgsPtrOutputWithContext(context.Background())
}

func (i *nodeSchedulingConfigArgsPtrType) ToNodeSchedulingConfigArgsPtrOutputWithContext(ctx context.Context) NodeSchedulingConfigArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSchedulingConfigArgsPtrOutput)
}

type NodeSchedulingConfigArgsOutput struct{ *pulumi.OutputState }

func (NodeSchedulingConfigArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSchedulingConfigArgs)(nil)).Elem()
}

func (o NodeSchedulingConfigArgsOutput) ToNodeSchedulingConfigArgsOutput() NodeSchedulingConfigArgsOutput {
	return o
}

func (o NodeSchedulingConfigArgsOutput) ToNodeSchedulingConfigArgsOutputWithContext(ctx context.Context) NodeSchedulingConfigArgsOutput {
	return o
}

func (o NodeSchedulingConfigArgsOutput) ToNodeSchedulingConfigArgsPtrOutput() NodeSchedulingConfigArgsPtrOutput {
	return o.ToNodeSchedulingConfigArgsPtrOutputWithContext(context.Background())
}

func (o NodeSchedulingConfigArgsOutput) ToNodeSchedulingConfigArgsPtrOutputWithContext(ctx context.Context) NodeSchedulingConfigArgsPtrOutput {
	return o.ApplyT(func(v NodeSchedulingConfigArgs) *NodeSchedulingConfigArgs {
		return &v
	}).(NodeSchedulingConfigArgsPtrOutput)
}
func (o NodeSchedulingConfigArgsOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeSchedulingConfigArgs) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

type NodeSchedulingConfigArgsPtrOutput struct{ *pulumi.OutputState }

func (NodeSchedulingConfigArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeSchedulingConfigArgs)(nil)).Elem()
}

func (o NodeSchedulingConfigArgsPtrOutput) ToNodeSchedulingConfigArgsPtrOutput() NodeSchedulingConfigArgsPtrOutput {
	return o
}

func (o NodeSchedulingConfigArgsPtrOutput) ToNodeSchedulingConfigArgsPtrOutputWithContext(ctx context.Context) NodeSchedulingConfigArgsPtrOutput {
	return o
}

func (o NodeSchedulingConfigArgsPtrOutput) Elem() NodeSchedulingConfigArgsOutput {
	return o.ApplyT(func(v *NodeSchedulingConfigArgs) NodeSchedulingConfigArgs { return *v }).(NodeSchedulingConfigArgsOutput)
}

func (o NodeSchedulingConfigArgsPtrOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeSchedulingConfigArgs) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

type NodeSchedulingConfigState struct {
	Preemptible bool `pulumi:"preemptible"`
}

type NodeSchedulingConfigStateInput interface {
	pulumi.Input

	ToNodeSchedulingConfigStateOutput() NodeSchedulingConfigStateOutput
	ToNodeSchedulingConfigStateOutputWithContext(context.Context) NodeSchedulingConfigStateOutput
}

type NodeSchedulingConfigStateArgs struct {
	Preemptible pulumi.BoolInput `pulumi:"preemptible"`
}

func (NodeSchedulingConfigStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSchedulingConfigState)(nil)).Elem()
}

func (i NodeSchedulingConfigStateArgs) ToNodeSchedulingConfigStateOutput() NodeSchedulingConfigStateOutput {
	return i.ToNodeSchedulingConfigStateOutputWithContext(context.Background())
}

func (i NodeSchedulingConfigStateArgs) ToNodeSchedulingConfigStateOutputWithContext(ctx context.Context) NodeSchedulingConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSchedulingConfigStateOutput)
}

type NodeSchedulingConfigStateOutput struct{ *pulumi.OutputState }

func (NodeSchedulingConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSchedulingConfigState)(nil)).Elem()
}

func (o NodeSchedulingConfigStateOutput) ToNodeSchedulingConfigStateOutput() NodeSchedulingConfigStateOutput {
	return o
}

func (o NodeSchedulingConfigStateOutput) ToNodeSchedulingConfigStateOutputWithContext(ctx context.Context) NodeSchedulingConfigStateOutput {
	return o
}

func (o NodeSchedulingConfigStateOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeSchedulingConfigState) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(NodeNetworkEndpointOutput{})
	pulumi.RegisterOutputType(NodeNetworkEndpointArrayOutput{})
	pulumi.RegisterOutputType(NodeNetworkEndpointStateOutput{})
	pulumi.RegisterOutputType(NodeNetworkEndpointStateArrayOutput{})
	pulumi.RegisterOutputType(NodeSchedulingConfigOutput{})
	pulumi.RegisterOutputType(NodeSchedulingConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeSchedulingConfigArgsOutput{})
	pulumi.RegisterOutputType(NodeSchedulingConfigArgsPtrOutput{})
	pulumi.RegisterOutputType(NodeSchedulingConfigStateOutput{})
}
