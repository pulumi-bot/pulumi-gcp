// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package firestore

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Cloud Firestore indexes enable simple and complex queries against documents in a database.
//  This resource manages composite indexes and not single
// field indexes.
// 
// 
// To get more information about Index, see:
// 
// * [API documentation](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.collectionGroups.indexes)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/firestore/docs/query-data/indexing)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/firestore_index.html.markdown.
type Index struct {
	s *pulumi.ResourceState
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOpt) (*Index, error) {
	if args == nil || args.Collection == nil {
		return nil, errors.New("missing required argument 'Collection'")
	}
	if args == nil || args.Fields == nil {
		return nil, errors.New("missing required argument 'Fields'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["collection"] = nil
		inputs["database"] = nil
		inputs["fields"] = nil
		inputs["project"] = nil
		inputs["queryScope"] = nil
	} else {
		inputs["collection"] = args.Collection
		inputs["database"] = args.Database
		inputs["fields"] = args.Fields
		inputs["project"] = args.Project
		inputs["queryScope"] = args.QueryScope
	}
	inputs["name"] = nil
	s, err := ctx.RegisterResource("gcp:firestore/index:Index", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Index{s: s}, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IndexState, opts ...pulumi.ResourceOpt) (*Index, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["collection"] = state.Collection
		inputs["database"] = state.Database
		inputs["fields"] = state.Fields
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["queryScope"] = state.QueryScope
	}
	s, err := ctx.ReadResource("gcp:firestore/index:Index", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Index{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Index) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Index) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Index) Collection() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["collection"])
}

func (r *Index) Database() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["database"])
}

func (r *Index) Fields() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["fields"])
}

func (r *Index) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Index) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *Index) QueryScope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["queryScope"])
}

// Input properties used for looking up and filtering Index resources.
type IndexState struct {
	Collection interface{}
	Database interface{}
	Fields interface{}
	Name interface{}
	Project interface{}
	QueryScope interface{}
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	Collection interface{}
	Database interface{}
	Fields interface{}
	Project interface{}
	QueryScope interface{}
}
