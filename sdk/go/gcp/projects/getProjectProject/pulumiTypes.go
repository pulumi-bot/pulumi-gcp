// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package getProjectProject

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type GetProjectProject struct {
	// The project id of the project.
	ProjectId string `pulumi:"projectId"`
}

type GetProjectProjectInput interface {
	pulumi.Input

	ToGetProjectProjectOutput() GetProjectProjectOutput
	ToGetProjectProjectOutputWithContext(context.Context) GetProjectProjectOutput
}

type GetProjectProjectArgs struct {
	// The project id of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (GetProjectProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProject)(nil)).Elem()
}

func (i GetProjectProjectArgs) ToGetProjectProjectOutput() GetProjectProjectOutput {
	return i.ToGetProjectProjectOutputWithContext(context.Background())
}

func (i GetProjectProjectArgs) ToGetProjectProjectOutputWithContext(ctx context.Context) GetProjectProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProjectOutput)
}

type GetProjectProjectArrayInput interface {
	pulumi.Input

	ToGetProjectProjectArrayOutput() GetProjectProjectArrayOutput
	ToGetProjectProjectArrayOutputWithContext(context.Context) GetProjectProjectArrayOutput
}

type GetProjectProjectArray []GetProjectProjectInput

func (GetProjectProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProject)(nil)).Elem()
}

func (i GetProjectProjectArray) ToGetProjectProjectArrayOutput() GetProjectProjectArrayOutput {
	return i.ToGetProjectProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectProjectArray) ToGetProjectProjectArrayOutputWithContext(ctx context.Context) GetProjectProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProjectArrayOutput)
}

type GetProjectProjectOutput struct { *pulumi.OutputState }

func (GetProjectProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProject)(nil)).Elem()
}

func (o GetProjectProjectOutput) ToGetProjectProjectOutput() GetProjectProjectOutput {
	return o
}

func (o GetProjectProjectOutput) ToGetProjectProjectOutputWithContext(ctx context.Context) GetProjectProjectOutput {
	return o
}

// The project id of the project.
func (o GetProjectProjectOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func (v GetProjectProject) string { return v.ProjectId }).(pulumi.StringOutput)
}

type GetProjectProjectArrayOutput struct { *pulumi.OutputState}

func (GetProjectProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProject)(nil)).Elem()
}

func (o GetProjectProjectArrayOutput) ToGetProjectProjectArrayOutput() GetProjectProjectArrayOutput {
	return o
}

func (o GetProjectProjectArrayOutput) ToGetProjectProjectArrayOutputWithContext(ctx context.Context) GetProjectProjectArrayOutput {
	return o
}

func (o GetProjectProjectArrayOutput) Index(i pulumi.IntInput) GetProjectProjectOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) GetProjectProject {
		return vs[0].([]GetProjectProject)[vs[1].(int)]
	}).(GetProjectProjectOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectProjectOutput{})
	pulumi.RegisterOutputType(GetProjectProjectArrayOutput{})
}
